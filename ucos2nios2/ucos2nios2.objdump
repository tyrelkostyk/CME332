
ucos2nios2.elf:     file format elf32-littlenios2
ucos2nios2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001e020 memsz 0x0001e020 flags r-x
    LOAD off    0x0001f040 vaddr 0x0001e040 paddr 0x0001fec0 align 2**12
         filesz 0x00001e80 memsz 0x00001e80 flags rw-
    LOAD off    0x00021d40 vaddr 0x00021d40 paddr 0x00021d40 align 2**12
         filesz 0x00000000 memsz 0x0000b418 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001d4cc  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000092c  0001d714  0001d714  0001e714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e80  0001e040  0001fec0  0001f040  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000b418  00021d40  00021d40  00021d40  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0002d158  0002d158  00020ec0  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00020ec0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00020ec0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001108  00000000  00000000  00020ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00032841  00000000  00000000  00021ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b9be  00000000  00000000  00054831  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001004b  00000000  00000000  000601ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003b28  00000000  00000000  0007023c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005655  00000000  00000000  00073d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c53f  00000000  00000000  000793b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000958f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a88  00000000  00000000  00095918  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0009cc45  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0009cc4b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0009cc50  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0009cc51  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0009cc52  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0009cc56  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0009cc5a  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0009cc5e  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0009cc67  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0009cc70  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000f  00000000  00000000  0009cc79  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003e  00000000  00000000  0009cc88  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     001d201d  00000000  00000000  0009ccc6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0001d714 l    d  .rodata	00000000 .rodata
0001e040 l    d  .rwdata	00000000 .rwdata
00021d40 l    d  .bss	00000000 .bss
0002d158 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ucos2nios2_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001dade l     O .rodata	00000010 zeroes.4389
0001daee l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
0001dafe l     O .rodata	00000010 zeroes.4404
00004fac l     F .text	000000bc __sbprintf
0001db0e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000051bc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006cec l     F .text	00000008 __fp_unlock
00006d00 l     F .text	0000019c __sinit.part.1
00006e9c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001e040 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0001e484 l     O .rwdata	00000020 lc_ctype_charset
0001e464 l     O .rwdata	00000020 lc_message_charset
0001e4a4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001db40 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001dc74 l     O .rodata	00000010 blanks.4332
0001dc64 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
0000b6a4 l     F .text	000000fc __sprint_r.part.0
0001dc94 l     O .rodata	00000010 blanks.4348
0001dc84 l     O .rodata	00000010 zeroes.4349
0000cc30 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
000108ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000109f8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00010a24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00010b10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00010bf0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00010cdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00010ea8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001fe34 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000110f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001fe38 l     O .rwdata	00000004 lockid
00021d9c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001fe3c l     O .rwdata	00000004 lockid
00021da4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00012b24 l     F .text	00000048 OS_InitMisc
00012b6c l     F .text	0000006c OS_InitRdyList
00012cd8 l     F .text	000000e4 OS_InitTCBList
00012a44 l     F .text	000000e0 OS_InitEventList
00012bd8 l     F .text	00000080 OS_InitTaskIdle
00012c58 l     F .text	00000080 OS_InitTaskStat
00012f48 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00014c68 l     F .text	000000f4 OS_FlagTaskRdy
00014a28 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000197e0 l     F .text	00000034 alt_dev_reg
0001ea8c l     O .rwdata	0000106c JTAG_UART
0001faf8 l     O .rwdata	00000030 AV_Config
0001fb28 l     O .rwdata	00000030 Audio_Subsystem_Audio
0001fb58 l     O .rwdata	0000002c Char_LCD_16x2
0001fb84 l     O .rwdata	0000002c IrDA
0001fbb0 l     O .rwdata	00000038 PS2_Port
0001fbe8 l     O .rwdata	00000038 PS2_Port_Dual
0001fc20 l     O .rwdata	0000002c Serial_Port
0001fc4c l     O .rwdata	00000034 USB
0001fc80 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
0001fcdc l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
0001fd38 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
0001fd94 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
0001fdd8 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001a458 l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001a700 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001aedc l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001c3d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001c63c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001c8fc l     F .text	0000003c alt_get_errno
0001c938 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00021e08 g     O .bss	00000004 alt_instruction_exception_handler
000098dc g     F .text	00000074 _mprec_log10
0001fe8a g     O .rwdata	00000002 OSTaskNameSize
000099c8 g     F .text	0000008c __any_on
0000d1cc g     F .text	00000054 _isatty_r
0001db4c g     O .rodata	00000028 __mprec_tinytens
00010dec g     F .text	000000bc alt_main
00000990 g     F .text	000000c0 _puts_r
0002d058 g     O .bss	00000100 alt_irq
0001ba98 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
0000d220 g     F .text	00000060 _lseek_r
00015f50 g     F .text	000000cc OS_MemInit
0001fec0 g       *ABS*	00000000 __flash_rwdata_start
00019780 g     F .text	00000060 OSTimeSet
0001b040 g     F .text	00000040 alt_up_character_lcd_send_cmd
0000f418 g     F .text	00000088 .hidden __eqdf2
00011798 g     F .text	00000610 OSEventPendMulti
0002d158 g       *ABS*	00000000 __alt_heap_start
0001cf44 g     F .text	00000024 OSTaskCreateHook
00000954 g     F .text	0000003c printf
0001fe62 g     O .rwdata	00000002 OSMboxEn
00000284 g     F .text	00000038 LCD_clear
00011e00 g     F .text	0000004c OSIntEnter
0000d438 g     F .text	0000009c _wcrtomb_r
0000a158 g     F .text	0000005c __sseek
0000703c g     F .text	00000010 __sinit
0000d2e0 g     F .text	00000140 __swbuf_r
0001b8b0 g     F .text	00000034 read_CE_bit
0001fe72 g     O .rwdata	00000002 OSQEn
00007b04 g     F .text	0000007c _setlocale_r
00006ea4 g     F .text	00000068 __sfmoreglue
0001146c g     F .text	000000cc __malloc_unlock
0001cfac g     F .text	00000020 OSTaskStatHook
0001bc38 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0001c12c g     F .text	00000090 alt_up_rs232_read_fd
00021dac g     O .bss	00000001 OSLockNesting
000002bc g     F .text	0000006c LCD_cursor
0001feb0 g     O .rwdata	00000002 OSDataSize
00021dad g     O .bss	00000001 OSRunning
000087d4 g     F .text	0000015c memmove
0001cfec g     F .text	00000020 OSInitHookBegin
0001fea8 g     O .rwdata	00000002 OSTmrSize
00007024 g     F .text	00000018 _cleanup
00008a58 g     F .text	000000a8 _Balloc
00021e34 g     O .bss	00002000 TaskScanKey_stk
00021db0 g     O .bss	00000004 OSIdleCtr
0000f4a0 g     F .text	000000dc .hidden __gtdf2
0001ccf4 g     F .text	00000024 altera_nios2_gen2_irq_init
0001cdc4 g       .text	00000000 OSStartTsk
0001afcc g     F .text	00000074 get_DDRAM_addr
00013288 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0001feae g     O .rwdata	00000002 OSTmrWheelTblSize
00021d40 g     O .bss	00000004 RUN_flag
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001fe4e g     O .rwdata	00000002 OSEventSize
00021db4 g     O .bss	00000001 OSPrioHighRdy
0000d170 g     F .text	0000005c _fstat_r
0001cf68 g     F .text	00000024 OSTaskDelHook
00021d88 g     O .bss	00000004 errno
0000a0d4 g     F .text	00000008 __seofread
0001cda4 g       .text	00000000 OSStartHighRdy
0001821c g     F .text	000001e4 OSTaskCreateExt
0000a468 g     F .text	0000123c ___svfiprintf_internal_r
00014570 g     F .text	00000060 OSFlagPendGetFlagsRdy
0001fe8e g     O .rwdata	00000002 OSTaskStatStkSize
000136ec g     F .text	00000308 OSFlagAccept
00016588 g     F .text	000000b8 OSQFlush
0001601c g     F .text	00000140 OSQAccept
00021d94 g     O .bss	00000004 alt_argv
00027e04 g       *ABS*	00000000 _gp
00018070 g     F .text	000001ac OSTaskCreate
00017b80 g     F .text	000004f0 OSTaskChangePrio
00021da8 g     O .bss	00000004 alt_heapsem
0001355c g     F .text	00000190 OSDebugInit
00018400 g     F .text	00000344 OSTaskDel
0001e90c g     O .rwdata	00000180 alt_fd_list
00029e34 g     O .bss	00000370 OSFlagTbl
00012824 g     F .text	000000b8 OS_EventTaskRemove
0001c578 g     F .text	00000090 alt_find_dev
0000868c g     F .text	00000148 memcpy
0001fe78 g     O .rwdata	00000002 OSRdyTblSize
0001b1e8 g     F .text	00000050 alt_up_character_lcd_write_fd
00021d44 g     O .bss	00000004 MBoxCounter
00006cf4 g     F .text	0000000c _cleanup_r
00010704 g     F .text	000000dc .hidden __floatsidf
0001c700 g     F .text	0000007c alt_io_redirect
0000f57c g     F .text	000000f4 .hidden __ltdf2
0001d714 g       *ABS*	00000000 __DTOR_END__
0001b780 g     F .text	00000090 alt_up_irda_write_fd
0001c0b8 g     F .text	00000074 alt_up_rs232_read_data
00000a50 g     F .text	00000014 puts
0001d2e4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00011538 g     F .text	00000120 OSEventNameGet
0001fe5c g     O .rwdata	00000002 OSFlagMax
00009fb8 g     F .text	00000074 __fpclassifyd
00009838 g     F .text	000000a4 __ratio
00011e4c g     F .text	000000f8 OSIntExit
0000cc14 g     F .text	0000001c __vfiprintf_internal
0001fe96 g     O .rwdata	00000002 OSTCBSize
00021db5 g     O .bss	00000001 OSPrioCur
00021d48 g     O .bss	00000004 KEY2_flag
0001b57c g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001a95c g     F .text	000002bc altera_avalon_jtag_uart_read
00000924 g     F .text	00000030 _printf_r
00000328 g     F .text	0000006c LCD_text
0000e1c8 g     F .text	00000064 .hidden __udivsi3
00010b4c g     F .text	000000a4 isatty
0001fe7c g     O .rwdata	00000002 OSStkWidth
0001db9c g     O .rodata	000000c8 __mprec_tens
0001fe70 g     O .rwdata	00000002 OSPtrSize
00007b80 g     F .text	0000000c __locale_charset
0001fe50 g     O .rwdata	00000002 OSEventTblSize
0001b51c g     F .text	00000060 alt_up_irda_disable_read_interrupt
0001cd18 g       .text	00000000 OSCtxSw
0001d254 g     F .text	00000090 alt_icache_flush
00021d84 g     O .bss	00000004 __malloc_top_pad
00021db8 g     O .bss	00000004 OSTCBList
00021d8c g     O .bss	00000004 alt_fd_list_lock
0001fe0c g     O .rwdata	00000004 __mb_cur_max
00007bb0 g     F .text	0000000c _localeconv_r
00008e64 g     F .text	0000003c __i2b
000074c0 g     F .text	000004bc __sfvwrite_r
0002a1a4 g     O .bss	00000c30 OSMemTbl
00021dbc g     O .bss	00000001 OSTickStepState
0000a02c g     F .text	00000054 _sbrk_r
0001fe74 g     O .rwdata	00000002 OSQMax
0002add4 g     O .bss	00000800 OSTaskStatStk
00015b8c g     F .text	000000f0 OSMemNameGet
0001fe54 g     O .rwdata	00000002 OSFlagEn
0000d280 g     F .text	00000060 _read_r
0001fe9a g     O .rwdata	00000002 OSTimeTickHookEn
00016a38 g     F .text	00000168 OSQPost
00014d5c g     F .text	000000a4 OS_FlagUnlink
0001fe2c g     O .rwdata	00000004 alt_max_fd
0001c034 g     F .text	00000044 alt_up_rs232_check_parity
00012e10 g     F .text	00000068 OS_MemCopy
00012e78 g     F .text	000000d0 OS_Sched
0000ce64 g     F .text	000000f0 _fclose_r
00015a9c g     F .text	000000f0 OSMemGet
000157b8 g     F .text	00000110 OSMboxQuery
00018a2c g     F .text	000001b4 OSTaskNameSet
0001b8e4 g     F .text	00000030 read_num_bytes_available
00006cbc g     F .text	00000030 fflush
00021d80 g     O .bss	00000004 __malloc_max_sbrked_mem
00021dc0 g     O .bss	00000004 OSCtxSwCtr
0001cfcc g     F .text	00000020 OSTimeTickHook
0001c77c g     F .text	00000180 alt_irq_register
0001fe5e g     O .rwdata	00000002 OSFlagNameSize
0001b84c g     F .text	00000034 read_RI_bit
000128dc g     F .text	00000100 OS_EventTaskRemoveMulti
0000e284 g     F .text	000008ac .hidden __adddf3
0001d714 g     O .rodata	0000000b lut_num
000126d4 g     F .text	00000150 OS_EventTaskWaitMulti
000095e0 g     F .text	0000010c __b2d
0001fe76 g     O .rwdata	00000002 OSQSize
0000db98 g     F .text	00000538 .hidden __umoddi3
00010d18 g     F .text	000000d4 lseek
000174e8 g     F .text	0000020c OSSemPend
0001fe04 g     O .rwdata	00000004 _global_impure_ptr
00009a54 g     F .text	00000564 _realloc_r
0001fe60 g     O .rwdata	00000002 OSLowestPrio
0002d158 g       *ABS*	00000000 __bss_end
0001d04c g     F .text	00000024 OSTCBInitHook
0001fea6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001cbec g     F .text	00000108 alt_tick
0001554c g     F .text	00000110 OSMboxPost
0000d620 g     F .text	00000578 .hidden __udivdi3
00000394 g     F .text	000000c0 TaskScanKey
0000d0cc g     F .text	00000024 _fputwc_r
0001fe48 g     O .rwdata	00000002 OSEventEn
0001db74 g     O .rodata	00000028 __mprec_bigtens
00008c48 g     F .text	00000104 __s2b
0001fea2 g     O .rwdata	00000002 OSTmrCfgNameSize
000107e0 g     F .text	000000a8 .hidden __floatunsidf
00009320 g     F .text	00000060 __mcmp
0001b948 g     F .text	0000002c read_data_byte
0000705c g     F .text	00000018 __fp_lock_all
00021d4c g     O .bss	00000004 MBoxTime
00014b88 g     F .text	000000e0 OS_FlagInit
0001cb50 g     F .text	0000009c alt_alarm_stop
0001b880 g     F .text	00000030 read_RE_bit
0001fe84 g     O .rwdata	00000002 OSTaskIdleStkSize
00021dfc g     O .bss	00000004 alt_irq_active
00017120 g     F .text	000000b0 OSSemAccept
00015d90 g     F .text	000000d8 OSMemPut
000158c8 g     F .text	000001d4 OSMemCreate
00021dc4 g     O .bss	00000004 OSIdleCtrMax
0001b5bc g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
0001e8e4 g     O .rwdata	00000028 alt_dev_null
0001fe98 g     O .rwdata	00000002 OSTicksPerSec
00021d50 g     O .bss	00000004 KEY_val
0001b488 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0001cd18 g       .text	00000000 OSIntCtxSw
0001baf8 g     F .text	00000074 alt_up_ps2_write_data_byte
0001c3b8 g     F .text	00000020 alt_dcache_flush_all
00008d4c g     F .text	00000068 __hi0bits
00010684 g     F .text	00000080 .hidden __fixdfsi
00000640 g     F .text	000000e8 TaskDispTime
00021dc8 g     O .bss	00000004 OSTCBFreeList
0001fec0 g       *ABS*	00000000 __ram_rwdata_end
000176f4 g     F .text	0000016c OSSemPendAbort
0001fe24 g     O .rwdata	00000008 alt_dev_list
00011130 g     F .text	000000f8 write
0001fe9c g     O .rwdata	00000002 OSVersionNbr
0001e040 g       *ABS*	00000000 __ram_rodata_end
00010a60 g     F .text	000000b0 fstat
0001c1bc g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000f57c g     F .text	000000f4 .hidden __ledf2
0001fe44 g     O .rwdata	00000004 OSEndiannessTest
00009098 g     F .text	00000140 __pow5mult
0000b7b8 g     F .text	0000145c ___vfiprintf_internal_r
00021d78 g     O .bss	00000004 __nlocale_changed
0000e22c g     F .text	00000058 .hidden __umodsi3
0001fe56 g     O .rwdata	00000002 OSFlagGrpSize
0002d158 g       *ABS*	00000000 end
0001be28 g     F .text	00000098 alt_up_ps2_write_fd
0001b5f8 g     F .text	00000044 alt_up_irda_check_parity
0001a31c g     F .text	0000013c altera_avalon_jtag_uart_init
000130e0 g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0001d714 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001af58 g     F .text	00000074 alt_avalon_timer_sc_init
00010888 g     F .text	00000064 .hidden __clzsi2
0001ac18 g     F .text	000002c4 altera_avalon_jtag_uart_write
0000704c g     F .text	00000004 __sfp_lock_acquire
000085a8 g     F .text	000000e4 memchr
00012dbc g     F .text	00000054 OS_MemClr
0001b0f4 g     F .text	0000007c alt_up_character_lcd_write
00002d98 g     F .text	000021f8 ___vfprintf_internal_r
0001cde8 g     F .text	0000015c OSTaskStkInit
00000a64 g     F .text	00000058 _sprintf_r
000071b0 g     F .text	00000310 _free_r
00007b8c g     F .text	00000010 __locale_mb_cur_max
0001242c g     F .text	00000198 OS_EventTaskRdy
0001d560 g     F .text	00000180 __call_exitprocs
00021dcc g     O .bss	00000001 OSCPUUsage
00021d74 g     O .bss	00000004 __mlocale_changed
0001fe10 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
00021e00 g     O .bss	00000004 _alt_tick_rate
00016640 g     F .text	0000028c OSQPend
000192ec g     F .text	00000104 OSTimeDly
000091d8 g     F .text	00000148 __lshift
00021e04 g     O .bss	00000004 _alt_nticks
00010ee4 g     F .text	000000fc read
0001984c g     F .text	0000096c alt_sys_init
0001b338 g     F .text	0000008c alt_up_character_lcd_shift_display
0000a298 g     F .text	000001d0 __ssprint_r
0001d448 g     F .text	00000118 __register_exitproc
00021dcd g     O .bss	00000001 OSTaskCtr
0001bd44 g     F .text	00000058 alt_up_ps2_clear_fifo
0001bff8 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000193f0 g     F .text	00000160 OSTimeDlyHMSM
00008ea0 g     F .text	000001f8 __multiply
0001b3c4 g     F .text	0000008c alt_up_character_lcd_erase_pos
0001a804 g     F .text	00000068 altera_avalon_jtag_uart_close
0001e040 g       *ABS*	00000000 __ram_rwdata_start
0001d714 g       *ABS*	00000000 __ram_rodata_start
00021e0c g     O .bss	00000028 __malloc_current_mallinfo
0001fe4a g     O .rwdata	00000002 OSEventMax
000096ec g     F .text	0000014c __d2b
00017860 g     F .text	00000110 OSSemPost
00011fd0 g     F .text	000000dc OSSchedUnlock
0001a1b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001d178 g     F .text	000000dc alt_get_fd
00021dd0 g     O .bss	00000004 OSMemFreeList
0001211c g     F .text	000000b0 OSStatInit
00014964 g     F .text	000000c4 OSFlagQuery
00021d54 g     O .bss	00000004 KEY1_flag
0001fe80 g     O .rwdata	00000002 OSTaskCreateExtEn
0000cd4c g     F .text	00000054 _close_r
0001d3cc g     F .text	0000007c memcmp
0001240c g     F .text	00000020 OS_Dummy
0001a278 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002d158 g       *ABS*	00000000 __alt_stack_base
0001a2c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00023e34 g     O .bss	00002000 TaskCounter_stk
0001b4c0 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00005068 g     F .text	00000154 __swsetup_r
0002b5d4 g     O .bss	000001e0 OSQTbl
00021d58 g     O .bss	00000004 KEY3_clear_stopwatch_flag
0000eb30 g     F .text	000008e8 .hidden __divdf3
00006f0c g     F .text	00000118 __sfp
00009950 g     F .text	00000078 __copybits
0001e4dc g     O .rwdata	00000408 __malloc_av_
00007058 g     F .text	00000004 __sinit_lock_release
00021dd4 g     O .bss	00000004 OSTCBHighRdy
0000f670 g     F .text	00000718 .hidden __muldf3
0000a080 g     F .text	00000054 __sread
00021dd8 g     O .bss	00000004 OSQFreeList
0001bf58 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0001d070 g     F .text	00000108 alt_find_file
0001c414 g     F .text	000000a4 alt_dev_llist_insert
0001134c g     F .text	00000120 __malloc_lock
00011044 g     F .text	000000b0 sbrk
00000bc0 g     F .text	000021d8 ___svfprintf_internal_r
00011658 g     F .text	00000140 OSEventNameSet
00006c60 g     F .text	0000005c _fflush_r
0000cda0 g     F .text	000000c4 _calloc_r
00021ddc g     O .bss	00000001 OSRdyGrp
00021d40 g       *ABS*	00000000 __bss_start
00008930 g     F .text	00000128 memset
00021d5c g     O .bss	00000001 err
00000728 g     F .text	000001fc main
00021d98 g     O .bss	00000004 alt_envp
00021d7c g     O .bss	00000004 __malloc_max_total_mem
0001a218 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000d420 g     F .text	00000018 __swbuf
0001ddc0 g     O .rodata	00000100 OSUnMapTbl
0001fe7a g     O .rwdata	00000002 OSSemEn
0001b2ac g     F .text	0000008c alt_up_character_lcd_shift_cursor
000145d0 g     F .text	00000394 OSFlagPost
0000a1b4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000cf54 g     F .text	00000014 fclose
000125c4 g     F .text	00000110 OS_EventTaskWait
0001bcd4 g     F .text	00000070 alt_up_ps2_read_data_byte
000131bc g     F .text	000000cc OS_TaskStatStkChk
00018744 g     F .text	00000150 OSTaskDelReq
000053bc g     F .text	00001688 _dtoa_r
00007d9c g     F .text	0000080c _malloc_r
0000d594 g     F .text	00000030 __ascii_wctomb
0001fe30 g     O .rwdata	00000004 alt_errno
000120ac g     F .text	00000070 OSStart
00025e34 g     O .bss	00002000 TaskStopwatch_stk
000112ec g     F .text	00000060 __env_unlock
0000797c g     F .text	000000c4 _fwalk
00018be0 g     F .text	000001d4 OSTaskResume
00015e68 g     F .text	000000e8 OSMemQuery
0001fe8c g     O .rwdata	00000002 OSTaskStatEn
00000454 g     F .text	000000e4 TaskCounter
0001b63c g     F .text	00000040 alt_up_irda_write_data
0001fe66 g     O .rwdata	00000002 OSMemMax
00016ba0 g     F .text	00000170 OSQPostFront
0001bec0 g     F .text	0000003c alt_up_ps2_open_dev
0000e0d0 g     F .text	00000084 .hidden __divsi3
00021ddd g     O .bss	00000003 OSRdyTbl
0001fe40 g     O .rwdata	00000002 OSDebugEn
0001b0b8 g     F .text	0000003c alt_up_character_lcd_open_dev
0000708c g     F .text	00000124 _malloc_trim_r
0001ba3c g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0001d714 g       *ABS*	00000000 __CTOR_END__
0001fe58 g     O .rwdata	00000002 OSFlagNodeSize
0001fea0 g     O .rwdata	00000002 OSTmrCfgMax
0001b080 g     F .text	00000038 alt_up_character_lcd_init
0000a1bc g     F .text	000000dc strcmp
0001615c g     F .text	000001ac OSQCreate
00018894 g     F .text	00000198 OSTaskNameGet
0001d714 g       *ABS*	00000000 __flash_rodata_start
00016d10 g     F .text	0000020c OSQPostOpt
000121cc g     F .text	00000220 OSTimeTick
0001fe88 g     O .rwdata	00000002 OSTaskMax
0001d714 g       *ABS*	00000000 __DTOR_LIST__
000171d0 g     F .text	000000d8 OSSemCreate
0001feac g     O .rwdata	00000002 OSTmrWheelSize
00027e34 g     O .bss	00002000 TaskDispTime_stk
0001c250 g     F .text	0000003c alt_up_rs232_open_dev
0000f418 g     F .text	00000088 .hidden __nedf2
0001fe82 g     O .rwdata	00000002 OSTaskDelEn
00017970 g     F .text	00000110 OSSemQuery
00016308 g     F .text	00000280 OSQDel
000168cc g     F .text	0000016c OSQPendAbort
00019814 g     F .text	00000038 alt_irq_init
00010fe0 g     F .text	00000064 alt_release_fd
0001b914 g     F .text	00000034 read_data_valid
00000abc g     F .text	0000006c sprintf
0001b450 g     F .text	00000038 alt_up_character_lcd_cursor_off
0001dca4 g     O .rodata	00000100 .hidden __clz_tab
00021d70 g     O .bss	00000004 _PathLocale
0001bbd4 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001d380 g     F .text	00000014 atexit
0000ccec g     F .text	00000060 _write_r
00011f44 g     F .text	0000008c OSSchedLock
00007bbc g     F .text	00000018 setlocale
000139f4 g     F .text	00000108 OSFlagCreate
0001fe08 g     O .rwdata	00000004 _impure_ptr
00021d90 g     O .bss	00000004 alt_argc
00006a44 g     F .text	0000021c __sflush_r
0001c518 g     F .text	00000060 _do_dtors
00007ba8 g     F .text	00000008 __locale_cjk_lang
00021d60 g     O .bss	00000004 KEY3_clear_counter_flag
0001fe52 g     O .rwdata	00000002 OSEventMultiEn
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00013afc g     F .text	00000248 OSFlagDel
00021de0 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
000153e0 g     F .text	0000016c OSMboxPendAbort
0000957c g     F .text	00000064 __ulp
00013fb8 g     F .text	000005b8 OSFlagPend
0001fe9e g     O .rwdata	00000002 OSTmrEn
00007074 g     F .text	00000018 __fp_unlock_all
0001fe1c g     O .rwdata	00000008 alt_fs_list
00012fbc g     F .text	00000074 OS_StrCopy
0001befc g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0001c078 g     F .text	00000040 alt_up_rs232_write_data
0001fe68 g     O .rwdata	00000002 OSMemNameSize
0001d00c g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001fe94 g     O .rwdata	00000002 OSTCBPrioTblMax
00007bd4 g     F .text	0000000c localeconv
0001fe90 g     O .rwdata	00000002 OSTaskStatStkChkEn
00014e98 g     F .text	000000d4 OSMboxCreate
0001fe64 g     O .rwdata	00000002 OSMemEn
0001fe6e g     O .rwdata	00000002 OSMutexEn
0001fec0 g       *ABS*	00000000 _edata
00021d64 g     O .bss	00000004 KEY0_flag
0002d158 g       *ABS*	00000000 _end
00021de4 g     O .bss	00000001 OSIntNesting
0000cf68 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
0001a86c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00019550 g     F .text	000001d4 OSTimeDlyResume
00000538 g     F .text	00000108 TaskStopwatch
00013e6c g     F .text	0000014c OSFlagNameSet
000151ac g     F .text	00000234 OSMboxPend
00018db4 g     F .text	000001c0 OSTaskStkChk
0001fe6a g     O .rwdata	00000002 OSMemSize
0000a0dc g     F .text	0000007c __swrite
0001fe14 g     O .rwdata	00000004 __malloc_trim_threshold
00007b9c g     F .text	0000000c __locale_msgcharset
00021de8 g     O .bss	00000004 OSTCBCur
00021d68 g     O .bss	00000004 DispSem
0001d394 g     F .text	00000038 exit
0001b67c g     F .text	00000074 alt_up_irda_read_data
0001fe6c g     O .rwdata	00000002 OSMemTblSize
00007a40 g     F .text	000000c4 _fwalk_reent
0001b974 g     F .text	000000c8 alt_up_ps2_init
00009380 g     F .text	000001fc __mdiff
0000e154 g     F .text	00000074 .hidden __modsi3
00014e00 g     F .text	00000098 OSMboxAccept
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007050 g     F .text	00000004 __sfp_lock_release
00011da8 g     F .text	00000058 OSInit
00019158 g     F .text	00000124 OSTaskQuery
0001b170 g     F .text	00000078 alt_up_character_lcd_string
00017078 g     F .text	000000a8 OS_QInit
00013030 g     F .text	00000054 OS_StrLen
0001b810 g     F .text	0000003c alt_up_irda_open_dev
00015c7c g     F .text	00000114 OSMemNameSet
0001fe86 g     O .rwdata	00000002 OSTaskProfileEn
00021dec g     O .bss	00000004 OSTime
0002b7b4 g     O .bss	00000800 OSTaskIdleStk
0001d6e0 g     F .text	00000034 _exit
0001565c g     F .text	0000015c OSMboxPostOpt
0001c28c g     F .text	0000012c alt_alarm_start
00013d44 g     F .text	00000128 OSFlagNameGet
00019724 g     F .text	0000005c OSTimeGet
00007be0 g     F .text	000001bc __smakebuf_r
0001bb6c g     F .text	00000068 alt_up_ps2_wait_for_ack
00000b28 g     F .text	00000098 strlen
0001cf8c g     F .text	00000020 OSTaskSwHook
0001c9fc g     F .text	00000154 open
0002bfb4 g     O .bss	00000b40 OSEventTbl
0000f4a0 g     F .text	000000dc .hidden __gedf2
0002caf4 g     O .bss	00000510 OSTCBTbl
00017a80 g     F .text	00000100 OSSemSet
0001fe18 g     O .rwdata	00000004 __wctomb
00021d6c g     O .bss	00000004 KeySem
0000b7a0 g     F .text	00000018 __sprint_r
0001c608 g     F .text	00000034 alt_icache_flush_all
0001b238 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001feb4 g     O .rwdata	00000004 alt_priority_mask
000172a8 g     F .text	00000240 OSSemDel
00021df0 g     O .bss	00000004 OSFlagFreeList
0001fe4c g     O .rwdata	00000002 OSEventNameSize
00014f6c g     F .text	00000240 OSMboxDel
00004f90 g     F .text	0000001c __vfprintf_internal
00021df4 g     O .bss	00000001 OSStatRdy
0002d004 g     O .bss	00000054 OSTCBPrioTbl
0000d5c4 g     F .text	0000005c _wctomb_r
00011228 g     F .text	000000c4 __env_lock
0001bd9c g     F .text	0000008c alt_up_ps2_read_fd
0001fe92 g     O .rwdata	00000002 OSTaskSwHookEn
0000fd88 g     F .text	000008fc .hidden __subdf3
0001b6f0 g     F .text	00000090 alt_up_irda_read_fd
00008db4 g     F .text	000000b0 __lo0bits
0001feb8 g     O .rwdata	00000008 alt_alarm_list
0001fe5a g     O .rwdata	00000002 OSFlagWidth
0001c4b8 g     F .text	00000060 _do_ctors
0001bfb8 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000d4d4 g     F .text	000000c0 wcrtomb
00010928 g     F .text	000000d0 close
00021da0 g     O .bss	00000004 alt_envsem
00021df8 g     O .bss	00000004 OSIdleCtrRun
000123ec g     F .text	00000020 OSVersion
0001fea4 g     O .rwdata	00000002 OSTmrCfgWheelSize
00010c58 g     F .text	00000084 alt_load
0001927c g     F .text	00000070 OS_TaskStkClr
0001fe7e g     O .rwdata	00000002 OSTaskCreateEn
000129dc g     F .text	00000068 OS_EventWaitListInit
0000d0f0 g     F .text	00000080 fputwc
0001d02c g     F .text	00000020 OSTaskIdleHook
00007054 g     F .text	00000004 __sinit_lock_acquire
00008b28 g     F .text	00000120 __multadd
00018f74 g     F .text	000001e4 OSTaskSuspend
00008b00 g     F .text	00000028 _Bfree
00013084 g     F .text	0000005c OS_TaskIdle
0001feaa g     O .rwdata	00000002 OSTmrTblSize
00016f1c g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0011e000 	call	11e00 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	10b41604 	addi	r2,r2,-12200
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10b41604 	addi	r2,r2,-12200
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0011e4c0 	call	11e4c <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a80117 	ldw	r2,-24572(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a80117 	ldw	r2,-24572(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d69f8114 	ori	gp,gp,32260
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     25c:	10875014 	ori	r2,r2,7488

    movhi r3, %hi(__bss_end)
     260:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     264:	18f45614 	ori	r3,r3,53592

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	0010c580 	call	10c58 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	0010dec0 	call	10dec <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <alt_after_alt_main>

00000284 <LCD_clear>:

/* Supporting Functions */

//////* LCD DISPLAY FUNCTIONS *//////
void LCD_clear(void)
{
     284:	defffe04 	addi	sp,sp,-8
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4
  	volatile char * LCD_display_ptr = (char *) 0xFF203050;	// 16x2 character display
     290:	00bfc834 	movhi	r2,65312
     294:	108c1404 	addi	r2,r2,12368
     298:	e0bfff15 	stw	r2,-4(fp)
	*(LCD_display_ptr) = 0x01;											// clear the LCD
     29c:	e0bfff17 	ldw	r2,-4(fp)
     2a0:	00c00044 	movi	r3,1
     2a4:	10c00005 	stb	r3,0(r2)
}
     2a8:	0001883a 	nop
     2ac:	e037883a 	mov	sp,fp
     2b0:	df000017 	ldw	fp,0(sp)
     2b4:	dec00104 	addi	sp,sp,4
     2b8:	f800283a 	ret

000002bc <LCD_cursor>:

void LCD_cursor(int x, int y)
{
     2bc:	defffb04 	addi	sp,sp,-20
     2c0:	df000415 	stw	fp,16(sp)
     2c4:	df000404 	addi	fp,sp,16
     2c8:	e13ffe15 	stw	r4,-8(fp)
     2cc:	e17fff15 	stw	r5,-4(fp)
  	volatile char * LCD_display_ptr = (char *) 0xFF203050;	// 16x2 character display
     2d0:	00bfc834 	movhi	r2,65312
     2d4:	108c1404 	addi	r2,r2,12368
     2d8:	e0bffd15 	stw	r2,-12(fp)
	char instruction;

	instruction = x;
     2dc:	e0bffe17 	ldw	r2,-8(fp)
     2e0:	e0bffc05 	stb	r2,-16(fp)
	if (y != 0) instruction |= 0x40;				// set bit 6 for bottom row
     2e4:	e0bfff17 	ldw	r2,-4(fp)
     2e8:	10000326 	beq	r2,zero,2f8 <LCD_cursor+0x3c>
     2ec:	e0bffc03 	ldbu	r2,-16(fp)
     2f0:	10801014 	ori	r2,r2,64
     2f4:	e0bffc05 	stb	r2,-16(fp)
	instruction |= 0x80;								// need to set bit 7 to set the cursor location
     2f8:	e0fffc03 	ldbu	r3,-16(fp)
     2fc:	00bfe004 	movi	r2,-128
     300:	1884b03a 	or	r2,r3,r2
     304:	e0bffc05 	stb	r2,-16(fp)
	*(LCD_display_ptr) = instruction;			// write to the LCD instruction register
     308:	e0bffd17 	ldw	r2,-12(fp)
     30c:	e0fffc03 	ldbu	r3,-16(fp)
     310:	10c00005 	stb	r3,0(r2)
}
     314:	0001883a 	nop
     318:	e037883a 	mov	sp,fp
     31c:	df000017 	ldw	fp,0(sp)
     320:	dec00104 	addi	sp,sp,4
     324:	f800283a 	ret

00000328 <LCD_text>:

void LCD_text(char * text_ptr)
{
     328:	defffd04 	addi	sp,sp,-12
     32c:	df000215 	stw	fp,8(sp)
     330:	df000204 	addi	fp,sp,8
     334:	e13fff15 	stw	r4,-4(fp)
  volatile char * LCD_display_ptr = (char *) 0xFF203050;	// 16x2 character display
     338:	00bfc834 	movhi	r2,65312
     33c:	108c1404 	addi	r2,r2,12368
     340:	e0bffe15 	stw	r2,-8(fp)

	while ( *(text_ptr) )
     344:	00000806 	br	368 <LCD_text+0x40>
	{
		*(LCD_display_ptr + 1) = *(text_ptr);	// write to the LCD data register
     348:	e0bffe17 	ldw	r2,-8(fp)
     34c:	10800044 	addi	r2,r2,1
     350:	e0ffff17 	ldw	r3,-4(fp)
     354:	18c00003 	ldbu	r3,0(r3)
     358:	10c00005 	stb	r3,0(r2)
		++text_ptr;
     35c:	e0bfff17 	ldw	r2,-4(fp)
     360:	10800044 	addi	r2,r2,1
     364:	e0bfff15 	stw	r2,-4(fp)

void LCD_text(char * text_ptr)
{
  volatile char * LCD_display_ptr = (char *) 0xFF203050;	// 16x2 character display

	while ( *(text_ptr) )
     368:	e0bfff17 	ldw	r2,-4(fp)
     36c:	10800003 	ldbu	r2,0(r2)
     370:	10803fcc 	andi	r2,r2,255
     374:	1080201c 	xori	r2,r2,128
     378:	10bfe004 	addi	r2,r2,-128
     37c:	103ff21e 	bne	r2,zero,348 <LCD_text+0x20>
	{
		*(LCD_display_ptr + 1) = *(text_ptr);	// write to the LCD data register
		++text_ptr;
	}
}
     380:	0001883a 	nop
     384:	e037883a 	mov	sp,fp
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00104 	addi	sp,sp,4
     390:	f800283a 	ret

00000394 <TaskScanKey>:
#define TASKCOUNTER_PRIORITY  	9
#define TASKDISPTIME_PRIORITY   10

/* Definition of Tasks */

void TaskScanKey(void* pdata) {
     394:	defffd04 	addi	sp,sp,-12
     398:	dfc00215 	stw	ra,8(sp)
     39c:	df000115 	stw	fp,4(sp)
     3a0:	df000104 	addi	fp,sp,4
     3a4:	e13fff15 	stw	r4,-4(fp)
	while(1) {
		OSSemPend(KeySem, 0, &err);
     3a8:	d0a7da17 	ldw	r2,-24728(gp)
     3ac:	d1a7d604 	addi	r6,gp,-24744
     3b0:	000b883a 	mov	r5,zero
     3b4:	1009883a 	mov	r4,r2
     3b8:	00174e80 	call	174e8 <OSSemPend>

		KEY_val = *(KEY_ptr) & 0xF;
     3bc:	00bfc834 	movhi	r2,65312
     3c0:	10801404 	addi	r2,r2,80
     3c4:	10800017 	ldw	r2,0(r2)
     3c8:	108003cc 	andi	r2,r2,15
     3cc:	d0a7d315 	stw	r2,-24756(gp)
		if (KEY_val & 0x01) {				        // KEY0
     3d0:	d0a7d317 	ldw	r2,-24756(gp)
     3d4:	1080004c 	andi	r2,r2,1
     3d8:	10000326 	beq	r2,zero,3e8 <TaskScanKey+0x54>
		KEY0_flag = 1;
     3dc:	00800044 	movi	r2,1
     3e0:	d0a7d815 	stw	r2,-24736(gp)
     3e4:	00001506 	br	43c <TaskScanKey+0xa8>
		}	else if (KEY_val & 0x02) {				// KEY1
     3e8:	d0a7d317 	ldw	r2,-24756(gp)
     3ec:	1080008c 	andi	r2,r2,2
     3f0:	10000326 	beq	r2,zero,400 <TaskScanKey+0x6c>
		KEY1_flag = 1;
     3f4:	00800044 	movi	r2,1
     3f8:	d0a7d415 	stw	r2,-24752(gp)
     3fc:	00000f06 	br	43c <TaskScanKey+0xa8>
		} else if (KEY_val & 0x04) {				// KEY2
     400:	d0a7d317 	ldw	r2,-24756(gp)
     404:	1080010c 	andi	r2,r2,4
     408:	10000326 	beq	r2,zero,418 <TaskScanKey+0x84>
		KEY2_flag = 1;
     40c:	00800044 	movi	r2,1
     410:	d0a7d115 	stw	r2,-24764(gp)
     414:	00000906 	br	43c <TaskScanKey+0xa8>
		} else if (KEY_val & 0x08) {				// KEY3 - Two flags, because needed in 2 tasks
     418:	d0a7d317 	ldw	r2,-24756(gp)
     41c:	1080020c 	andi	r2,r2,8
     420:	10000626 	beq	r2,zero,43c <TaskScanKey+0xa8>
		KEY3_clear_counter_flag = 1;
     424:	00800044 	movi	r2,1
     428:	d0a7d715 	stw	r2,-24740(gp)
		if (!RUN_flag) {KEY3_clear_stopwatch_flag = 1;}
     42c:	d0a7cf17 	ldw	r2,-24772(gp)
     430:	1000021e 	bne	r2,zero,43c <TaskScanKey+0xa8>
     434:	00800044 	movi	r2,1
     438:	d0a7d515 	stw	r2,-24748(gp)
		}

		OSSemPost(KeySem);
     43c:	d0a7da17 	ldw	r2,-24728(gp)
     440:	1009883a 	mov	r4,r2
     444:	00178600 	call	17860 <OSSemPost>

		OSTimeDly(1);
     448:	01000044 	movi	r4,1
     44c:	00192ec0 	call	192ec <OSTimeDly>
	}
     450:	003fd506 	br	3a8 <TaskScanKey+0x14>

00000454 <TaskCounter>:
}

void TaskCounter(void* pdata) {
     454:	defff204 	addi	sp,sp,-56
     458:	dfc00d15 	stw	ra,52(sp)
     45c:	df000c15 	stw	fp,48(sp)
     460:	df000c04 	addi	fp,sp,48
     464:	e13fff15 	stw	r4,-4(fp)

	int counter;

	while(1) {
    OSSemPend(KeySem, 0, &err);
     468:	d0a7da17 	ldw	r2,-24728(gp)
     46c:	d1a7d604 	addi	r6,gp,-24744
     470:	000b883a 	mov	r5,zero
     474:	1009883a 	mov	r4,r2
     478:	00174e80 	call	174e8 <OSSemPend>

		if ( !(KEY_val & 0x02) && (KEY1_flag) ) {				// KEY1
     47c:	d0a7d317 	ldw	r2,-24756(gp)
     480:	1080008c 	andi	r2,r2,2
     484:	1000091e 	bne	r2,zero,4ac <TaskCounter+0x58>
     488:	d0a7d417 	ldw	r2,-24752(gp)
     48c:	10000726 	beq	r2,zero,4ac <TaskCounter+0x58>
			if (counter < 9) {counter++;}
     490:	e0bff417 	ldw	r2,-48(fp)
     494:	10800248 	cmpgei	r2,r2,9
     498:	1000031e 	bne	r2,zero,4a8 <TaskCounter+0x54>
     49c:	e0bff417 	ldw	r2,-48(fp)
     4a0:	10800044 	addi	r2,r2,1
     4a4:	e0bff415 	stw	r2,-48(fp)
			KEY1_flag = 0;
     4a8:	d027d415 	stw	zero,-24752(gp)
		}
		if ( !(KEY_val & 0x04) && (KEY2_flag) ) {				// KEY2
     4ac:	d0a7d317 	ldw	r2,-24756(gp)
     4b0:	1080010c 	andi	r2,r2,4
     4b4:	1000081e 	bne	r2,zero,4d8 <TaskCounter+0x84>
     4b8:	d0a7d117 	ldw	r2,-24764(gp)
     4bc:	10000626 	beq	r2,zero,4d8 <TaskCounter+0x84>
			if (counter > 0) {counter--;}
     4c0:	e0bff417 	ldw	r2,-48(fp)
     4c4:	0080030e 	bge	zero,r2,4d4 <TaskCounter+0x80>
     4c8:	e0bff417 	ldw	r2,-48(fp)
     4cc:	10bfffc4 	addi	r2,r2,-1
     4d0:	e0bff415 	stw	r2,-48(fp)
			KEY2_flag = 0;
     4d4:	d027d115 	stw	zero,-24764(gp)
		}
		if ( !(KEY_val & 0x08) && (KEY3_clear_counter_flag) ) {				// KEY3
     4d8:	d0a7d317 	ldw	r2,-24756(gp)
     4dc:	1080020c 	andi	r2,r2,8
     4e0:	1000041e 	bne	r2,zero,4f4 <TaskCounter+0xa0>
     4e4:	d0a7d717 	ldw	r2,-24740(gp)
     4e8:	10000226 	beq	r2,zero,4f4 <TaskCounter+0xa0>
			counter = 0;
     4ec:	e03ff415 	stw	zero,-48(fp)
			KEY3_clear_counter_flag = 0;
     4f0:	d027d715 	stw	zero,-24740(gp)
		}

		char counter_char[LCD_SIZE];
		sprintf(counter_char, "%d", counter);
     4f4:	e0bff504 	addi	r2,fp,-44
     4f8:	e1bff417 	ldw	r6,-48(fp)
     4fc:	014000b4 	movhi	r5,2
     500:	2975c804 	addi	r5,r5,-10464
     504:	1009883a 	mov	r4,r2
     508:	0000abc0 	call	abc <sprintf>

		OSMboxPost(MBoxCounter, (void *)&counter_char[0]);
     50c:	d0a7d017 	ldw	r2,-24768(gp)
     510:	e0fff504 	addi	r3,fp,-44
     514:	180b883a 	mov	r5,r3
     518:	1009883a 	mov	r4,r2
     51c:	001554c0 	call	1554c <OSMboxPost>

		OSSemPost(KeySem);
     520:	d0a7da17 	ldw	r2,-24728(gp)
     524:	1009883a 	mov	r4,r2
     528:	00178600 	call	17860 <OSSemPost>

		OSTimeDly(1);
     52c:	01000044 	movi	r4,1
     530:	00192ec0 	call	192ec <OSTimeDly>
	}
     534:	003fcc06 	br	468 <TaskCounter+0x14>

00000538 <TaskStopwatch>:
}

void TaskStopwatch(void* pdata) {
     538:	defff004 	addi	sp,sp,-64
     53c:	dfc00f15 	stw	ra,60(sp)
     540:	df000e15 	stw	fp,56(sp)
     544:	df000e04 	addi	fp,sp,56
     548:	e13fff15 	stw	r4,-4(fp)

  int time_125ms, time_SS, time_MM;

  while(1) {
    if ( !(KEY_val & 0x01) && (KEY0_flag) ) {       // KEY0
     54c:	d0a7d317 	ldw	r2,-24756(gp)
     550:	1080004c 	andi	r2,r2,1
     554:	1000071e 	bne	r2,zero,574 <TaskStopwatch+0x3c>
     558:	d0a7d817 	ldw	r2,-24736(gp)
     55c:	10000526 	beq	r2,zero,574 <TaskStopwatch+0x3c>
      RUN_flag = !RUN_flag;
     560:	d0a7cf17 	ldw	r2,-24772(gp)
     564:	1005003a 	cmpeq	r2,r2,zero
     568:	10803fcc 	andi	r2,r2,255
     56c:	d0a7cf15 	stw	r2,-24772(gp)
      KEY0_flag = 0;
     570:	d027d815 	stw	zero,-24736(gp)
    }

    if (RUN_flag) {				// RUN
     574:	d0a7cf17 	ldw	r2,-24772(gp)
     578:	10001726 	beq	r2,zero,5d8 <TaskStopwatch+0xa0>

      time_125ms++;
     57c:	e0bff217 	ldw	r2,-56(fp)
     580:	10800044 	addi	r2,r2,1
     584:	e0bff215 	stw	r2,-56(fp)
      if (time_125ms >= 8) {
     588:	e0bff217 	ldw	r2,-56(fp)
     58c:	10800210 	cmplti	r2,r2,8
     590:	1000111e 	bne	r2,zero,5d8 <TaskStopwatch+0xa0>
        time_125ms = 0;
     594:	e03ff215 	stw	zero,-56(fp)

        if (time_SS >= 59) {
     598:	e0bff317 	ldw	r2,-52(fp)
     59c:	10800ed0 	cmplti	r2,r2,59
     5a0:	10000a1e 	bne	r2,zero,5cc <TaskStopwatch+0x94>
          time_SS = 0;
     5a4:	e03ff315 	stw	zero,-52(fp)

          if (time_MM >= 59) {
     5a8:	e0bff417 	ldw	r2,-48(fp)
     5ac:	10800ed0 	cmplti	r2,r2,59
     5b0:	1000021e 	bne	r2,zero,5bc <TaskStopwatch+0x84>
            time_MM = 0;
     5b4:	e03ff415 	stw	zero,-48(fp)
     5b8:	00000706 	br	5d8 <TaskStopwatch+0xa0>
          } else {
            time_MM++;
     5bc:	e0bff417 	ldw	r2,-48(fp)
     5c0:	10800044 	addi	r2,r2,1
     5c4:	e0bff415 	stw	r2,-48(fp)
     5c8:	00000306 	br	5d8 <TaskStopwatch+0xa0>
          }
        } else {
          time_SS++;
     5cc:	e0bff317 	ldw	r2,-52(fp)
     5d0:	10800044 	addi	r2,r2,1
     5d4:	e0bff315 	stw	r2,-52(fp)
        }
      }
    }

    if ( (!RUN_flag) && !(KEY_val & 0x08) && (KEY3_clear_stopwatch_flag) ) {  // STOP & KEY3
     5d8:	d0a7cf17 	ldw	r2,-24772(gp)
     5dc:	1000091e 	bne	r2,zero,604 <TaskStopwatch+0xcc>
     5e0:	d0a7d317 	ldw	r2,-24756(gp)
     5e4:	1080020c 	andi	r2,r2,8
     5e8:	1000061e 	bne	r2,zero,604 <TaskStopwatch+0xcc>
     5ec:	d0a7d517 	ldw	r2,-24748(gp)
     5f0:	10000426 	beq	r2,zero,604 <TaskStopwatch+0xcc>
      time_125ms = 0;
     5f4:	e03ff215 	stw	zero,-56(fp)
      time_SS = 0;
     5f8:	e03ff315 	stw	zero,-52(fp)
      time_MM = 0;
     5fc:	e03ff415 	stw	zero,-48(fp)
      KEY3_clear_stopwatch_flag = 0;
     600:	d027d515 	stw	zero,-24748(gp)
    }

    char time_MMSS_char[LCD_SIZE];
    sprintf(time_MMSS_char, "%.2d:%.2d", time_MM, time_SS);
     604:	e0bff504 	addi	r2,fp,-44
     608:	e1fff317 	ldw	r7,-52(fp)
     60c:	e1bff417 	ldw	r6,-48(fp)
     610:	014000b4 	movhi	r5,2
     614:	2975c904 	addi	r5,r5,-10460
     618:	1009883a 	mov	r4,r2
     61c:	0000abc0 	call	abc <sprintf>

    OSMboxPost(MBoxTime, (void *)&time_MMSS_char[0]);
     620:	d0a7d217 	ldw	r2,-24760(gp)
     624:	e0fff504 	addi	r3,fp,-44
     628:	180b883a 	mov	r5,r3
     62c:	1009883a 	mov	r4,r2
     630:	001554c0 	call	1554c <OSMboxPost>

    OSTimeDly(1);
     634:	01000044 	movi	r4,1
     638:	00192ec0 	call	192ec <OSTimeDly>

  }
     63c:	003fc306 	br	54c <TaskStopwatch+0x14>

00000640 <TaskDispTime>:
}

void TaskDispTime(void* pdata) {
     640:	defff904 	addi	sp,sp,-28
     644:	dfc00615 	stw	ra,24(sp)
     648:	df000515 	stw	fp,20(sp)
     64c:	df000504 	addi	fp,sp,20
     650:	e13fff15 	stw	r4,-4(fp)
	while(1) {

    OSSemPend(DispSem, 0, &err);
     654:	d0a7d917 	ldw	r2,-24732(gp)
     658:	d1a7d604 	addi	r6,gp,-24744
     65c:	000b883a 	mov	r5,zero
     660:	1009883a 	mov	r4,r2
     664:	00174e80 	call	174e8 <OSSemPend>

    // Receive the time value from TaskStopwatch, display on top row of LCD
    char *time_msg;
    time_msg = (char *)OSMboxPend(MBoxTime, 0, &err);
     668:	d0a7d217 	ldw	r2,-24760(gp)
     66c:	d1a7d604 	addi	r6,gp,-24744
     670:	000b883a 	mov	r5,zero
     674:	1009883a 	mov	r4,r2
     678:	00151ac0 	call	151ac <OSMboxPend>
     67c:	e0bffb15 	stw	r2,-20(fp)
    if (err == OS_ERR_NONE) {	// Success
     680:	d0a7d603 	ldbu	r2,-24744(gp)
     684:	10803fcc 	andi	r2,r2,255
     688:	1000061e 	bne	r2,zero,6a4 <TaskDispTime+0x64>
      LCD_cursor(0,0);
     68c:	000b883a 	mov	r5,zero
     690:	0009883a 	mov	r4,zero
     694:	00002bc0 	call	2bc <LCD_cursor>
      LCD_text(time_msg);
     698:	e13ffb17 	ldw	r4,-20(fp)
     69c:	00003280 	call	328 <LCD_text>
     6a0:	00000606 	br	6bc <TaskDispTime+0x7c>

    } else {	// Error
      int time = OSTimeGet();
     6a4:	00197240 	call	19724 <OSTimeGet>
     6a8:	e0bffc15 	stw	r2,-16(fp)
      printf("%d: Error on Receiving MBoxTime via OSMboxPend in TaskDispTime\n", time);
     6ac:	e17ffc17 	ldw	r5,-16(fp)
     6b0:	010000b4 	movhi	r4,2
     6b4:	2135cc04 	addi	r4,r4,-10448
     6b8:	00009540 	call	954 <printf>
    }

    // Receive the counter value from TaskCounter, display on bottom row of LCD
    char *counter_msg;
    counter_msg = (char *)OSMboxPend(MBoxCounter, 0, &err);
     6bc:	d0a7d017 	ldw	r2,-24768(gp)
     6c0:	d1a7d604 	addi	r6,gp,-24744
     6c4:	000b883a 	mov	r5,zero
     6c8:	1009883a 	mov	r4,r2
     6cc:	00151ac0 	call	151ac <OSMboxPend>
     6d0:	e0bffd15 	stw	r2,-12(fp)
    if (err == OS_ERR_NONE) {	// Success
     6d4:	d0a7d603 	ldbu	r2,-24744(gp)
     6d8:	10803fcc 	andi	r2,r2,255
     6dc:	1000061e 	bne	r2,zero,6f8 <TaskDispTime+0xb8>
      LCD_cursor(0,1);
     6e0:	01400044 	movi	r5,1
     6e4:	0009883a 	mov	r4,zero
     6e8:	00002bc0 	call	2bc <LCD_cursor>
      LCD_text(counter_msg);
     6ec:	e13ffd17 	ldw	r4,-12(fp)
     6f0:	00003280 	call	328 <LCD_text>
     6f4:	00000606 	br	710 <TaskDispTime+0xd0>

    } else {	// Error
      int time = OSTimeGet();
     6f8:	00197240 	call	19724 <OSTimeGet>
     6fc:	e0bffe15 	stw	r2,-8(fp)
      printf("%d: Error on Receiving MBoxCounter via OSMboxPend in TaskDispTime\n", time);
     700:	e17ffe17 	ldw	r5,-8(fp)
     704:	010000b4 	movhi	r4,2
     708:	2135dc04 	addi	r4,r4,-10384
     70c:	00009540 	call	954 <printf>
    }

    OSSemPost(DispSem);
     710:	d0a7d917 	ldw	r2,-24732(gp)
     714:	1009883a 	mov	r4,r2
     718:	00178600 	call	17860 <OSSemPost>

    OSTimeDly(1);
     71c:	01000044 	movi	r4,1
     720:	00192ec0 	call	192ec <OSTimeDly>

	}
     724:	003fcb06 	br	654 <TaskDispTime+0x14>

00000728 <main>:
}

/* The main function creates two task and starts multi-tasking */
int main(void)
{
     728:	defff904 	addi	sp,sp,-28
     72c:	dfc00615 	stw	ra,24(sp)
     730:	df000515 	stw	fp,20(sp)
     734:	df000504 	addi	fp,sp,20

  printf("MicroC/OS-II Licensing Terms\n");
     738:	010000b4 	movhi	r4,2
     73c:	2135ed04 	addi	r4,r4,-10316
     740:	0000a500 	call	a50 <puts>
  printf("============================\n");
     744:	010000b4 	movhi	r4,2
     748:	2135f504 	addi	r4,r4,-10284
     74c:	0000a500 	call	a50 <puts>
  printf("Micrium\'s uC/OS-II is a real-time operating system (RTOS) available in source code.\n");
     750:	010000b4 	movhi	r4,2
     754:	2135fd04 	addi	r4,r4,-10252
     758:	0000a500 	call	a50 <puts>
  printf("This is not open-source software.\n");
     75c:	010000b4 	movhi	r4,2
     760:	21361204 	addi	r4,r4,-10168
     764:	0000a500 	call	a50 <puts>
  printf("This RTOS can be used free of charge only for non-commercial purposes and academic projects,\n");
     768:	010000b4 	movhi	r4,2
     76c:	21361b04 	addi	r4,r4,-10132
     770:	0000a500 	call	a50 <puts>
  printf("any other use of the code is subject to the terms of an end-user license agreement\n");
     774:	010000b4 	movhi	r4,2
     778:	21363304 	addi	r4,r4,-10036
     77c:	0000a500 	call	a50 <puts>
  printf("for more information please see the license files included in the BSP project or contact Micrium.\n");
     780:	010000b4 	movhi	r4,2
     784:	21364804 	addi	r4,r4,-9952
     788:	0000a500 	call	a50 <puts>
  printf("Anyone planning to use a Micrium RTOS in a commercial product must purchase a commercial license\n");
     78c:	010000b4 	movhi	r4,2
     790:	21366104 	addi	r4,r4,-9852
     794:	0000a500 	call	a50 <puts>
  printf("from the owner of the software, Silicon Laboratories Inc.\n");
     798:	010000b4 	movhi	r4,2
     79c:	21367a04 	addi	r4,r4,-9752
     7a0:	0000a500 	call	a50 <puts>
  printf("Licensing information is available at:\n");
     7a4:	010000b4 	movhi	r4,2
     7a8:	21368904 	addi	r4,r4,-9692
     7ac:	0000a500 	call	a50 <puts>
  printf("Phone: +1 954-217-2036\n");
     7b0:	010000b4 	movhi	r4,2
     7b4:	21369304 	addi	r4,r4,-9652
     7b8:	0000a500 	call	a50 <puts>
  printf("Email: sales@micrium.com\n");
     7bc:	010000b4 	movhi	r4,2
     7c0:	21369904 	addi	r4,r4,-9628
     7c4:	0000a500 	call	a50 <puts>
  printf("URL: www.micrium.com\n\n\n");
     7c8:	010000b4 	movhi	r4,2
     7cc:	2136a004 	addi	r4,r4,-9600
     7d0:	0000a500 	call	a50 <puts>

  LCD_clear();  // Clear LCD before operation
     7d4:	00002840 	call	284 <LCD_clear>

  OSTaskCreateExt(TaskScanKey,
     7d8:	d8000415 	stw	zero,16(sp)
     7dc:	d8000315 	stw	zero,12(sp)
     7e0:	00820004 	movi	r2,2048
     7e4:	d8800215 	stw	r2,8(sp)
     7e8:	008000b4 	movhi	r2,2
     7ec:	10878d04 	addi	r2,r2,7732
     7f0:	d8800115 	stw	r2,4(sp)
     7f4:	008001c4 	movi	r2,7
     7f8:	d8800015 	stw	r2,0(sp)
     7fc:	01c001c4 	movi	r7,7
     800:	018000b4 	movhi	r6,2
     804:	318f8c04 	addi	r6,r6,15920
     808:	000b883a 	mov	r5,zero
     80c:	01000034 	movhi	r4,0
     810:	2100e504 	addi	r4,r4,916
     814:	001821c0 	call	1821c <OSTaskCreateExt>
				          TaskScanKey_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(TaskCounter,
     818:	d8000415 	stw	zero,16(sp)
     81c:	d8000315 	stw	zero,12(sp)
     820:	00820004 	movi	r2,2048
     824:	d8800215 	stw	r2,8(sp)
     828:	008000b4 	movhi	r2,2
     82c:	108f8d04 	addi	r2,r2,15924
     830:	d8800115 	stw	r2,4(sp)
     834:	00800244 	movi	r2,9
     838:	d8800015 	stw	r2,0(sp)
     83c:	01c00244 	movi	r7,9
     840:	018000b4 	movhi	r6,2
     844:	31978c04 	addi	r6,r6,24112
     848:	000b883a 	mov	r5,zero
     84c:	01000034 	movhi	r4,0
     850:	21011504 	addi	r4,r4,1108
     854:	001821c0 	call	1821c <OSTaskCreateExt>
				          TaskCounter_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(TaskStopwatch,
     858:	d8000415 	stw	zero,16(sp)
     85c:	d8000315 	stw	zero,12(sp)
     860:	00820004 	movi	r2,2048
     864:	d8800215 	stw	r2,8(sp)
     868:	008000b4 	movhi	r2,2
     86c:	10978d04 	addi	r2,r2,24116
     870:	d8800115 	stw	r2,4(sp)
     874:	00800204 	movi	r2,8
     878:	d8800015 	stw	r2,0(sp)
     87c:	01c00204 	movi	r7,8
     880:	018000b4 	movhi	r6,2
     884:	319f8c04 	addi	r6,r6,32304
     888:	000b883a 	mov	r5,zero
     88c:	01000034 	movhi	r4,0
     890:	21014e04 	addi	r4,r4,1336
     894:	001821c0 	call	1821c <OSTaskCreateExt>
  			          TaskStopwatch_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSTaskCreateExt(TaskDispTime,
     898:	d8000415 	stw	zero,16(sp)
     89c:	d8000315 	stw	zero,12(sp)
     8a0:	00820004 	movi	r2,2048
     8a4:	d8800215 	stw	r2,8(sp)
     8a8:	008000b4 	movhi	r2,2
     8ac:	109f8d04 	addi	r2,r2,32308
     8b0:	d8800115 	stw	r2,4(sp)
     8b4:	00800284 	movi	r2,10
     8b8:	d8800015 	stw	r2,0(sp)
     8bc:	01c00284 	movi	r7,10
     8c0:	018000f4 	movhi	r6,3
     8c4:	31a78c04 	addi	r6,r6,-25040
     8c8:	000b883a 	mov	r5,zero
     8cc:	01000034 	movhi	r4,0
     8d0:	21019004 	addi	r4,r4,1600
     8d4:	001821c0 	call	1821c <OSTaskCreateExt>
  			          TaskDispTime_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  KeySem = OSSemCreate(1);
     8d8:	01000044 	movi	r4,1
     8dc:	00171d00 	call	171d0 <OSSemCreate>
     8e0:	d0a7da15 	stw	r2,-24728(gp)
  DispSem = OSSemCreate(1);
     8e4:	01000044 	movi	r4,1
     8e8:	00171d00 	call	171d0 <OSSemCreate>
     8ec:	d0a7d915 	stw	r2,-24732(gp)

  MBoxTime = OSMboxCreate((void *)0);
     8f0:	0009883a 	mov	r4,zero
     8f4:	0014e980 	call	14e98 <OSMboxCreate>
     8f8:	d0a7d215 	stw	r2,-24760(gp)
  MBoxCounter = OSMboxCreate((void *)0);
     8fc:	0009883a 	mov	r4,zero
     900:	0014e980 	call	14e98 <OSMboxCreate>
     904:	d0a7d015 	stw	r2,-24768(gp)

  OSStart();
     908:	00120ac0 	call	120ac <OSStart>

  return 0;
     90c:	0005883a 	mov	r2,zero
}
     910:	e037883a 	mov	sp,fp
     914:	dfc00117 	ldw	ra,4(sp)
     918:	df000017 	ldw	fp,0(sp)
     91c:	dec00204 	addi	sp,sp,8
     920:	f800283a 	ret

00000924 <_printf_r>:
     924:	defffd04 	addi	sp,sp,-12
     928:	2805883a 	mov	r2,r5
     92c:	dfc00015 	stw	ra,0(sp)
     930:	d9800115 	stw	r6,4(sp)
     934:	d9c00215 	stw	r7,8(sp)
     938:	21400217 	ldw	r5,8(r4)
     93c:	d9c00104 	addi	r7,sp,4
     940:	100d883a 	mov	r6,r2
     944:	0002d980 	call	2d98 <___vfprintf_internal_r>
     948:	dfc00017 	ldw	ra,0(sp)
     94c:	dec00304 	addi	sp,sp,12
     950:	f800283a 	ret

00000954 <printf>:
     954:	defffc04 	addi	sp,sp,-16
     958:	dfc00015 	stw	ra,0(sp)
     95c:	d9400115 	stw	r5,4(sp)
     960:	d9800215 	stw	r6,8(sp)
     964:	d9c00315 	stw	r7,12(sp)
     968:	008000b4 	movhi	r2,2
     96c:	10bf8204 	addi	r2,r2,-504
     970:	10800017 	ldw	r2,0(r2)
     974:	200b883a 	mov	r5,r4
     978:	d9800104 	addi	r6,sp,4
     97c:	11000217 	ldw	r4,8(r2)
     980:	0004f900 	call	4f90 <__vfprintf_internal>
     984:	dfc00017 	ldw	ra,0(sp)
     988:	dec00404 	addi	sp,sp,16
     98c:	f800283a 	ret

00000990 <_puts_r>:
     990:	defff604 	addi	sp,sp,-40
     994:	dc000715 	stw	r16,28(sp)
     998:	2021883a 	mov	r16,r4
     99c:	2809883a 	mov	r4,r5
     9a0:	dc400815 	stw	r17,32(sp)
     9a4:	dfc00915 	stw	ra,36(sp)
     9a8:	2823883a 	mov	r17,r5
     9ac:	0000b280 	call	b28 <strlen>
     9b0:	10c00044 	addi	r3,r2,1
     9b4:	d8800115 	stw	r2,4(sp)
     9b8:	008000b4 	movhi	r2,2
     9bc:	10b6a604 	addi	r2,r2,-9576
     9c0:	d8800215 	stw	r2,8(sp)
     9c4:	00800044 	movi	r2,1
     9c8:	d8800315 	stw	r2,12(sp)
     9cc:	00800084 	movi	r2,2
     9d0:	dc400015 	stw	r17,0(sp)
     9d4:	d8c00615 	stw	r3,24(sp)
     9d8:	dec00415 	stw	sp,16(sp)
     9dc:	d8800515 	stw	r2,20(sp)
     9e0:	80000226 	beq	r16,zero,9ec <_puts_r+0x5c>
     9e4:	80800e17 	ldw	r2,56(r16)
     9e8:	10001426 	beq	r2,zero,a3c <_puts_r+0xac>
     9ec:	81400217 	ldw	r5,8(r16)
     9f0:	2880030b 	ldhu	r2,12(r5)
     9f4:	10c8000c 	andi	r3,r2,8192
     9f8:	1800061e 	bne	r3,zero,a14 <_puts_r+0x84>
     9fc:	29001917 	ldw	r4,100(r5)
     a00:	00f7ffc4 	movi	r3,-8193
     a04:	10880014 	ori	r2,r2,8192
     a08:	20c6703a 	and	r3,r4,r3
     a0c:	2880030d 	sth	r2,12(r5)
     a10:	28c01915 	stw	r3,100(r5)
     a14:	d9800404 	addi	r6,sp,16
     a18:	8009883a 	mov	r4,r16
     a1c:	00074c00 	call	74c0 <__sfvwrite_r>
     a20:	1000091e 	bne	r2,zero,a48 <_puts_r+0xb8>
     a24:	00800284 	movi	r2,10
     a28:	dfc00917 	ldw	ra,36(sp)
     a2c:	dc400817 	ldw	r17,32(sp)
     a30:	dc000717 	ldw	r16,28(sp)
     a34:	dec00a04 	addi	sp,sp,40
     a38:	f800283a 	ret
     a3c:	8009883a 	mov	r4,r16
     a40:	000703c0 	call	703c <__sinit>
     a44:	003fe906 	br	9ec <_puts_r+0x5c>
     a48:	00bfffc4 	movi	r2,-1
     a4c:	003ff606 	br	a28 <_puts_r+0x98>

00000a50 <puts>:
     a50:	008000b4 	movhi	r2,2
     a54:	10bf8204 	addi	r2,r2,-504
     a58:	200b883a 	mov	r5,r4
     a5c:	11000017 	ldw	r4,0(r2)
     a60:	00009901 	jmpi	990 <_puts_r>

00000a64 <_sprintf_r>:
     a64:	deffe404 	addi	sp,sp,-112
     a68:	2807883a 	mov	r3,r5
     a6c:	dfc01a15 	stw	ra,104(sp)
     a70:	d9c01b15 	stw	r7,108(sp)
     a74:	00a00034 	movhi	r2,32768
     a78:	10bfffc4 	addi	r2,r2,-1
     a7c:	02008204 	movi	r8,520
     a80:	d8800215 	stw	r2,8(sp)
     a84:	d8800515 	stw	r2,20(sp)
     a88:	d9c01b04 	addi	r7,sp,108
     a8c:	d80b883a 	mov	r5,sp
     a90:	00bfffc4 	movi	r2,-1
     a94:	d8c00015 	stw	r3,0(sp)
     a98:	d8c00415 	stw	r3,16(sp)
     a9c:	da00030d 	sth	r8,12(sp)
     aa0:	d880038d 	sth	r2,14(sp)
     aa4:	0000bc00 	call	bc0 <___svfprintf_internal_r>
     aa8:	d8c00017 	ldw	r3,0(sp)
     aac:	18000005 	stb	zero,0(r3)
     ab0:	dfc01a17 	ldw	ra,104(sp)
     ab4:	dec01c04 	addi	sp,sp,112
     ab8:	f800283a 	ret

00000abc <sprintf>:
     abc:	deffe304 	addi	sp,sp,-116
     ac0:	2007883a 	mov	r3,r4
     ac4:	dfc01a15 	stw	ra,104(sp)
     ac8:	d9801b15 	stw	r6,108(sp)
     acc:	d9c01c15 	stw	r7,112(sp)
     ad0:	010000b4 	movhi	r4,2
     ad4:	213f8204 	addi	r4,r4,-504
     ad8:	21000017 	ldw	r4,0(r4)
     adc:	00a00034 	movhi	r2,32768
     ae0:	10bfffc4 	addi	r2,r2,-1
     ae4:	280d883a 	mov	r6,r5
     ae8:	02008204 	movi	r8,520
     aec:	d8800215 	stw	r2,8(sp)
     af0:	d8800515 	stw	r2,20(sp)
     af4:	d9c01b04 	addi	r7,sp,108
     af8:	d80b883a 	mov	r5,sp
     afc:	00bfffc4 	movi	r2,-1
     b00:	d8c00015 	stw	r3,0(sp)
     b04:	d8c00415 	stw	r3,16(sp)
     b08:	da00030d 	sth	r8,12(sp)
     b0c:	d880038d 	sth	r2,14(sp)
     b10:	0000bc00 	call	bc0 <___svfprintf_internal_r>
     b14:	d8c00017 	ldw	r3,0(sp)
     b18:	18000005 	stb	zero,0(r3)
     b1c:	dfc01a17 	ldw	ra,104(sp)
     b20:	dec01d04 	addi	sp,sp,116
     b24:	f800283a 	ret

00000b28 <strlen>:
     b28:	208000cc 	andi	r2,r4,3
     b2c:	10002026 	beq	r2,zero,bb0 <strlen+0x88>
     b30:	20800007 	ldb	r2,0(r4)
     b34:	10002026 	beq	r2,zero,bb8 <strlen+0x90>
     b38:	2005883a 	mov	r2,r4
     b3c:	00000206 	br	b48 <strlen+0x20>
     b40:	10c00007 	ldb	r3,0(r2)
     b44:	18001826 	beq	r3,zero,ba8 <strlen+0x80>
     b48:	10800044 	addi	r2,r2,1
     b4c:	10c000cc 	andi	r3,r2,3
     b50:	183ffb1e 	bne	r3,zero,b40 <strlen+0x18>
     b54:	10c00017 	ldw	r3,0(r2)
     b58:	01ffbff4 	movhi	r7,65279
     b5c:	39ffbfc4 	addi	r7,r7,-257
     b60:	00ca303a 	nor	r5,zero,r3
     b64:	01a02074 	movhi	r6,32897
     b68:	19c7883a 	add	r3,r3,r7
     b6c:	31a02004 	addi	r6,r6,-32640
     b70:	1946703a 	and	r3,r3,r5
     b74:	1986703a 	and	r3,r3,r6
     b78:	1800091e 	bne	r3,zero,ba0 <strlen+0x78>
     b7c:	10800104 	addi	r2,r2,4
     b80:	10c00017 	ldw	r3,0(r2)
     b84:	19cb883a 	add	r5,r3,r7
     b88:	00c6303a 	nor	r3,zero,r3
     b8c:	28c6703a 	and	r3,r5,r3
     b90:	1986703a 	and	r3,r3,r6
     b94:	183ff926 	beq	r3,zero,b7c <strlen+0x54>
     b98:	00000106 	br	ba0 <strlen+0x78>
     b9c:	10800044 	addi	r2,r2,1
     ba0:	10c00007 	ldb	r3,0(r2)
     ba4:	183ffd1e 	bne	r3,zero,b9c <strlen+0x74>
     ba8:	1105c83a 	sub	r2,r2,r4
     bac:	f800283a 	ret
     bb0:	2005883a 	mov	r2,r4
     bb4:	003fe706 	br	b54 <strlen+0x2c>
     bb8:	0005883a 	mov	r2,zero
     bbc:	f800283a 	ret

00000bc0 <___svfprintf_internal_r>:
     bc0:	deffb704 	addi	sp,sp,-292
     bc4:	dfc04815 	stw	ra,288(sp)
     bc8:	ddc04615 	stw	r23,280(sp)
     bcc:	d9402c15 	stw	r5,176(sp)
     bd0:	d9003915 	stw	r4,228(sp)
     bd4:	302f883a 	mov	r23,r6
     bd8:	d9c02d15 	stw	r7,180(sp)
     bdc:	df004715 	stw	fp,284(sp)
     be0:	dd804515 	stw	r22,276(sp)
     be4:	dd404415 	stw	r21,272(sp)
     be8:	dd004315 	stw	r20,268(sp)
     bec:	dcc04215 	stw	r19,264(sp)
     bf0:	dc804115 	stw	r18,260(sp)
     bf4:	dc404015 	stw	r17,256(sp)
     bf8:	dc003f15 	stw	r16,252(sp)
     bfc:	0007bb00 	call	7bb0 <_localeconv_r>
     c00:	10800017 	ldw	r2,0(r2)
     c04:	1009883a 	mov	r4,r2
     c08:	d8803415 	stw	r2,208(sp)
     c0c:	0000b280 	call	b28 <strlen>
     c10:	d8c02c17 	ldw	r3,176(sp)
     c14:	d8803815 	stw	r2,224(sp)
     c18:	1880030b 	ldhu	r2,12(r3)
     c1c:	1080200c 	andi	r2,r2,128
     c20:	10000226 	beq	r2,zero,c2c <___svfprintf_internal_r+0x6c>
     c24:	18800417 	ldw	r2,16(r3)
     c28:	10067f26 	beq	r2,zero,2628 <___svfprintf_internal_r+0x1a68>
     c2c:	dcc03917 	ldw	r19,228(sp)
     c30:	d8c00404 	addi	r3,sp,16
     c34:	054000b4 	movhi	r21,2
     c38:	d9001e04 	addi	r4,sp,120
     c3c:	ad76b784 	addi	r21,r21,-9506
     c40:	d8c01e15 	stw	r3,120(sp)
     c44:	d8002015 	stw	zero,128(sp)
     c48:	d8001f15 	stw	zero,124(sp)
     c4c:	d8003315 	stw	zero,204(sp)
     c50:	d8003615 	stw	zero,216(sp)
     c54:	d8003715 	stw	zero,220(sp)
     c58:	1811883a 	mov	r8,r3
     c5c:	d8003a15 	stw	zero,232(sp)
     c60:	d8003b15 	stw	zero,236(sp)
     c64:	d8002f15 	stw	zero,188(sp)
     c68:	d9002815 	stw	r4,160(sp)
     c6c:	b8800007 	ldb	r2,0(r23)
     c70:	10026726 	beq	r2,zero,1610 <___svfprintf_internal_r+0xa50>
     c74:	00c00944 	movi	r3,37
     c78:	b821883a 	mov	r16,r23
     c7c:	10c0021e 	bne	r2,r3,c88 <___svfprintf_internal_r+0xc8>
     c80:	00001406 	br	cd4 <___svfprintf_internal_r+0x114>
     c84:	10c00326 	beq	r2,r3,c94 <___svfprintf_internal_r+0xd4>
     c88:	84000044 	addi	r16,r16,1
     c8c:	80800007 	ldb	r2,0(r16)
     c90:	103ffc1e 	bne	r2,zero,c84 <___svfprintf_internal_r+0xc4>
     c94:	85e3c83a 	sub	r17,r16,r23
     c98:	88000e26 	beq	r17,zero,cd4 <___svfprintf_internal_r+0x114>
     c9c:	d8c02017 	ldw	r3,128(sp)
     ca0:	d8801f17 	ldw	r2,124(sp)
     ca4:	45c00015 	stw	r23,0(r8)
     ca8:	1c47883a 	add	r3,r3,r17
     cac:	10800044 	addi	r2,r2,1
     cb0:	d8c02015 	stw	r3,128(sp)
     cb4:	44400115 	stw	r17,4(r8)
     cb8:	d8801f15 	stw	r2,124(sp)
     cbc:	00c001c4 	movi	r3,7
     cc0:	18809716 	blt	r3,r2,f20 <___svfprintf_internal_r+0x360>
     cc4:	42000204 	addi	r8,r8,8
     cc8:	d9402f17 	ldw	r5,188(sp)
     ccc:	2c4b883a 	add	r5,r5,r17
     cd0:	d9402f15 	stw	r5,188(sp)
     cd4:	80800007 	ldb	r2,0(r16)
     cd8:	10009826 	beq	r2,zero,f3c <___svfprintf_internal_r+0x37c>
     cdc:	84400047 	ldb	r17,1(r16)
     ce0:	00bfffc4 	movi	r2,-1
     ce4:	85c00044 	addi	r23,r16,1
     ce8:	d8002785 	stb	zero,158(sp)
     cec:	0007883a 	mov	r3,zero
     cf0:	000f883a 	mov	r7,zero
     cf4:	d8802915 	stw	r2,164(sp)
     cf8:	d8003115 	stw	zero,196(sp)
     cfc:	0025883a 	mov	r18,zero
     d00:	01401604 	movi	r5,88
     d04:	01800244 	movi	r6,9
     d08:	02800a84 	movi	r10,42
     d0c:	02401b04 	movi	r9,108
     d10:	bdc00044 	addi	r23,r23,1
     d14:	88bff804 	addi	r2,r17,-32
     d18:	2882f036 	bltu	r5,r2,18dc <___svfprintf_internal_r+0xd1c>
     d1c:	100490ba 	slli	r2,r2,2
     d20:	01000034 	movhi	r4,0
     d24:	21034d04 	addi	r4,r4,3380
     d28:	1105883a 	add	r2,r2,r4
     d2c:	10800017 	ldw	r2,0(r2)
     d30:	1000683a 	jmp	r2
     d34:	00001844 	movi	zero,97
     d38:	000018dc 	xori	zero,zero,99
     d3c:	000018dc 	xori	zero,zero,99
     d40:	00001838 	rdprs	zero,zero,96
     d44:	000018dc 	xori	zero,zero,99
     d48:	000018dc 	xori	zero,zero,99
     d4c:	000018dc 	xori	zero,zero,99
     d50:	000018dc 	xori	zero,zero,99
     d54:	000018dc 	xori	zero,zero,99
     d58:	000018dc 	xori	zero,zero,99
     d5c:	00000f98 	cmpnei	zero,zero,62
     d60:	00001774 	movhi	zero,93
     d64:	000018dc 	xori	zero,zero,99
     d68:	00000ea8 	cmpgeui	zero,zero,58
     d6c:	00000fc0 	call	fc <alt_irq_handler>
     d70:	000018dc 	xori	zero,zero,99
     d74:	00001034 	movhi	zero,64
     d78:	00001000 	call	100 <alt_irq_handler+0x4>
     d7c:	00001000 	call	100 <alt_irq_handler+0x4>
     d80:	00001000 	call	100 <alt_irq_handler+0x4>
     d84:	00001000 	call	100 <alt_irq_handler+0x4>
     d88:	00001000 	call	100 <alt_irq_handler+0x4>
     d8c:	00001000 	call	100 <alt_irq_handler+0x4>
     d90:	00001000 	call	100 <alt_irq_handler+0x4>
     d94:	00001000 	call	100 <alt_irq_handler+0x4>
     d98:	00001000 	call	100 <alt_irq_handler+0x4>
     d9c:	000018dc 	xori	zero,zero,99
     da0:	000018dc 	xori	zero,zero,99
     da4:	000018dc 	xori	zero,zero,99
     da8:	000018dc 	xori	zero,zero,99
     dac:	000018dc 	xori	zero,zero,99
     db0:	000018dc 	xori	zero,zero,99
     db4:	000018dc 	xori	zero,zero,99
     db8:	000018dc 	xori	zero,zero,99
     dbc:	000018dc 	xori	zero,zero,99
     dc0:	000018dc 	xori	zero,zero,99
     dc4:	000010ec 	andhi	zero,zero,67
     dc8:	00001040 	call	104 <alt_irq_handler+0x8>
     dcc:	000018dc 	xori	zero,zero,99
     dd0:	00001040 	call	104 <alt_irq_handler+0x8>
     dd4:	000018dc 	xori	zero,zero,99
     dd8:	000018dc 	xori	zero,zero,99
     ddc:	000018dc 	xori	zero,zero,99
     de0:	000018dc 	xori	zero,zero,99
     de4:	000010e0 	cmpeqi	zero,zero,67
     de8:	000018dc 	xori	zero,zero,99
     dec:	000018dc 	xori	zero,zero,99
     df0:	000011a8 	cmpgeui	zero,zero,70
     df4:	000018dc 	xori	zero,zero,99
     df8:	000018dc 	xori	zero,zero,99
     dfc:	000018dc 	xori	zero,zero,99
     e00:	000018dc 	xori	zero,zero,99
     e04:	000018dc 	xori	zero,zero,99
     e08:	00001618 	cmpnei	zero,zero,88
     e0c:	000018dc 	xori	zero,zero,99
     e10:	000018dc 	xori	zero,zero,99
     e14:	00001678 	rdprs	zero,zero,89
     e18:	000018dc 	xori	zero,zero,99
     e1c:	000018dc 	xori	zero,zero,99
     e20:	000018dc 	xori	zero,zero,99
     e24:	000018dc 	xori	zero,zero,99
     e28:	000018dc 	xori	zero,zero,99
     e2c:	000018dc 	xori	zero,zero,99
     e30:	000018dc 	xori	zero,zero,99
     e34:	000018dc 	xori	zero,zero,99
     e38:	000018dc 	xori	zero,zero,99
     e3c:	000018dc 	xori	zero,zero,99
     e40:	00001728 	cmpgeui	zero,zero,92
     e44:	00001864 	muli	zero,zero,97
     e48:	00001040 	call	104 <alt_irq_handler+0x8>
     e4c:	00001040 	call	104 <alt_irq_handler+0x8>
     e50:	00001040 	call	104 <alt_irq_handler+0x8>
     e54:	000018b8 	rdprs	zero,zero,98
     e58:	00001864 	muli	zero,zero,97
     e5c:	000018dc 	xori	zero,zero,99
     e60:	000018dc 	xori	zero,zero,99
     e64:	00001874 	movhi	zero,97
     e68:	000018dc 	xori	zero,zero,99
     e6c:	00001884 	movi	zero,98
     e70:	00001764 	muli	zero,zero,93
     e74:	00000eb4 	movhi	zero,58
     e78:	00001784 	movi	zero,94
     e7c:	000018dc 	xori	zero,zero,99
     e80:	00001790 	cmplti	zero,zero,94
     e84:	000018dc 	xori	zero,zero,99
     e88:	000017ec 	andhi	zero,zero,95
     e8c:	000018dc 	xori	zero,zero,99
     e90:	000018dc 	xori	zero,zero,99
     e94:	000017fc 	xorhi	zero,zero,95
     e98:	d9003117 	ldw	r4,196(sp)
     e9c:	d8802d15 	stw	r2,180(sp)
     ea0:	0109c83a 	sub	r4,zero,r4
     ea4:	d9003115 	stw	r4,196(sp)
     ea8:	94800114 	ori	r18,r18,4
     eac:	bc400007 	ldb	r17,0(r23)
     eb0:	003f9706 	br	d10 <___svfprintf_internal_r+0x150>
     eb4:	00800c04 	movi	r2,48
     eb8:	d9002d17 	ldw	r4,180(sp)
     ebc:	d9402917 	ldw	r5,164(sp)
     ec0:	d8802705 	stb	r2,156(sp)
     ec4:	00801e04 	movi	r2,120
     ec8:	d8802745 	stb	r2,157(sp)
     ecc:	d8002785 	stb	zero,158(sp)
     ed0:	20c00104 	addi	r3,r4,4
     ed4:	25000017 	ldw	r20,0(r4)
     ed8:	002d883a 	mov	r22,zero
     edc:	90800094 	ori	r2,r18,2
     ee0:	28028616 	blt	r5,zero,18fc <___svfprintf_internal_r+0xd3c>
     ee4:	00bfdfc4 	movi	r2,-129
     ee8:	90a4703a 	and	r18,r18,r2
     eec:	d8c02d15 	stw	r3,180(sp)
     ef0:	94800094 	ori	r18,r18,2
     ef4:	a002731e 	bne	r20,zero,18c4 <___svfprintf_internal_r+0xd04>
     ef8:	008000b4 	movhi	r2,2
     efc:	10b6b004 	addi	r2,r2,-9536
     f00:	d8803a15 	stw	r2,232(sp)
     f04:	04401e04 	movi	r17,120
     f08:	d8c02917 	ldw	r3,164(sp)
     f0c:	0039883a 	mov	fp,zero
     f10:	1801d526 	beq	r3,zero,1668 <___svfprintf_internal_r+0xaa8>
     f14:	0029883a 	mov	r20,zero
     f18:	002d883a 	mov	r22,zero
     f1c:	0001f106 	br	16e4 <___svfprintf_internal_r+0xb24>
     f20:	d9402c17 	ldw	r5,176(sp)
     f24:	d9801e04 	addi	r6,sp,120
     f28:	9809883a 	mov	r4,r19
     f2c:	000a2980 	call	a298 <__ssprint_r>
     f30:	1000081e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
     f34:	da000404 	addi	r8,sp,16
     f38:	003f6306 	br	cc8 <___svfprintf_internal_r+0x108>
     f3c:	d8802017 	ldw	r2,128(sp)
     f40:	10000426 	beq	r2,zero,f54 <___svfprintf_internal_r+0x394>
     f44:	d9402c17 	ldw	r5,176(sp)
     f48:	d9003917 	ldw	r4,228(sp)
     f4c:	d9801e04 	addi	r6,sp,120
     f50:	000a2980 	call	a298 <__ssprint_r>
     f54:	d8802c17 	ldw	r2,176(sp)
     f58:	10c0030b 	ldhu	r3,12(r2)
     f5c:	d8802f17 	ldw	r2,188(sp)
     f60:	18c0100c 	andi	r3,r3,64
     f64:	1805f51e 	bne	r3,zero,273c <___svfprintf_internal_r+0x1b7c>
     f68:	dfc04817 	ldw	ra,288(sp)
     f6c:	df004717 	ldw	fp,284(sp)
     f70:	ddc04617 	ldw	r23,280(sp)
     f74:	dd804517 	ldw	r22,276(sp)
     f78:	dd404417 	ldw	r21,272(sp)
     f7c:	dd004317 	ldw	r20,268(sp)
     f80:	dcc04217 	ldw	r19,264(sp)
     f84:	dc804117 	ldw	r18,260(sp)
     f88:	dc404017 	ldw	r17,256(sp)
     f8c:	dc003f17 	ldw	r16,252(sp)
     f90:	dec04904 	addi	sp,sp,292
     f94:	f800283a 	ret
     f98:	d8802d17 	ldw	r2,180(sp)
     f9c:	d9002d17 	ldw	r4,180(sp)
     fa0:	10800017 	ldw	r2,0(r2)
     fa4:	d8803115 	stw	r2,196(sp)
     fa8:	20800104 	addi	r2,r4,4
     fac:	d9003117 	ldw	r4,196(sp)
     fb0:	203fb916 	blt	r4,zero,e98 <___svfprintf_internal_r+0x2d8>
     fb4:	d8802d15 	stw	r2,180(sp)
     fb8:	bc400007 	ldb	r17,0(r23)
     fbc:	003f5406 	br	d10 <___svfprintf_internal_r+0x150>
     fc0:	bc400007 	ldb	r17,0(r23)
     fc4:	bac00044 	addi	r11,r23,1
     fc8:	8a873926 	beq	r17,r10,2cb0 <___svfprintf_internal_r+0x20f0>
     fcc:	88bff404 	addi	r2,r17,-48
     fd0:	0009883a 	mov	r4,zero
     fd4:	30868836 	bltu	r6,r2,29f8 <___svfprintf_internal_r+0x1e38>
     fd8:	5c400007 	ldb	r17,0(r11)
     fdc:	210002a4 	muli	r4,r4,10
     fe0:	5dc00044 	addi	r23,r11,1
     fe4:	b817883a 	mov	r11,r23
     fe8:	2089883a 	add	r4,r4,r2
     fec:	88bff404 	addi	r2,r17,-48
     ff0:	30bff92e 	bgeu	r6,r2,fd8 <___svfprintf_internal_r+0x418>
     ff4:	2005d716 	blt	r4,zero,2754 <___svfprintf_internal_r+0x1b94>
     ff8:	d9002915 	stw	r4,164(sp)
     ffc:	003f4506 	br	d14 <___svfprintf_internal_r+0x154>
    1000:	b809883a 	mov	r4,r23
    1004:	d8003115 	stw	zero,196(sp)
    1008:	88bff404 	addi	r2,r17,-48
    100c:	0017883a 	mov	r11,zero
    1010:	24400007 	ldb	r17,0(r4)
    1014:	5ac002a4 	muli	r11,r11,10
    1018:	bdc00044 	addi	r23,r23,1
    101c:	b809883a 	mov	r4,r23
    1020:	12d7883a 	add	r11,r2,r11
    1024:	88bff404 	addi	r2,r17,-48
    1028:	30bff92e 	bgeu	r6,r2,1010 <___svfprintf_internal_r+0x450>
    102c:	dac03115 	stw	r11,196(sp)
    1030:	003f3806 	br	d14 <___svfprintf_internal_r+0x154>
    1034:	94802014 	ori	r18,r18,128
    1038:	bc400007 	ldb	r17,0(r23)
    103c:	003f3406 	br	d10 <___svfprintf_internal_r+0x150>
    1040:	18c03fcc 	andi	r3,r3,255
    1044:	1807471e 	bne	r3,zero,2d64 <___svfprintf_internal_r+0x21a4>
    1048:	9080020c 	andi	r2,r18,8
    104c:	10047d26 	beq	r2,zero,2244 <___svfprintf_internal_r+0x1684>
    1050:	d8c02d17 	ldw	r3,180(sp)
    1054:	d9002d17 	ldw	r4,180(sp)
    1058:	d9402d17 	ldw	r5,180(sp)
    105c:	18c00017 	ldw	r3,0(r3)
    1060:	21000117 	ldw	r4,4(r4)
    1064:	29400204 	addi	r5,r5,8
    1068:	d8c03615 	stw	r3,216(sp)
    106c:	d9003715 	stw	r4,220(sp)
    1070:	d9402d15 	stw	r5,180(sp)
    1074:	d9003617 	ldw	r4,216(sp)
    1078:	d9403717 	ldw	r5,220(sp)
    107c:	da003e15 	stw	r8,248(sp)
    1080:	04000044 	movi	r16,1
    1084:	0009fb80 	call	9fb8 <__fpclassifyd>
    1088:	da003e17 	ldw	r8,248(sp)
    108c:	14044b1e 	bne	r2,r16,21bc <___svfprintf_internal_r+0x15fc>
    1090:	d9003617 	ldw	r4,216(sp)
    1094:	d9403717 	ldw	r5,220(sp)
    1098:	000d883a 	mov	r6,zero
    109c:	000f883a 	mov	r7,zero
    10a0:	000f57c0 	call	f57c <__ledf2>
    10a4:	da003e17 	ldw	r8,248(sp)
    10a8:	1005f316 	blt	r2,zero,2878 <___svfprintf_internal_r+0x1cb8>
    10ac:	df002783 	ldbu	fp,158(sp)
    10b0:	008011c4 	movi	r2,71
    10b4:	1445590e 	bge	r2,r17,261c <___svfprintf_internal_r+0x1a5c>
    10b8:	040000b4 	movhi	r16,2
    10bc:	8436a804 	addi	r16,r16,-9568
    10c0:	00c000c4 	movi	r3,3
    10c4:	00bfdfc4 	movi	r2,-129
    10c8:	d8c02a15 	stw	r3,168(sp)
    10cc:	90a4703a 	and	r18,r18,r2
    10d0:	d8c02e15 	stw	r3,184(sp)
    10d4:	d8002915 	stw	zero,164(sp)
    10d8:	d8003215 	stw	zero,200(sp)
    10dc:	00006606 	br	1278 <___svfprintf_internal_r+0x6b8>
    10e0:	94800214 	ori	r18,r18,8
    10e4:	bc400007 	ldb	r17,0(r23)
    10e8:	003f0906 	br	d10 <___svfprintf_internal_r+0x150>
    10ec:	18c03fcc 	andi	r3,r3,255
    10f0:	1807181e 	bne	r3,zero,2d54 <___svfprintf_internal_r+0x2194>
    10f4:	94800414 	ori	r18,r18,16
    10f8:	9080080c 	andi	r2,r18,32
    10fc:	10039626 	beq	r2,zero,1f58 <___svfprintf_internal_r+0x1398>
    1100:	d9402d17 	ldw	r5,180(sp)
    1104:	28800117 	ldw	r2,4(r5)
    1108:	2d000017 	ldw	r20,0(r5)
    110c:	29400204 	addi	r5,r5,8
    1110:	d9402d15 	stw	r5,180(sp)
    1114:	102d883a 	mov	r22,r2
    1118:	10039816 	blt	r2,zero,1f7c <___svfprintf_internal_r+0x13bc>
    111c:	d9402917 	ldw	r5,164(sp)
    1120:	df002783 	ldbu	fp,158(sp)
    1124:	2803ab16 	blt	r5,zero,1fd4 <___svfprintf_internal_r+0x1414>
    1128:	00ffdfc4 	movi	r3,-129
    112c:	a584b03a 	or	r2,r20,r22
    1130:	90e4703a 	and	r18,r18,r3
    1134:	10014a26 	beq	r2,zero,1660 <___svfprintf_internal_r+0xaa0>
    1138:	b0034b26 	beq	r22,zero,1e68 <___svfprintf_internal_r+0x12a8>
    113c:	dc402a15 	stw	r17,168(sp)
    1140:	dc001e04 	addi	r16,sp,120
    1144:	b023883a 	mov	r17,r22
    1148:	402d883a 	mov	r22,r8
    114c:	a009883a 	mov	r4,r20
    1150:	880b883a 	mov	r5,r17
    1154:	01800284 	movi	r6,10
    1158:	000f883a 	mov	r7,zero
    115c:	000db980 	call	db98 <__umoddi3>
    1160:	10800c04 	addi	r2,r2,48
    1164:	843fffc4 	addi	r16,r16,-1
    1168:	a009883a 	mov	r4,r20
    116c:	880b883a 	mov	r5,r17
    1170:	80800005 	stb	r2,0(r16)
    1174:	01800284 	movi	r6,10
    1178:	000f883a 	mov	r7,zero
    117c:	000d6200 	call	d620 <__udivdi3>
    1180:	1029883a 	mov	r20,r2
    1184:	10c4b03a 	or	r2,r2,r3
    1188:	1823883a 	mov	r17,r3
    118c:	103fef1e 	bne	r2,zero,114c <___svfprintf_internal_r+0x58c>
    1190:	d8c02817 	ldw	r3,160(sp)
    1194:	dc402a17 	ldw	r17,168(sp)
    1198:	b011883a 	mov	r8,r22
    119c:	1c07c83a 	sub	r3,r3,r16
    11a0:	d8c02e15 	stw	r3,184(sp)
    11a4:	00002e06 	br	1260 <___svfprintf_internal_r+0x6a0>
    11a8:	18c03fcc 	andi	r3,r3,255
    11ac:	1806e71e 	bne	r3,zero,2d4c <___svfprintf_internal_r+0x218c>
    11b0:	94800414 	ori	r18,r18,16
    11b4:	9080080c 	andi	r2,r18,32
    11b8:	1002d426 	beq	r2,zero,1d0c <___svfprintf_internal_r+0x114c>
    11bc:	d9402d17 	ldw	r5,180(sp)
    11c0:	d8c02917 	ldw	r3,164(sp)
    11c4:	d8002785 	stb	zero,158(sp)
    11c8:	28800204 	addi	r2,r5,8
    11cc:	2d000017 	ldw	r20,0(r5)
    11d0:	2d800117 	ldw	r22,4(r5)
    11d4:	18041516 	blt	r3,zero,222c <___svfprintf_internal_r+0x166c>
    11d8:	013fdfc4 	movi	r4,-129
    11dc:	a586b03a 	or	r3,r20,r22
    11e0:	d8802d15 	stw	r2,180(sp)
    11e4:	9124703a 	and	r18,r18,r4
    11e8:	1802d51e 	bne	r3,zero,1d40 <___svfprintf_internal_r+0x1180>
    11ec:	d9402917 	ldw	r5,164(sp)
    11f0:	0039883a 	mov	fp,zero
    11f4:	2806be26 	beq	r5,zero,2cf0 <___svfprintf_internal_r+0x2130>
    11f8:	0029883a 	mov	r20,zero
    11fc:	002d883a 	mov	r22,zero
    1200:	dc001e04 	addi	r16,sp,120
    1204:	a006d0fa 	srli	r3,r20,3
    1208:	b008977a 	slli	r4,r22,29
    120c:	b02cd0fa 	srli	r22,r22,3
    1210:	a50001cc 	andi	r20,r20,7
    1214:	a0800c04 	addi	r2,r20,48
    1218:	843fffc4 	addi	r16,r16,-1
    121c:	20e8b03a 	or	r20,r4,r3
    1220:	80800005 	stb	r2,0(r16)
    1224:	a586b03a 	or	r3,r20,r22
    1228:	183ff61e 	bne	r3,zero,1204 <___svfprintf_internal_r+0x644>
    122c:	90c0004c 	andi	r3,r18,1
    1230:	18013926 	beq	r3,zero,1718 <___svfprintf_internal_r+0xb58>
    1234:	10803fcc 	andi	r2,r2,255
    1238:	1080201c 	xori	r2,r2,128
    123c:	10bfe004 	addi	r2,r2,-128
    1240:	00c00c04 	movi	r3,48
    1244:	10c13426 	beq	r2,r3,1718 <___svfprintf_internal_r+0xb58>
    1248:	80ffffc5 	stb	r3,-1(r16)
    124c:	d8c02817 	ldw	r3,160(sp)
    1250:	80bfffc4 	addi	r2,r16,-1
    1254:	1021883a 	mov	r16,r2
    1258:	1887c83a 	sub	r3,r3,r2
    125c:	d8c02e15 	stw	r3,184(sp)
    1260:	d8802e17 	ldw	r2,184(sp)
    1264:	d9002917 	ldw	r4,164(sp)
    1268:	1100010e 	bge	r2,r4,1270 <___svfprintf_internal_r+0x6b0>
    126c:	2005883a 	mov	r2,r4
    1270:	d8802a15 	stw	r2,168(sp)
    1274:	d8003215 	stw	zero,200(sp)
    1278:	e7003fcc 	andi	fp,fp,255
    127c:	e700201c 	xori	fp,fp,128
    1280:	e73fe004 	addi	fp,fp,-128
    1284:	e0000326 	beq	fp,zero,1294 <___svfprintf_internal_r+0x6d4>
    1288:	d8c02a17 	ldw	r3,168(sp)
    128c:	18c00044 	addi	r3,r3,1
    1290:	d8c02a15 	stw	r3,168(sp)
    1294:	90c0008c 	andi	r3,r18,2
    1298:	d8c02b15 	stw	r3,172(sp)
    129c:	18000326 	beq	r3,zero,12ac <___svfprintf_internal_r+0x6ec>
    12a0:	d8c02a17 	ldw	r3,168(sp)
    12a4:	18c00084 	addi	r3,r3,2
    12a8:	d8c02a15 	stw	r3,168(sp)
    12ac:	90c0210c 	andi	r3,r18,132
    12b0:	d8c03015 	stw	r3,192(sp)
    12b4:	1801a11e 	bne	r3,zero,193c <___svfprintf_internal_r+0xd7c>
    12b8:	d9003117 	ldw	r4,196(sp)
    12bc:	d8c02a17 	ldw	r3,168(sp)
    12c0:	20e9c83a 	sub	r20,r4,r3
    12c4:	05019d0e 	bge	zero,r20,193c <___svfprintf_internal_r+0xd7c>
    12c8:	02400404 	movi	r9,16
    12cc:	d8c02017 	ldw	r3,128(sp)
    12d0:	d8801f17 	ldw	r2,124(sp)
    12d4:	4d051b0e 	bge	r9,r20,2744 <___svfprintf_internal_r+0x1b84>
    12d8:	014000b4 	movhi	r5,2
    12dc:	2976bb84 	addi	r5,r5,-9490
    12e0:	dc403c15 	stw	r17,240(sp)
    12e4:	d9403515 	stw	r5,212(sp)
    12e8:	a023883a 	mov	r17,r20
    12ec:	482d883a 	mov	r22,r9
    12f0:	9029883a 	mov	r20,r18
    12f4:	070001c4 	movi	fp,7
    12f8:	8025883a 	mov	r18,r16
    12fc:	dc002c17 	ldw	r16,176(sp)
    1300:	00000306 	br	1310 <___svfprintf_internal_r+0x750>
    1304:	8c7ffc04 	addi	r17,r17,-16
    1308:	42000204 	addi	r8,r8,8
    130c:	b440130e 	bge	r22,r17,135c <___svfprintf_internal_r+0x79c>
    1310:	010000b4 	movhi	r4,2
    1314:	18c00404 	addi	r3,r3,16
    1318:	10800044 	addi	r2,r2,1
    131c:	2136bb84 	addi	r4,r4,-9490
    1320:	41000015 	stw	r4,0(r8)
    1324:	45800115 	stw	r22,4(r8)
    1328:	d8c02015 	stw	r3,128(sp)
    132c:	d8801f15 	stw	r2,124(sp)
    1330:	e0bff40e 	bge	fp,r2,1304 <___svfprintf_internal_r+0x744>
    1334:	d9801e04 	addi	r6,sp,120
    1338:	800b883a 	mov	r5,r16
    133c:	9809883a 	mov	r4,r19
    1340:	000a2980 	call	a298 <__ssprint_r>
    1344:	103f031e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    1348:	8c7ffc04 	addi	r17,r17,-16
    134c:	d8c02017 	ldw	r3,128(sp)
    1350:	d8801f17 	ldw	r2,124(sp)
    1354:	da000404 	addi	r8,sp,16
    1358:	b47fed16 	blt	r22,r17,1310 <___svfprintf_internal_r+0x750>
    135c:	9021883a 	mov	r16,r18
    1360:	a025883a 	mov	r18,r20
    1364:	8829883a 	mov	r20,r17
    1368:	dc403c17 	ldw	r17,240(sp)
    136c:	d9403517 	ldw	r5,212(sp)
    1370:	a0c7883a 	add	r3,r20,r3
    1374:	10800044 	addi	r2,r2,1
    1378:	41400015 	stw	r5,0(r8)
    137c:	45000115 	stw	r20,4(r8)
    1380:	d8c02015 	stw	r3,128(sp)
    1384:	d8801f15 	stw	r2,124(sp)
    1388:	010001c4 	movi	r4,7
    138c:	20829f16 	blt	r4,r2,1e0c <___svfprintf_internal_r+0x124c>
    1390:	df002787 	ldb	fp,158(sp)
    1394:	42000204 	addi	r8,r8,8
    1398:	e0000c26 	beq	fp,zero,13cc <___svfprintf_internal_r+0x80c>
    139c:	d8801f17 	ldw	r2,124(sp)
    13a0:	d9002784 	addi	r4,sp,158
    13a4:	18c00044 	addi	r3,r3,1
    13a8:	10800044 	addi	r2,r2,1
    13ac:	41000015 	stw	r4,0(r8)
    13b0:	01000044 	movi	r4,1
    13b4:	41000115 	stw	r4,4(r8)
    13b8:	d8c02015 	stw	r3,128(sp)
    13bc:	d8801f15 	stw	r2,124(sp)
    13c0:	010001c4 	movi	r4,7
    13c4:	20823816 	blt	r4,r2,1ca8 <___svfprintf_internal_r+0x10e8>
    13c8:	42000204 	addi	r8,r8,8
    13cc:	d8802b17 	ldw	r2,172(sp)
    13d0:	10000c26 	beq	r2,zero,1404 <___svfprintf_internal_r+0x844>
    13d4:	d8801f17 	ldw	r2,124(sp)
    13d8:	d9002704 	addi	r4,sp,156
    13dc:	18c00084 	addi	r3,r3,2
    13e0:	10800044 	addi	r2,r2,1
    13e4:	41000015 	stw	r4,0(r8)
    13e8:	01000084 	movi	r4,2
    13ec:	41000115 	stw	r4,4(r8)
    13f0:	d8c02015 	stw	r3,128(sp)
    13f4:	d8801f15 	stw	r2,124(sp)
    13f8:	010001c4 	movi	r4,7
    13fc:	20823216 	blt	r4,r2,1cc8 <___svfprintf_internal_r+0x1108>
    1400:	42000204 	addi	r8,r8,8
    1404:	d9003017 	ldw	r4,192(sp)
    1408:	00802004 	movi	r2,128
    140c:	20819726 	beq	r4,r2,1a6c <___svfprintf_internal_r+0xeac>
    1410:	d9402917 	ldw	r5,164(sp)
    1414:	d8802e17 	ldw	r2,184(sp)
    1418:	28adc83a 	sub	r22,r5,r2
    141c:	05802f0e 	bge	zero,r22,14dc <___svfprintf_internal_r+0x91c>
    1420:	07000404 	movi	fp,16
    1424:	d8801f17 	ldw	r2,124(sp)
    1428:	e583c00e 	bge	fp,r22,232c <___svfprintf_internal_r+0x176c>
    142c:	014000b4 	movhi	r5,2
    1430:	2976b784 	addi	r5,r5,-9506
    1434:	dc402915 	stw	r17,164(sp)
    1438:	d9402b15 	stw	r5,172(sp)
    143c:	b023883a 	mov	r17,r22
    1440:	050001c4 	movi	r20,7
    1444:	902d883a 	mov	r22,r18
    1448:	8025883a 	mov	r18,r16
    144c:	dc002c17 	ldw	r16,176(sp)
    1450:	00000306 	br	1460 <___svfprintf_internal_r+0x8a0>
    1454:	8c7ffc04 	addi	r17,r17,-16
    1458:	42000204 	addi	r8,r8,8
    145c:	e440110e 	bge	fp,r17,14a4 <___svfprintf_internal_r+0x8e4>
    1460:	18c00404 	addi	r3,r3,16
    1464:	10800044 	addi	r2,r2,1
    1468:	45400015 	stw	r21,0(r8)
    146c:	47000115 	stw	fp,4(r8)
    1470:	d8c02015 	stw	r3,128(sp)
    1474:	d8801f15 	stw	r2,124(sp)
    1478:	a0bff60e 	bge	r20,r2,1454 <___svfprintf_internal_r+0x894>
    147c:	d9801e04 	addi	r6,sp,120
    1480:	800b883a 	mov	r5,r16
    1484:	9809883a 	mov	r4,r19
    1488:	000a2980 	call	a298 <__ssprint_r>
    148c:	103eb11e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    1490:	8c7ffc04 	addi	r17,r17,-16
    1494:	d8c02017 	ldw	r3,128(sp)
    1498:	d8801f17 	ldw	r2,124(sp)
    149c:	da000404 	addi	r8,sp,16
    14a0:	e47fef16 	blt	fp,r17,1460 <___svfprintf_internal_r+0x8a0>
    14a4:	9021883a 	mov	r16,r18
    14a8:	b025883a 	mov	r18,r22
    14ac:	882d883a 	mov	r22,r17
    14b0:	dc402917 	ldw	r17,164(sp)
    14b4:	d9002b17 	ldw	r4,172(sp)
    14b8:	1d87883a 	add	r3,r3,r22
    14bc:	10800044 	addi	r2,r2,1
    14c0:	41000015 	stw	r4,0(r8)
    14c4:	45800115 	stw	r22,4(r8)
    14c8:	d8c02015 	stw	r3,128(sp)
    14cc:	d8801f15 	stw	r2,124(sp)
    14d0:	010001c4 	movi	r4,7
    14d4:	2081ec16 	blt	r4,r2,1c88 <___svfprintf_internal_r+0x10c8>
    14d8:	42000204 	addi	r8,r8,8
    14dc:	9080400c 	andi	r2,r18,256
    14e0:	1001181e 	bne	r2,zero,1944 <___svfprintf_internal_r+0xd84>
    14e4:	d9402e17 	ldw	r5,184(sp)
    14e8:	d8801f17 	ldw	r2,124(sp)
    14ec:	44000015 	stw	r16,0(r8)
    14f0:	1947883a 	add	r3,r3,r5
    14f4:	10800044 	addi	r2,r2,1
    14f8:	41400115 	stw	r5,4(r8)
    14fc:	d8c02015 	stw	r3,128(sp)
    1500:	d8801f15 	stw	r2,124(sp)
    1504:	010001c4 	movi	r4,7
    1508:	2081d116 	blt	r4,r2,1c50 <___svfprintf_internal_r+0x1090>
    150c:	42000204 	addi	r8,r8,8
    1510:	9480010c 	andi	r18,r18,4
    1514:	90003226 	beq	r18,zero,15e0 <___svfprintf_internal_r+0xa20>
    1518:	d9403117 	ldw	r5,196(sp)
    151c:	d8802a17 	ldw	r2,168(sp)
    1520:	28a1c83a 	sub	r16,r5,r2
    1524:	04002e0e 	bge	zero,r16,15e0 <___svfprintf_internal_r+0xa20>
    1528:	04400404 	movi	r17,16
    152c:	d8801f17 	ldw	r2,124(sp)
    1530:	8c04b90e 	bge	r17,r16,2818 <___svfprintf_internal_r+0x1c58>
    1534:	014000b4 	movhi	r5,2
    1538:	2976bb84 	addi	r5,r5,-9490
    153c:	d9403515 	stw	r5,212(sp)
    1540:	048001c4 	movi	r18,7
    1544:	dd002c17 	ldw	r20,176(sp)
    1548:	00000306 	br	1558 <___svfprintf_internal_r+0x998>
    154c:	843ffc04 	addi	r16,r16,-16
    1550:	42000204 	addi	r8,r8,8
    1554:	8c00130e 	bge	r17,r16,15a4 <___svfprintf_internal_r+0x9e4>
    1558:	010000b4 	movhi	r4,2
    155c:	18c00404 	addi	r3,r3,16
    1560:	10800044 	addi	r2,r2,1
    1564:	2136bb84 	addi	r4,r4,-9490
    1568:	41000015 	stw	r4,0(r8)
    156c:	44400115 	stw	r17,4(r8)
    1570:	d8c02015 	stw	r3,128(sp)
    1574:	d8801f15 	stw	r2,124(sp)
    1578:	90bff40e 	bge	r18,r2,154c <___svfprintf_internal_r+0x98c>
    157c:	d9801e04 	addi	r6,sp,120
    1580:	a00b883a 	mov	r5,r20
    1584:	9809883a 	mov	r4,r19
    1588:	000a2980 	call	a298 <__ssprint_r>
    158c:	103e711e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    1590:	843ffc04 	addi	r16,r16,-16
    1594:	d8c02017 	ldw	r3,128(sp)
    1598:	d8801f17 	ldw	r2,124(sp)
    159c:	da000404 	addi	r8,sp,16
    15a0:	8c3fed16 	blt	r17,r16,1558 <___svfprintf_internal_r+0x998>
    15a4:	d9403517 	ldw	r5,212(sp)
    15a8:	1c07883a 	add	r3,r3,r16
    15ac:	10800044 	addi	r2,r2,1
    15b0:	41400015 	stw	r5,0(r8)
    15b4:	44000115 	stw	r16,4(r8)
    15b8:	d8c02015 	stw	r3,128(sp)
    15bc:	d8801f15 	stw	r2,124(sp)
    15c0:	010001c4 	movi	r4,7
    15c4:	2080060e 	bge	r4,r2,15e0 <___svfprintf_internal_r+0xa20>
    15c8:	d9402c17 	ldw	r5,176(sp)
    15cc:	d9801e04 	addi	r6,sp,120
    15d0:	9809883a 	mov	r4,r19
    15d4:	000a2980 	call	a298 <__ssprint_r>
    15d8:	103e5e1e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    15dc:	d8c02017 	ldw	r3,128(sp)
    15e0:	d8803117 	ldw	r2,196(sp)
    15e4:	d9002a17 	ldw	r4,168(sp)
    15e8:	1100010e 	bge	r2,r4,15f0 <___svfprintf_internal_r+0xa30>
    15ec:	2005883a 	mov	r2,r4
    15f0:	d9402f17 	ldw	r5,188(sp)
    15f4:	288b883a 	add	r5,r5,r2
    15f8:	d9402f15 	stw	r5,188(sp)
    15fc:	18019c1e 	bne	r3,zero,1c70 <___svfprintf_internal_r+0x10b0>
    1600:	b8800007 	ldb	r2,0(r23)
    1604:	d8001f15 	stw	zero,124(sp)
    1608:	da000404 	addi	r8,sp,16
    160c:	103d991e 	bne	r2,zero,c74 <___svfprintf_internal_r+0xb4>
    1610:	b821883a 	mov	r16,r23
    1614:	003daf06 	br	cd4 <___svfprintf_internal_r+0x114>
    1618:	18c03fcc 	andi	r3,r3,255
    161c:	1805c71e 	bne	r3,zero,2d3c <___svfprintf_internal_r+0x217c>
    1620:	94800414 	ori	r18,r18,16
    1624:	9080080c 	andi	r2,r18,32
    1628:	10020126 	beq	r2,zero,1e30 <___svfprintf_internal_r+0x1270>
    162c:	d8802d17 	ldw	r2,180(sp)
    1630:	d9002917 	ldw	r4,164(sp)
    1634:	d8002785 	stb	zero,158(sp)
    1638:	10c00204 	addi	r3,r2,8
    163c:	15000017 	ldw	r20,0(r2)
    1640:	15800117 	ldw	r22,4(r2)
    1644:	20038e16 	blt	r4,zero,2480 <___svfprintf_internal_r+0x18c0>
    1648:	013fdfc4 	movi	r4,-129
    164c:	a584b03a 	or	r2,r20,r22
    1650:	d8c02d15 	stw	r3,180(sp)
    1654:	9124703a 	and	r18,r18,r4
    1658:	0039883a 	mov	fp,zero
    165c:	103eb61e 	bne	r2,zero,1138 <___svfprintf_internal_r+0x578>
    1660:	d8802917 	ldw	r2,164(sp)
    1664:	1002c81e 	bne	r2,zero,2188 <___svfprintf_internal_r+0x15c8>
    1668:	d8002915 	stw	zero,164(sp)
    166c:	d8002e15 	stw	zero,184(sp)
    1670:	dc001e04 	addi	r16,sp,120
    1674:	003efa06 	br	1260 <___svfprintf_internal_r+0x6a0>
    1678:	18c03fcc 	andi	r3,r3,255
    167c:	1805ad1e 	bne	r3,zero,2d34 <___svfprintf_internal_r+0x2174>
    1680:	014000b4 	movhi	r5,2
    1684:	2976ab04 	addi	r5,r5,-9556
    1688:	d9403a15 	stw	r5,232(sp)
    168c:	9080080c 	andi	r2,r18,32
    1690:	10006126 	beq	r2,zero,1818 <___svfprintf_internal_r+0xc58>
    1694:	d8802d17 	ldw	r2,180(sp)
    1698:	15000017 	ldw	r20,0(r2)
    169c:	15800117 	ldw	r22,4(r2)
    16a0:	10800204 	addi	r2,r2,8
    16a4:	d8802d15 	stw	r2,180(sp)
    16a8:	9080004c 	andi	r2,r18,1
    16ac:	10018e26 	beq	r2,zero,1ce8 <___svfprintf_internal_r+0x1128>
    16b0:	a584b03a 	or	r2,r20,r22
    16b4:	10030926 	beq	r2,zero,22dc <___svfprintf_internal_r+0x171c>
    16b8:	d8c02917 	ldw	r3,164(sp)
    16bc:	00800c04 	movi	r2,48
    16c0:	d8802705 	stb	r2,156(sp)
    16c4:	dc402745 	stb	r17,157(sp)
    16c8:	d8002785 	stb	zero,158(sp)
    16cc:	90800094 	ori	r2,r18,2
    16d0:	18048716 	blt	r3,zero,28f0 <___svfprintf_internal_r+0x1d30>
    16d4:	00bfdfc4 	movi	r2,-129
    16d8:	90a4703a 	and	r18,r18,r2
    16dc:	94800094 	ori	r18,r18,2
    16e0:	0039883a 	mov	fp,zero
    16e4:	d9003a17 	ldw	r4,232(sp)
    16e8:	dc001e04 	addi	r16,sp,120
    16ec:	a08003cc 	andi	r2,r20,15
    16f0:	b006973a 	slli	r3,r22,28
    16f4:	2085883a 	add	r2,r4,r2
    16f8:	a028d13a 	srli	r20,r20,4
    16fc:	10800003 	ldbu	r2,0(r2)
    1700:	b02cd13a 	srli	r22,r22,4
    1704:	843fffc4 	addi	r16,r16,-1
    1708:	1d28b03a 	or	r20,r3,r20
    170c:	80800005 	stb	r2,0(r16)
    1710:	a584b03a 	or	r2,r20,r22
    1714:	103ff51e 	bne	r2,zero,16ec <___svfprintf_internal_r+0xb2c>
    1718:	d8c02817 	ldw	r3,160(sp)
    171c:	1c07c83a 	sub	r3,r3,r16
    1720:	d8c02e15 	stw	r3,184(sp)
    1724:	003ece06 	br	1260 <___svfprintf_internal_r+0x6a0>
    1728:	d8c02d17 	ldw	r3,180(sp)
    172c:	d9002d17 	ldw	r4,180(sp)
    1730:	d8002785 	stb	zero,158(sp)
    1734:	18800017 	ldw	r2,0(r3)
    1738:	21000104 	addi	r4,r4,4
    173c:	00c00044 	movi	r3,1
    1740:	d8c02a15 	stw	r3,168(sp)
    1744:	d8801405 	stb	r2,80(sp)
    1748:	d9002d15 	stw	r4,180(sp)
    174c:	d8c02e15 	stw	r3,184(sp)
    1750:	d8002915 	stw	zero,164(sp)
    1754:	d8003215 	stw	zero,200(sp)
    1758:	dc001404 	addi	r16,sp,80
    175c:	0039883a 	mov	fp,zero
    1760:	003ecc06 	br	1294 <___svfprintf_internal_r+0x6d4>
    1764:	18c03fcc 	andi	r3,r3,255
    1768:	183e9226 	beq	r3,zero,11b4 <___svfprintf_internal_r+0x5f4>
    176c:	d9c02785 	stb	r7,158(sp)
    1770:	003e9006 	br	11b4 <___svfprintf_internal_r+0x5f4>
    1774:	00c00044 	movi	r3,1
    1778:	01c00ac4 	movi	r7,43
    177c:	bc400007 	ldb	r17,0(r23)
    1780:	003d6306 	br	d10 <___svfprintf_internal_r+0x150>
    1784:	94800814 	ori	r18,r18,32
    1788:	bc400007 	ldb	r17,0(r23)
    178c:	003d6006 	br	d10 <___svfprintf_internal_r+0x150>
    1790:	d8c02d17 	ldw	r3,180(sp)
    1794:	d8002785 	stb	zero,158(sp)
    1798:	1c000017 	ldw	r16,0(r3)
    179c:	1d000104 	addi	r20,r3,4
    17a0:	80040f26 	beq	r16,zero,27e0 <___svfprintf_internal_r+0x1c20>
    17a4:	d9002917 	ldw	r4,164(sp)
    17a8:	2003dc16 	blt	r4,zero,271c <___svfprintf_internal_r+0x1b5c>
    17ac:	200d883a 	mov	r6,r4
    17b0:	000b883a 	mov	r5,zero
    17b4:	8009883a 	mov	r4,r16
    17b8:	da003e15 	stw	r8,248(sp)
    17bc:	00085a80 	call	85a8 <memchr>
    17c0:	da003e17 	ldw	r8,248(sp)
    17c4:	10045826 	beq	r2,zero,2928 <___svfprintf_internal_r+0x1d68>
    17c8:	1405c83a 	sub	r2,r2,r16
    17cc:	d8802e15 	stw	r2,184(sp)
    17d0:	1003d816 	blt	r2,zero,2734 <___svfprintf_internal_r+0x1b74>
    17d4:	df002783 	ldbu	fp,158(sp)
    17d8:	d8802a15 	stw	r2,168(sp)
    17dc:	dd002d15 	stw	r20,180(sp)
    17e0:	d8002915 	stw	zero,164(sp)
    17e4:	d8003215 	stw	zero,200(sp)
    17e8:	003ea306 	br	1278 <___svfprintf_internal_r+0x6b8>
    17ec:	18c03fcc 	andi	r3,r3,255
    17f0:	183f8c26 	beq	r3,zero,1624 <___svfprintf_internal_r+0xa64>
    17f4:	d9c02785 	stb	r7,158(sp)
    17f8:	003f8a06 	br	1624 <___svfprintf_internal_r+0xa64>
    17fc:	18c03fcc 	andi	r3,r3,255
    1800:	1805631e 	bne	r3,zero,2d90 <___svfprintf_internal_r+0x21d0>
    1804:	014000b4 	movhi	r5,2
    1808:	2976b004 	addi	r5,r5,-9536
    180c:	d9403a15 	stw	r5,232(sp)
    1810:	9080080c 	andi	r2,r18,32
    1814:	103f9f1e 	bne	r2,zero,1694 <___svfprintf_internal_r+0xad4>
    1818:	9080040c 	andi	r2,r18,16
    181c:	10029c26 	beq	r2,zero,2290 <___svfprintf_internal_r+0x16d0>
    1820:	d8c02d17 	ldw	r3,180(sp)
    1824:	002d883a 	mov	r22,zero
    1828:	1d000017 	ldw	r20,0(r3)
    182c:	18c00104 	addi	r3,r3,4
    1830:	d8c02d15 	stw	r3,180(sp)
    1834:	003f9c06 	br	16a8 <___svfprintf_internal_r+0xae8>
    1838:	94800054 	ori	r18,r18,1
    183c:	bc400007 	ldb	r17,0(r23)
    1840:	003d3306 	br	d10 <___svfprintf_internal_r+0x150>
    1844:	38803fcc 	andi	r2,r7,255
    1848:	1080201c 	xori	r2,r2,128
    184c:	10bfe004 	addi	r2,r2,-128
    1850:	1002971e 	bne	r2,zero,22b0 <___svfprintf_internal_r+0x16f0>
    1854:	00c00044 	movi	r3,1
    1858:	01c00804 	movi	r7,32
    185c:	bc400007 	ldb	r17,0(r23)
    1860:	003d2b06 	br	d10 <___svfprintf_internal_r+0x150>
    1864:	18c03fcc 	andi	r3,r3,255
    1868:	183e2326 	beq	r3,zero,10f8 <___svfprintf_internal_r+0x538>
    186c:	d9c02785 	stb	r7,158(sp)
    1870:	003e2106 	br	10f8 <___svfprintf_internal_r+0x538>
    1874:	bc400007 	ldb	r17,0(r23)
    1878:	8a430426 	beq	r17,r9,248c <___svfprintf_internal_r+0x18cc>
    187c:	94800414 	ori	r18,r18,16
    1880:	003d2306 	br	d10 <___svfprintf_internal_r+0x150>
    1884:	18c03fcc 	andi	r3,r3,255
    1888:	18053f1e 	bne	r3,zero,2d88 <___svfprintf_internal_r+0x21c8>
    188c:	9080080c 	andi	r2,r18,32
    1890:	10028926 	beq	r2,zero,22b8 <___svfprintf_internal_r+0x16f8>
    1894:	d9402d17 	ldw	r5,180(sp)
    1898:	d9002f17 	ldw	r4,188(sp)
    189c:	28800017 	ldw	r2,0(r5)
    18a0:	2007d7fa 	srai	r3,r4,31
    18a4:	29400104 	addi	r5,r5,4
    18a8:	d9402d15 	stw	r5,180(sp)
    18ac:	11000015 	stw	r4,0(r2)
    18b0:	10c00115 	stw	r3,4(r2)
    18b4:	003ced06 	br	c6c <___svfprintf_internal_r+0xac>
    18b8:	94801014 	ori	r18,r18,64
    18bc:	bc400007 	ldb	r17,0(r23)
    18c0:	003d1306 	br	d10 <___svfprintf_internal_r+0x150>
    18c4:	010000b4 	movhi	r4,2
    18c8:	2136b004 	addi	r4,r4,-9536
    18cc:	0039883a 	mov	fp,zero
    18d0:	d9003a15 	stw	r4,232(sp)
    18d4:	04401e04 	movi	r17,120
    18d8:	003f8206 	br	16e4 <___svfprintf_internal_r+0xb24>
    18dc:	18c03fcc 	andi	r3,r3,255
    18e0:	1805221e 	bne	r3,zero,2d6c <___svfprintf_internal_r+0x21ac>
    18e4:	883d9526 	beq	r17,zero,f3c <___svfprintf_internal_r+0x37c>
    18e8:	00c00044 	movi	r3,1
    18ec:	d8c02a15 	stw	r3,168(sp)
    18f0:	dc401405 	stb	r17,80(sp)
    18f4:	d8002785 	stb	zero,158(sp)
    18f8:	003f9406 	br	174c <___svfprintf_internal_r+0xb8c>
    18fc:	010000b4 	movhi	r4,2
    1900:	2136b004 	addi	r4,r4,-9536
    1904:	d9003a15 	stw	r4,232(sp)
    1908:	d8c02d15 	stw	r3,180(sp)
    190c:	1025883a 	mov	r18,r2
    1910:	04401e04 	movi	r17,120
    1914:	a584b03a 	or	r2,r20,r22
    1918:	1000fa1e 	bne	r2,zero,1d04 <___svfprintf_internal_r+0x1144>
    191c:	0039883a 	mov	fp,zero
    1920:	00800084 	movi	r2,2
    1924:	10803fcc 	andi	r2,r2,255
    1928:	00c00044 	movi	r3,1
    192c:	10c21626 	beq	r2,r3,2188 <___svfprintf_internal_r+0x15c8>
    1930:	00c00084 	movi	r3,2
    1934:	10fe301e 	bne	r2,r3,11f8 <___svfprintf_internal_r+0x638>
    1938:	003d7606 	br	f14 <___svfprintf_internal_r+0x354>
    193c:	d8c02017 	ldw	r3,128(sp)
    1940:	003e9506 	br	1398 <___svfprintf_internal_r+0x7d8>
    1944:	00801944 	movi	r2,101
    1948:	14407c0e 	bge	r2,r17,1b3c <___svfprintf_internal_r+0xf7c>
    194c:	d9003617 	ldw	r4,216(sp)
    1950:	d9403717 	ldw	r5,220(sp)
    1954:	000d883a 	mov	r6,zero
    1958:	000f883a 	mov	r7,zero
    195c:	d8c03d15 	stw	r3,244(sp)
    1960:	da003e15 	stw	r8,248(sp)
    1964:	000f4180 	call	f418 <__eqdf2>
    1968:	d8c03d17 	ldw	r3,244(sp)
    196c:	da003e17 	ldw	r8,248(sp)
    1970:	1000f51e 	bne	r2,zero,1d48 <___svfprintf_internal_r+0x1188>
    1974:	d8801f17 	ldw	r2,124(sp)
    1978:	010000b4 	movhi	r4,2
    197c:	2136b704 	addi	r4,r4,-9508
    1980:	18c00044 	addi	r3,r3,1
    1984:	10800044 	addi	r2,r2,1
    1988:	41000015 	stw	r4,0(r8)
    198c:	01000044 	movi	r4,1
    1990:	41000115 	stw	r4,4(r8)
    1994:	d8c02015 	stw	r3,128(sp)
    1998:	d8801f15 	stw	r2,124(sp)
    199c:	010001c4 	movi	r4,7
    19a0:	20826616 	blt	r4,r2,233c <___svfprintf_internal_r+0x177c>
    19a4:	42000204 	addi	r8,r8,8
    19a8:	d8802617 	ldw	r2,152(sp)
    19ac:	d9403317 	ldw	r5,204(sp)
    19b0:	11400216 	blt	r2,r5,19bc <___svfprintf_internal_r+0xdfc>
    19b4:	9080004c 	andi	r2,r18,1
    19b8:	103ed526 	beq	r2,zero,1510 <___svfprintf_internal_r+0x950>
    19bc:	d8803817 	ldw	r2,224(sp)
    19c0:	d9003417 	ldw	r4,208(sp)
    19c4:	d9403817 	ldw	r5,224(sp)
    19c8:	1887883a 	add	r3,r3,r2
    19cc:	d8801f17 	ldw	r2,124(sp)
    19d0:	41000015 	stw	r4,0(r8)
    19d4:	41400115 	stw	r5,4(r8)
    19d8:	10800044 	addi	r2,r2,1
    19dc:	d8c02015 	stw	r3,128(sp)
    19e0:	d8801f15 	stw	r2,124(sp)
    19e4:	010001c4 	movi	r4,7
    19e8:	2082af16 	blt	r4,r2,24a8 <___svfprintf_internal_r+0x18e8>
    19ec:	42000204 	addi	r8,r8,8
    19f0:	d8803317 	ldw	r2,204(sp)
    19f4:	143fffc4 	addi	r16,r2,-1
    19f8:	043ec50e 	bge	zero,r16,1510 <___svfprintf_internal_r+0x950>
    19fc:	04400404 	movi	r17,16
    1a00:	d8801f17 	ldw	r2,124(sp)
    1a04:	8c00860e 	bge	r17,r16,1c20 <___svfprintf_internal_r+0x1060>
    1a08:	014000b4 	movhi	r5,2
    1a0c:	2976b784 	addi	r5,r5,-9506
    1a10:	d9402b15 	stw	r5,172(sp)
    1a14:	058001c4 	movi	r22,7
    1a18:	dd002c17 	ldw	r20,176(sp)
    1a1c:	00000306 	br	1a2c <___svfprintf_internal_r+0xe6c>
    1a20:	42000204 	addi	r8,r8,8
    1a24:	843ffc04 	addi	r16,r16,-16
    1a28:	8c00800e 	bge	r17,r16,1c2c <___svfprintf_internal_r+0x106c>
    1a2c:	18c00404 	addi	r3,r3,16
    1a30:	10800044 	addi	r2,r2,1
    1a34:	45400015 	stw	r21,0(r8)
    1a38:	44400115 	stw	r17,4(r8)
    1a3c:	d8c02015 	stw	r3,128(sp)
    1a40:	d8801f15 	stw	r2,124(sp)
    1a44:	b0bff60e 	bge	r22,r2,1a20 <___svfprintf_internal_r+0xe60>
    1a48:	d9801e04 	addi	r6,sp,120
    1a4c:	a00b883a 	mov	r5,r20
    1a50:	9809883a 	mov	r4,r19
    1a54:	000a2980 	call	a298 <__ssprint_r>
    1a58:	103d3e1e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    1a5c:	d8c02017 	ldw	r3,128(sp)
    1a60:	d8801f17 	ldw	r2,124(sp)
    1a64:	da000404 	addi	r8,sp,16
    1a68:	003fee06 	br	1a24 <___svfprintf_internal_r+0xe64>
    1a6c:	d9403117 	ldw	r5,196(sp)
    1a70:	d8802a17 	ldw	r2,168(sp)
    1a74:	28adc83a 	sub	r22,r5,r2
    1a78:	05be650e 	bge	zero,r22,1410 <___svfprintf_internal_r+0x850>
    1a7c:	07000404 	movi	fp,16
    1a80:	d8801f17 	ldw	r2,124(sp)
    1a84:	e583a20e 	bge	fp,r22,2910 <___svfprintf_internal_r+0x1d50>
    1a88:	014000b4 	movhi	r5,2
    1a8c:	2976b784 	addi	r5,r5,-9506
    1a90:	dc403015 	stw	r17,192(sp)
    1a94:	d9402b15 	stw	r5,172(sp)
    1a98:	b023883a 	mov	r17,r22
    1a9c:	050001c4 	movi	r20,7
    1aa0:	902d883a 	mov	r22,r18
    1aa4:	8025883a 	mov	r18,r16
    1aa8:	dc002c17 	ldw	r16,176(sp)
    1aac:	00000306 	br	1abc <___svfprintf_internal_r+0xefc>
    1ab0:	8c7ffc04 	addi	r17,r17,-16
    1ab4:	42000204 	addi	r8,r8,8
    1ab8:	e440110e 	bge	fp,r17,1b00 <___svfprintf_internal_r+0xf40>
    1abc:	18c00404 	addi	r3,r3,16
    1ac0:	10800044 	addi	r2,r2,1
    1ac4:	45400015 	stw	r21,0(r8)
    1ac8:	47000115 	stw	fp,4(r8)
    1acc:	d8c02015 	stw	r3,128(sp)
    1ad0:	d8801f15 	stw	r2,124(sp)
    1ad4:	a0bff60e 	bge	r20,r2,1ab0 <___svfprintf_internal_r+0xef0>
    1ad8:	d9801e04 	addi	r6,sp,120
    1adc:	800b883a 	mov	r5,r16
    1ae0:	9809883a 	mov	r4,r19
    1ae4:	000a2980 	call	a298 <__ssprint_r>
    1ae8:	103d1a1e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    1aec:	8c7ffc04 	addi	r17,r17,-16
    1af0:	d8c02017 	ldw	r3,128(sp)
    1af4:	d8801f17 	ldw	r2,124(sp)
    1af8:	da000404 	addi	r8,sp,16
    1afc:	e47fef16 	blt	fp,r17,1abc <___svfprintf_internal_r+0xefc>
    1b00:	9021883a 	mov	r16,r18
    1b04:	b025883a 	mov	r18,r22
    1b08:	882d883a 	mov	r22,r17
    1b0c:	dc403017 	ldw	r17,192(sp)
    1b10:	d9002b17 	ldw	r4,172(sp)
    1b14:	1d87883a 	add	r3,r3,r22
    1b18:	10800044 	addi	r2,r2,1
    1b1c:	41000015 	stw	r4,0(r8)
    1b20:	45800115 	stw	r22,4(r8)
    1b24:	d8c02015 	stw	r3,128(sp)
    1b28:	d8801f15 	stw	r2,124(sp)
    1b2c:	010001c4 	movi	r4,7
    1b30:	20819a16 	blt	r4,r2,219c <___svfprintf_internal_r+0x15dc>
    1b34:	42000204 	addi	r8,r8,8
    1b38:	003e3506 	br	1410 <___svfprintf_internal_r+0x850>
    1b3c:	d9403317 	ldw	r5,204(sp)
    1b40:	00800044 	movi	r2,1
    1b44:	18c00044 	addi	r3,r3,1
    1b48:	1141710e 	bge	r2,r5,2110 <___svfprintf_internal_r+0x1550>
    1b4c:	dc401f17 	ldw	r17,124(sp)
    1b50:	00800044 	movi	r2,1
    1b54:	40800115 	stw	r2,4(r8)
    1b58:	8c400044 	addi	r17,r17,1
    1b5c:	44000015 	stw	r16,0(r8)
    1b60:	d8c02015 	stw	r3,128(sp)
    1b64:	dc401f15 	stw	r17,124(sp)
    1b68:	008001c4 	movi	r2,7
    1b6c:	14417416 	blt	r2,r17,2140 <___svfprintf_internal_r+0x1580>
    1b70:	42000204 	addi	r8,r8,8
    1b74:	d8803817 	ldw	r2,224(sp)
    1b78:	d9003417 	ldw	r4,208(sp)
    1b7c:	8c400044 	addi	r17,r17,1
    1b80:	10c7883a 	add	r3,r2,r3
    1b84:	40800115 	stw	r2,4(r8)
    1b88:	41000015 	stw	r4,0(r8)
    1b8c:	d8c02015 	stw	r3,128(sp)
    1b90:	dc401f15 	stw	r17,124(sp)
    1b94:	008001c4 	movi	r2,7
    1b98:	14417216 	blt	r2,r17,2164 <___svfprintf_internal_r+0x15a4>
    1b9c:	45800204 	addi	r22,r8,8
    1ba0:	d9003617 	ldw	r4,216(sp)
    1ba4:	d9403717 	ldw	r5,220(sp)
    1ba8:	000d883a 	mov	r6,zero
    1bac:	000f883a 	mov	r7,zero
    1bb0:	d8c03d15 	stw	r3,244(sp)
    1bb4:	000f4180 	call	f418 <__eqdf2>
    1bb8:	d8c03d17 	ldw	r3,244(sp)
    1bbc:	1000b326 	beq	r2,zero,1e8c <___svfprintf_internal_r+0x12cc>
    1bc0:	d9403317 	ldw	r5,204(sp)
    1bc4:	84000044 	addi	r16,r16,1
    1bc8:	8c400044 	addi	r17,r17,1
    1bcc:	28bfffc4 	addi	r2,r5,-1
    1bd0:	1887883a 	add	r3,r3,r2
    1bd4:	b0800115 	stw	r2,4(r22)
    1bd8:	b4000015 	stw	r16,0(r22)
    1bdc:	d8c02015 	stw	r3,128(sp)
    1be0:	dc401f15 	stw	r17,124(sp)
    1be4:	008001c4 	movi	r2,7
    1be8:	1440d216 	blt	r2,r17,1f34 <___svfprintf_internal_r+0x1374>
    1bec:	b5800204 	addi	r22,r22,8
    1bf0:	d9003b17 	ldw	r4,236(sp)
    1bf4:	df0022c4 	addi	fp,sp,139
    1bf8:	8c400044 	addi	r17,r17,1
    1bfc:	20c7883a 	add	r3,r4,r3
    1c00:	b7000015 	stw	fp,0(r22)
    1c04:	b1000115 	stw	r4,4(r22)
    1c08:	d8c02015 	stw	r3,128(sp)
    1c0c:	dc401f15 	stw	r17,124(sp)
    1c10:	008001c4 	movi	r2,7
    1c14:	14400e16 	blt	r2,r17,1c50 <___svfprintf_internal_r+0x1090>
    1c18:	b2000204 	addi	r8,r22,8
    1c1c:	003e3c06 	br	1510 <___svfprintf_internal_r+0x950>
    1c20:	010000b4 	movhi	r4,2
    1c24:	2136b784 	addi	r4,r4,-9506
    1c28:	d9002b15 	stw	r4,172(sp)
    1c2c:	d9002b17 	ldw	r4,172(sp)
    1c30:	1c07883a 	add	r3,r3,r16
    1c34:	44000115 	stw	r16,4(r8)
    1c38:	41000015 	stw	r4,0(r8)
    1c3c:	10800044 	addi	r2,r2,1
    1c40:	d8c02015 	stw	r3,128(sp)
    1c44:	d8801f15 	stw	r2,124(sp)
    1c48:	010001c4 	movi	r4,7
    1c4c:	20be2f0e 	bge	r4,r2,150c <___svfprintf_internal_r+0x94c>
    1c50:	d9402c17 	ldw	r5,176(sp)
    1c54:	d9801e04 	addi	r6,sp,120
    1c58:	9809883a 	mov	r4,r19
    1c5c:	000a2980 	call	a298 <__ssprint_r>
    1c60:	103cbc1e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    1c64:	d8c02017 	ldw	r3,128(sp)
    1c68:	da000404 	addi	r8,sp,16
    1c6c:	003e2806 	br	1510 <___svfprintf_internal_r+0x950>
    1c70:	d9402c17 	ldw	r5,176(sp)
    1c74:	d9801e04 	addi	r6,sp,120
    1c78:	9809883a 	mov	r4,r19
    1c7c:	000a2980 	call	a298 <__ssprint_r>
    1c80:	103e5f26 	beq	r2,zero,1600 <___svfprintf_internal_r+0xa40>
    1c84:	003cb306 	br	f54 <___svfprintf_internal_r+0x394>
    1c88:	d9402c17 	ldw	r5,176(sp)
    1c8c:	d9801e04 	addi	r6,sp,120
    1c90:	9809883a 	mov	r4,r19
    1c94:	000a2980 	call	a298 <__ssprint_r>
    1c98:	103cae1e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    1c9c:	d8c02017 	ldw	r3,128(sp)
    1ca0:	da000404 	addi	r8,sp,16
    1ca4:	003e0d06 	br	14dc <___svfprintf_internal_r+0x91c>
    1ca8:	d9402c17 	ldw	r5,176(sp)
    1cac:	d9801e04 	addi	r6,sp,120
    1cb0:	9809883a 	mov	r4,r19
    1cb4:	000a2980 	call	a298 <__ssprint_r>
    1cb8:	103ca61e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    1cbc:	d8c02017 	ldw	r3,128(sp)
    1cc0:	da000404 	addi	r8,sp,16
    1cc4:	003dc106 	br	13cc <___svfprintf_internal_r+0x80c>
    1cc8:	d9402c17 	ldw	r5,176(sp)
    1ccc:	d9801e04 	addi	r6,sp,120
    1cd0:	9809883a 	mov	r4,r19
    1cd4:	000a2980 	call	a298 <__ssprint_r>
    1cd8:	103c9e1e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    1cdc:	d8c02017 	ldw	r3,128(sp)
    1ce0:	da000404 	addi	r8,sp,16
    1ce4:	003dc706 	br	1404 <___svfprintf_internal_r+0x844>
    1ce8:	d8802917 	ldw	r2,164(sp)
    1cec:	d8002785 	stb	zero,158(sp)
    1cf0:	103f0816 	blt	r2,zero,1914 <___svfprintf_internal_r+0xd54>
    1cf4:	00ffdfc4 	movi	r3,-129
    1cf8:	a584b03a 	or	r2,r20,r22
    1cfc:	90e4703a 	and	r18,r18,r3
    1d00:	103c8126 	beq	r2,zero,f08 <___svfprintf_internal_r+0x348>
    1d04:	0039883a 	mov	fp,zero
    1d08:	003e7606 	br	16e4 <___svfprintf_internal_r+0xb24>
    1d0c:	9080040c 	andi	r2,r18,16
    1d10:	10013d26 	beq	r2,zero,2208 <___svfprintf_internal_r+0x1648>
    1d14:	d9002d17 	ldw	r4,180(sp)
    1d18:	d9402917 	ldw	r5,164(sp)
    1d1c:	d8002785 	stb	zero,158(sp)
    1d20:	20800104 	addi	r2,r4,4
    1d24:	25000017 	ldw	r20,0(r4)
    1d28:	002d883a 	mov	r22,zero
    1d2c:	28013f16 	blt	r5,zero,222c <___svfprintf_internal_r+0x166c>
    1d30:	00ffdfc4 	movi	r3,-129
    1d34:	d8802d15 	stw	r2,180(sp)
    1d38:	90e4703a 	and	r18,r18,r3
    1d3c:	a03d2b26 	beq	r20,zero,11ec <___svfprintf_internal_r+0x62c>
    1d40:	0039883a 	mov	fp,zero
    1d44:	003d2e06 	br	1200 <___svfprintf_internal_r+0x640>
    1d48:	dc402617 	ldw	r17,152(sp)
    1d4c:	0441830e 	bge	zero,r17,235c <___svfprintf_internal_r+0x179c>
    1d50:	dc403217 	ldw	r17,200(sp)
    1d54:	d8803317 	ldw	r2,204(sp)
    1d58:	1440010e 	bge	r2,r17,1d60 <___svfprintf_internal_r+0x11a0>
    1d5c:	1023883a 	mov	r17,r2
    1d60:	04400a0e 	bge	zero,r17,1d8c <___svfprintf_internal_r+0x11cc>
    1d64:	d8801f17 	ldw	r2,124(sp)
    1d68:	1c47883a 	add	r3,r3,r17
    1d6c:	44000015 	stw	r16,0(r8)
    1d70:	10800044 	addi	r2,r2,1
    1d74:	44400115 	stw	r17,4(r8)
    1d78:	d8c02015 	stw	r3,128(sp)
    1d7c:	d8801f15 	stw	r2,124(sp)
    1d80:	010001c4 	movi	r4,7
    1d84:	20827516 	blt	r4,r2,275c <___svfprintf_internal_r+0x1b9c>
    1d88:	42000204 	addi	r8,r8,8
    1d8c:	88027b16 	blt	r17,zero,277c <___svfprintf_internal_r+0x1bbc>
    1d90:	d9003217 	ldw	r4,200(sp)
    1d94:	2463c83a 	sub	r17,r4,r17
    1d98:	0440990e 	bge	zero,r17,2000 <___svfprintf_internal_r+0x1440>
    1d9c:	05800404 	movi	r22,16
    1da0:	d8801f17 	ldw	r2,124(sp)
    1da4:	b441530e 	bge	r22,r17,22f4 <___svfprintf_internal_r+0x1734>
    1da8:	010000b4 	movhi	r4,2
    1dac:	2136b784 	addi	r4,r4,-9506
    1db0:	d9002b15 	stw	r4,172(sp)
    1db4:	070001c4 	movi	fp,7
    1db8:	dd002c17 	ldw	r20,176(sp)
    1dbc:	00000306 	br	1dcc <___svfprintf_internal_r+0x120c>
    1dc0:	42000204 	addi	r8,r8,8
    1dc4:	8c7ffc04 	addi	r17,r17,-16
    1dc8:	b4414d0e 	bge	r22,r17,2300 <___svfprintf_internal_r+0x1740>
    1dcc:	18c00404 	addi	r3,r3,16
    1dd0:	10800044 	addi	r2,r2,1
    1dd4:	45400015 	stw	r21,0(r8)
    1dd8:	45800115 	stw	r22,4(r8)
    1ddc:	d8c02015 	stw	r3,128(sp)
    1de0:	d8801f15 	stw	r2,124(sp)
    1de4:	e0bff60e 	bge	fp,r2,1dc0 <___svfprintf_internal_r+0x1200>
    1de8:	d9801e04 	addi	r6,sp,120
    1dec:	a00b883a 	mov	r5,r20
    1df0:	9809883a 	mov	r4,r19
    1df4:	000a2980 	call	a298 <__ssprint_r>
    1df8:	103c561e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    1dfc:	d8c02017 	ldw	r3,128(sp)
    1e00:	d8801f17 	ldw	r2,124(sp)
    1e04:	da000404 	addi	r8,sp,16
    1e08:	003fee06 	br	1dc4 <___svfprintf_internal_r+0x1204>
    1e0c:	d9402c17 	ldw	r5,176(sp)
    1e10:	d9801e04 	addi	r6,sp,120
    1e14:	9809883a 	mov	r4,r19
    1e18:	000a2980 	call	a298 <__ssprint_r>
    1e1c:	103c4d1e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    1e20:	d8c02017 	ldw	r3,128(sp)
    1e24:	df002787 	ldb	fp,158(sp)
    1e28:	da000404 	addi	r8,sp,16
    1e2c:	003d5a06 	br	1398 <___svfprintf_internal_r+0x7d8>
    1e30:	9080040c 	andi	r2,r18,16
    1e34:	10005c26 	beq	r2,zero,1fa8 <___svfprintf_internal_r+0x13e8>
    1e38:	d9402d17 	ldw	r5,180(sp)
    1e3c:	d8c02917 	ldw	r3,164(sp)
    1e40:	d8002785 	stb	zero,158(sp)
    1e44:	28800104 	addi	r2,r5,4
    1e48:	2d000017 	ldw	r20,0(r5)
    1e4c:	002d883a 	mov	r22,zero
    1e50:	18005e16 	blt	r3,zero,1fcc <___svfprintf_internal_r+0x140c>
    1e54:	00ffdfc4 	movi	r3,-129
    1e58:	d8802d15 	stw	r2,180(sp)
    1e5c:	90e4703a 	and	r18,r18,r3
    1e60:	0039883a 	mov	fp,zero
    1e64:	a03dfe26 	beq	r20,zero,1660 <___svfprintf_internal_r+0xaa0>
    1e68:	00800244 	movi	r2,9
    1e6c:	153cb336 	bltu	r2,r20,113c <___svfprintf_internal_r+0x57c>
    1e70:	a5000c04 	addi	r20,r20,48
    1e74:	dc001dc4 	addi	r16,sp,119
    1e78:	dd001dc5 	stb	r20,119(sp)
    1e7c:	d8c02817 	ldw	r3,160(sp)
    1e80:	1c07c83a 	sub	r3,r3,r16
    1e84:	d8c02e15 	stw	r3,184(sp)
    1e88:	003cf506 	br	1260 <___svfprintf_internal_r+0x6a0>
    1e8c:	d8803317 	ldw	r2,204(sp)
    1e90:	143fffc4 	addi	r16,r2,-1
    1e94:	043f560e 	bge	zero,r16,1bf0 <___svfprintf_internal_r+0x1030>
    1e98:	07000404 	movi	fp,16
    1e9c:	e403530e 	bge	fp,r16,2bec <___svfprintf_internal_r+0x202c>
    1ea0:	014000b4 	movhi	r5,2
    1ea4:	2976b784 	addi	r5,r5,-9506
    1ea8:	d9402b15 	stw	r5,172(sp)
    1eac:	01c001c4 	movi	r7,7
    1eb0:	dd002c17 	ldw	r20,176(sp)
    1eb4:	00000306 	br	1ec4 <___svfprintf_internal_r+0x1304>
    1eb8:	843ffc04 	addi	r16,r16,-16
    1ebc:	b5800204 	addi	r22,r22,8
    1ec0:	e400130e 	bge	fp,r16,1f10 <___svfprintf_internal_r+0x1350>
    1ec4:	18c00404 	addi	r3,r3,16
    1ec8:	8c400044 	addi	r17,r17,1
    1ecc:	b5400015 	stw	r21,0(r22)
    1ed0:	b7000115 	stw	fp,4(r22)
    1ed4:	d8c02015 	stw	r3,128(sp)
    1ed8:	dc401f15 	stw	r17,124(sp)
    1edc:	3c7ff60e 	bge	r7,r17,1eb8 <___svfprintf_internal_r+0x12f8>
    1ee0:	d9801e04 	addi	r6,sp,120
    1ee4:	a00b883a 	mov	r5,r20
    1ee8:	9809883a 	mov	r4,r19
    1eec:	d9c03d15 	stw	r7,244(sp)
    1ef0:	000a2980 	call	a298 <__ssprint_r>
    1ef4:	d9c03d17 	ldw	r7,244(sp)
    1ef8:	103c161e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    1efc:	843ffc04 	addi	r16,r16,-16
    1f00:	d8c02017 	ldw	r3,128(sp)
    1f04:	dc401f17 	ldw	r17,124(sp)
    1f08:	dd800404 	addi	r22,sp,16
    1f0c:	e43fed16 	blt	fp,r16,1ec4 <___svfprintf_internal_r+0x1304>
    1f10:	d8802b17 	ldw	r2,172(sp)
    1f14:	1c07883a 	add	r3,r3,r16
    1f18:	8c400044 	addi	r17,r17,1
    1f1c:	b0800015 	stw	r2,0(r22)
    1f20:	b4000115 	stw	r16,4(r22)
    1f24:	d8c02015 	stw	r3,128(sp)
    1f28:	dc401f15 	stw	r17,124(sp)
    1f2c:	008001c4 	movi	r2,7
    1f30:	147f2e0e 	bge	r2,r17,1bec <___svfprintf_internal_r+0x102c>
    1f34:	d9402c17 	ldw	r5,176(sp)
    1f38:	d9801e04 	addi	r6,sp,120
    1f3c:	9809883a 	mov	r4,r19
    1f40:	000a2980 	call	a298 <__ssprint_r>
    1f44:	103c031e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    1f48:	d8c02017 	ldw	r3,128(sp)
    1f4c:	dc401f17 	ldw	r17,124(sp)
    1f50:	dd800404 	addi	r22,sp,16
    1f54:	003f2606 	br	1bf0 <___svfprintf_internal_r+0x1030>
    1f58:	9080040c 	andi	r2,r18,16
    1f5c:	1000c326 	beq	r2,zero,226c <___svfprintf_internal_r+0x16ac>
    1f60:	d8802d17 	ldw	r2,180(sp)
    1f64:	15000017 	ldw	r20,0(r2)
    1f68:	10800104 	addi	r2,r2,4
    1f6c:	d8802d15 	stw	r2,180(sp)
    1f70:	a02dd7fa 	srai	r22,r20,31
    1f74:	b005883a 	mov	r2,r22
    1f78:	103c680e 	bge	r2,zero,111c <___svfprintf_internal_r+0x55c>
    1f7c:	0529c83a 	sub	r20,zero,r20
    1f80:	a004c03a 	cmpne	r2,r20,zero
    1f84:	05adc83a 	sub	r22,zero,r22
    1f88:	b0adc83a 	sub	r22,r22,r2
    1f8c:	d8802917 	ldw	r2,164(sp)
    1f90:	07000b44 	movi	fp,45
    1f94:	df002785 	stb	fp,158(sp)
    1f98:	10022e16 	blt	r2,zero,2854 <___svfprintf_internal_r+0x1c94>
    1f9c:	00bfdfc4 	movi	r2,-129
    1fa0:	90a4703a 	and	r18,r18,r2
    1fa4:	003c6406 	br	1138 <___svfprintf_internal_r+0x578>
    1fa8:	9080100c 	andi	r2,r18,64
    1fac:	d8002785 	stb	zero,158(sp)
    1fb0:	10012526 	beq	r2,zero,2448 <___svfprintf_internal_r+0x1888>
    1fb4:	d9002d17 	ldw	r4,180(sp)
    1fb8:	d9402917 	ldw	r5,164(sp)
    1fbc:	002d883a 	mov	r22,zero
    1fc0:	20800104 	addi	r2,r4,4
    1fc4:	2500000b 	ldhu	r20,0(r4)
    1fc8:	283fa20e 	bge	r5,zero,1e54 <___svfprintf_internal_r+0x1294>
    1fcc:	d8802d15 	stw	r2,180(sp)
    1fd0:	0039883a 	mov	fp,zero
    1fd4:	a584b03a 	or	r2,r20,r22
    1fd8:	103c571e 	bne	r2,zero,1138 <___svfprintf_internal_r+0x578>
    1fdc:	00800044 	movi	r2,1
    1fe0:	003e5006 	br	1924 <___svfprintf_internal_r+0xd64>
    1fe4:	d9402c17 	ldw	r5,176(sp)
    1fe8:	d9801e04 	addi	r6,sp,120
    1fec:	9809883a 	mov	r4,r19
    1ff0:	000a2980 	call	a298 <__ssprint_r>
    1ff4:	103bd71e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    1ff8:	d8c02017 	ldw	r3,128(sp)
    1ffc:	da000404 	addi	r8,sp,16
    2000:	d9003217 	ldw	r4,200(sp)
    2004:	d8802617 	ldw	r2,152(sp)
    2008:	d9403317 	ldw	r5,204(sp)
    200c:	8123883a 	add	r17,r16,r4
    2010:	11400216 	blt	r2,r5,201c <___svfprintf_internal_r+0x145c>
    2014:	9100004c 	andi	r4,r18,1
    2018:	20000d26 	beq	r4,zero,2050 <___svfprintf_internal_r+0x1490>
    201c:	d9003817 	ldw	r4,224(sp)
    2020:	d9403417 	ldw	r5,208(sp)
    2024:	1907883a 	add	r3,r3,r4
    2028:	d9001f17 	ldw	r4,124(sp)
    202c:	41400015 	stw	r5,0(r8)
    2030:	d9403817 	ldw	r5,224(sp)
    2034:	21000044 	addi	r4,r4,1
    2038:	d8c02015 	stw	r3,128(sp)
    203c:	41400115 	stw	r5,4(r8)
    2040:	d9001f15 	stw	r4,124(sp)
    2044:	014001c4 	movi	r5,7
    2048:	2901dc16 	blt	r5,r4,27bc <___svfprintf_internal_r+0x1bfc>
    204c:	42000204 	addi	r8,r8,8
    2050:	d9003317 	ldw	r4,204(sp)
    2054:	8121883a 	add	r16,r16,r4
    2058:	2085c83a 	sub	r2,r4,r2
    205c:	8461c83a 	sub	r16,r16,r17
    2060:	1400010e 	bge	r2,r16,2068 <___svfprintf_internal_r+0x14a8>
    2064:	1021883a 	mov	r16,r2
    2068:	04000a0e 	bge	zero,r16,2094 <___svfprintf_internal_r+0x14d4>
    206c:	d9001f17 	ldw	r4,124(sp)
    2070:	1c07883a 	add	r3,r3,r16
    2074:	44400015 	stw	r17,0(r8)
    2078:	21000044 	addi	r4,r4,1
    207c:	44000115 	stw	r16,4(r8)
    2080:	d8c02015 	stw	r3,128(sp)
    2084:	d9001f15 	stw	r4,124(sp)
    2088:	014001c4 	movi	r5,7
    208c:	2901e616 	blt	r5,r4,2828 <___svfprintf_internal_r+0x1c68>
    2090:	42000204 	addi	r8,r8,8
    2094:	8001f616 	blt	r16,zero,2870 <___svfprintf_internal_r+0x1cb0>
    2098:	1421c83a 	sub	r16,r2,r16
    209c:	043d1c0e 	bge	zero,r16,1510 <___svfprintf_internal_r+0x950>
    20a0:	04400404 	movi	r17,16
    20a4:	d8801f17 	ldw	r2,124(sp)
    20a8:	8c3edd0e 	bge	r17,r16,1c20 <___svfprintf_internal_r+0x1060>
    20ac:	014000b4 	movhi	r5,2
    20b0:	2976b784 	addi	r5,r5,-9506
    20b4:	d9402b15 	stw	r5,172(sp)
    20b8:	058001c4 	movi	r22,7
    20bc:	dd002c17 	ldw	r20,176(sp)
    20c0:	00000306 	br	20d0 <___svfprintf_internal_r+0x1510>
    20c4:	42000204 	addi	r8,r8,8
    20c8:	843ffc04 	addi	r16,r16,-16
    20cc:	8c3ed70e 	bge	r17,r16,1c2c <___svfprintf_internal_r+0x106c>
    20d0:	18c00404 	addi	r3,r3,16
    20d4:	10800044 	addi	r2,r2,1
    20d8:	45400015 	stw	r21,0(r8)
    20dc:	44400115 	stw	r17,4(r8)
    20e0:	d8c02015 	stw	r3,128(sp)
    20e4:	d8801f15 	stw	r2,124(sp)
    20e8:	b0bff60e 	bge	r22,r2,20c4 <___svfprintf_internal_r+0x1504>
    20ec:	d9801e04 	addi	r6,sp,120
    20f0:	a00b883a 	mov	r5,r20
    20f4:	9809883a 	mov	r4,r19
    20f8:	000a2980 	call	a298 <__ssprint_r>
    20fc:	103b951e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    2100:	d8c02017 	ldw	r3,128(sp)
    2104:	d8801f17 	ldw	r2,124(sp)
    2108:	da000404 	addi	r8,sp,16
    210c:	003fee06 	br	20c8 <___svfprintf_internal_r+0x1508>
    2110:	9088703a 	and	r4,r18,r2
    2114:	203e8d1e 	bne	r4,zero,1b4c <___svfprintf_internal_r+0xf8c>
    2118:	dc401f17 	ldw	r17,124(sp)
    211c:	40800115 	stw	r2,4(r8)
    2120:	44000015 	stw	r16,0(r8)
    2124:	8c400044 	addi	r17,r17,1
    2128:	d8c02015 	stw	r3,128(sp)
    212c:	dc401f15 	stw	r17,124(sp)
    2130:	008001c4 	movi	r2,7
    2134:	147f7f16 	blt	r2,r17,1f34 <___svfprintf_internal_r+0x1374>
    2138:	45800204 	addi	r22,r8,8
    213c:	003eac06 	br	1bf0 <___svfprintf_internal_r+0x1030>
    2140:	d9402c17 	ldw	r5,176(sp)
    2144:	d9801e04 	addi	r6,sp,120
    2148:	9809883a 	mov	r4,r19
    214c:	000a2980 	call	a298 <__ssprint_r>
    2150:	103b801e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    2154:	d8c02017 	ldw	r3,128(sp)
    2158:	dc401f17 	ldw	r17,124(sp)
    215c:	da000404 	addi	r8,sp,16
    2160:	003e8406 	br	1b74 <___svfprintf_internal_r+0xfb4>
    2164:	d9402c17 	ldw	r5,176(sp)
    2168:	d9801e04 	addi	r6,sp,120
    216c:	9809883a 	mov	r4,r19
    2170:	000a2980 	call	a298 <__ssprint_r>
    2174:	103b771e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    2178:	d8c02017 	ldw	r3,128(sp)
    217c:	dc401f17 	ldw	r17,124(sp)
    2180:	dd800404 	addi	r22,sp,16
    2184:	003e8606 	br	1ba0 <___svfprintf_internal_r+0xfe0>
    2188:	0029883a 	mov	r20,zero
    218c:	a5000c04 	addi	r20,r20,48
    2190:	dc001dc4 	addi	r16,sp,119
    2194:	dd001dc5 	stb	r20,119(sp)
    2198:	003f3806 	br	1e7c <___svfprintf_internal_r+0x12bc>
    219c:	d9402c17 	ldw	r5,176(sp)
    21a0:	d9801e04 	addi	r6,sp,120
    21a4:	9809883a 	mov	r4,r19
    21a8:	000a2980 	call	a298 <__ssprint_r>
    21ac:	103b691e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    21b0:	d8c02017 	ldw	r3,128(sp)
    21b4:	da000404 	addi	r8,sp,16
    21b8:	003c9506 	br	1410 <___svfprintf_internal_r+0x850>
    21bc:	d9003617 	ldw	r4,216(sp)
    21c0:	d9403717 	ldw	r5,220(sp)
    21c4:	da003e15 	stw	r8,248(sp)
    21c8:	0009fb80 	call	9fb8 <__fpclassifyd>
    21cc:	da003e17 	ldw	r8,248(sp)
    21d0:	1000bd1e 	bne	r2,zero,24c8 <___svfprintf_internal_r+0x1908>
    21d4:	008011c4 	movi	r2,71
    21d8:	14411e0e 	bge	r2,r17,2654 <___svfprintf_internal_r+0x1a94>
    21dc:	040000b4 	movhi	r16,2
    21e0:	8436aa04 	addi	r16,r16,-9560
    21e4:	00c000c4 	movi	r3,3
    21e8:	00bfdfc4 	movi	r2,-129
    21ec:	d8c02a15 	stw	r3,168(sp)
    21f0:	90a4703a 	and	r18,r18,r2
    21f4:	df002783 	ldbu	fp,158(sp)
    21f8:	d8c02e15 	stw	r3,184(sp)
    21fc:	d8002915 	stw	zero,164(sp)
    2200:	d8003215 	stw	zero,200(sp)
    2204:	003c1c06 	br	1278 <___svfprintf_internal_r+0x6b8>
    2208:	9080100c 	andi	r2,r18,64
    220c:	d8002785 	stb	zero,158(sp)
    2210:	10009426 	beq	r2,zero,2464 <___svfprintf_internal_r+0x18a4>
    2214:	d8c02d17 	ldw	r3,180(sp)
    2218:	d9002917 	ldw	r4,164(sp)
    221c:	002d883a 	mov	r22,zero
    2220:	18800104 	addi	r2,r3,4
    2224:	1d00000b 	ldhu	r20,0(r3)
    2228:	203ec10e 	bge	r4,zero,1d30 <___svfprintf_internal_r+0x1170>
    222c:	a586b03a 	or	r3,r20,r22
    2230:	d8802d15 	stw	r2,180(sp)
    2234:	183ec21e 	bne	r3,zero,1d40 <___svfprintf_internal_r+0x1180>
    2238:	0039883a 	mov	fp,zero
    223c:	0005883a 	mov	r2,zero
    2240:	003db806 	br	1924 <___svfprintf_internal_r+0xd64>
    2244:	d8802d17 	ldw	r2,180(sp)
    2248:	d8c02d17 	ldw	r3,180(sp)
    224c:	d9002d17 	ldw	r4,180(sp)
    2250:	10800017 	ldw	r2,0(r2)
    2254:	18c00117 	ldw	r3,4(r3)
    2258:	21000204 	addi	r4,r4,8
    225c:	d8803615 	stw	r2,216(sp)
    2260:	d8c03715 	stw	r3,220(sp)
    2264:	d9002d15 	stw	r4,180(sp)
    2268:	003b8206 	br	1074 <___svfprintf_internal_r+0x4b4>
    226c:	9080100c 	andi	r2,r18,64
    2270:	10010726 	beq	r2,zero,2690 <___svfprintf_internal_r+0x1ad0>
    2274:	d8c02d17 	ldw	r3,180(sp)
    2278:	1d00000f 	ldh	r20,0(r3)
    227c:	18c00104 	addi	r3,r3,4
    2280:	d8c02d15 	stw	r3,180(sp)
    2284:	a02dd7fa 	srai	r22,r20,31
    2288:	b005883a 	mov	r2,r22
    228c:	003ba206 	br	1118 <___svfprintf_internal_r+0x558>
    2290:	9080100c 	andi	r2,r18,64
    2294:	10010526 	beq	r2,zero,26ac <___svfprintf_internal_r+0x1aec>
    2298:	d9002d17 	ldw	r4,180(sp)
    229c:	002d883a 	mov	r22,zero
    22a0:	2500000b 	ldhu	r20,0(r4)
    22a4:	21000104 	addi	r4,r4,4
    22a8:	d9002d15 	stw	r4,180(sp)
    22ac:	003cfe06 	br	16a8 <___svfprintf_internal_r+0xae8>
    22b0:	bc400007 	ldb	r17,0(r23)
    22b4:	003a9606 	br	d10 <___svfprintf_internal_r+0x150>
    22b8:	9080040c 	andi	r2,r18,16
    22bc:	10010126 	beq	r2,zero,26c4 <___svfprintf_internal_r+0x1b04>
    22c0:	d9402d17 	ldw	r5,180(sp)
    22c4:	d8c02f17 	ldw	r3,188(sp)
    22c8:	28800017 	ldw	r2,0(r5)
    22cc:	29400104 	addi	r5,r5,4
    22d0:	d9402d15 	stw	r5,180(sp)
    22d4:	10c00015 	stw	r3,0(r2)
    22d8:	003a6406 	br	c6c <___svfprintf_internal_r+0xac>
    22dc:	d9002917 	ldw	r4,164(sp)
    22e0:	d8002785 	stb	zero,158(sp)
    22e4:	203d8d16 	blt	r4,zero,191c <___svfprintf_internal_r+0xd5c>
    22e8:	00bfdfc4 	movi	r2,-129
    22ec:	90a4703a 	and	r18,r18,r2
    22f0:	003b0506 	br	f08 <___svfprintf_internal_r+0x348>
    22f4:	014000b4 	movhi	r5,2
    22f8:	2976b784 	addi	r5,r5,-9506
    22fc:	d9402b15 	stw	r5,172(sp)
    2300:	d9402b17 	ldw	r5,172(sp)
    2304:	1c47883a 	add	r3,r3,r17
    2308:	10800044 	addi	r2,r2,1
    230c:	41400015 	stw	r5,0(r8)
    2310:	44400115 	stw	r17,4(r8)
    2314:	d8c02015 	stw	r3,128(sp)
    2318:	d8801f15 	stw	r2,124(sp)
    231c:	010001c4 	movi	r4,7
    2320:	20bf3016 	blt	r4,r2,1fe4 <___svfprintf_internal_r+0x1424>
    2324:	42000204 	addi	r8,r8,8
    2328:	003f3506 	br	2000 <___svfprintf_internal_r+0x1440>
    232c:	010000b4 	movhi	r4,2
    2330:	2136b784 	addi	r4,r4,-9506
    2334:	d9002b15 	stw	r4,172(sp)
    2338:	003c5e06 	br	14b4 <___svfprintf_internal_r+0x8f4>
    233c:	d9402c17 	ldw	r5,176(sp)
    2340:	d9801e04 	addi	r6,sp,120
    2344:	9809883a 	mov	r4,r19
    2348:	000a2980 	call	a298 <__ssprint_r>
    234c:	103b011e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    2350:	d8c02017 	ldw	r3,128(sp)
    2354:	da000404 	addi	r8,sp,16
    2358:	003d9306 	br	19a8 <___svfprintf_internal_r+0xde8>
    235c:	d8801f17 	ldw	r2,124(sp)
    2360:	014000b4 	movhi	r5,2
    2364:	01000044 	movi	r4,1
    2368:	18c00044 	addi	r3,r3,1
    236c:	10800044 	addi	r2,r2,1
    2370:	2976b704 	addi	r5,r5,-9508
    2374:	41000115 	stw	r4,4(r8)
    2378:	41400015 	stw	r5,0(r8)
    237c:	d8c02015 	stw	r3,128(sp)
    2380:	d8801f15 	stw	r2,124(sp)
    2384:	010001c4 	movi	r4,7
    2388:	2080b516 	blt	r4,r2,2660 <___svfprintf_internal_r+0x1aa0>
    238c:	42000204 	addi	r8,r8,8
    2390:	8800041e 	bne	r17,zero,23a4 <___svfprintf_internal_r+0x17e4>
    2394:	d8803317 	ldw	r2,204(sp)
    2398:	1000021e 	bne	r2,zero,23a4 <___svfprintf_internal_r+0x17e4>
    239c:	9080004c 	andi	r2,r18,1
    23a0:	103c5b26 	beq	r2,zero,1510 <___svfprintf_internal_r+0x950>
    23a4:	d9003817 	ldw	r4,224(sp)
    23a8:	d8801f17 	ldw	r2,124(sp)
    23ac:	d9403417 	ldw	r5,208(sp)
    23b0:	20c7883a 	add	r3,r4,r3
    23b4:	10800044 	addi	r2,r2,1
    23b8:	41000115 	stw	r4,4(r8)
    23bc:	41400015 	stw	r5,0(r8)
    23c0:	d8c02015 	stw	r3,128(sp)
    23c4:	d8801f15 	stw	r2,124(sp)
    23c8:	010001c4 	movi	r4,7
    23cc:	20818016 	blt	r4,r2,29d0 <___svfprintf_internal_r+0x1e10>
    23d0:	42000204 	addi	r8,r8,8
    23d4:	0463c83a 	sub	r17,zero,r17
    23d8:	0440cb0e 	bge	zero,r17,2708 <___svfprintf_internal_r+0x1b48>
    23dc:	05800404 	movi	r22,16
    23e0:	b440e80e 	bge	r22,r17,2784 <___svfprintf_internal_r+0x1bc4>
    23e4:	014000b4 	movhi	r5,2
    23e8:	2976b784 	addi	r5,r5,-9506
    23ec:	d9402b15 	stw	r5,172(sp)
    23f0:	070001c4 	movi	fp,7
    23f4:	dd002c17 	ldw	r20,176(sp)
    23f8:	00000306 	br	2408 <___svfprintf_internal_r+0x1848>
    23fc:	42000204 	addi	r8,r8,8
    2400:	8c7ffc04 	addi	r17,r17,-16
    2404:	b440e20e 	bge	r22,r17,2790 <___svfprintf_internal_r+0x1bd0>
    2408:	18c00404 	addi	r3,r3,16
    240c:	10800044 	addi	r2,r2,1
    2410:	45400015 	stw	r21,0(r8)
    2414:	45800115 	stw	r22,4(r8)
    2418:	d8c02015 	stw	r3,128(sp)
    241c:	d8801f15 	stw	r2,124(sp)
    2420:	e0bff60e 	bge	fp,r2,23fc <___svfprintf_internal_r+0x183c>
    2424:	d9801e04 	addi	r6,sp,120
    2428:	a00b883a 	mov	r5,r20
    242c:	9809883a 	mov	r4,r19
    2430:	000a2980 	call	a298 <__ssprint_r>
    2434:	103ac71e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    2438:	d8c02017 	ldw	r3,128(sp)
    243c:	d8801f17 	ldw	r2,124(sp)
    2440:	da000404 	addi	r8,sp,16
    2444:	003fee06 	br	2400 <___svfprintf_internal_r+0x1840>
    2448:	d8c02d17 	ldw	r3,180(sp)
    244c:	d9002917 	ldw	r4,164(sp)
    2450:	002d883a 	mov	r22,zero
    2454:	18800104 	addi	r2,r3,4
    2458:	1d000017 	ldw	r20,0(r3)
    245c:	203e7d0e 	bge	r4,zero,1e54 <___svfprintf_internal_r+0x1294>
    2460:	003eda06 	br	1fcc <___svfprintf_internal_r+0x140c>
    2464:	d9402d17 	ldw	r5,180(sp)
    2468:	d8c02917 	ldw	r3,164(sp)
    246c:	002d883a 	mov	r22,zero
    2470:	28800104 	addi	r2,r5,4
    2474:	2d000017 	ldw	r20,0(r5)
    2478:	183e2d0e 	bge	r3,zero,1d30 <___svfprintf_internal_r+0x1170>
    247c:	003f6b06 	br	222c <___svfprintf_internal_r+0x166c>
    2480:	d8c02d15 	stw	r3,180(sp)
    2484:	0039883a 	mov	fp,zero
    2488:	003ed206 	br	1fd4 <___svfprintf_internal_r+0x1414>
    248c:	bc400043 	ldbu	r17,1(r23)
    2490:	94800814 	ori	r18,r18,32
    2494:	bdc00044 	addi	r23,r23,1
    2498:	8c403fcc 	andi	r17,r17,255
    249c:	8c40201c 	xori	r17,r17,128
    24a0:	8c7fe004 	addi	r17,r17,-128
    24a4:	003a1a06 	br	d10 <___svfprintf_internal_r+0x150>
    24a8:	d9402c17 	ldw	r5,176(sp)
    24ac:	d9801e04 	addi	r6,sp,120
    24b0:	9809883a 	mov	r4,r19
    24b4:	000a2980 	call	a298 <__ssprint_r>
    24b8:	103aa61e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    24bc:	d8c02017 	ldw	r3,128(sp)
    24c0:	da000404 	addi	r8,sp,16
    24c4:	003d4a06 	br	19f0 <___svfprintf_internal_r+0xe30>
    24c8:	d9002917 	ldw	r4,164(sp)
    24cc:	05bff7c4 	movi	r22,-33
    24d0:	00bfffc4 	movi	r2,-1
    24d4:	8dac703a 	and	r22,r17,r22
    24d8:	20806a26 	beq	r4,r2,2684 <___svfprintf_internal_r+0x1ac4>
    24dc:	008011c4 	movi	r2,71
    24e0:	b0813726 	beq	r22,r2,29c0 <___svfprintf_internal_r+0x1e00>
    24e4:	d9003717 	ldw	r4,220(sp)
    24e8:	90c04014 	ori	r3,r18,256
    24ec:	d8c02b15 	stw	r3,172(sp)
    24f0:	20015d16 	blt	r4,zero,2a68 <___svfprintf_internal_r+0x1ea8>
    24f4:	dd003717 	ldw	r20,220(sp)
    24f8:	d8002a05 	stb	zero,168(sp)
    24fc:	00801984 	movi	r2,102
    2500:	88814026 	beq	r17,r2,2a04 <___svfprintf_internal_r+0x1e44>
    2504:	00801184 	movi	r2,70
    2508:	88817126 	beq	r17,r2,2ad0 <___svfprintf_internal_r+0x1f10>
    250c:	00801144 	movi	r2,69
    2510:	b0816226 	beq	r22,r2,2a9c <___svfprintf_internal_r+0x1edc>
    2514:	d8c02917 	ldw	r3,164(sp)
    2518:	d8802104 	addi	r2,sp,132
    251c:	d8800315 	stw	r2,12(sp)
    2520:	d9403617 	ldw	r5,216(sp)
    2524:	d8802504 	addi	r2,sp,148
    2528:	d8800215 	stw	r2,8(sp)
    252c:	d8802604 	addi	r2,sp,152
    2530:	d8c00015 	stw	r3,0(sp)
    2534:	d8800115 	stw	r2,4(sp)
    2538:	01c00084 	movi	r7,2
    253c:	a00d883a 	mov	r6,r20
    2540:	9809883a 	mov	r4,r19
    2544:	d8c03d15 	stw	r3,244(sp)
    2548:	da003e15 	stw	r8,248(sp)
    254c:	00053bc0 	call	53bc <_dtoa_r>
    2550:	1021883a 	mov	r16,r2
    2554:	008019c4 	movi	r2,103
    2558:	d8c03d17 	ldw	r3,244(sp)
    255c:	da003e17 	ldw	r8,248(sp)
    2560:	8880e726 	beq	r17,r2,2900 <___svfprintf_internal_r+0x1d40>
    2564:	008011c4 	movi	r2,71
    2568:	8880d426 	beq	r17,r2,28bc <___svfprintf_internal_r+0x1cfc>
    256c:	80f9883a 	add	fp,r16,r3
    2570:	d9003617 	ldw	r4,216(sp)
    2574:	000d883a 	mov	r6,zero
    2578:	000f883a 	mov	r7,zero
    257c:	a00b883a 	mov	r5,r20
    2580:	da003e15 	stw	r8,248(sp)
    2584:	000f4180 	call	f418 <__eqdf2>
    2588:	da003e17 	ldw	r8,248(sp)
    258c:	1000e426 	beq	r2,zero,2920 <___svfprintf_internal_r+0x1d60>
    2590:	d8802117 	ldw	r2,132(sp)
    2594:	1700062e 	bgeu	r2,fp,25b0 <___svfprintf_internal_r+0x19f0>
    2598:	01000c04 	movi	r4,48
    259c:	10c00044 	addi	r3,r2,1
    25a0:	d8c02115 	stw	r3,132(sp)
    25a4:	11000005 	stb	r4,0(r2)
    25a8:	d8802117 	ldw	r2,132(sp)
    25ac:	173ffb36 	bltu	r2,fp,259c <___svfprintf_internal_r+0x19dc>
    25b0:	1405c83a 	sub	r2,r2,r16
    25b4:	d8803315 	stw	r2,204(sp)
    25b8:	008011c4 	movi	r2,71
    25bc:	b080c526 	beq	r22,r2,28d4 <___svfprintf_internal_r+0x1d14>
    25c0:	00801944 	movi	r2,101
    25c4:	1441d90e 	bge	r2,r17,2d2c <___svfprintf_internal_r+0x216c>
    25c8:	d8c02617 	ldw	r3,152(sp)
    25cc:	00801984 	movi	r2,102
    25d0:	d8c03215 	stw	r3,200(sp)
    25d4:	88813426 	beq	r17,r2,2aa8 <___svfprintf_internal_r+0x1ee8>
    25d8:	d8c03217 	ldw	r3,200(sp)
    25dc:	d9003317 	ldw	r4,204(sp)
    25e0:	19012516 	blt	r3,r4,2a78 <___svfprintf_internal_r+0x1eb8>
    25e4:	9480004c 	andi	r18,r18,1
    25e8:	9001841e 	bne	r18,zero,2bfc <___svfprintf_internal_r+0x203c>
    25ec:	1805883a 	mov	r2,r3
    25f0:	1801cc16 	blt	r3,zero,2d24 <___svfprintf_internal_r+0x2164>
    25f4:	d8c03217 	ldw	r3,200(sp)
    25f8:	044019c4 	movi	r17,103
    25fc:	d8c02e15 	stw	r3,184(sp)
    2600:	df002a07 	ldb	fp,168(sp)
    2604:	e000a61e 	bne	fp,zero,28a0 <___svfprintf_internal_r+0x1ce0>
    2608:	df002783 	ldbu	fp,158(sp)
    260c:	d8802a15 	stw	r2,168(sp)
    2610:	dc802b17 	ldw	r18,172(sp)
    2614:	d8002915 	stw	zero,164(sp)
    2618:	003b1706 	br	1278 <___svfprintf_internal_r+0x6b8>
    261c:	040000b4 	movhi	r16,2
    2620:	8436a704 	addi	r16,r16,-9572
    2624:	003aa606 	br	10c0 <___svfprintf_internal_r+0x500>
    2628:	d9003917 	ldw	r4,228(sp)
    262c:	04001004 	movi	r16,64
    2630:	800b883a 	mov	r5,r16
    2634:	0007d9c0 	call	7d9c <_malloc_r>
    2638:	d9002c17 	ldw	r4,176(sp)
    263c:	20800015 	stw	r2,0(r4)
    2640:	20800415 	stw	r2,16(r4)
    2644:	1001cb26 	beq	r2,zero,2d74 <___svfprintf_internal_r+0x21b4>
    2648:	d8802c17 	ldw	r2,176(sp)
    264c:	14000515 	stw	r16,20(r2)
    2650:	00397606 	br	c2c <___svfprintf_internal_r+0x6c>
    2654:	040000b4 	movhi	r16,2
    2658:	8436a904 	addi	r16,r16,-9564
    265c:	003ee106 	br	21e4 <___svfprintf_internal_r+0x1624>
    2660:	d9402c17 	ldw	r5,176(sp)
    2664:	d9801e04 	addi	r6,sp,120
    2668:	9809883a 	mov	r4,r19
    266c:	000a2980 	call	a298 <__ssprint_r>
    2670:	103a381e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    2674:	dc402617 	ldw	r17,152(sp)
    2678:	d8c02017 	ldw	r3,128(sp)
    267c:	da000404 	addi	r8,sp,16
    2680:	003f4306 	br	2390 <___svfprintf_internal_r+0x17d0>
    2684:	01400184 	movi	r5,6
    2688:	d9402915 	stw	r5,164(sp)
    268c:	003f9506 	br	24e4 <___svfprintf_internal_r+0x1924>
    2690:	d9002d17 	ldw	r4,180(sp)
    2694:	25000017 	ldw	r20,0(r4)
    2698:	21000104 	addi	r4,r4,4
    269c:	d9002d15 	stw	r4,180(sp)
    26a0:	a02dd7fa 	srai	r22,r20,31
    26a4:	b005883a 	mov	r2,r22
    26a8:	003a9b06 	br	1118 <___svfprintf_internal_r+0x558>
    26ac:	d9402d17 	ldw	r5,180(sp)
    26b0:	002d883a 	mov	r22,zero
    26b4:	2d000017 	ldw	r20,0(r5)
    26b8:	29400104 	addi	r5,r5,4
    26bc:	d9402d15 	stw	r5,180(sp)
    26c0:	003bf906 	br	16a8 <___svfprintf_internal_r+0xae8>
    26c4:	9480100c 	andi	r18,r18,64
    26c8:	90006e26 	beq	r18,zero,2884 <___svfprintf_internal_r+0x1cc4>
    26cc:	d9002d17 	ldw	r4,180(sp)
    26d0:	d9402f17 	ldw	r5,188(sp)
    26d4:	20800017 	ldw	r2,0(r4)
    26d8:	21000104 	addi	r4,r4,4
    26dc:	d9002d15 	stw	r4,180(sp)
    26e0:	1140000d 	sth	r5,0(r2)
    26e4:	00396106 	br	c6c <___svfprintf_internal_r+0xac>
    26e8:	d9402c17 	ldw	r5,176(sp)
    26ec:	d9801e04 	addi	r6,sp,120
    26f0:	9809883a 	mov	r4,r19
    26f4:	000a2980 	call	a298 <__ssprint_r>
    26f8:	103a161e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    26fc:	d8c02017 	ldw	r3,128(sp)
    2700:	d8801f17 	ldw	r2,124(sp)
    2704:	da000404 	addi	r8,sp,16
    2708:	d9403317 	ldw	r5,204(sp)
    270c:	10800044 	addi	r2,r2,1
    2710:	44000015 	stw	r16,0(r8)
    2714:	28c7883a 	add	r3,r5,r3
    2718:	003b7706 	br	14f8 <___svfprintf_internal_r+0x938>
    271c:	8009883a 	mov	r4,r16
    2720:	da003e15 	stw	r8,248(sp)
    2724:	0000b280 	call	b28 <strlen>
    2728:	d8802e15 	stw	r2,184(sp)
    272c:	da003e17 	ldw	r8,248(sp)
    2730:	103c280e 	bge	r2,zero,17d4 <___svfprintf_internal_r+0xc14>
    2734:	0005883a 	mov	r2,zero
    2738:	003c2606 	br	17d4 <___svfprintf_internal_r+0xc14>
    273c:	00bfffc4 	movi	r2,-1
    2740:	003a0906 	br	f68 <___svfprintf_internal_r+0x3a8>
    2744:	010000b4 	movhi	r4,2
    2748:	2136bb84 	addi	r4,r4,-9490
    274c:	d9003515 	stw	r4,212(sp)
    2750:	003b0606 	br	136c <___svfprintf_internal_r+0x7ac>
    2754:	013fffc4 	movi	r4,-1
    2758:	003a2706 	br	ff8 <___svfprintf_internal_r+0x438>
    275c:	d9402c17 	ldw	r5,176(sp)
    2760:	d9801e04 	addi	r6,sp,120
    2764:	9809883a 	mov	r4,r19
    2768:	000a2980 	call	a298 <__ssprint_r>
    276c:	1039f91e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    2770:	d8c02017 	ldw	r3,128(sp)
    2774:	da000404 	addi	r8,sp,16
    2778:	003d8406 	br	1d8c <___svfprintf_internal_r+0x11cc>
    277c:	0023883a 	mov	r17,zero
    2780:	003d8306 	br	1d90 <___svfprintf_internal_r+0x11d0>
    2784:	010000b4 	movhi	r4,2
    2788:	2136b784 	addi	r4,r4,-9506
    278c:	d9002b15 	stw	r4,172(sp)
    2790:	d9002b17 	ldw	r4,172(sp)
    2794:	1c47883a 	add	r3,r3,r17
    2798:	10800044 	addi	r2,r2,1
    279c:	41000015 	stw	r4,0(r8)
    27a0:	44400115 	stw	r17,4(r8)
    27a4:	d8c02015 	stw	r3,128(sp)
    27a8:	d8801f15 	stw	r2,124(sp)
    27ac:	010001c4 	movi	r4,7
    27b0:	20bfcd16 	blt	r4,r2,26e8 <___svfprintf_internal_r+0x1b28>
    27b4:	42000204 	addi	r8,r8,8
    27b8:	003fd306 	br	2708 <___svfprintf_internal_r+0x1b48>
    27bc:	d9402c17 	ldw	r5,176(sp)
    27c0:	d9801e04 	addi	r6,sp,120
    27c4:	9809883a 	mov	r4,r19
    27c8:	000a2980 	call	a298 <__ssprint_r>
    27cc:	1039e11e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    27d0:	d8802617 	ldw	r2,152(sp)
    27d4:	d8c02017 	ldw	r3,128(sp)
    27d8:	da000404 	addi	r8,sp,16
    27dc:	003e1c06 	br	2050 <___svfprintf_internal_r+0x1490>
    27e0:	d8802917 	ldw	r2,164(sp)
    27e4:	00c00184 	movi	r3,6
    27e8:	1880012e 	bgeu	r3,r2,27f0 <___svfprintf_internal_r+0x1c30>
    27ec:	1805883a 	mov	r2,r3
    27f0:	d8802e15 	stw	r2,184(sp)
    27f4:	1000f316 	blt	r2,zero,2bc4 <___svfprintf_internal_r+0x2004>
    27f8:	040000b4 	movhi	r16,2
    27fc:	d8802a15 	stw	r2,168(sp)
    2800:	dd002d15 	stw	r20,180(sp)
    2804:	d8002915 	stw	zero,164(sp)
    2808:	d8003215 	stw	zero,200(sp)
    280c:	8436b504 	addi	r16,r16,-9516
    2810:	0039883a 	mov	fp,zero
    2814:	003a9f06 	br	1294 <___svfprintf_internal_r+0x6d4>
    2818:	010000b4 	movhi	r4,2
    281c:	2136bb84 	addi	r4,r4,-9490
    2820:	d9003515 	stw	r4,212(sp)
    2824:	003b5f06 	br	15a4 <___svfprintf_internal_r+0x9e4>
    2828:	d9402c17 	ldw	r5,176(sp)
    282c:	d9801e04 	addi	r6,sp,120
    2830:	9809883a 	mov	r4,r19
    2834:	000a2980 	call	a298 <__ssprint_r>
    2838:	1039c61e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    283c:	d8802617 	ldw	r2,152(sp)
    2840:	d9403317 	ldw	r5,204(sp)
    2844:	d8c02017 	ldw	r3,128(sp)
    2848:	da000404 	addi	r8,sp,16
    284c:	2885c83a 	sub	r2,r5,r2
    2850:	003e1006 	br	2094 <___svfprintf_internal_r+0x14d4>
    2854:	00800044 	movi	r2,1
    2858:	10803fcc 	andi	r2,r2,255
    285c:	00c00044 	movi	r3,1
    2860:	10fa3526 	beq	r2,r3,1138 <___svfprintf_internal_r+0x578>
    2864:	00c00084 	movi	r3,2
    2868:	10fb9e26 	beq	r2,r3,16e4 <___svfprintf_internal_r+0xb24>
    286c:	003a6406 	br	1200 <___svfprintf_internal_r+0x640>
    2870:	0021883a 	mov	r16,zero
    2874:	003e0806 	br	2098 <___svfprintf_internal_r+0x14d8>
    2878:	07000b44 	movi	fp,45
    287c:	df002785 	stb	fp,158(sp)
    2880:	003a0b06 	br	10b0 <___svfprintf_internal_r+0x4f0>
    2884:	d8c02d17 	ldw	r3,180(sp)
    2888:	d9002f17 	ldw	r4,188(sp)
    288c:	18800017 	ldw	r2,0(r3)
    2890:	18c00104 	addi	r3,r3,4
    2894:	d8c02d15 	stw	r3,180(sp)
    2898:	11000015 	stw	r4,0(r2)
    289c:	0038f306 	br	c6c <___svfprintf_internal_r+0xac>
    28a0:	00c00b44 	movi	r3,45
    28a4:	d8c02785 	stb	r3,158(sp)
    28a8:	d8802a15 	stw	r2,168(sp)
    28ac:	dc802b17 	ldw	r18,172(sp)
    28b0:	d8002915 	stw	zero,164(sp)
    28b4:	07000b44 	movi	fp,45
    28b8:	003a7306 	br	1288 <___svfprintf_internal_r+0x6c8>
    28bc:	9080004c 	andi	r2,r18,1
    28c0:	1000941e 	bne	r2,zero,2b14 <___svfprintf_internal_r+0x1f54>
    28c4:	d8802117 	ldw	r2,132(sp)
    28c8:	1405c83a 	sub	r2,r2,r16
    28cc:	d8803315 	stw	r2,204(sp)
    28d0:	b441161e 	bne	r22,r17,2d2c <___svfprintf_internal_r+0x216c>
    28d4:	dd802617 	ldw	r22,152(sp)
    28d8:	00bfff44 	movi	r2,-3
    28dc:	b0801a16 	blt	r22,r2,2948 <___svfprintf_internal_r+0x1d88>
    28e0:	d9402917 	ldw	r5,164(sp)
    28e4:	2d801816 	blt	r5,r22,2948 <___svfprintf_internal_r+0x1d88>
    28e8:	dd803215 	stw	r22,200(sp)
    28ec:	003f3a06 	br	25d8 <___svfprintf_internal_r+0x1a18>
    28f0:	1025883a 	mov	r18,r2
    28f4:	0039883a 	mov	fp,zero
    28f8:	00800084 	movi	r2,2
    28fc:	003fd606 	br	2858 <___svfprintf_internal_r+0x1c98>
    2900:	9080004c 	andi	r2,r18,1
    2904:	103f191e 	bne	r2,zero,256c <___svfprintf_internal_r+0x19ac>
    2908:	d8802117 	ldw	r2,132(sp)
    290c:	003f2806 	br	25b0 <___svfprintf_internal_r+0x19f0>
    2910:	010000b4 	movhi	r4,2
    2914:	2136b784 	addi	r4,r4,-9506
    2918:	d9002b15 	stw	r4,172(sp)
    291c:	003c7c06 	br	1b10 <___svfprintf_internal_r+0xf50>
    2920:	e005883a 	mov	r2,fp
    2924:	003f2206 	br	25b0 <___svfprintf_internal_r+0x19f0>
    2928:	d9402917 	ldw	r5,164(sp)
    292c:	df002783 	ldbu	fp,158(sp)
    2930:	dd002d15 	stw	r20,180(sp)
    2934:	d9402a15 	stw	r5,168(sp)
    2938:	d9402e15 	stw	r5,184(sp)
    293c:	d8002915 	stw	zero,164(sp)
    2940:	d8003215 	stw	zero,200(sp)
    2944:	003a4c06 	br	1278 <___svfprintf_internal_r+0x6b8>
    2948:	8c7fff84 	addi	r17,r17,-2
    294c:	b5bfffc4 	addi	r22,r22,-1
    2950:	dd802615 	stw	r22,152(sp)
    2954:	dc4022c5 	stb	r17,139(sp)
    2958:	b000c316 	blt	r22,zero,2c68 <___svfprintf_internal_r+0x20a8>
    295c:	00800ac4 	movi	r2,43
    2960:	d8802305 	stb	r2,140(sp)
    2964:	00800244 	movi	r2,9
    2968:	15806e16 	blt	r2,r22,2b24 <___svfprintf_internal_r+0x1f64>
    296c:	00800c04 	movi	r2,48
    2970:	b5800c04 	addi	r22,r22,48
    2974:	d8802345 	stb	r2,141(sp)
    2978:	dd802385 	stb	r22,142(sp)
    297c:	d88023c4 	addi	r2,sp,143
    2980:	df0022c4 	addi	fp,sp,139
    2984:	d8c03317 	ldw	r3,204(sp)
    2988:	1739c83a 	sub	fp,r2,fp
    298c:	d9003317 	ldw	r4,204(sp)
    2990:	e0c7883a 	add	r3,fp,r3
    2994:	df003b15 	stw	fp,236(sp)
    2998:	d8c02e15 	stw	r3,184(sp)
    299c:	00800044 	movi	r2,1
    29a0:	1100b70e 	bge	r2,r4,2c80 <___svfprintf_internal_r+0x20c0>
    29a4:	d8c02e17 	ldw	r3,184(sp)
    29a8:	18c00044 	addi	r3,r3,1
    29ac:	d8c02e15 	stw	r3,184(sp)
    29b0:	1805883a 	mov	r2,r3
    29b4:	1800b016 	blt	r3,zero,2c78 <___svfprintf_internal_r+0x20b8>
    29b8:	d8003215 	stw	zero,200(sp)
    29bc:	003f1006 	br	2600 <___svfprintf_internal_r+0x1a40>
    29c0:	d8802917 	ldw	r2,164(sp)
    29c4:	103ec71e 	bne	r2,zero,24e4 <___svfprintf_internal_r+0x1924>
    29c8:	dc002915 	stw	r16,164(sp)
    29cc:	003ec506 	br	24e4 <___svfprintf_internal_r+0x1924>
    29d0:	d9402c17 	ldw	r5,176(sp)
    29d4:	d9801e04 	addi	r6,sp,120
    29d8:	9809883a 	mov	r4,r19
    29dc:	000a2980 	call	a298 <__ssprint_r>
    29e0:	10395c1e 	bne	r2,zero,f54 <___svfprintf_internal_r+0x394>
    29e4:	dc402617 	ldw	r17,152(sp)
    29e8:	d8c02017 	ldw	r3,128(sp)
    29ec:	d8801f17 	ldw	r2,124(sp)
    29f0:	da000404 	addi	r8,sp,16
    29f4:	003e7706 	br	23d4 <___svfprintf_internal_r+0x1814>
    29f8:	582f883a 	mov	r23,r11
    29fc:	d8002915 	stw	zero,164(sp)
    2a00:	0038c406 	br	d14 <___svfprintf_internal_r+0x154>
    2a04:	d8c02917 	ldw	r3,164(sp)
    2a08:	d8802104 	addi	r2,sp,132
    2a0c:	d8800315 	stw	r2,12(sp)
    2a10:	d9403617 	ldw	r5,216(sp)
    2a14:	d8802504 	addi	r2,sp,148
    2a18:	d8800215 	stw	r2,8(sp)
    2a1c:	d8802604 	addi	r2,sp,152
    2a20:	d8c00015 	stw	r3,0(sp)
    2a24:	9809883a 	mov	r4,r19
    2a28:	d8800115 	stw	r2,4(sp)
    2a2c:	01c000c4 	movi	r7,3
    2a30:	a00d883a 	mov	r6,r20
    2a34:	da003e15 	stw	r8,248(sp)
    2a38:	00053bc0 	call	53bc <_dtoa_r>
    2a3c:	d9002917 	ldw	r4,164(sp)
    2a40:	da003e17 	ldw	r8,248(sp)
    2a44:	1021883a 	mov	r16,r2
    2a48:	1139883a 	add	fp,r2,r4
    2a4c:	2007883a 	mov	r3,r4
    2a50:	81000007 	ldb	r4,0(r16)
    2a54:	00800c04 	movi	r2,48
    2a58:	20806f26 	beq	r4,r2,2c18 <___svfprintf_internal_r+0x2058>
    2a5c:	d8c02617 	ldw	r3,152(sp)
    2a60:	e0f9883a 	add	fp,fp,r3
    2a64:	003ec206 	br	2570 <___svfprintf_internal_r+0x19b0>
    2a68:	00c00b44 	movi	r3,45
    2a6c:	2520003c 	xorhi	r20,r4,32768
    2a70:	d8c02a05 	stb	r3,168(sp)
    2a74:	003ea106 	br	24fc <___svfprintf_internal_r+0x193c>
    2a78:	d8c03217 	ldw	r3,200(sp)
    2a7c:	00c0890e 	bge	zero,r3,2ca4 <___svfprintf_internal_r+0x20e4>
    2a80:	00800044 	movi	r2,1
    2a84:	d9003317 	ldw	r4,204(sp)
    2a88:	1105883a 	add	r2,r2,r4
    2a8c:	d8802e15 	stw	r2,184(sp)
    2a90:	10005f16 	blt	r2,zero,2c10 <___svfprintf_internal_r+0x2050>
    2a94:	044019c4 	movi	r17,103
    2a98:	003ed906 	br	2600 <___svfprintf_internal_r+0x1a40>
    2a9c:	d9002917 	ldw	r4,164(sp)
    2aa0:	20c00044 	addi	r3,r4,1
    2aa4:	003e9c06 	br	2518 <___svfprintf_internal_r+0x1958>
    2aa8:	d9002917 	ldw	r4,164(sp)
    2aac:	00c0680e 	bge	zero,r3,2c50 <___svfprintf_internal_r+0x2090>
    2ab0:	2000461e 	bne	r4,zero,2bcc <___svfprintf_internal_r+0x200c>
    2ab4:	9480004c 	andi	r18,r18,1
    2ab8:	9000441e 	bne	r18,zero,2bcc <___svfprintf_internal_r+0x200c>
    2abc:	1805883a 	mov	r2,r3
    2ac0:	1800a016 	blt	r3,zero,2d44 <___svfprintf_internal_r+0x2184>
    2ac4:	d8c03217 	ldw	r3,200(sp)
    2ac8:	d8c02e15 	stw	r3,184(sp)
    2acc:	003ecc06 	br	2600 <___svfprintf_internal_r+0x1a40>
    2ad0:	d9402917 	ldw	r5,164(sp)
    2ad4:	d8802104 	addi	r2,sp,132
    2ad8:	d8800315 	stw	r2,12(sp)
    2adc:	d9400015 	stw	r5,0(sp)
    2ae0:	d8802504 	addi	r2,sp,148
    2ae4:	d9403617 	ldw	r5,216(sp)
    2ae8:	d8800215 	stw	r2,8(sp)
    2aec:	d8802604 	addi	r2,sp,152
    2af0:	d8800115 	stw	r2,4(sp)
    2af4:	01c000c4 	movi	r7,3
    2af8:	a00d883a 	mov	r6,r20
    2afc:	9809883a 	mov	r4,r19
    2b00:	da003e15 	stw	r8,248(sp)
    2b04:	00053bc0 	call	53bc <_dtoa_r>
    2b08:	d8c02917 	ldw	r3,164(sp)
    2b0c:	da003e17 	ldw	r8,248(sp)
    2b10:	1021883a 	mov	r16,r2
    2b14:	00801184 	movi	r2,70
    2b18:	80f9883a 	add	fp,r16,r3
    2b1c:	88bfcc26 	beq	r17,r2,2a50 <___svfprintf_internal_r+0x1e90>
    2b20:	003e9306 	br	2570 <___svfprintf_internal_r+0x19b0>
    2b24:	df0022c4 	addi	fp,sp,139
    2b28:	dc002915 	stw	r16,164(sp)
    2b2c:	9829883a 	mov	r20,r19
    2b30:	e021883a 	mov	r16,fp
    2b34:	4027883a 	mov	r19,r8
    2b38:	b009883a 	mov	r4,r22
    2b3c:	01400284 	movi	r5,10
    2b40:	000e1540 	call	e154 <__modsi3>
    2b44:	10800c04 	addi	r2,r2,48
    2b48:	843fffc4 	addi	r16,r16,-1
    2b4c:	b009883a 	mov	r4,r22
    2b50:	01400284 	movi	r5,10
    2b54:	80800005 	stb	r2,0(r16)
    2b58:	000e0d00 	call	e0d0 <__divsi3>
    2b5c:	102d883a 	mov	r22,r2
    2b60:	00800244 	movi	r2,9
    2b64:	15bff416 	blt	r2,r22,2b38 <___svfprintf_internal_r+0x1f78>
    2b68:	9811883a 	mov	r8,r19
    2b6c:	b0800c04 	addi	r2,r22,48
    2b70:	a027883a 	mov	r19,r20
    2b74:	8029883a 	mov	r20,r16
    2b78:	a17fffc4 	addi	r5,r20,-1
    2b7c:	a0bfffc5 	stb	r2,-1(r20)
    2b80:	dc002917 	ldw	r16,164(sp)
    2b84:	2f00752e 	bgeu	r5,fp,2d5c <___svfprintf_internal_r+0x219c>
    2b88:	d9c02384 	addi	r7,sp,142
    2b8c:	3d0fc83a 	sub	r7,r7,r20
    2b90:	d9002344 	addi	r4,sp,141
    2b94:	e1cf883a 	add	r7,fp,r7
    2b98:	00000106 	br	2ba0 <___svfprintf_internal_r+0x1fe0>
    2b9c:	28800003 	ldbu	r2,0(r5)
    2ba0:	20800005 	stb	r2,0(r4)
    2ba4:	21000044 	addi	r4,r4,1
    2ba8:	29400044 	addi	r5,r5,1
    2bac:	21fffb1e 	bne	r4,r7,2b9c <___svfprintf_internal_r+0x1fdc>
    2bb0:	d8802304 	addi	r2,sp,140
    2bb4:	1505c83a 	sub	r2,r2,r20
    2bb8:	d8c02344 	addi	r3,sp,141
    2bbc:	1885883a 	add	r2,r3,r2
    2bc0:	003f7006 	br	2984 <___svfprintf_internal_r+0x1dc4>
    2bc4:	0005883a 	mov	r2,zero
    2bc8:	003f0b06 	br	27f8 <___svfprintf_internal_r+0x1c38>
    2bcc:	d9002917 	ldw	r4,164(sp)
    2bd0:	d8c03217 	ldw	r3,200(sp)
    2bd4:	20800044 	addi	r2,r4,1
    2bd8:	1885883a 	add	r2,r3,r2
    2bdc:	d8802e15 	stw	r2,184(sp)
    2be0:	103e870e 	bge	r2,zero,2600 <___svfprintf_internal_r+0x1a40>
    2be4:	0005883a 	mov	r2,zero
    2be8:	003e8506 	br	2600 <___svfprintf_internal_r+0x1a40>
    2bec:	010000b4 	movhi	r4,2
    2bf0:	2136b784 	addi	r4,r4,-9506
    2bf4:	d9002b15 	stw	r4,172(sp)
    2bf8:	003cc506 	br	1f10 <___svfprintf_internal_r+0x1350>
    2bfc:	d8c03217 	ldw	r3,200(sp)
    2c00:	18c00044 	addi	r3,r3,1
    2c04:	d8c02e15 	stw	r3,184(sp)
    2c08:	1805883a 	mov	r2,r3
    2c0c:	183fa10e 	bge	r3,zero,2a94 <___svfprintf_internal_r+0x1ed4>
    2c10:	0005883a 	mov	r2,zero
    2c14:	003f9f06 	br	2a94 <___svfprintf_internal_r+0x1ed4>
    2c18:	d9003617 	ldw	r4,216(sp)
    2c1c:	000d883a 	mov	r6,zero
    2c20:	000f883a 	mov	r7,zero
    2c24:	a00b883a 	mov	r5,r20
    2c28:	d8c03d15 	stw	r3,244(sp)
    2c2c:	da003e15 	stw	r8,248(sp)
    2c30:	000f4180 	call	f418 <__eqdf2>
    2c34:	d8c03d17 	ldw	r3,244(sp)
    2c38:	da003e17 	ldw	r8,248(sp)
    2c3c:	103f8726 	beq	r2,zero,2a5c <___svfprintf_internal_r+0x1e9c>
    2c40:	00800044 	movi	r2,1
    2c44:	10c7c83a 	sub	r3,r2,r3
    2c48:	d8c02615 	stw	r3,152(sp)
    2c4c:	003f8406 	br	2a60 <___svfprintf_internal_r+0x1ea0>
    2c50:	20000e1e 	bne	r4,zero,2c8c <___svfprintf_internal_r+0x20cc>
    2c54:	9480004c 	andi	r18,r18,1
    2c58:	90000c1e 	bne	r18,zero,2c8c <___svfprintf_internal_r+0x20cc>
    2c5c:	00800044 	movi	r2,1
    2c60:	d8802e15 	stw	r2,184(sp)
    2c64:	003e6606 	br	2600 <___svfprintf_internal_r+0x1a40>
    2c68:	00800b44 	movi	r2,45
    2c6c:	05adc83a 	sub	r22,zero,r22
    2c70:	d8802305 	stb	r2,140(sp)
    2c74:	003f3b06 	br	2964 <___svfprintf_internal_r+0x1da4>
    2c78:	0005883a 	mov	r2,zero
    2c7c:	003f4e06 	br	29b8 <___svfprintf_internal_r+0x1df8>
    2c80:	90a4703a 	and	r18,r18,r2
    2c84:	903f4a26 	beq	r18,zero,29b0 <___svfprintf_internal_r+0x1df0>
    2c88:	003f4606 	br	29a4 <___svfprintf_internal_r+0x1de4>
    2c8c:	d8c02917 	ldw	r3,164(sp)
    2c90:	18c00084 	addi	r3,r3,2
    2c94:	d8c02e15 	stw	r3,184(sp)
    2c98:	1805883a 	mov	r2,r3
    2c9c:	183e580e 	bge	r3,zero,2600 <___svfprintf_internal_r+0x1a40>
    2ca0:	003fd006 	br	2be4 <___svfprintf_internal_r+0x2024>
    2ca4:	00800084 	movi	r2,2
    2ca8:	10c5c83a 	sub	r2,r2,r3
    2cac:	003f7506 	br	2a84 <___svfprintf_internal_r+0x1ec4>
    2cb0:	d8802d17 	ldw	r2,180(sp)
    2cb4:	d9002d17 	ldw	r4,180(sp)
    2cb8:	bc400043 	ldbu	r17,1(r23)
    2cbc:	10800017 	ldw	r2,0(r2)
    2cc0:	582f883a 	mov	r23,r11
    2cc4:	d8802915 	stw	r2,164(sp)
    2cc8:	20800104 	addi	r2,r4,4
    2ccc:	d9002917 	ldw	r4,164(sp)
    2cd0:	d8802d15 	stw	r2,180(sp)
    2cd4:	203df00e 	bge	r4,zero,2498 <___svfprintf_internal_r+0x18d8>
    2cd8:	8c403fcc 	andi	r17,r17,255
    2cdc:	00bfffc4 	movi	r2,-1
    2ce0:	8c40201c 	xori	r17,r17,128
    2ce4:	d8802915 	stw	r2,164(sp)
    2ce8:	8c7fe004 	addi	r17,r17,-128
    2cec:	00380806 	br	d10 <___svfprintf_internal_r+0x150>
    2cf0:	9080004c 	andi	r2,r18,1
    2cf4:	0039883a 	mov	fp,zero
    2cf8:	10000726 	beq	r2,zero,2d18 <___svfprintf_internal_r+0x2158>
    2cfc:	d8c02817 	ldw	r3,160(sp)
    2d00:	dc001dc4 	addi	r16,sp,119
    2d04:	00800c04 	movi	r2,48
    2d08:	1c07c83a 	sub	r3,r3,r16
    2d0c:	d8801dc5 	stb	r2,119(sp)
    2d10:	d8c02e15 	stw	r3,184(sp)
    2d14:	00395206 	br	1260 <___svfprintf_internal_r+0x6a0>
    2d18:	d8002e15 	stw	zero,184(sp)
    2d1c:	dc001e04 	addi	r16,sp,120
    2d20:	00394f06 	br	1260 <___svfprintf_internal_r+0x6a0>
    2d24:	0005883a 	mov	r2,zero
    2d28:	003e3206 	br	25f4 <___svfprintf_internal_r+0x1a34>
    2d2c:	dd802617 	ldw	r22,152(sp)
    2d30:	003f0606 	br	294c <___svfprintf_internal_r+0x1d8c>
    2d34:	d9c02785 	stb	r7,158(sp)
    2d38:	003a5106 	br	1680 <___svfprintf_internal_r+0xac0>
    2d3c:	d9c02785 	stb	r7,158(sp)
    2d40:	003a3706 	br	1620 <___svfprintf_internal_r+0xa60>
    2d44:	0005883a 	mov	r2,zero
    2d48:	003f5e06 	br	2ac4 <___svfprintf_internal_r+0x1f04>
    2d4c:	d9c02785 	stb	r7,158(sp)
    2d50:	00391706 	br	11b0 <___svfprintf_internal_r+0x5f0>
    2d54:	d9c02785 	stb	r7,158(sp)
    2d58:	0038e606 	br	10f4 <___svfprintf_internal_r+0x534>
    2d5c:	d8802344 	addi	r2,sp,141
    2d60:	003f0806 	br	2984 <___svfprintf_internal_r+0x1dc4>
    2d64:	d9c02785 	stb	r7,158(sp)
    2d68:	0038b706 	br	1048 <___svfprintf_internal_r+0x488>
    2d6c:	d9c02785 	stb	r7,158(sp)
    2d70:	003adc06 	br	18e4 <___svfprintf_internal_r+0xd24>
    2d74:	d9403917 	ldw	r5,228(sp)
    2d78:	00800304 	movi	r2,12
    2d7c:	28800015 	stw	r2,0(r5)
    2d80:	00bfffc4 	movi	r2,-1
    2d84:	00387806 	br	f68 <___svfprintf_internal_r+0x3a8>
    2d88:	d9c02785 	stb	r7,158(sp)
    2d8c:	003abf06 	br	188c <___svfprintf_internal_r+0xccc>
    2d90:	d9c02785 	stb	r7,158(sp)
    2d94:	003a9b06 	br	1804 <___svfprintf_internal_r+0xc44>

00002d98 <___vfprintf_internal_r>:
    2d98:	deffb804 	addi	sp,sp,-288
    2d9c:	dfc04715 	stw	ra,284(sp)
    2da0:	ddc04515 	stw	r23,276(sp)
    2da4:	dd404315 	stw	r21,268(sp)
    2da8:	d9002c15 	stw	r4,176(sp)
    2dac:	282f883a 	mov	r23,r5
    2db0:	302b883a 	mov	r21,r6
    2db4:	d9c02d15 	stw	r7,180(sp)
    2db8:	df004615 	stw	fp,280(sp)
    2dbc:	dd804415 	stw	r22,272(sp)
    2dc0:	dd004215 	stw	r20,264(sp)
    2dc4:	dcc04115 	stw	r19,260(sp)
    2dc8:	dc804015 	stw	r18,256(sp)
    2dcc:	dc403f15 	stw	r17,252(sp)
    2dd0:	dc003e15 	stw	r16,248(sp)
    2dd4:	0007bb00 	call	7bb0 <_localeconv_r>
    2dd8:	10800017 	ldw	r2,0(r2)
    2ddc:	1009883a 	mov	r4,r2
    2de0:	d8803415 	stw	r2,208(sp)
    2de4:	0000b280 	call	b28 <strlen>
    2de8:	d8803715 	stw	r2,220(sp)
    2dec:	d8802c17 	ldw	r2,176(sp)
    2df0:	10000226 	beq	r2,zero,2dfc <___vfprintf_internal_r+0x64>
    2df4:	10800e17 	ldw	r2,56(r2)
    2df8:	1000f926 	beq	r2,zero,31e0 <___vfprintf_internal_r+0x448>
    2dfc:	b880030b 	ldhu	r2,12(r23)
    2e00:	10c8000c 	andi	r3,r2,8192
    2e04:	1800061e 	bne	r3,zero,2e20 <___vfprintf_internal_r+0x88>
    2e08:	b9001917 	ldw	r4,100(r23)
    2e0c:	00f7ffc4 	movi	r3,-8193
    2e10:	10880014 	ori	r2,r2,8192
    2e14:	20c6703a 	and	r3,r4,r3
    2e18:	b880030d 	sth	r2,12(r23)
    2e1c:	b8c01915 	stw	r3,100(r23)
    2e20:	10c0020c 	andi	r3,r2,8
    2e24:	1800c126 	beq	r3,zero,312c <___vfprintf_internal_r+0x394>
    2e28:	b8c00417 	ldw	r3,16(r23)
    2e2c:	1800bf26 	beq	r3,zero,312c <___vfprintf_internal_r+0x394>
    2e30:	1080068c 	andi	r2,r2,26
    2e34:	00c00284 	movi	r3,10
    2e38:	10c0c426 	beq	r2,r3,314c <___vfprintf_internal_r+0x3b4>
    2e3c:	d8c00404 	addi	r3,sp,16
    2e40:	050000b4 	movhi	r20,2
    2e44:	d9001e04 	addi	r4,sp,120
    2e48:	a536bf84 	addi	r20,r20,-9474
    2e4c:	d8c01e15 	stw	r3,120(sp)
    2e50:	d8002015 	stw	zero,128(sp)
    2e54:	d8001f15 	stw	zero,124(sp)
    2e58:	d8003315 	stw	zero,204(sp)
    2e5c:	d8003615 	stw	zero,216(sp)
    2e60:	d8003815 	stw	zero,224(sp)
    2e64:	1811883a 	mov	r8,r3
    2e68:	d8003915 	stw	zero,228(sp)
    2e6c:	d8003a15 	stw	zero,232(sp)
    2e70:	d8002f15 	stw	zero,188(sp)
    2e74:	d9002815 	stw	r4,160(sp)
    2e78:	a8800007 	ldb	r2,0(r21)
    2e7c:	10027b26 	beq	r2,zero,386c <___vfprintf_internal_r+0xad4>
    2e80:	00c00944 	movi	r3,37
    2e84:	a821883a 	mov	r16,r21
    2e88:	10c0021e 	bne	r2,r3,2e94 <___vfprintf_internal_r+0xfc>
    2e8c:	00001406 	br	2ee0 <___vfprintf_internal_r+0x148>
    2e90:	10c00326 	beq	r2,r3,2ea0 <___vfprintf_internal_r+0x108>
    2e94:	84000044 	addi	r16,r16,1
    2e98:	80800007 	ldb	r2,0(r16)
    2e9c:	103ffc1e 	bne	r2,zero,2e90 <___vfprintf_internal_r+0xf8>
    2ea0:	8563c83a 	sub	r17,r16,r21
    2ea4:	88000e26 	beq	r17,zero,2ee0 <___vfprintf_internal_r+0x148>
    2ea8:	d8c02017 	ldw	r3,128(sp)
    2eac:	d8801f17 	ldw	r2,124(sp)
    2eb0:	45400015 	stw	r21,0(r8)
    2eb4:	1c47883a 	add	r3,r3,r17
    2eb8:	10800044 	addi	r2,r2,1
    2ebc:	d8c02015 	stw	r3,128(sp)
    2ec0:	44400115 	stw	r17,4(r8)
    2ec4:	d8801f15 	stw	r2,124(sp)
    2ec8:	00c001c4 	movi	r3,7
    2ecc:	1880a716 	blt	r3,r2,316c <___vfprintf_internal_r+0x3d4>
    2ed0:	42000204 	addi	r8,r8,8
    2ed4:	d9402f17 	ldw	r5,188(sp)
    2ed8:	2c4b883a 	add	r5,r5,r17
    2edc:	d9402f15 	stw	r5,188(sp)
    2ee0:	80800007 	ldb	r2,0(r16)
    2ee4:	1000a826 	beq	r2,zero,3188 <___vfprintf_internal_r+0x3f0>
    2ee8:	84400047 	ldb	r17,1(r16)
    2eec:	00bfffc4 	movi	r2,-1
    2ef0:	85400044 	addi	r21,r16,1
    2ef4:	d8002785 	stb	zero,158(sp)
    2ef8:	0007883a 	mov	r3,zero
    2efc:	000f883a 	mov	r7,zero
    2f00:	d8802915 	stw	r2,164(sp)
    2f04:	d8003115 	stw	zero,196(sp)
    2f08:	0025883a 	mov	r18,zero
    2f0c:	01401604 	movi	r5,88
    2f10:	01800244 	movi	r6,9
    2f14:	02800a84 	movi	r10,42
    2f18:	02401b04 	movi	r9,108
    2f1c:	ad400044 	addi	r21,r21,1
    2f20:	88bff804 	addi	r2,r17,-32
    2f24:	28830436 	bltu	r5,r2,3b38 <___vfprintf_internal_r+0xda0>
    2f28:	100490ba 	slli	r2,r2,2
    2f2c:	01000034 	movhi	r4,0
    2f30:	210bd004 	addi	r4,r4,12096
    2f34:	1105883a 	add	r2,r2,r4
    2f38:	10800017 	ldw	r2,0(r2)
    2f3c:	1000683a 	jmp	r2
    2f40:	00003a58 	cmpnei	zero,zero,233
    2f44:	00003b38 	rdprs	zero,zero,236
    2f48:	00003b38 	rdprs	zero,zero,236
    2f4c:	00003a78 	rdprs	zero,zero,233
    2f50:	00003b38 	rdprs	zero,zero,236
    2f54:	00003b38 	rdprs	zero,zero,236
    2f58:	00003b38 	rdprs	zero,zero,236
    2f5c:	00003b38 	rdprs	zero,zero,236
    2f60:	00003b38 	rdprs	zero,zero,236
    2f64:	00003b38 	rdprs	zero,zero,236
    2f68:	000031ec 	andhi	zero,zero,199
    2f6c:	00003994 	movui	zero,230
    2f70:	00003b38 	rdprs	zero,zero,236
    2f74:	000030b4 	movhi	zero,194
    2f78:	00003214 	movui	zero,200
    2f7c:	00003b38 	rdprs	zero,zero,236
    2f80:	00003254 	movui	zero,201
    2f84:	00003260 	cmpeqi	zero,zero,201
    2f88:	00003260 	cmpeqi	zero,zero,201
    2f8c:	00003260 	cmpeqi	zero,zero,201
    2f90:	00003260 	cmpeqi	zero,zero,201
    2f94:	00003260 	cmpeqi	zero,zero,201
    2f98:	00003260 	cmpeqi	zero,zero,201
    2f9c:	00003260 	cmpeqi	zero,zero,201
    2fa0:	00003260 	cmpeqi	zero,zero,201
    2fa4:	00003260 	cmpeqi	zero,zero,201
    2fa8:	00003b38 	rdprs	zero,zero,236
    2fac:	00003b38 	rdprs	zero,zero,236
    2fb0:	00003b38 	rdprs	zero,zero,236
    2fb4:	00003b38 	rdprs	zero,zero,236
    2fb8:	00003b38 	rdprs	zero,zero,236
    2fbc:	00003b38 	rdprs	zero,zero,236
    2fc0:	00003b38 	rdprs	zero,zero,236
    2fc4:	00003b38 	rdprs	zero,zero,236
    2fc8:	00003b38 	rdprs	zero,zero,236
    2fcc:	00003b38 	rdprs	zero,zero,236
    2fd0:	00003294 	movui	zero,202
    2fd4:	00003350 	cmplti	zero,zero,205
    2fd8:	00003b38 	rdprs	zero,zero,236
    2fdc:	00003350 	cmplti	zero,zero,205
    2fe0:	00003b38 	rdprs	zero,zero,236
    2fe4:	00003b38 	rdprs	zero,zero,236
    2fe8:	00003b38 	rdprs	zero,zero,236
    2fec:	00003b38 	rdprs	zero,zero,236
    2ff0:	000033f0 	cmpltui	zero,zero,207
    2ff4:	00003b38 	rdprs	zero,zero,236
    2ff8:	00003b38 	rdprs	zero,zero,236
    2ffc:	000033fc 	xorhi	zero,zero,207
    3000:	00003b38 	rdprs	zero,zero,236
    3004:	00003b38 	rdprs	zero,zero,236
    3008:	00003b38 	rdprs	zero,zero,236
    300c:	00003b38 	rdprs	zero,zero,236
    3010:	00003b38 	rdprs	zero,zero,236
    3014:	00003874 	movhi	zero,225
    3018:	00003b38 	rdprs	zero,zero,236
    301c:	00003b38 	rdprs	zero,zero,236
    3020:	000038d4 	movui	zero,227
    3024:	00003b38 	rdprs	zero,zero,236
    3028:	00003b38 	rdprs	zero,zero,236
    302c:	00003b38 	rdprs	zero,zero,236
    3030:	00003b38 	rdprs	zero,zero,236
    3034:	00003b38 	rdprs	zero,zero,236
    3038:	00003b38 	rdprs	zero,zero,236
    303c:	00003b38 	rdprs	zero,zero,236
    3040:	00003b38 	rdprs	zero,zero,236
    3044:	00003b38 	rdprs	zero,zero,236
    3048:	00003b38 	rdprs	zero,zero,236
    304c:	00003ae4 	muli	zero,zero,235
    3050:	00003a84 	movi	zero,234
    3054:	00003350 	cmplti	zero,zero,205
    3058:	00003350 	cmplti	zero,zero,205
    305c:	00003350 	cmplti	zero,zero,205
    3060:	00003a94 	movui	zero,234
    3064:	00003a84 	movi	zero,234
    3068:	00003b38 	rdprs	zero,zero,236
    306c:	00003b38 	rdprs	zero,zero,236
    3070:	00003aa0 	cmpeqi	zero,zero,234
    3074:	00003b38 	rdprs	zero,zero,236
    3078:	00003ab0 	cmpltui	zero,zero,234
    307c:	00003984 	movi	zero,230
    3080:	000030c0 	call	30c <LCD_cursor+0x50>
    3084:	000039a4 	muli	zero,zero,230
    3088:	00003b38 	rdprs	zero,zero,236
    308c:	000039b0 	cmpltui	zero,zero,230
    3090:	00003b38 	rdprs	zero,zero,236
    3094:	00003a0c 	andi	zero,zero,232
    3098:	00003b38 	rdprs	zero,zero,236
    309c:	00003b38 	rdprs	zero,zero,236
    30a0:	00003a1c 	xori	zero,zero,232
    30a4:	d9003117 	ldw	r4,196(sp)
    30a8:	d8802d15 	stw	r2,180(sp)
    30ac:	0109c83a 	sub	r4,zero,r4
    30b0:	d9003115 	stw	r4,196(sp)
    30b4:	94800114 	ori	r18,r18,4
    30b8:	ac400007 	ldb	r17,0(r21)
    30bc:	003f9706 	br	2f1c <___vfprintf_internal_r+0x184>
    30c0:	00800c04 	movi	r2,48
    30c4:	d9002d17 	ldw	r4,180(sp)
    30c8:	d9402917 	ldw	r5,164(sp)
    30cc:	d8802705 	stb	r2,156(sp)
    30d0:	00801e04 	movi	r2,120
    30d4:	d8802745 	stb	r2,157(sp)
    30d8:	d8002785 	stb	zero,158(sp)
    30dc:	20c00104 	addi	r3,r4,4
    30e0:	24c00017 	ldw	r19,0(r4)
    30e4:	002d883a 	mov	r22,zero
    30e8:	90800094 	ori	r2,r18,2
    30ec:	28029a16 	blt	r5,zero,3b58 <___vfprintf_internal_r+0xdc0>
    30f0:	00bfdfc4 	movi	r2,-129
    30f4:	90a4703a 	and	r18,r18,r2
    30f8:	d8c02d15 	stw	r3,180(sp)
    30fc:	94800094 	ori	r18,r18,2
    3100:	9802871e 	bne	r19,zero,3b20 <___vfprintf_internal_r+0xd88>
    3104:	008000b4 	movhi	r2,2
    3108:	10b6b004 	addi	r2,r2,-9536
    310c:	d8803915 	stw	r2,228(sp)
    3110:	04401e04 	movi	r17,120
    3114:	d8802917 	ldw	r2,164(sp)
    3118:	0039883a 	mov	fp,zero
    311c:	1001e926 	beq	r2,zero,38c4 <___vfprintf_internal_r+0xb2c>
    3120:	0027883a 	mov	r19,zero
    3124:	002d883a 	mov	r22,zero
    3128:	00020506 	br	3940 <___vfprintf_internal_r+0xba8>
    312c:	d9002c17 	ldw	r4,176(sp)
    3130:	b80b883a 	mov	r5,r23
    3134:	00050680 	call	5068 <__swsetup_r>
    3138:	1005ac1e 	bne	r2,zero,47ec <___vfprintf_internal_r+0x1a54>
    313c:	b880030b 	ldhu	r2,12(r23)
    3140:	00c00284 	movi	r3,10
    3144:	1080068c 	andi	r2,r2,26
    3148:	10ff3c1e 	bne	r2,r3,2e3c <___vfprintf_internal_r+0xa4>
    314c:	b880038f 	ldh	r2,14(r23)
    3150:	103f3a16 	blt	r2,zero,2e3c <___vfprintf_internal_r+0xa4>
    3154:	d9c02d17 	ldw	r7,180(sp)
    3158:	d9002c17 	ldw	r4,176(sp)
    315c:	a80d883a 	mov	r6,r21
    3160:	b80b883a 	mov	r5,r23
    3164:	0004fac0 	call	4fac <__sbprintf>
    3168:	00001106 	br	31b0 <___vfprintf_internal_r+0x418>
    316c:	d9002c17 	ldw	r4,176(sp)
    3170:	d9801e04 	addi	r6,sp,120
    3174:	b80b883a 	mov	r5,r23
    3178:	000b7a00 	call	b7a0 <__sprint_r>
    317c:	1000081e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    3180:	da000404 	addi	r8,sp,16
    3184:	003f5306 	br	2ed4 <___vfprintf_internal_r+0x13c>
    3188:	d8802017 	ldw	r2,128(sp)
    318c:	10000426 	beq	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    3190:	d9002c17 	ldw	r4,176(sp)
    3194:	d9801e04 	addi	r6,sp,120
    3198:	b80b883a 	mov	r5,r23
    319c:	000b7a00 	call	b7a0 <__sprint_r>
    31a0:	b880030b 	ldhu	r2,12(r23)
    31a4:	1080100c 	andi	r2,r2,64
    31a8:	1005901e 	bne	r2,zero,47ec <___vfprintf_internal_r+0x1a54>
    31ac:	d8802f17 	ldw	r2,188(sp)
    31b0:	dfc04717 	ldw	ra,284(sp)
    31b4:	df004617 	ldw	fp,280(sp)
    31b8:	ddc04517 	ldw	r23,276(sp)
    31bc:	dd804417 	ldw	r22,272(sp)
    31c0:	dd404317 	ldw	r21,268(sp)
    31c4:	dd004217 	ldw	r20,264(sp)
    31c8:	dcc04117 	ldw	r19,260(sp)
    31cc:	dc804017 	ldw	r18,256(sp)
    31d0:	dc403f17 	ldw	r17,252(sp)
    31d4:	dc003e17 	ldw	r16,248(sp)
    31d8:	dec04804 	addi	sp,sp,288
    31dc:	f800283a 	ret
    31e0:	d9002c17 	ldw	r4,176(sp)
    31e4:	000703c0 	call	703c <__sinit>
    31e8:	003f0406 	br	2dfc <___vfprintf_internal_r+0x64>
    31ec:	d8802d17 	ldw	r2,180(sp)
    31f0:	d9002d17 	ldw	r4,180(sp)
    31f4:	10800017 	ldw	r2,0(r2)
    31f8:	d8803115 	stw	r2,196(sp)
    31fc:	20800104 	addi	r2,r4,4
    3200:	d9003117 	ldw	r4,196(sp)
    3204:	203fa716 	blt	r4,zero,30a4 <___vfprintf_internal_r+0x30c>
    3208:	d8802d15 	stw	r2,180(sp)
    320c:	ac400007 	ldb	r17,0(r21)
    3210:	003f4206 	br	2f1c <___vfprintf_internal_r+0x184>
    3214:	ac400007 	ldb	r17,0(r21)
    3218:	aac00044 	addi	r11,r21,1
    321c:	8a872826 	beq	r17,r10,4ec0 <___vfprintf_internal_r+0x2128>
    3220:	88bff404 	addi	r2,r17,-48
    3224:	0009883a 	mov	r4,zero
    3228:	30867d36 	bltu	r6,r2,4c20 <___vfprintf_internal_r+0x1e88>
    322c:	5c400007 	ldb	r17,0(r11)
    3230:	210002a4 	muli	r4,r4,10
    3234:	5d400044 	addi	r21,r11,1
    3238:	a817883a 	mov	r11,r21
    323c:	2089883a 	add	r4,r4,r2
    3240:	88bff404 	addi	r2,r17,-48
    3244:	30bff92e 	bgeu	r6,r2,322c <___vfprintf_internal_r+0x494>
    3248:	2005c916 	blt	r4,zero,4970 <___vfprintf_internal_r+0x1bd8>
    324c:	d9002915 	stw	r4,164(sp)
    3250:	003f3306 	br	2f20 <___vfprintf_internal_r+0x188>
    3254:	94802014 	ori	r18,r18,128
    3258:	ac400007 	ldb	r17,0(r21)
    325c:	003f2f06 	br	2f1c <___vfprintf_internal_r+0x184>
    3260:	a809883a 	mov	r4,r21
    3264:	d8003115 	stw	zero,196(sp)
    3268:	88bff404 	addi	r2,r17,-48
    326c:	0017883a 	mov	r11,zero
    3270:	24400007 	ldb	r17,0(r4)
    3274:	5ac002a4 	muli	r11,r11,10
    3278:	ad400044 	addi	r21,r21,1
    327c:	a809883a 	mov	r4,r21
    3280:	12d7883a 	add	r11,r2,r11
    3284:	88bff404 	addi	r2,r17,-48
    3288:	30bff92e 	bgeu	r6,r2,3270 <___vfprintf_internal_r+0x4d8>
    328c:	dac03115 	stw	r11,196(sp)
    3290:	003f2306 	br	2f20 <___vfprintf_internal_r+0x188>
    3294:	18c03fcc 	andi	r3,r3,255
    3298:	18072b1e 	bne	r3,zero,4f48 <___vfprintf_internal_r+0x21b0>
    329c:	94800414 	ori	r18,r18,16
    32a0:	9080080c 	andi	r2,r18,32
    32a4:	10037b26 	beq	r2,zero,4094 <___vfprintf_internal_r+0x12fc>
    32a8:	d9402d17 	ldw	r5,180(sp)
    32ac:	28800117 	ldw	r2,4(r5)
    32b0:	2cc00017 	ldw	r19,0(r5)
    32b4:	29400204 	addi	r5,r5,8
    32b8:	d9402d15 	stw	r5,180(sp)
    32bc:	102d883a 	mov	r22,r2
    32c0:	10044b16 	blt	r2,zero,43f0 <___vfprintf_internal_r+0x1658>
    32c4:	d9402917 	ldw	r5,164(sp)
    32c8:	df002783 	ldbu	fp,158(sp)
    32cc:	2803bc16 	blt	r5,zero,41c0 <___vfprintf_internal_r+0x1428>
    32d0:	00ffdfc4 	movi	r3,-129
    32d4:	9d84b03a 	or	r2,r19,r22
    32d8:	90e4703a 	and	r18,r18,r3
    32dc:	10017726 	beq	r2,zero,38bc <___vfprintf_internal_r+0xb24>
    32e0:	b0038326 	beq	r22,zero,40f0 <___vfprintf_internal_r+0x1358>
    32e4:	dc402a15 	stw	r17,168(sp)
    32e8:	dc001e04 	addi	r16,sp,120
    32ec:	b023883a 	mov	r17,r22
    32f0:	402d883a 	mov	r22,r8
    32f4:	9809883a 	mov	r4,r19
    32f8:	880b883a 	mov	r5,r17
    32fc:	01800284 	movi	r6,10
    3300:	000f883a 	mov	r7,zero
    3304:	000db980 	call	db98 <__umoddi3>
    3308:	10800c04 	addi	r2,r2,48
    330c:	843fffc4 	addi	r16,r16,-1
    3310:	9809883a 	mov	r4,r19
    3314:	880b883a 	mov	r5,r17
    3318:	80800005 	stb	r2,0(r16)
    331c:	01800284 	movi	r6,10
    3320:	000f883a 	mov	r7,zero
    3324:	000d6200 	call	d620 <__udivdi3>
    3328:	1027883a 	mov	r19,r2
    332c:	10c4b03a 	or	r2,r2,r3
    3330:	1823883a 	mov	r17,r3
    3334:	103fef1e 	bne	r2,zero,32f4 <___vfprintf_internal_r+0x55c>
    3338:	d8c02817 	ldw	r3,160(sp)
    333c:	dc402a17 	ldw	r17,168(sp)
    3340:	b011883a 	mov	r8,r22
    3344:	1c07c83a 	sub	r3,r3,r16
    3348:	d8c02e15 	stw	r3,184(sp)
    334c:	00005906 	br	34b4 <___vfprintf_internal_r+0x71c>
    3350:	18c03fcc 	andi	r3,r3,255
    3354:	1806fa1e 	bne	r3,zero,4f40 <___vfprintf_internal_r+0x21a8>
    3358:	9080020c 	andi	r2,r18,8
    335c:	10048a26 	beq	r2,zero,4588 <___vfprintf_internal_r+0x17f0>
    3360:	d8c02d17 	ldw	r3,180(sp)
    3364:	d9002d17 	ldw	r4,180(sp)
    3368:	d9402d17 	ldw	r5,180(sp)
    336c:	18c00017 	ldw	r3,0(r3)
    3370:	21000117 	ldw	r4,4(r4)
    3374:	29400204 	addi	r5,r5,8
    3378:	d8c03615 	stw	r3,216(sp)
    337c:	d9003815 	stw	r4,224(sp)
    3380:	d9402d15 	stw	r5,180(sp)
    3384:	d9003617 	ldw	r4,216(sp)
    3388:	d9403817 	ldw	r5,224(sp)
    338c:	da003d15 	stw	r8,244(sp)
    3390:	04000044 	movi	r16,1
    3394:	0009fb80 	call	9fb8 <__fpclassifyd>
    3398:	da003d17 	ldw	r8,244(sp)
    339c:	14041f1e 	bne	r2,r16,441c <___vfprintf_internal_r+0x1684>
    33a0:	d9003617 	ldw	r4,216(sp)
    33a4:	d9403817 	ldw	r5,224(sp)
    33a8:	000d883a 	mov	r6,zero
    33ac:	000f883a 	mov	r7,zero
    33b0:	000f57c0 	call	f57c <__ledf2>
    33b4:	da003d17 	ldw	r8,244(sp)
    33b8:	1005be16 	blt	r2,zero,4ab4 <___vfprintf_internal_r+0x1d1c>
    33bc:	df002783 	ldbu	fp,158(sp)
    33c0:	008011c4 	movi	r2,71
    33c4:	1445330e 	bge	r2,r17,4894 <___vfprintf_internal_r+0x1afc>
    33c8:	040000b4 	movhi	r16,2
    33cc:	8436a804 	addi	r16,r16,-9568
    33d0:	00c000c4 	movi	r3,3
    33d4:	00bfdfc4 	movi	r2,-129
    33d8:	d8c02a15 	stw	r3,168(sp)
    33dc:	90a4703a 	and	r18,r18,r2
    33e0:	d8c02e15 	stw	r3,184(sp)
    33e4:	d8002915 	stw	zero,164(sp)
    33e8:	d8003215 	stw	zero,200(sp)
    33ec:	00003706 	br	34cc <___vfprintf_internal_r+0x734>
    33f0:	94800214 	ori	r18,r18,8
    33f4:	ac400007 	ldb	r17,0(r21)
    33f8:	003ec806 	br	2f1c <___vfprintf_internal_r+0x184>
    33fc:	18c03fcc 	andi	r3,r3,255
    3400:	1806db1e 	bne	r3,zero,4f70 <___vfprintf_internal_r+0x21d8>
    3404:	94800414 	ori	r18,r18,16
    3408:	9080080c 	andi	r2,r18,32
    340c:	1002d826 	beq	r2,zero,3f70 <___vfprintf_internal_r+0x11d8>
    3410:	d9402d17 	ldw	r5,180(sp)
    3414:	d8c02917 	ldw	r3,164(sp)
    3418:	d8002785 	stb	zero,158(sp)
    341c:	28800204 	addi	r2,r5,8
    3420:	2cc00017 	ldw	r19,0(r5)
    3424:	2d800117 	ldw	r22,4(r5)
    3428:	18048f16 	blt	r3,zero,4668 <___vfprintf_internal_r+0x18d0>
    342c:	013fdfc4 	movi	r4,-129
    3430:	9d86b03a 	or	r3,r19,r22
    3434:	d8802d15 	stw	r2,180(sp)
    3438:	9124703a 	and	r18,r18,r4
    343c:	1802d91e 	bne	r3,zero,3fa4 <___vfprintf_internal_r+0x120c>
    3440:	d8c02917 	ldw	r3,164(sp)
    3444:	0039883a 	mov	fp,zero
    3448:	1805c326 	beq	r3,zero,4b58 <___vfprintf_internal_r+0x1dc0>
    344c:	0027883a 	mov	r19,zero
    3450:	002d883a 	mov	r22,zero
    3454:	dc001e04 	addi	r16,sp,120
    3458:	9806d0fa 	srli	r3,r19,3
    345c:	b008977a 	slli	r4,r22,29
    3460:	b02cd0fa 	srli	r22,r22,3
    3464:	9cc001cc 	andi	r19,r19,7
    3468:	98800c04 	addi	r2,r19,48
    346c:	843fffc4 	addi	r16,r16,-1
    3470:	20e6b03a 	or	r19,r4,r3
    3474:	80800005 	stb	r2,0(r16)
    3478:	9d86b03a 	or	r3,r19,r22
    347c:	183ff61e 	bne	r3,zero,3458 <___vfprintf_internal_r+0x6c0>
    3480:	90c0004c 	andi	r3,r18,1
    3484:	18013b26 	beq	r3,zero,3974 <___vfprintf_internal_r+0xbdc>
    3488:	10803fcc 	andi	r2,r2,255
    348c:	1080201c 	xori	r2,r2,128
    3490:	10bfe004 	addi	r2,r2,-128
    3494:	00c00c04 	movi	r3,48
    3498:	10c13626 	beq	r2,r3,3974 <___vfprintf_internal_r+0xbdc>
    349c:	80ffffc5 	stb	r3,-1(r16)
    34a0:	d8c02817 	ldw	r3,160(sp)
    34a4:	80bfffc4 	addi	r2,r16,-1
    34a8:	1021883a 	mov	r16,r2
    34ac:	1887c83a 	sub	r3,r3,r2
    34b0:	d8c02e15 	stw	r3,184(sp)
    34b4:	d8802e17 	ldw	r2,184(sp)
    34b8:	d9002917 	ldw	r4,164(sp)
    34bc:	1100010e 	bge	r2,r4,34c4 <___vfprintf_internal_r+0x72c>
    34c0:	2005883a 	mov	r2,r4
    34c4:	d8802a15 	stw	r2,168(sp)
    34c8:	d8003215 	stw	zero,200(sp)
    34cc:	e7003fcc 	andi	fp,fp,255
    34d0:	e700201c 	xori	fp,fp,128
    34d4:	e73fe004 	addi	fp,fp,-128
    34d8:	e0000326 	beq	fp,zero,34e8 <___vfprintf_internal_r+0x750>
    34dc:	d8c02a17 	ldw	r3,168(sp)
    34e0:	18c00044 	addi	r3,r3,1
    34e4:	d8c02a15 	stw	r3,168(sp)
    34e8:	90c0008c 	andi	r3,r18,2
    34ec:	d8c02b15 	stw	r3,172(sp)
    34f0:	18000326 	beq	r3,zero,3500 <___vfprintf_internal_r+0x768>
    34f4:	d8c02a17 	ldw	r3,168(sp)
    34f8:	18c00084 	addi	r3,r3,2
    34fc:	d8c02a15 	stw	r3,168(sp)
    3500:	90c0210c 	andi	r3,r18,132
    3504:	d8c03015 	stw	r3,192(sp)
    3508:	1801a31e 	bne	r3,zero,3b98 <___vfprintf_internal_r+0xe00>
    350c:	d9003117 	ldw	r4,196(sp)
    3510:	d8c02a17 	ldw	r3,168(sp)
    3514:	20e7c83a 	sub	r19,r4,r3
    3518:	04c19f0e 	bge	zero,r19,3b98 <___vfprintf_internal_r+0xe00>
    351c:	02400404 	movi	r9,16
    3520:	d8c02017 	ldw	r3,128(sp)
    3524:	d8801f17 	ldw	r2,124(sp)
    3528:	4cc50d0e 	bge	r9,r19,4960 <___vfprintf_internal_r+0x1bc8>
    352c:	014000b4 	movhi	r5,2
    3530:	2976c384 	addi	r5,r5,-9458
    3534:	dc403b15 	stw	r17,236(sp)
    3538:	d9403515 	stw	r5,212(sp)
    353c:	9823883a 	mov	r17,r19
    3540:	482d883a 	mov	r22,r9
    3544:	9027883a 	mov	r19,r18
    3548:	070001c4 	movi	fp,7
    354c:	8025883a 	mov	r18,r16
    3550:	dc002c17 	ldw	r16,176(sp)
    3554:	00000306 	br	3564 <___vfprintf_internal_r+0x7cc>
    3558:	8c7ffc04 	addi	r17,r17,-16
    355c:	42000204 	addi	r8,r8,8
    3560:	b440130e 	bge	r22,r17,35b0 <___vfprintf_internal_r+0x818>
    3564:	010000b4 	movhi	r4,2
    3568:	18c00404 	addi	r3,r3,16
    356c:	10800044 	addi	r2,r2,1
    3570:	2136c384 	addi	r4,r4,-9458
    3574:	41000015 	stw	r4,0(r8)
    3578:	45800115 	stw	r22,4(r8)
    357c:	d8c02015 	stw	r3,128(sp)
    3580:	d8801f15 	stw	r2,124(sp)
    3584:	e0bff40e 	bge	fp,r2,3558 <___vfprintf_internal_r+0x7c0>
    3588:	d9801e04 	addi	r6,sp,120
    358c:	b80b883a 	mov	r5,r23
    3590:	8009883a 	mov	r4,r16
    3594:	000b7a00 	call	b7a0 <__sprint_r>
    3598:	103f011e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    359c:	8c7ffc04 	addi	r17,r17,-16
    35a0:	d8c02017 	ldw	r3,128(sp)
    35a4:	d8801f17 	ldw	r2,124(sp)
    35a8:	da000404 	addi	r8,sp,16
    35ac:	b47fed16 	blt	r22,r17,3564 <___vfprintf_internal_r+0x7cc>
    35b0:	9021883a 	mov	r16,r18
    35b4:	9825883a 	mov	r18,r19
    35b8:	8827883a 	mov	r19,r17
    35bc:	dc403b17 	ldw	r17,236(sp)
    35c0:	d9403517 	ldw	r5,212(sp)
    35c4:	98c7883a 	add	r3,r19,r3
    35c8:	10800044 	addi	r2,r2,1
    35cc:	41400015 	stw	r5,0(r8)
    35d0:	44c00115 	stw	r19,4(r8)
    35d4:	d8c02015 	stw	r3,128(sp)
    35d8:	d8801f15 	stw	r2,124(sp)
    35dc:	010001c4 	movi	r4,7
    35e0:	2082a316 	blt	r4,r2,4070 <___vfprintf_internal_r+0x12d8>
    35e4:	df002787 	ldb	fp,158(sp)
    35e8:	42000204 	addi	r8,r8,8
    35ec:	e0000c26 	beq	fp,zero,3620 <___vfprintf_internal_r+0x888>
    35f0:	d8801f17 	ldw	r2,124(sp)
    35f4:	d9002784 	addi	r4,sp,158
    35f8:	18c00044 	addi	r3,r3,1
    35fc:	10800044 	addi	r2,r2,1
    3600:	41000015 	stw	r4,0(r8)
    3604:	01000044 	movi	r4,1
    3608:	41000115 	stw	r4,4(r8)
    360c:	d8c02015 	stw	r3,128(sp)
    3610:	d8801f15 	stw	r2,124(sp)
    3614:	010001c4 	movi	r4,7
    3618:	20823c16 	blt	r4,r2,3f0c <___vfprintf_internal_r+0x1174>
    361c:	42000204 	addi	r8,r8,8
    3620:	d8802b17 	ldw	r2,172(sp)
    3624:	10000c26 	beq	r2,zero,3658 <___vfprintf_internal_r+0x8c0>
    3628:	d8801f17 	ldw	r2,124(sp)
    362c:	d9002704 	addi	r4,sp,156
    3630:	18c00084 	addi	r3,r3,2
    3634:	10800044 	addi	r2,r2,1
    3638:	41000015 	stw	r4,0(r8)
    363c:	01000084 	movi	r4,2
    3640:	41000115 	stw	r4,4(r8)
    3644:	d8c02015 	stw	r3,128(sp)
    3648:	d8801f15 	stw	r2,124(sp)
    364c:	010001c4 	movi	r4,7
    3650:	20823616 	blt	r4,r2,3f2c <___vfprintf_internal_r+0x1194>
    3654:	42000204 	addi	r8,r8,8
    3658:	d9003017 	ldw	r4,192(sp)
    365c:	00802004 	movi	r2,128
    3660:	20819926 	beq	r4,r2,3cc8 <___vfprintf_internal_r+0xf30>
    3664:	d9402917 	ldw	r5,164(sp)
    3668:	d8802e17 	ldw	r2,184(sp)
    366c:	28adc83a 	sub	r22,r5,r2
    3670:	0580310e 	bge	zero,r22,3738 <___vfprintf_internal_r+0x9a0>
    3674:	07000404 	movi	fp,16
    3678:	d8801f17 	ldw	r2,124(sp)
    367c:	e584140e 	bge	fp,r22,46d0 <___vfprintf_internal_r+0x1938>
    3680:	014000b4 	movhi	r5,2
    3684:	2976bf84 	addi	r5,r5,-9474
    3688:	dc402915 	stw	r17,164(sp)
    368c:	d9402b15 	stw	r5,172(sp)
    3690:	b023883a 	mov	r17,r22
    3694:	04c001c4 	movi	r19,7
    3698:	a82d883a 	mov	r22,r21
    369c:	902b883a 	mov	r21,r18
    36a0:	8025883a 	mov	r18,r16
    36a4:	dc002c17 	ldw	r16,176(sp)
    36a8:	00000306 	br	36b8 <___vfprintf_internal_r+0x920>
    36ac:	8c7ffc04 	addi	r17,r17,-16
    36b0:	42000204 	addi	r8,r8,8
    36b4:	e440110e 	bge	fp,r17,36fc <___vfprintf_internal_r+0x964>
    36b8:	18c00404 	addi	r3,r3,16
    36bc:	10800044 	addi	r2,r2,1
    36c0:	45000015 	stw	r20,0(r8)
    36c4:	47000115 	stw	fp,4(r8)
    36c8:	d8c02015 	stw	r3,128(sp)
    36cc:	d8801f15 	stw	r2,124(sp)
    36d0:	98bff60e 	bge	r19,r2,36ac <___vfprintf_internal_r+0x914>
    36d4:	d9801e04 	addi	r6,sp,120
    36d8:	b80b883a 	mov	r5,r23
    36dc:	8009883a 	mov	r4,r16
    36e0:	000b7a00 	call	b7a0 <__sprint_r>
    36e4:	103eae1e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    36e8:	8c7ffc04 	addi	r17,r17,-16
    36ec:	d8c02017 	ldw	r3,128(sp)
    36f0:	d8801f17 	ldw	r2,124(sp)
    36f4:	da000404 	addi	r8,sp,16
    36f8:	e47fef16 	blt	fp,r17,36b8 <___vfprintf_internal_r+0x920>
    36fc:	9021883a 	mov	r16,r18
    3700:	a825883a 	mov	r18,r21
    3704:	b02b883a 	mov	r21,r22
    3708:	882d883a 	mov	r22,r17
    370c:	dc402917 	ldw	r17,164(sp)
    3710:	d9002b17 	ldw	r4,172(sp)
    3714:	1d87883a 	add	r3,r3,r22
    3718:	10800044 	addi	r2,r2,1
    371c:	41000015 	stw	r4,0(r8)
    3720:	45800115 	stw	r22,4(r8)
    3724:	d8c02015 	stw	r3,128(sp)
    3728:	d8801f15 	stw	r2,124(sp)
    372c:	010001c4 	movi	r4,7
    3730:	2081ee16 	blt	r4,r2,3eec <___vfprintf_internal_r+0x1154>
    3734:	42000204 	addi	r8,r8,8
    3738:	9080400c 	andi	r2,r18,256
    373c:	1001181e 	bne	r2,zero,3ba0 <___vfprintf_internal_r+0xe08>
    3740:	d9402e17 	ldw	r5,184(sp)
    3744:	d8801f17 	ldw	r2,124(sp)
    3748:	44000015 	stw	r16,0(r8)
    374c:	1947883a 	add	r3,r3,r5
    3750:	10800044 	addi	r2,r2,1
    3754:	41400115 	stw	r5,4(r8)
    3758:	d8c02015 	stw	r3,128(sp)
    375c:	d8801f15 	stw	r2,124(sp)
    3760:	010001c4 	movi	r4,7
    3764:	2081d316 	blt	r4,r2,3eb4 <___vfprintf_internal_r+0x111c>
    3768:	42000204 	addi	r8,r8,8
    376c:	9480010c 	andi	r18,r18,4
    3770:	90003226 	beq	r18,zero,383c <___vfprintf_internal_r+0xaa4>
    3774:	d9403117 	ldw	r5,196(sp)
    3778:	d8802a17 	ldw	r2,168(sp)
    377c:	28a1c83a 	sub	r16,r5,r2
    3780:	04002e0e 	bge	zero,r16,383c <___vfprintf_internal_r+0xaa4>
    3784:	04400404 	movi	r17,16
    3788:	d8801f17 	ldw	r2,124(sp)
    378c:	8c04a20e 	bge	r17,r16,4a18 <___vfprintf_internal_r+0x1c80>
    3790:	014000b4 	movhi	r5,2
    3794:	2976c384 	addi	r5,r5,-9458
    3798:	d9403515 	stw	r5,212(sp)
    379c:	048001c4 	movi	r18,7
    37a0:	dcc02c17 	ldw	r19,176(sp)
    37a4:	00000306 	br	37b4 <___vfprintf_internal_r+0xa1c>
    37a8:	843ffc04 	addi	r16,r16,-16
    37ac:	42000204 	addi	r8,r8,8
    37b0:	8c00130e 	bge	r17,r16,3800 <___vfprintf_internal_r+0xa68>
    37b4:	010000b4 	movhi	r4,2
    37b8:	18c00404 	addi	r3,r3,16
    37bc:	10800044 	addi	r2,r2,1
    37c0:	2136c384 	addi	r4,r4,-9458
    37c4:	41000015 	stw	r4,0(r8)
    37c8:	44400115 	stw	r17,4(r8)
    37cc:	d8c02015 	stw	r3,128(sp)
    37d0:	d8801f15 	stw	r2,124(sp)
    37d4:	90bff40e 	bge	r18,r2,37a8 <___vfprintf_internal_r+0xa10>
    37d8:	d9801e04 	addi	r6,sp,120
    37dc:	b80b883a 	mov	r5,r23
    37e0:	9809883a 	mov	r4,r19
    37e4:	000b7a00 	call	b7a0 <__sprint_r>
    37e8:	103e6d1e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    37ec:	843ffc04 	addi	r16,r16,-16
    37f0:	d8c02017 	ldw	r3,128(sp)
    37f4:	d8801f17 	ldw	r2,124(sp)
    37f8:	da000404 	addi	r8,sp,16
    37fc:	8c3fed16 	blt	r17,r16,37b4 <___vfprintf_internal_r+0xa1c>
    3800:	d9403517 	ldw	r5,212(sp)
    3804:	1c07883a 	add	r3,r3,r16
    3808:	10800044 	addi	r2,r2,1
    380c:	41400015 	stw	r5,0(r8)
    3810:	44000115 	stw	r16,4(r8)
    3814:	d8c02015 	stw	r3,128(sp)
    3818:	d8801f15 	stw	r2,124(sp)
    381c:	010001c4 	movi	r4,7
    3820:	2080060e 	bge	r4,r2,383c <___vfprintf_internal_r+0xaa4>
    3824:	d9002c17 	ldw	r4,176(sp)
    3828:	d9801e04 	addi	r6,sp,120
    382c:	b80b883a 	mov	r5,r23
    3830:	000b7a00 	call	b7a0 <__sprint_r>
    3834:	103e5a1e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    3838:	d8c02017 	ldw	r3,128(sp)
    383c:	d8803117 	ldw	r2,196(sp)
    3840:	d9002a17 	ldw	r4,168(sp)
    3844:	1100010e 	bge	r2,r4,384c <___vfprintf_internal_r+0xab4>
    3848:	2005883a 	mov	r2,r4
    384c:	d9402f17 	ldw	r5,188(sp)
    3850:	288b883a 	add	r5,r5,r2
    3854:	d9402f15 	stw	r5,188(sp)
    3858:	18019e1e 	bne	r3,zero,3ed4 <___vfprintf_internal_r+0x113c>
    385c:	a8800007 	ldb	r2,0(r21)
    3860:	d8001f15 	stw	zero,124(sp)
    3864:	da000404 	addi	r8,sp,16
    3868:	103d851e 	bne	r2,zero,2e80 <___vfprintf_internal_r+0xe8>
    386c:	a821883a 	mov	r16,r21
    3870:	003d9b06 	br	2ee0 <___vfprintf_internal_r+0x148>
    3874:	18c03fcc 	andi	r3,r3,255
    3878:	1805c11e 	bne	r3,zero,4f80 <___vfprintf_internal_r+0x21e8>
    387c:	94800414 	ori	r18,r18,16
    3880:	9080080c 	andi	r2,r18,32
    3884:	10020c26 	beq	r2,zero,40b8 <___vfprintf_internal_r+0x1320>
    3888:	d8802d17 	ldw	r2,180(sp)
    388c:	d9002917 	ldw	r4,164(sp)
    3890:	d8002785 	stb	zero,158(sp)
    3894:	10c00204 	addi	r3,r2,8
    3898:	14c00017 	ldw	r19,0(r2)
    389c:	15800117 	ldw	r22,4(r2)
    38a0:	20040f16 	blt	r4,zero,48e0 <___vfprintf_internal_r+0x1b48>
    38a4:	013fdfc4 	movi	r4,-129
    38a8:	9d84b03a 	or	r2,r19,r22
    38ac:	d8c02d15 	stw	r3,180(sp)
    38b0:	9124703a 	and	r18,r18,r4
    38b4:	0039883a 	mov	fp,zero
    38b8:	103e891e 	bne	r2,zero,32e0 <___vfprintf_internal_r+0x548>
    38bc:	d9002917 	ldw	r4,164(sp)
    38c0:	2002c11e 	bne	r4,zero,43c8 <___vfprintf_internal_r+0x1630>
    38c4:	d8002915 	stw	zero,164(sp)
    38c8:	d8002e15 	stw	zero,184(sp)
    38cc:	dc001e04 	addi	r16,sp,120
    38d0:	003ef806 	br	34b4 <___vfprintf_internal_r+0x71c>
    38d4:	18c03fcc 	andi	r3,r3,255
    38d8:	18059d1e 	bne	r3,zero,4f50 <___vfprintf_internal_r+0x21b8>
    38dc:	014000b4 	movhi	r5,2
    38e0:	2976ab04 	addi	r5,r5,-9556
    38e4:	d9403915 	stw	r5,228(sp)
    38e8:	9080080c 	andi	r2,r18,32
    38ec:	10005226 	beq	r2,zero,3a38 <___vfprintf_internal_r+0xca0>
    38f0:	d8802d17 	ldw	r2,180(sp)
    38f4:	14c00017 	ldw	r19,0(r2)
    38f8:	15800117 	ldw	r22,4(r2)
    38fc:	10800204 	addi	r2,r2,8
    3900:	d8802d15 	stw	r2,180(sp)
    3904:	9080004c 	andi	r2,r18,1
    3908:	10019026 	beq	r2,zero,3f4c <___vfprintf_internal_r+0x11b4>
    390c:	9d84b03a 	or	r2,r19,r22
    3910:	10036926 	beq	r2,zero,46b8 <___vfprintf_internal_r+0x1920>
    3914:	d8c02917 	ldw	r3,164(sp)
    3918:	00800c04 	movi	r2,48
    391c:	d8802705 	stb	r2,156(sp)
    3920:	dc402745 	stb	r17,157(sp)
    3924:	d8002785 	stb	zero,158(sp)
    3928:	90800094 	ori	r2,r18,2
    392c:	18045d16 	blt	r3,zero,4aa4 <___vfprintf_internal_r+0x1d0c>
    3930:	00bfdfc4 	movi	r2,-129
    3934:	90a4703a 	and	r18,r18,r2
    3938:	94800094 	ori	r18,r18,2
    393c:	0039883a 	mov	fp,zero
    3940:	d9003917 	ldw	r4,228(sp)
    3944:	dc001e04 	addi	r16,sp,120
    3948:	988003cc 	andi	r2,r19,15
    394c:	b006973a 	slli	r3,r22,28
    3950:	2085883a 	add	r2,r4,r2
    3954:	9826d13a 	srli	r19,r19,4
    3958:	10800003 	ldbu	r2,0(r2)
    395c:	b02cd13a 	srli	r22,r22,4
    3960:	843fffc4 	addi	r16,r16,-1
    3964:	1ce6b03a 	or	r19,r3,r19
    3968:	80800005 	stb	r2,0(r16)
    396c:	9d84b03a 	or	r2,r19,r22
    3970:	103ff51e 	bne	r2,zero,3948 <___vfprintf_internal_r+0xbb0>
    3974:	d8c02817 	ldw	r3,160(sp)
    3978:	1c07c83a 	sub	r3,r3,r16
    397c:	d8c02e15 	stw	r3,184(sp)
    3980:	003ecc06 	br	34b4 <___vfprintf_internal_r+0x71c>
    3984:	18c03fcc 	andi	r3,r3,255
    3988:	183e9f26 	beq	r3,zero,3408 <___vfprintf_internal_r+0x670>
    398c:	d9c02785 	stb	r7,158(sp)
    3990:	003e9d06 	br	3408 <___vfprintf_internal_r+0x670>
    3994:	00c00044 	movi	r3,1
    3998:	01c00ac4 	movi	r7,43
    399c:	ac400007 	ldb	r17,0(r21)
    39a0:	003d5e06 	br	2f1c <___vfprintf_internal_r+0x184>
    39a4:	94800814 	ori	r18,r18,32
    39a8:	ac400007 	ldb	r17,0(r21)
    39ac:	003d5b06 	br	2f1c <___vfprintf_internal_r+0x184>
    39b0:	d8c02d17 	ldw	r3,180(sp)
    39b4:	d8002785 	stb	zero,158(sp)
    39b8:	1c000017 	ldw	r16,0(r3)
    39bc:	1cc00104 	addi	r19,r3,4
    39c0:	80041926 	beq	r16,zero,4a28 <___vfprintf_internal_r+0x1c90>
    39c4:	d9002917 	ldw	r4,164(sp)
    39c8:	2003d016 	blt	r4,zero,490c <___vfprintf_internal_r+0x1b74>
    39cc:	200d883a 	mov	r6,r4
    39d0:	000b883a 	mov	r5,zero
    39d4:	8009883a 	mov	r4,r16
    39d8:	da003d15 	stw	r8,244(sp)
    39dc:	00085a80 	call	85a8 <memchr>
    39e0:	da003d17 	ldw	r8,244(sp)
    39e4:	10045426 	beq	r2,zero,4b38 <___vfprintf_internal_r+0x1da0>
    39e8:	1405c83a 	sub	r2,r2,r16
    39ec:	d8802e15 	stw	r2,184(sp)
    39f0:	1003cc16 	blt	r2,zero,4924 <___vfprintf_internal_r+0x1b8c>
    39f4:	df002783 	ldbu	fp,158(sp)
    39f8:	d8802a15 	stw	r2,168(sp)
    39fc:	dcc02d15 	stw	r19,180(sp)
    3a00:	d8002915 	stw	zero,164(sp)
    3a04:	d8003215 	stw	zero,200(sp)
    3a08:	003eb006 	br	34cc <___vfprintf_internal_r+0x734>
    3a0c:	18c03fcc 	andi	r3,r3,255
    3a10:	183f9b26 	beq	r3,zero,3880 <___vfprintf_internal_r+0xae8>
    3a14:	d9c02785 	stb	r7,158(sp)
    3a18:	003f9906 	br	3880 <___vfprintf_internal_r+0xae8>
    3a1c:	18c03fcc 	andi	r3,r3,255
    3a20:	1805551e 	bne	r3,zero,4f78 <___vfprintf_internal_r+0x21e0>
    3a24:	014000b4 	movhi	r5,2
    3a28:	2976b004 	addi	r5,r5,-9536
    3a2c:	d9403915 	stw	r5,228(sp)
    3a30:	9080080c 	andi	r2,r18,32
    3a34:	103fae1e 	bne	r2,zero,38f0 <___vfprintf_internal_r+0xb58>
    3a38:	9080040c 	andi	r2,r18,16
    3a3c:	1002de26 	beq	r2,zero,45b8 <___vfprintf_internal_r+0x1820>
    3a40:	d8c02d17 	ldw	r3,180(sp)
    3a44:	002d883a 	mov	r22,zero
    3a48:	1cc00017 	ldw	r19,0(r3)
    3a4c:	18c00104 	addi	r3,r3,4
    3a50:	d8c02d15 	stw	r3,180(sp)
    3a54:	003fab06 	br	3904 <___vfprintf_internal_r+0xb6c>
    3a58:	38803fcc 	andi	r2,r7,255
    3a5c:	1080201c 	xori	r2,r2,128
    3a60:	10bfe004 	addi	r2,r2,-128
    3a64:	1002d21e 	bne	r2,zero,45b0 <___vfprintf_internal_r+0x1818>
    3a68:	00c00044 	movi	r3,1
    3a6c:	01c00804 	movi	r7,32
    3a70:	ac400007 	ldb	r17,0(r21)
    3a74:	003d2906 	br	2f1c <___vfprintf_internal_r+0x184>
    3a78:	94800054 	ori	r18,r18,1
    3a7c:	ac400007 	ldb	r17,0(r21)
    3a80:	003d2606 	br	2f1c <___vfprintf_internal_r+0x184>
    3a84:	18c03fcc 	andi	r3,r3,255
    3a88:	183e0526 	beq	r3,zero,32a0 <___vfprintf_internal_r+0x508>
    3a8c:	d9c02785 	stb	r7,158(sp)
    3a90:	003e0306 	br	32a0 <___vfprintf_internal_r+0x508>
    3a94:	94801014 	ori	r18,r18,64
    3a98:	ac400007 	ldb	r17,0(r21)
    3a9c:	003d1f06 	br	2f1c <___vfprintf_internal_r+0x184>
    3aa0:	ac400007 	ldb	r17,0(r21)
    3aa4:	8a438726 	beq	r17,r9,48c4 <___vfprintf_internal_r+0x1b2c>
    3aa8:	94800414 	ori	r18,r18,16
    3aac:	003d1b06 	br	2f1c <___vfprintf_internal_r+0x184>
    3ab0:	18c03fcc 	andi	r3,r3,255
    3ab4:	1805341e 	bne	r3,zero,4f88 <___vfprintf_internal_r+0x21f0>
    3ab8:	9080080c 	andi	r2,r18,32
    3abc:	1002cd26 	beq	r2,zero,45f4 <___vfprintf_internal_r+0x185c>
    3ac0:	d9402d17 	ldw	r5,180(sp)
    3ac4:	d9002f17 	ldw	r4,188(sp)
    3ac8:	28800017 	ldw	r2,0(r5)
    3acc:	2007d7fa 	srai	r3,r4,31
    3ad0:	29400104 	addi	r5,r5,4
    3ad4:	d9402d15 	stw	r5,180(sp)
    3ad8:	11000015 	stw	r4,0(r2)
    3adc:	10c00115 	stw	r3,4(r2)
    3ae0:	003ce506 	br	2e78 <___vfprintf_internal_r+0xe0>
    3ae4:	d8c02d17 	ldw	r3,180(sp)
    3ae8:	d9002d17 	ldw	r4,180(sp)
    3aec:	d8002785 	stb	zero,158(sp)
    3af0:	18800017 	ldw	r2,0(r3)
    3af4:	21000104 	addi	r4,r4,4
    3af8:	00c00044 	movi	r3,1
    3afc:	d8c02a15 	stw	r3,168(sp)
    3b00:	d8801405 	stb	r2,80(sp)
    3b04:	d9002d15 	stw	r4,180(sp)
    3b08:	d8c02e15 	stw	r3,184(sp)
    3b0c:	d8002915 	stw	zero,164(sp)
    3b10:	d8003215 	stw	zero,200(sp)
    3b14:	dc001404 	addi	r16,sp,80
    3b18:	0039883a 	mov	fp,zero
    3b1c:	003e7206 	br	34e8 <___vfprintf_internal_r+0x750>
    3b20:	010000b4 	movhi	r4,2
    3b24:	2136b004 	addi	r4,r4,-9536
    3b28:	0039883a 	mov	fp,zero
    3b2c:	d9003915 	stw	r4,228(sp)
    3b30:	04401e04 	movi	r17,120
    3b34:	003f8206 	br	3940 <___vfprintf_internal_r+0xba8>
    3b38:	18c03fcc 	andi	r3,r3,255
    3b3c:	1805061e 	bne	r3,zero,4f58 <___vfprintf_internal_r+0x21c0>
    3b40:	883d9126 	beq	r17,zero,3188 <___vfprintf_internal_r+0x3f0>
    3b44:	00c00044 	movi	r3,1
    3b48:	d8c02a15 	stw	r3,168(sp)
    3b4c:	dc401405 	stb	r17,80(sp)
    3b50:	d8002785 	stb	zero,158(sp)
    3b54:	003fec06 	br	3b08 <___vfprintf_internal_r+0xd70>
    3b58:	014000b4 	movhi	r5,2
    3b5c:	2976b004 	addi	r5,r5,-9536
    3b60:	d9403915 	stw	r5,228(sp)
    3b64:	d8c02d15 	stw	r3,180(sp)
    3b68:	1025883a 	mov	r18,r2
    3b6c:	04401e04 	movi	r17,120
    3b70:	9d84b03a 	or	r2,r19,r22
    3b74:	1000fc1e 	bne	r2,zero,3f68 <___vfprintf_internal_r+0x11d0>
    3b78:	0039883a 	mov	fp,zero
    3b7c:	00800084 	movi	r2,2
    3b80:	10803fcc 	andi	r2,r2,255
    3b84:	00c00044 	movi	r3,1
    3b88:	10c20f26 	beq	r2,r3,43c8 <___vfprintf_internal_r+0x1630>
    3b8c:	00c00084 	movi	r3,2
    3b90:	10fd6326 	beq	r2,r3,3120 <___vfprintf_internal_r+0x388>
    3b94:	003e2d06 	br	344c <___vfprintf_internal_r+0x6b4>
    3b98:	d8c02017 	ldw	r3,128(sp)
    3b9c:	003e9306 	br	35ec <___vfprintf_internal_r+0x854>
    3ba0:	00801944 	movi	r2,101
    3ba4:	14407e0e 	bge	r2,r17,3da0 <___vfprintf_internal_r+0x1008>
    3ba8:	d9003617 	ldw	r4,216(sp)
    3bac:	d9403817 	ldw	r5,224(sp)
    3bb0:	000d883a 	mov	r6,zero
    3bb4:	000f883a 	mov	r7,zero
    3bb8:	d8c03c15 	stw	r3,240(sp)
    3bbc:	da003d15 	stw	r8,244(sp)
    3bc0:	000f4180 	call	f418 <__eqdf2>
    3bc4:	d8c03c17 	ldw	r3,240(sp)
    3bc8:	da003d17 	ldw	r8,244(sp)
    3bcc:	1000f71e 	bne	r2,zero,3fac <___vfprintf_internal_r+0x1214>
    3bd0:	d8801f17 	ldw	r2,124(sp)
    3bd4:	010000b4 	movhi	r4,2
    3bd8:	2136b704 	addi	r4,r4,-9508
    3bdc:	18c00044 	addi	r3,r3,1
    3be0:	10800044 	addi	r2,r2,1
    3be4:	41000015 	stw	r4,0(r8)
    3be8:	01000044 	movi	r4,1
    3bec:	41000115 	stw	r4,4(r8)
    3bf0:	d8c02015 	stw	r3,128(sp)
    3bf4:	d8801f15 	stw	r2,124(sp)
    3bf8:	010001c4 	movi	r4,7
    3bfc:	2082b816 	blt	r4,r2,46e0 <___vfprintf_internal_r+0x1948>
    3c00:	42000204 	addi	r8,r8,8
    3c04:	d8802617 	ldw	r2,152(sp)
    3c08:	d9403317 	ldw	r5,204(sp)
    3c0c:	11400216 	blt	r2,r5,3c18 <___vfprintf_internal_r+0xe80>
    3c10:	9080004c 	andi	r2,r18,1
    3c14:	103ed526 	beq	r2,zero,376c <___vfprintf_internal_r+0x9d4>
    3c18:	d8803717 	ldw	r2,220(sp)
    3c1c:	d9003417 	ldw	r4,208(sp)
    3c20:	d9403717 	ldw	r5,220(sp)
    3c24:	1887883a 	add	r3,r3,r2
    3c28:	d8801f17 	ldw	r2,124(sp)
    3c2c:	41000015 	stw	r4,0(r8)
    3c30:	41400115 	stw	r5,4(r8)
    3c34:	10800044 	addi	r2,r2,1
    3c38:	d8c02015 	stw	r3,128(sp)
    3c3c:	d8801f15 	stw	r2,124(sp)
    3c40:	010001c4 	movi	r4,7
    3c44:	20832916 	blt	r4,r2,48ec <___vfprintf_internal_r+0x1b54>
    3c48:	42000204 	addi	r8,r8,8
    3c4c:	d8803317 	ldw	r2,204(sp)
    3c50:	143fffc4 	addi	r16,r2,-1
    3c54:	043ec50e 	bge	zero,r16,376c <___vfprintf_internal_r+0x9d4>
    3c58:	04400404 	movi	r17,16
    3c5c:	d8801f17 	ldw	r2,124(sp)
    3c60:	8c00880e 	bge	r17,r16,3e84 <___vfprintf_internal_r+0x10ec>
    3c64:	014000b4 	movhi	r5,2
    3c68:	2976bf84 	addi	r5,r5,-9474
    3c6c:	d9402b15 	stw	r5,172(sp)
    3c70:	058001c4 	movi	r22,7
    3c74:	dcc02c17 	ldw	r19,176(sp)
    3c78:	00000306 	br	3c88 <___vfprintf_internal_r+0xef0>
    3c7c:	42000204 	addi	r8,r8,8
    3c80:	843ffc04 	addi	r16,r16,-16
    3c84:	8c00820e 	bge	r17,r16,3e90 <___vfprintf_internal_r+0x10f8>
    3c88:	18c00404 	addi	r3,r3,16
    3c8c:	10800044 	addi	r2,r2,1
    3c90:	45000015 	stw	r20,0(r8)
    3c94:	44400115 	stw	r17,4(r8)
    3c98:	d8c02015 	stw	r3,128(sp)
    3c9c:	d8801f15 	stw	r2,124(sp)
    3ca0:	b0bff60e 	bge	r22,r2,3c7c <___vfprintf_internal_r+0xee4>
    3ca4:	d9801e04 	addi	r6,sp,120
    3ca8:	b80b883a 	mov	r5,r23
    3cac:	9809883a 	mov	r4,r19
    3cb0:	000b7a00 	call	b7a0 <__sprint_r>
    3cb4:	103d3a1e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    3cb8:	d8c02017 	ldw	r3,128(sp)
    3cbc:	d8801f17 	ldw	r2,124(sp)
    3cc0:	da000404 	addi	r8,sp,16
    3cc4:	003fee06 	br	3c80 <___vfprintf_internal_r+0xee8>
    3cc8:	d9403117 	ldw	r5,196(sp)
    3ccc:	d8802a17 	ldw	r2,168(sp)
    3cd0:	28adc83a 	sub	r22,r5,r2
    3cd4:	05be630e 	bge	zero,r22,3664 <___vfprintf_internal_r+0x8cc>
    3cd8:	07000404 	movi	fp,16
    3cdc:	d8801f17 	ldw	r2,124(sp)
    3ce0:	e5838f0e 	bge	fp,r22,4b20 <___vfprintf_internal_r+0x1d88>
    3ce4:	014000b4 	movhi	r5,2
    3ce8:	2976bf84 	addi	r5,r5,-9474
    3cec:	dc403015 	stw	r17,192(sp)
    3cf0:	d9402b15 	stw	r5,172(sp)
    3cf4:	b023883a 	mov	r17,r22
    3cf8:	04c001c4 	movi	r19,7
    3cfc:	a82d883a 	mov	r22,r21
    3d00:	902b883a 	mov	r21,r18
    3d04:	8025883a 	mov	r18,r16
    3d08:	dc002c17 	ldw	r16,176(sp)
    3d0c:	00000306 	br	3d1c <___vfprintf_internal_r+0xf84>
    3d10:	8c7ffc04 	addi	r17,r17,-16
    3d14:	42000204 	addi	r8,r8,8
    3d18:	e440110e 	bge	fp,r17,3d60 <___vfprintf_internal_r+0xfc8>
    3d1c:	18c00404 	addi	r3,r3,16
    3d20:	10800044 	addi	r2,r2,1
    3d24:	45000015 	stw	r20,0(r8)
    3d28:	47000115 	stw	fp,4(r8)
    3d2c:	d8c02015 	stw	r3,128(sp)
    3d30:	d8801f15 	stw	r2,124(sp)
    3d34:	98bff60e 	bge	r19,r2,3d10 <___vfprintf_internal_r+0xf78>
    3d38:	d9801e04 	addi	r6,sp,120
    3d3c:	b80b883a 	mov	r5,r23
    3d40:	8009883a 	mov	r4,r16
    3d44:	000b7a00 	call	b7a0 <__sprint_r>
    3d48:	103d151e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    3d4c:	8c7ffc04 	addi	r17,r17,-16
    3d50:	d8c02017 	ldw	r3,128(sp)
    3d54:	d8801f17 	ldw	r2,124(sp)
    3d58:	da000404 	addi	r8,sp,16
    3d5c:	e47fef16 	blt	fp,r17,3d1c <___vfprintf_internal_r+0xf84>
    3d60:	9021883a 	mov	r16,r18
    3d64:	a825883a 	mov	r18,r21
    3d68:	b02b883a 	mov	r21,r22
    3d6c:	882d883a 	mov	r22,r17
    3d70:	dc403017 	ldw	r17,192(sp)
    3d74:	d9002b17 	ldw	r4,172(sp)
    3d78:	1d87883a 	add	r3,r3,r22
    3d7c:	10800044 	addi	r2,r2,1
    3d80:	41000015 	stw	r4,0(r8)
    3d84:	45800115 	stw	r22,4(r8)
    3d88:	d8c02015 	stw	r3,128(sp)
    3d8c:	d8801f15 	stw	r2,124(sp)
    3d90:	010001c4 	movi	r4,7
    3d94:	20818e16 	blt	r4,r2,43d0 <___vfprintf_internal_r+0x1638>
    3d98:	42000204 	addi	r8,r8,8
    3d9c:	003e3106 	br	3664 <___vfprintf_internal_r+0x8cc>
    3da0:	d9403317 	ldw	r5,204(sp)
    3da4:	00800044 	movi	r2,1
    3da8:	18c00044 	addi	r3,r3,1
    3dac:	1141530e 	bge	r2,r5,42fc <___vfprintf_internal_r+0x1564>
    3db0:	dc401f17 	ldw	r17,124(sp)
    3db4:	00800044 	movi	r2,1
    3db8:	40800115 	stw	r2,4(r8)
    3dbc:	8c400044 	addi	r17,r17,1
    3dc0:	44000015 	stw	r16,0(r8)
    3dc4:	d8c02015 	stw	r3,128(sp)
    3dc8:	dc401f15 	stw	r17,124(sp)
    3dcc:	008001c4 	movi	r2,7
    3dd0:	14416b16 	blt	r2,r17,4380 <___vfprintf_internal_r+0x15e8>
    3dd4:	42000204 	addi	r8,r8,8
    3dd8:	d8803717 	ldw	r2,220(sp)
    3ddc:	d9003417 	ldw	r4,208(sp)
    3de0:	8c400044 	addi	r17,r17,1
    3de4:	10c7883a 	add	r3,r2,r3
    3de8:	40800115 	stw	r2,4(r8)
    3dec:	41000015 	stw	r4,0(r8)
    3df0:	d8c02015 	stw	r3,128(sp)
    3df4:	dc401f15 	stw	r17,124(sp)
    3df8:	008001c4 	movi	r2,7
    3dfc:	14416916 	blt	r2,r17,43a4 <___vfprintf_internal_r+0x160c>
    3e00:	45800204 	addi	r22,r8,8
    3e04:	d9003617 	ldw	r4,216(sp)
    3e08:	d9403817 	ldw	r5,224(sp)
    3e0c:	000d883a 	mov	r6,zero
    3e10:	000f883a 	mov	r7,zero
    3e14:	d8c03c15 	stw	r3,240(sp)
    3e18:	000f4180 	call	f418 <__eqdf2>
    3e1c:	d8c03c17 	ldw	r3,240(sp)
    3e20:	1000bc26 	beq	r2,zero,4114 <___vfprintf_internal_r+0x137c>
    3e24:	d9403317 	ldw	r5,204(sp)
    3e28:	84000044 	addi	r16,r16,1
    3e2c:	8c400044 	addi	r17,r17,1
    3e30:	28bfffc4 	addi	r2,r5,-1
    3e34:	1887883a 	add	r3,r3,r2
    3e38:	b0800115 	stw	r2,4(r22)
    3e3c:	b4000015 	stw	r16,0(r22)
    3e40:	d8c02015 	stw	r3,128(sp)
    3e44:	dc401f15 	stw	r17,124(sp)
    3e48:	008001c4 	movi	r2,7
    3e4c:	14414316 	blt	r2,r17,435c <___vfprintf_internal_r+0x15c4>
    3e50:	b5800204 	addi	r22,r22,8
    3e54:	d9003a17 	ldw	r4,232(sp)
    3e58:	df0022c4 	addi	fp,sp,139
    3e5c:	8c400044 	addi	r17,r17,1
    3e60:	20c7883a 	add	r3,r4,r3
    3e64:	b7000015 	stw	fp,0(r22)
    3e68:	b1000115 	stw	r4,4(r22)
    3e6c:	d8c02015 	stw	r3,128(sp)
    3e70:	dc401f15 	stw	r17,124(sp)
    3e74:	008001c4 	movi	r2,7
    3e78:	14400e16 	blt	r2,r17,3eb4 <___vfprintf_internal_r+0x111c>
    3e7c:	b2000204 	addi	r8,r22,8
    3e80:	003e3a06 	br	376c <___vfprintf_internal_r+0x9d4>
    3e84:	010000b4 	movhi	r4,2
    3e88:	2136bf84 	addi	r4,r4,-9474
    3e8c:	d9002b15 	stw	r4,172(sp)
    3e90:	d9002b17 	ldw	r4,172(sp)
    3e94:	1c07883a 	add	r3,r3,r16
    3e98:	44000115 	stw	r16,4(r8)
    3e9c:	41000015 	stw	r4,0(r8)
    3ea0:	10800044 	addi	r2,r2,1
    3ea4:	d8c02015 	stw	r3,128(sp)
    3ea8:	d8801f15 	stw	r2,124(sp)
    3eac:	010001c4 	movi	r4,7
    3eb0:	20be2d0e 	bge	r4,r2,3768 <___vfprintf_internal_r+0x9d0>
    3eb4:	d9002c17 	ldw	r4,176(sp)
    3eb8:	d9801e04 	addi	r6,sp,120
    3ebc:	b80b883a 	mov	r5,r23
    3ec0:	000b7a00 	call	b7a0 <__sprint_r>
    3ec4:	103cb61e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    3ec8:	d8c02017 	ldw	r3,128(sp)
    3ecc:	da000404 	addi	r8,sp,16
    3ed0:	003e2606 	br	376c <___vfprintf_internal_r+0x9d4>
    3ed4:	d9002c17 	ldw	r4,176(sp)
    3ed8:	d9801e04 	addi	r6,sp,120
    3edc:	b80b883a 	mov	r5,r23
    3ee0:	000b7a00 	call	b7a0 <__sprint_r>
    3ee4:	103e5d26 	beq	r2,zero,385c <___vfprintf_internal_r+0xac4>
    3ee8:	003cad06 	br	31a0 <___vfprintf_internal_r+0x408>
    3eec:	d9002c17 	ldw	r4,176(sp)
    3ef0:	d9801e04 	addi	r6,sp,120
    3ef4:	b80b883a 	mov	r5,r23
    3ef8:	000b7a00 	call	b7a0 <__sprint_r>
    3efc:	103ca81e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    3f00:	d8c02017 	ldw	r3,128(sp)
    3f04:	da000404 	addi	r8,sp,16
    3f08:	003e0b06 	br	3738 <___vfprintf_internal_r+0x9a0>
    3f0c:	d9002c17 	ldw	r4,176(sp)
    3f10:	d9801e04 	addi	r6,sp,120
    3f14:	b80b883a 	mov	r5,r23
    3f18:	000b7a00 	call	b7a0 <__sprint_r>
    3f1c:	103ca01e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    3f20:	d8c02017 	ldw	r3,128(sp)
    3f24:	da000404 	addi	r8,sp,16
    3f28:	003dbd06 	br	3620 <___vfprintf_internal_r+0x888>
    3f2c:	d9002c17 	ldw	r4,176(sp)
    3f30:	d9801e04 	addi	r6,sp,120
    3f34:	b80b883a 	mov	r5,r23
    3f38:	000b7a00 	call	b7a0 <__sprint_r>
    3f3c:	103c981e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    3f40:	d8c02017 	ldw	r3,128(sp)
    3f44:	da000404 	addi	r8,sp,16
    3f48:	003dc306 	br	3658 <___vfprintf_internal_r+0x8c0>
    3f4c:	d8802917 	ldw	r2,164(sp)
    3f50:	d8002785 	stb	zero,158(sp)
    3f54:	103f0616 	blt	r2,zero,3b70 <___vfprintf_internal_r+0xdd8>
    3f58:	00ffdfc4 	movi	r3,-129
    3f5c:	9d84b03a 	or	r2,r19,r22
    3f60:	90e4703a 	and	r18,r18,r3
    3f64:	103c6b26 	beq	r2,zero,3114 <___vfprintf_internal_r+0x37c>
    3f68:	0039883a 	mov	fp,zero
    3f6c:	003e7406 	br	3940 <___vfprintf_internal_r+0xba8>
    3f70:	9080040c 	andi	r2,r18,16
    3f74:	1001b326 	beq	r2,zero,4644 <___vfprintf_internal_r+0x18ac>
    3f78:	d9002d17 	ldw	r4,180(sp)
    3f7c:	d9402917 	ldw	r5,164(sp)
    3f80:	d8002785 	stb	zero,158(sp)
    3f84:	20800104 	addi	r2,r4,4
    3f88:	24c00017 	ldw	r19,0(r4)
    3f8c:	002d883a 	mov	r22,zero
    3f90:	2801b516 	blt	r5,zero,4668 <___vfprintf_internal_r+0x18d0>
    3f94:	00ffdfc4 	movi	r3,-129
    3f98:	d8802d15 	stw	r2,180(sp)
    3f9c:	90e4703a 	and	r18,r18,r3
    3fa0:	983d2726 	beq	r19,zero,3440 <___vfprintf_internal_r+0x6a8>
    3fa4:	0039883a 	mov	fp,zero
    3fa8:	003d2a06 	br	3454 <___vfprintf_internal_r+0x6bc>
    3fac:	dc402617 	ldw	r17,152(sp)
    3fb0:	0441d30e 	bge	zero,r17,4700 <___vfprintf_internal_r+0x1968>
    3fb4:	dc403217 	ldw	r17,200(sp)
    3fb8:	d8803317 	ldw	r2,204(sp)
    3fbc:	1440010e 	bge	r2,r17,3fc4 <___vfprintf_internal_r+0x122c>
    3fc0:	1023883a 	mov	r17,r2
    3fc4:	04400a0e 	bge	zero,r17,3ff0 <___vfprintf_internal_r+0x1258>
    3fc8:	d8801f17 	ldw	r2,124(sp)
    3fcc:	1c47883a 	add	r3,r3,r17
    3fd0:	44000015 	stw	r16,0(r8)
    3fd4:	10800044 	addi	r2,r2,1
    3fd8:	44400115 	stw	r17,4(r8)
    3fdc:	d8c02015 	stw	r3,128(sp)
    3fe0:	d8801f15 	stw	r2,124(sp)
    3fe4:	010001c4 	movi	r4,7
    3fe8:	20826516 	blt	r4,r2,4980 <___vfprintf_internal_r+0x1be8>
    3fec:	42000204 	addi	r8,r8,8
    3ff0:	88026116 	blt	r17,zero,4978 <___vfprintf_internal_r+0x1be0>
    3ff4:	d9003217 	ldw	r4,200(sp)
    3ff8:	2463c83a 	sub	r17,r4,r17
    3ffc:	04407b0e 	bge	zero,r17,41ec <___vfprintf_internal_r+0x1454>
    4000:	05800404 	movi	r22,16
    4004:	d8801f17 	ldw	r2,124(sp)
    4008:	b4419d0e 	bge	r22,r17,4680 <___vfprintf_internal_r+0x18e8>
    400c:	010000b4 	movhi	r4,2
    4010:	2136bf84 	addi	r4,r4,-9474
    4014:	d9002b15 	stw	r4,172(sp)
    4018:	070001c4 	movi	fp,7
    401c:	dcc02c17 	ldw	r19,176(sp)
    4020:	00000306 	br	4030 <___vfprintf_internal_r+0x1298>
    4024:	42000204 	addi	r8,r8,8
    4028:	8c7ffc04 	addi	r17,r17,-16
    402c:	b441970e 	bge	r22,r17,468c <___vfprintf_internal_r+0x18f4>
    4030:	18c00404 	addi	r3,r3,16
    4034:	10800044 	addi	r2,r2,1
    4038:	45000015 	stw	r20,0(r8)
    403c:	45800115 	stw	r22,4(r8)
    4040:	d8c02015 	stw	r3,128(sp)
    4044:	d8801f15 	stw	r2,124(sp)
    4048:	e0bff60e 	bge	fp,r2,4024 <___vfprintf_internal_r+0x128c>
    404c:	d9801e04 	addi	r6,sp,120
    4050:	b80b883a 	mov	r5,r23
    4054:	9809883a 	mov	r4,r19
    4058:	000b7a00 	call	b7a0 <__sprint_r>
    405c:	103c501e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    4060:	d8c02017 	ldw	r3,128(sp)
    4064:	d8801f17 	ldw	r2,124(sp)
    4068:	da000404 	addi	r8,sp,16
    406c:	003fee06 	br	4028 <___vfprintf_internal_r+0x1290>
    4070:	d9002c17 	ldw	r4,176(sp)
    4074:	d9801e04 	addi	r6,sp,120
    4078:	b80b883a 	mov	r5,r23
    407c:	000b7a00 	call	b7a0 <__sprint_r>
    4080:	103c471e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    4084:	d8c02017 	ldw	r3,128(sp)
    4088:	df002787 	ldb	fp,158(sp)
    408c:	da000404 	addi	r8,sp,16
    4090:	003d5606 	br	35ec <___vfprintf_internal_r+0x854>
    4094:	9080040c 	andi	r2,r18,16
    4098:	10016126 	beq	r2,zero,4620 <___vfprintf_internal_r+0x1888>
    409c:	d8802d17 	ldw	r2,180(sp)
    40a0:	14c00017 	ldw	r19,0(r2)
    40a4:	10800104 	addi	r2,r2,4
    40a8:	d8802d15 	stw	r2,180(sp)
    40ac:	982dd7fa 	srai	r22,r19,31
    40b0:	b005883a 	mov	r2,r22
    40b4:	003c8206 	br	32c0 <___vfprintf_internal_r+0x528>
    40b8:	9080040c 	andi	r2,r18,16
    40bc:	10003526 	beq	r2,zero,4194 <___vfprintf_internal_r+0x13fc>
    40c0:	d9402d17 	ldw	r5,180(sp)
    40c4:	d8c02917 	ldw	r3,164(sp)
    40c8:	d8002785 	stb	zero,158(sp)
    40cc:	28800104 	addi	r2,r5,4
    40d0:	2cc00017 	ldw	r19,0(r5)
    40d4:	002d883a 	mov	r22,zero
    40d8:	18003716 	blt	r3,zero,41b8 <___vfprintf_internal_r+0x1420>
    40dc:	00ffdfc4 	movi	r3,-129
    40e0:	d8802d15 	stw	r2,180(sp)
    40e4:	90e4703a 	and	r18,r18,r3
    40e8:	0039883a 	mov	fp,zero
    40ec:	983df326 	beq	r19,zero,38bc <___vfprintf_internal_r+0xb24>
    40f0:	00800244 	movi	r2,9
    40f4:	14fc7b36 	bltu	r2,r19,32e4 <___vfprintf_internal_r+0x54c>
    40f8:	d8c02817 	ldw	r3,160(sp)
    40fc:	dc001dc4 	addi	r16,sp,119
    4100:	9cc00c04 	addi	r19,r19,48
    4104:	1c07c83a 	sub	r3,r3,r16
    4108:	dcc01dc5 	stb	r19,119(sp)
    410c:	d8c02e15 	stw	r3,184(sp)
    4110:	003ce806 	br	34b4 <___vfprintf_internal_r+0x71c>
    4114:	d8803317 	ldw	r2,204(sp)
    4118:	143fffc4 	addi	r16,r2,-1
    411c:	043f4d0e 	bge	zero,r16,3e54 <___vfprintf_internal_r+0x10bc>
    4120:	07000404 	movi	fp,16
    4124:	e400810e 	bge	fp,r16,432c <___vfprintf_internal_r+0x1594>
    4128:	014000b4 	movhi	r5,2
    412c:	2976bf84 	addi	r5,r5,-9474
    4130:	d9402b15 	stw	r5,172(sp)
    4134:	01c001c4 	movi	r7,7
    4138:	dcc02c17 	ldw	r19,176(sp)
    413c:	00000306 	br	414c <___vfprintf_internal_r+0x13b4>
    4140:	b5800204 	addi	r22,r22,8
    4144:	843ffc04 	addi	r16,r16,-16
    4148:	e4007b0e 	bge	fp,r16,4338 <___vfprintf_internal_r+0x15a0>
    414c:	18c00404 	addi	r3,r3,16
    4150:	8c400044 	addi	r17,r17,1
    4154:	b5000015 	stw	r20,0(r22)
    4158:	b7000115 	stw	fp,4(r22)
    415c:	d8c02015 	stw	r3,128(sp)
    4160:	dc401f15 	stw	r17,124(sp)
    4164:	3c7ff60e 	bge	r7,r17,4140 <___vfprintf_internal_r+0x13a8>
    4168:	d9801e04 	addi	r6,sp,120
    416c:	b80b883a 	mov	r5,r23
    4170:	9809883a 	mov	r4,r19
    4174:	d9c03c15 	stw	r7,240(sp)
    4178:	000b7a00 	call	b7a0 <__sprint_r>
    417c:	d9c03c17 	ldw	r7,240(sp)
    4180:	103c071e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    4184:	d8c02017 	ldw	r3,128(sp)
    4188:	dc401f17 	ldw	r17,124(sp)
    418c:	dd800404 	addi	r22,sp,16
    4190:	003fec06 	br	4144 <___vfprintf_internal_r+0x13ac>
    4194:	9080100c 	andi	r2,r18,64
    4198:	d8002785 	stb	zero,158(sp)
    419c:	10010e26 	beq	r2,zero,45d8 <___vfprintf_internal_r+0x1840>
    41a0:	d9002d17 	ldw	r4,180(sp)
    41a4:	d9402917 	ldw	r5,164(sp)
    41a8:	002d883a 	mov	r22,zero
    41ac:	20800104 	addi	r2,r4,4
    41b0:	24c0000b 	ldhu	r19,0(r4)
    41b4:	283fc90e 	bge	r5,zero,40dc <___vfprintf_internal_r+0x1344>
    41b8:	d8802d15 	stw	r2,180(sp)
    41bc:	0039883a 	mov	fp,zero
    41c0:	9d84b03a 	or	r2,r19,r22
    41c4:	103c461e 	bne	r2,zero,32e0 <___vfprintf_internal_r+0x548>
    41c8:	00800044 	movi	r2,1
    41cc:	003e6c06 	br	3b80 <___vfprintf_internal_r+0xde8>
    41d0:	d9002c17 	ldw	r4,176(sp)
    41d4:	d9801e04 	addi	r6,sp,120
    41d8:	b80b883a 	mov	r5,r23
    41dc:	000b7a00 	call	b7a0 <__sprint_r>
    41e0:	103bef1e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    41e4:	d8c02017 	ldw	r3,128(sp)
    41e8:	da000404 	addi	r8,sp,16
    41ec:	d9003217 	ldw	r4,200(sp)
    41f0:	d8802617 	ldw	r2,152(sp)
    41f4:	d9403317 	ldw	r5,204(sp)
    41f8:	8123883a 	add	r17,r16,r4
    41fc:	11400216 	blt	r2,r5,4208 <___vfprintf_internal_r+0x1470>
    4200:	9100004c 	andi	r4,r18,1
    4204:	20000d26 	beq	r4,zero,423c <___vfprintf_internal_r+0x14a4>
    4208:	d9003717 	ldw	r4,220(sp)
    420c:	d9403417 	ldw	r5,208(sp)
    4210:	1907883a 	add	r3,r3,r4
    4214:	d9001f17 	ldw	r4,124(sp)
    4218:	41400015 	stw	r5,0(r8)
    421c:	d9403717 	ldw	r5,220(sp)
    4220:	21000044 	addi	r4,r4,1
    4224:	d8c02015 	stw	r3,128(sp)
    4228:	41400115 	stw	r5,4(r8)
    422c:	d9001f15 	stw	r4,124(sp)
    4230:	014001c4 	movi	r5,7
    4234:	2901e816 	blt	r5,r4,49d8 <___vfprintf_internal_r+0x1c40>
    4238:	42000204 	addi	r8,r8,8
    423c:	d9003317 	ldw	r4,204(sp)
    4240:	8121883a 	add	r16,r16,r4
    4244:	2085c83a 	sub	r2,r4,r2
    4248:	8461c83a 	sub	r16,r16,r17
    424c:	1400010e 	bge	r2,r16,4254 <___vfprintf_internal_r+0x14bc>
    4250:	1021883a 	mov	r16,r2
    4254:	04000a0e 	bge	zero,r16,4280 <___vfprintf_internal_r+0x14e8>
    4258:	d9001f17 	ldw	r4,124(sp)
    425c:	1c07883a 	add	r3,r3,r16
    4260:	44400015 	stw	r17,0(r8)
    4264:	21000044 	addi	r4,r4,1
    4268:	44000115 	stw	r16,4(r8)
    426c:	d8c02015 	stw	r3,128(sp)
    4270:	d9001f15 	stw	r4,124(sp)
    4274:	014001c4 	movi	r5,7
    4278:	2901fb16 	blt	r5,r4,4a68 <___vfprintf_internal_r+0x1cd0>
    427c:	42000204 	addi	r8,r8,8
    4280:	8001f716 	blt	r16,zero,4a60 <___vfprintf_internal_r+0x1cc8>
    4284:	1421c83a 	sub	r16,r2,r16
    4288:	043d380e 	bge	zero,r16,376c <___vfprintf_internal_r+0x9d4>
    428c:	04400404 	movi	r17,16
    4290:	d8801f17 	ldw	r2,124(sp)
    4294:	8c3efb0e 	bge	r17,r16,3e84 <___vfprintf_internal_r+0x10ec>
    4298:	014000b4 	movhi	r5,2
    429c:	2976bf84 	addi	r5,r5,-9474
    42a0:	d9402b15 	stw	r5,172(sp)
    42a4:	058001c4 	movi	r22,7
    42a8:	dcc02c17 	ldw	r19,176(sp)
    42ac:	00000306 	br	42bc <___vfprintf_internal_r+0x1524>
    42b0:	42000204 	addi	r8,r8,8
    42b4:	843ffc04 	addi	r16,r16,-16
    42b8:	8c3ef50e 	bge	r17,r16,3e90 <___vfprintf_internal_r+0x10f8>
    42bc:	18c00404 	addi	r3,r3,16
    42c0:	10800044 	addi	r2,r2,1
    42c4:	45000015 	stw	r20,0(r8)
    42c8:	44400115 	stw	r17,4(r8)
    42cc:	d8c02015 	stw	r3,128(sp)
    42d0:	d8801f15 	stw	r2,124(sp)
    42d4:	b0bff60e 	bge	r22,r2,42b0 <___vfprintf_internal_r+0x1518>
    42d8:	d9801e04 	addi	r6,sp,120
    42dc:	b80b883a 	mov	r5,r23
    42e0:	9809883a 	mov	r4,r19
    42e4:	000b7a00 	call	b7a0 <__sprint_r>
    42e8:	103bad1e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    42ec:	d8c02017 	ldw	r3,128(sp)
    42f0:	d8801f17 	ldw	r2,124(sp)
    42f4:	da000404 	addi	r8,sp,16
    42f8:	003fee06 	br	42b4 <___vfprintf_internal_r+0x151c>
    42fc:	9088703a 	and	r4,r18,r2
    4300:	203eab1e 	bne	r4,zero,3db0 <___vfprintf_internal_r+0x1018>
    4304:	dc401f17 	ldw	r17,124(sp)
    4308:	40800115 	stw	r2,4(r8)
    430c:	44000015 	stw	r16,0(r8)
    4310:	8c400044 	addi	r17,r17,1
    4314:	d8c02015 	stw	r3,128(sp)
    4318:	dc401f15 	stw	r17,124(sp)
    431c:	008001c4 	movi	r2,7
    4320:	14400e16 	blt	r2,r17,435c <___vfprintf_internal_r+0x15c4>
    4324:	45800204 	addi	r22,r8,8
    4328:	003eca06 	br	3e54 <___vfprintf_internal_r+0x10bc>
    432c:	010000b4 	movhi	r4,2
    4330:	2136bf84 	addi	r4,r4,-9474
    4334:	d9002b15 	stw	r4,172(sp)
    4338:	d8802b17 	ldw	r2,172(sp)
    433c:	1c07883a 	add	r3,r3,r16
    4340:	8c400044 	addi	r17,r17,1
    4344:	b0800015 	stw	r2,0(r22)
    4348:	b4000115 	stw	r16,4(r22)
    434c:	d8c02015 	stw	r3,128(sp)
    4350:	dc401f15 	stw	r17,124(sp)
    4354:	008001c4 	movi	r2,7
    4358:	147ebd0e 	bge	r2,r17,3e50 <___vfprintf_internal_r+0x10b8>
    435c:	d9002c17 	ldw	r4,176(sp)
    4360:	d9801e04 	addi	r6,sp,120
    4364:	b80b883a 	mov	r5,r23
    4368:	000b7a00 	call	b7a0 <__sprint_r>
    436c:	103b8c1e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    4370:	d8c02017 	ldw	r3,128(sp)
    4374:	dc401f17 	ldw	r17,124(sp)
    4378:	dd800404 	addi	r22,sp,16
    437c:	003eb506 	br	3e54 <___vfprintf_internal_r+0x10bc>
    4380:	d9002c17 	ldw	r4,176(sp)
    4384:	d9801e04 	addi	r6,sp,120
    4388:	b80b883a 	mov	r5,r23
    438c:	000b7a00 	call	b7a0 <__sprint_r>
    4390:	103b831e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    4394:	d8c02017 	ldw	r3,128(sp)
    4398:	dc401f17 	ldw	r17,124(sp)
    439c:	da000404 	addi	r8,sp,16
    43a0:	003e8d06 	br	3dd8 <___vfprintf_internal_r+0x1040>
    43a4:	d9002c17 	ldw	r4,176(sp)
    43a8:	d9801e04 	addi	r6,sp,120
    43ac:	b80b883a 	mov	r5,r23
    43b0:	000b7a00 	call	b7a0 <__sprint_r>
    43b4:	103b7a1e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    43b8:	d8c02017 	ldw	r3,128(sp)
    43bc:	dc401f17 	ldw	r17,124(sp)
    43c0:	dd800404 	addi	r22,sp,16
    43c4:	003e8f06 	br	3e04 <___vfprintf_internal_r+0x106c>
    43c8:	0027883a 	mov	r19,zero
    43cc:	003f4a06 	br	40f8 <___vfprintf_internal_r+0x1360>
    43d0:	d9002c17 	ldw	r4,176(sp)
    43d4:	d9801e04 	addi	r6,sp,120
    43d8:	b80b883a 	mov	r5,r23
    43dc:	000b7a00 	call	b7a0 <__sprint_r>
    43e0:	103b6f1e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    43e4:	d8c02017 	ldw	r3,128(sp)
    43e8:	da000404 	addi	r8,sp,16
    43ec:	003c9d06 	br	3664 <___vfprintf_internal_r+0x8cc>
    43f0:	04e7c83a 	sub	r19,zero,r19
    43f4:	9804c03a 	cmpne	r2,r19,zero
    43f8:	05adc83a 	sub	r22,zero,r22
    43fc:	b0adc83a 	sub	r22,r22,r2
    4400:	d8802917 	ldw	r2,164(sp)
    4404:	07000b44 	movi	fp,45
    4408:	df002785 	stb	fp,158(sp)
    440c:	10017b16 	blt	r2,zero,49fc <___vfprintf_internal_r+0x1c64>
    4410:	00bfdfc4 	movi	r2,-129
    4414:	90a4703a 	and	r18,r18,r2
    4418:	003bb106 	br	32e0 <___vfprintf_internal_r+0x548>
    441c:	d9003617 	ldw	r4,216(sp)
    4420:	d9403817 	ldw	r5,224(sp)
    4424:	da003d15 	stw	r8,244(sp)
    4428:	0009fb80 	call	9fb8 <__fpclassifyd>
    442c:	da003d17 	ldw	r8,244(sp)
    4430:	1000f026 	beq	r2,zero,47f4 <___vfprintf_internal_r+0x1a5c>
    4434:	d9002917 	ldw	r4,164(sp)
    4438:	05bff7c4 	movi	r22,-33
    443c:	00bfffc4 	movi	r2,-1
    4440:	8dac703a 	and	r22,r17,r22
    4444:	20820026 	beq	r4,r2,4c48 <___vfprintf_internal_r+0x1eb0>
    4448:	008011c4 	movi	r2,71
    444c:	b081f726 	beq	r22,r2,4c2c <___vfprintf_internal_r+0x1e94>
    4450:	d9003817 	ldw	r4,224(sp)
    4454:	90c04014 	ori	r3,r18,256
    4458:	d8c02b15 	stw	r3,172(sp)
    445c:	20021516 	blt	r4,zero,4cb4 <___vfprintf_internal_r+0x1f1c>
    4460:	dcc03817 	ldw	r19,224(sp)
    4464:	d8002a05 	stb	zero,168(sp)
    4468:	00801984 	movi	r2,102
    446c:	8881f926 	beq	r17,r2,4c54 <___vfprintf_internal_r+0x1ebc>
    4470:	00801184 	movi	r2,70
    4474:	88821c26 	beq	r17,r2,4ce8 <___vfprintf_internal_r+0x1f50>
    4478:	00801144 	movi	r2,69
    447c:	b081ef26 	beq	r22,r2,4c3c <___vfprintf_internal_r+0x1ea4>
    4480:	d8c02917 	ldw	r3,164(sp)
    4484:	d8802104 	addi	r2,sp,132
    4488:	d8800315 	stw	r2,12(sp)
    448c:	d9403617 	ldw	r5,216(sp)
    4490:	d8802504 	addi	r2,sp,148
    4494:	d9002c17 	ldw	r4,176(sp)
    4498:	d8800215 	stw	r2,8(sp)
    449c:	d8802604 	addi	r2,sp,152
    44a0:	d8c00015 	stw	r3,0(sp)
    44a4:	d8800115 	stw	r2,4(sp)
    44a8:	01c00084 	movi	r7,2
    44ac:	980d883a 	mov	r6,r19
    44b0:	d8c03c15 	stw	r3,240(sp)
    44b4:	da003d15 	stw	r8,244(sp)
    44b8:	00053bc0 	call	53bc <_dtoa_r>
    44bc:	1021883a 	mov	r16,r2
    44c0:	008019c4 	movi	r2,103
    44c4:	d8c03c17 	ldw	r3,240(sp)
    44c8:	da003d17 	ldw	r8,244(sp)
    44cc:	88817126 	beq	r17,r2,4a94 <___vfprintf_internal_r+0x1cfc>
    44d0:	008011c4 	movi	r2,71
    44d4:	88829226 	beq	r17,r2,4f20 <___vfprintf_internal_r+0x2188>
    44d8:	80f9883a 	add	fp,r16,r3
    44dc:	d9003617 	ldw	r4,216(sp)
    44e0:	000d883a 	mov	r6,zero
    44e4:	000f883a 	mov	r7,zero
    44e8:	980b883a 	mov	r5,r19
    44ec:	da003d15 	stw	r8,244(sp)
    44f0:	000f4180 	call	f418 <__eqdf2>
    44f4:	da003d17 	ldw	r8,244(sp)
    44f8:	10018d26 	beq	r2,zero,4b30 <___vfprintf_internal_r+0x1d98>
    44fc:	d8802117 	ldw	r2,132(sp)
    4500:	1700062e 	bgeu	r2,fp,451c <___vfprintf_internal_r+0x1784>
    4504:	01000c04 	movi	r4,48
    4508:	10c00044 	addi	r3,r2,1
    450c:	d8c02115 	stw	r3,132(sp)
    4510:	11000005 	stb	r4,0(r2)
    4514:	d8802117 	ldw	r2,132(sp)
    4518:	173ffb36 	bltu	r2,fp,4508 <___vfprintf_internal_r+0x1770>
    451c:	1405c83a 	sub	r2,r2,r16
    4520:	d8803315 	stw	r2,204(sp)
    4524:	008011c4 	movi	r2,71
    4528:	b0817626 	beq	r22,r2,4b04 <___vfprintf_internal_r+0x1d6c>
    452c:	00801944 	movi	r2,101
    4530:	1442810e 	bge	r2,r17,4f38 <___vfprintf_internal_r+0x21a0>
    4534:	d8c02617 	ldw	r3,152(sp)
    4538:	00801984 	movi	r2,102
    453c:	d8c03215 	stw	r3,200(sp)
    4540:	8881fe26 	beq	r17,r2,4d3c <___vfprintf_internal_r+0x1fa4>
    4544:	d8c03217 	ldw	r3,200(sp)
    4548:	d9003317 	ldw	r4,204(sp)
    454c:	1901dd16 	blt	r3,r4,4cc4 <___vfprintf_internal_r+0x1f2c>
    4550:	9480004c 	andi	r18,r18,1
    4554:	90022b1e 	bne	r18,zero,4e04 <___vfprintf_internal_r+0x206c>
    4558:	1805883a 	mov	r2,r3
    455c:	18028016 	blt	r3,zero,4f60 <___vfprintf_internal_r+0x21c8>
    4560:	d8c03217 	ldw	r3,200(sp)
    4564:	044019c4 	movi	r17,103
    4568:	d8c02e15 	stw	r3,184(sp)
    456c:	df002a07 	ldb	fp,168(sp)
    4570:	e001531e 	bne	fp,zero,4ac0 <___vfprintf_internal_r+0x1d28>
    4574:	df002783 	ldbu	fp,158(sp)
    4578:	d8802a15 	stw	r2,168(sp)
    457c:	dc802b17 	ldw	r18,172(sp)
    4580:	d8002915 	stw	zero,164(sp)
    4584:	003bd106 	br	34cc <___vfprintf_internal_r+0x734>
    4588:	d8802d17 	ldw	r2,180(sp)
    458c:	d8c02d17 	ldw	r3,180(sp)
    4590:	d9002d17 	ldw	r4,180(sp)
    4594:	10800017 	ldw	r2,0(r2)
    4598:	18c00117 	ldw	r3,4(r3)
    459c:	21000204 	addi	r4,r4,8
    45a0:	d8803615 	stw	r2,216(sp)
    45a4:	d8c03815 	stw	r3,224(sp)
    45a8:	d9002d15 	stw	r4,180(sp)
    45ac:	003b7506 	br	3384 <___vfprintf_internal_r+0x5ec>
    45b0:	ac400007 	ldb	r17,0(r21)
    45b4:	003a5906 	br	2f1c <___vfprintf_internal_r+0x184>
    45b8:	9080100c 	andi	r2,r18,64
    45bc:	1000a826 	beq	r2,zero,4860 <___vfprintf_internal_r+0x1ac8>
    45c0:	d9002d17 	ldw	r4,180(sp)
    45c4:	002d883a 	mov	r22,zero
    45c8:	24c0000b 	ldhu	r19,0(r4)
    45cc:	21000104 	addi	r4,r4,4
    45d0:	d9002d15 	stw	r4,180(sp)
    45d4:	003ccb06 	br	3904 <___vfprintf_internal_r+0xb6c>
    45d8:	d8c02d17 	ldw	r3,180(sp)
    45dc:	d9002917 	ldw	r4,164(sp)
    45e0:	002d883a 	mov	r22,zero
    45e4:	18800104 	addi	r2,r3,4
    45e8:	1cc00017 	ldw	r19,0(r3)
    45ec:	203ebb0e 	bge	r4,zero,40dc <___vfprintf_internal_r+0x1344>
    45f0:	003ef106 	br	41b8 <___vfprintf_internal_r+0x1420>
    45f4:	9080040c 	andi	r2,r18,16
    45f8:	1000921e 	bne	r2,zero,4844 <___vfprintf_internal_r+0x1aac>
    45fc:	9480100c 	andi	r18,r18,64
    4600:	90013926 	beq	r18,zero,4ae8 <___vfprintf_internal_r+0x1d50>
    4604:	d9002d17 	ldw	r4,180(sp)
    4608:	d9402f17 	ldw	r5,188(sp)
    460c:	20800017 	ldw	r2,0(r4)
    4610:	21000104 	addi	r4,r4,4
    4614:	d9002d15 	stw	r4,180(sp)
    4618:	1140000d 	sth	r5,0(r2)
    461c:	003a1606 	br	2e78 <___vfprintf_internal_r+0xe0>
    4620:	9080100c 	andi	r2,r18,64
    4624:	10008026 	beq	r2,zero,4828 <___vfprintf_internal_r+0x1a90>
    4628:	d8c02d17 	ldw	r3,180(sp)
    462c:	1cc0000f 	ldh	r19,0(r3)
    4630:	18c00104 	addi	r3,r3,4
    4634:	d8c02d15 	stw	r3,180(sp)
    4638:	982dd7fa 	srai	r22,r19,31
    463c:	b005883a 	mov	r2,r22
    4640:	003b1f06 	br	32c0 <___vfprintf_internal_r+0x528>
    4644:	9080100c 	andi	r2,r18,64
    4648:	d8002785 	stb	zero,158(sp)
    464c:	10008a1e 	bne	r2,zero,4878 <___vfprintf_internal_r+0x1ae0>
    4650:	d9402d17 	ldw	r5,180(sp)
    4654:	d8c02917 	ldw	r3,164(sp)
    4658:	002d883a 	mov	r22,zero
    465c:	28800104 	addi	r2,r5,4
    4660:	2cc00017 	ldw	r19,0(r5)
    4664:	183e4b0e 	bge	r3,zero,3f94 <___vfprintf_internal_r+0x11fc>
    4668:	9d86b03a 	or	r3,r19,r22
    466c:	d8802d15 	stw	r2,180(sp)
    4670:	183e4c1e 	bne	r3,zero,3fa4 <___vfprintf_internal_r+0x120c>
    4674:	0039883a 	mov	fp,zero
    4678:	0005883a 	mov	r2,zero
    467c:	003d4006 	br	3b80 <___vfprintf_internal_r+0xde8>
    4680:	014000b4 	movhi	r5,2
    4684:	2976bf84 	addi	r5,r5,-9474
    4688:	d9402b15 	stw	r5,172(sp)
    468c:	d9402b17 	ldw	r5,172(sp)
    4690:	1c47883a 	add	r3,r3,r17
    4694:	10800044 	addi	r2,r2,1
    4698:	41400015 	stw	r5,0(r8)
    469c:	44400115 	stw	r17,4(r8)
    46a0:	d8c02015 	stw	r3,128(sp)
    46a4:	d8801f15 	stw	r2,124(sp)
    46a8:	010001c4 	movi	r4,7
    46ac:	20bec816 	blt	r4,r2,41d0 <___vfprintf_internal_r+0x1438>
    46b0:	42000204 	addi	r8,r8,8
    46b4:	003ecd06 	br	41ec <___vfprintf_internal_r+0x1454>
    46b8:	d9002917 	ldw	r4,164(sp)
    46bc:	d8002785 	stb	zero,158(sp)
    46c0:	203d2d16 	blt	r4,zero,3b78 <___vfprintf_internal_r+0xde0>
    46c4:	00bfdfc4 	movi	r2,-129
    46c8:	90a4703a 	and	r18,r18,r2
    46cc:	003a9106 	br	3114 <___vfprintf_internal_r+0x37c>
    46d0:	010000b4 	movhi	r4,2
    46d4:	2136bf84 	addi	r4,r4,-9474
    46d8:	d9002b15 	stw	r4,172(sp)
    46dc:	003c0c06 	br	3710 <___vfprintf_internal_r+0x978>
    46e0:	d9002c17 	ldw	r4,176(sp)
    46e4:	d9801e04 	addi	r6,sp,120
    46e8:	b80b883a 	mov	r5,r23
    46ec:	000b7a00 	call	b7a0 <__sprint_r>
    46f0:	103aab1e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    46f4:	d8c02017 	ldw	r3,128(sp)
    46f8:	da000404 	addi	r8,sp,16
    46fc:	003d4106 	br	3c04 <___vfprintf_internal_r+0xe6c>
    4700:	d8801f17 	ldw	r2,124(sp)
    4704:	014000b4 	movhi	r5,2
    4708:	01000044 	movi	r4,1
    470c:	18c00044 	addi	r3,r3,1
    4710:	10800044 	addi	r2,r2,1
    4714:	2976b704 	addi	r5,r5,-9508
    4718:	41000115 	stw	r4,4(r8)
    471c:	41400015 	stw	r5,0(r8)
    4720:	d8c02015 	stw	r3,128(sp)
    4724:	d8801f15 	stw	r2,124(sp)
    4728:	010001c4 	movi	r4,7
    472c:	20805c16 	blt	r4,r2,48a0 <___vfprintf_internal_r+0x1b08>
    4730:	42000204 	addi	r8,r8,8
    4734:	8800041e 	bne	r17,zero,4748 <___vfprintf_internal_r+0x19b0>
    4738:	d8803317 	ldw	r2,204(sp)
    473c:	1000021e 	bne	r2,zero,4748 <___vfprintf_internal_r+0x19b0>
    4740:	9080004c 	andi	r2,r18,1
    4744:	103c0926 	beq	r2,zero,376c <___vfprintf_internal_r+0x9d4>
    4748:	d9003717 	ldw	r4,220(sp)
    474c:	d8801f17 	ldw	r2,124(sp)
    4750:	d9403417 	ldw	r5,208(sp)
    4754:	20c7883a 	add	r3,r4,r3
    4758:	10800044 	addi	r2,r2,1
    475c:	41000115 	stw	r4,4(r8)
    4760:	41400015 	stw	r5,0(r8)
    4764:	d8c02015 	stw	r3,128(sp)
    4768:	d8801f15 	stw	r2,124(sp)
    476c:	010001c4 	movi	r4,7
    4770:	20812116 	blt	r4,r2,4bf8 <___vfprintf_internal_r+0x1e60>
    4774:	42000204 	addi	r8,r8,8
    4778:	0463c83a 	sub	r17,zero,r17
    477c:	0440730e 	bge	zero,r17,494c <___vfprintf_internal_r+0x1bb4>
    4780:	05800404 	movi	r22,16
    4784:	b440860e 	bge	r22,r17,49a0 <___vfprintf_internal_r+0x1c08>
    4788:	014000b4 	movhi	r5,2
    478c:	2976bf84 	addi	r5,r5,-9474
    4790:	d9402b15 	stw	r5,172(sp)
    4794:	070001c4 	movi	fp,7
    4798:	dcc02c17 	ldw	r19,176(sp)
    479c:	00000306 	br	47ac <___vfprintf_internal_r+0x1a14>
    47a0:	42000204 	addi	r8,r8,8
    47a4:	8c7ffc04 	addi	r17,r17,-16
    47a8:	b440800e 	bge	r22,r17,49ac <___vfprintf_internal_r+0x1c14>
    47ac:	18c00404 	addi	r3,r3,16
    47b0:	10800044 	addi	r2,r2,1
    47b4:	45000015 	stw	r20,0(r8)
    47b8:	45800115 	stw	r22,4(r8)
    47bc:	d8c02015 	stw	r3,128(sp)
    47c0:	d8801f15 	stw	r2,124(sp)
    47c4:	e0bff60e 	bge	fp,r2,47a0 <___vfprintf_internal_r+0x1a08>
    47c8:	d9801e04 	addi	r6,sp,120
    47cc:	b80b883a 	mov	r5,r23
    47d0:	9809883a 	mov	r4,r19
    47d4:	000b7a00 	call	b7a0 <__sprint_r>
    47d8:	103a711e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    47dc:	d8c02017 	ldw	r3,128(sp)
    47e0:	d8801f17 	ldw	r2,124(sp)
    47e4:	da000404 	addi	r8,sp,16
    47e8:	003fee06 	br	47a4 <___vfprintf_internal_r+0x1a0c>
    47ec:	00bfffc4 	movi	r2,-1
    47f0:	003a6f06 	br	31b0 <___vfprintf_internal_r+0x418>
    47f4:	008011c4 	movi	r2,71
    47f8:	1440b816 	blt	r2,r17,4adc <___vfprintf_internal_r+0x1d44>
    47fc:	040000b4 	movhi	r16,2
    4800:	8436a904 	addi	r16,r16,-9564
    4804:	00c000c4 	movi	r3,3
    4808:	00bfdfc4 	movi	r2,-129
    480c:	d8c02a15 	stw	r3,168(sp)
    4810:	90a4703a 	and	r18,r18,r2
    4814:	df002783 	ldbu	fp,158(sp)
    4818:	d8c02e15 	stw	r3,184(sp)
    481c:	d8002915 	stw	zero,164(sp)
    4820:	d8003215 	stw	zero,200(sp)
    4824:	003b2906 	br	34cc <___vfprintf_internal_r+0x734>
    4828:	d9002d17 	ldw	r4,180(sp)
    482c:	24c00017 	ldw	r19,0(r4)
    4830:	21000104 	addi	r4,r4,4
    4834:	d9002d15 	stw	r4,180(sp)
    4838:	982dd7fa 	srai	r22,r19,31
    483c:	b005883a 	mov	r2,r22
    4840:	003a9f06 	br	32c0 <___vfprintf_internal_r+0x528>
    4844:	d9402d17 	ldw	r5,180(sp)
    4848:	d8c02f17 	ldw	r3,188(sp)
    484c:	28800017 	ldw	r2,0(r5)
    4850:	29400104 	addi	r5,r5,4
    4854:	d9402d15 	stw	r5,180(sp)
    4858:	10c00015 	stw	r3,0(r2)
    485c:	00398606 	br	2e78 <___vfprintf_internal_r+0xe0>
    4860:	d9402d17 	ldw	r5,180(sp)
    4864:	002d883a 	mov	r22,zero
    4868:	2cc00017 	ldw	r19,0(r5)
    486c:	29400104 	addi	r5,r5,4
    4870:	d9402d15 	stw	r5,180(sp)
    4874:	003c2306 	br	3904 <___vfprintf_internal_r+0xb6c>
    4878:	d8c02d17 	ldw	r3,180(sp)
    487c:	d9002917 	ldw	r4,164(sp)
    4880:	002d883a 	mov	r22,zero
    4884:	18800104 	addi	r2,r3,4
    4888:	1cc0000b 	ldhu	r19,0(r3)
    488c:	203dc10e 	bge	r4,zero,3f94 <___vfprintf_internal_r+0x11fc>
    4890:	003f7506 	br	4668 <___vfprintf_internal_r+0x18d0>
    4894:	040000b4 	movhi	r16,2
    4898:	8436a704 	addi	r16,r16,-9572
    489c:	003acc06 	br	33d0 <___vfprintf_internal_r+0x638>
    48a0:	d9002c17 	ldw	r4,176(sp)
    48a4:	d9801e04 	addi	r6,sp,120
    48a8:	b80b883a 	mov	r5,r23
    48ac:	000b7a00 	call	b7a0 <__sprint_r>
    48b0:	103a3b1e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    48b4:	dc402617 	ldw	r17,152(sp)
    48b8:	d8c02017 	ldw	r3,128(sp)
    48bc:	da000404 	addi	r8,sp,16
    48c0:	003f9c06 	br	4734 <___vfprintf_internal_r+0x199c>
    48c4:	ac400043 	ldbu	r17,1(r21)
    48c8:	94800814 	ori	r18,r18,32
    48cc:	ad400044 	addi	r21,r21,1
    48d0:	8c403fcc 	andi	r17,r17,255
    48d4:	8c40201c 	xori	r17,r17,128
    48d8:	8c7fe004 	addi	r17,r17,-128
    48dc:	00398f06 	br	2f1c <___vfprintf_internal_r+0x184>
    48e0:	d8c02d15 	stw	r3,180(sp)
    48e4:	0039883a 	mov	fp,zero
    48e8:	003e3506 	br	41c0 <___vfprintf_internal_r+0x1428>
    48ec:	d9002c17 	ldw	r4,176(sp)
    48f0:	d9801e04 	addi	r6,sp,120
    48f4:	b80b883a 	mov	r5,r23
    48f8:	000b7a00 	call	b7a0 <__sprint_r>
    48fc:	103a281e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    4900:	d8c02017 	ldw	r3,128(sp)
    4904:	da000404 	addi	r8,sp,16
    4908:	003cd006 	br	3c4c <___vfprintf_internal_r+0xeb4>
    490c:	8009883a 	mov	r4,r16
    4910:	da003d15 	stw	r8,244(sp)
    4914:	0000b280 	call	b28 <strlen>
    4918:	d8802e15 	stw	r2,184(sp)
    491c:	da003d17 	ldw	r8,244(sp)
    4920:	103c340e 	bge	r2,zero,39f4 <___vfprintf_internal_r+0xc5c>
    4924:	0005883a 	mov	r2,zero
    4928:	003c3206 	br	39f4 <___vfprintf_internal_r+0xc5c>
    492c:	d9002c17 	ldw	r4,176(sp)
    4930:	d9801e04 	addi	r6,sp,120
    4934:	b80b883a 	mov	r5,r23
    4938:	000b7a00 	call	b7a0 <__sprint_r>
    493c:	103a181e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    4940:	d8c02017 	ldw	r3,128(sp)
    4944:	d8801f17 	ldw	r2,124(sp)
    4948:	da000404 	addi	r8,sp,16
    494c:	d9403317 	ldw	r5,204(sp)
    4950:	10800044 	addi	r2,r2,1
    4954:	44000015 	stw	r16,0(r8)
    4958:	28c7883a 	add	r3,r5,r3
    495c:	003b7d06 	br	3754 <___vfprintf_internal_r+0x9bc>
    4960:	010000b4 	movhi	r4,2
    4964:	2136c384 	addi	r4,r4,-9458
    4968:	d9003515 	stw	r4,212(sp)
    496c:	003b1406 	br	35c0 <___vfprintf_internal_r+0x828>
    4970:	013fffc4 	movi	r4,-1
    4974:	003a3506 	br	324c <___vfprintf_internal_r+0x4b4>
    4978:	0023883a 	mov	r17,zero
    497c:	003d9d06 	br	3ff4 <___vfprintf_internal_r+0x125c>
    4980:	d9002c17 	ldw	r4,176(sp)
    4984:	d9801e04 	addi	r6,sp,120
    4988:	b80b883a 	mov	r5,r23
    498c:	000b7a00 	call	b7a0 <__sprint_r>
    4990:	103a031e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    4994:	d8c02017 	ldw	r3,128(sp)
    4998:	da000404 	addi	r8,sp,16
    499c:	003d9406 	br	3ff0 <___vfprintf_internal_r+0x1258>
    49a0:	010000b4 	movhi	r4,2
    49a4:	2136bf84 	addi	r4,r4,-9474
    49a8:	d9002b15 	stw	r4,172(sp)
    49ac:	d9002b17 	ldw	r4,172(sp)
    49b0:	1c47883a 	add	r3,r3,r17
    49b4:	10800044 	addi	r2,r2,1
    49b8:	41000015 	stw	r4,0(r8)
    49bc:	44400115 	stw	r17,4(r8)
    49c0:	d8c02015 	stw	r3,128(sp)
    49c4:	d8801f15 	stw	r2,124(sp)
    49c8:	010001c4 	movi	r4,7
    49cc:	20bfd716 	blt	r4,r2,492c <___vfprintf_internal_r+0x1b94>
    49d0:	42000204 	addi	r8,r8,8
    49d4:	003fdd06 	br	494c <___vfprintf_internal_r+0x1bb4>
    49d8:	d9002c17 	ldw	r4,176(sp)
    49dc:	d9801e04 	addi	r6,sp,120
    49e0:	b80b883a 	mov	r5,r23
    49e4:	000b7a00 	call	b7a0 <__sprint_r>
    49e8:	1039ed1e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    49ec:	d8802617 	ldw	r2,152(sp)
    49f0:	d8c02017 	ldw	r3,128(sp)
    49f4:	da000404 	addi	r8,sp,16
    49f8:	003e1006 	br	423c <___vfprintf_internal_r+0x14a4>
    49fc:	00800044 	movi	r2,1
    4a00:	10803fcc 	andi	r2,r2,255
    4a04:	00c00044 	movi	r3,1
    4a08:	10fa3526 	beq	r2,r3,32e0 <___vfprintf_internal_r+0x548>
    4a0c:	00c00084 	movi	r3,2
    4a10:	10fbcb26 	beq	r2,r3,3940 <___vfprintf_internal_r+0xba8>
    4a14:	003a8f06 	br	3454 <___vfprintf_internal_r+0x6bc>
    4a18:	010000b4 	movhi	r4,2
    4a1c:	2136c384 	addi	r4,r4,-9458
    4a20:	d9003515 	stw	r4,212(sp)
    4a24:	003b7606 	br	3800 <___vfprintf_internal_r+0xa68>
    4a28:	d8802917 	ldw	r2,164(sp)
    4a2c:	00c00184 	movi	r3,6
    4a30:	1880012e 	bgeu	r3,r2,4a38 <___vfprintf_internal_r+0x1ca0>
    4a34:	1805883a 	mov	r2,r3
    4a38:	d8802e15 	stw	r2,184(sp)
    4a3c:	1000ef16 	blt	r2,zero,4dfc <___vfprintf_internal_r+0x2064>
    4a40:	040000b4 	movhi	r16,2
    4a44:	d8802a15 	stw	r2,168(sp)
    4a48:	dcc02d15 	stw	r19,180(sp)
    4a4c:	d8002915 	stw	zero,164(sp)
    4a50:	d8003215 	stw	zero,200(sp)
    4a54:	8436b504 	addi	r16,r16,-9516
    4a58:	0039883a 	mov	fp,zero
    4a5c:	003aa206 	br	34e8 <___vfprintf_internal_r+0x750>
    4a60:	0021883a 	mov	r16,zero
    4a64:	003e0706 	br	4284 <___vfprintf_internal_r+0x14ec>
    4a68:	d9002c17 	ldw	r4,176(sp)
    4a6c:	d9801e04 	addi	r6,sp,120
    4a70:	b80b883a 	mov	r5,r23
    4a74:	000b7a00 	call	b7a0 <__sprint_r>
    4a78:	1039c91e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    4a7c:	d8802617 	ldw	r2,152(sp)
    4a80:	d9403317 	ldw	r5,204(sp)
    4a84:	d8c02017 	ldw	r3,128(sp)
    4a88:	da000404 	addi	r8,sp,16
    4a8c:	2885c83a 	sub	r2,r5,r2
    4a90:	003dfb06 	br	4280 <___vfprintf_internal_r+0x14e8>
    4a94:	9080004c 	andi	r2,r18,1
    4a98:	103e8f1e 	bne	r2,zero,44d8 <___vfprintf_internal_r+0x1740>
    4a9c:	d8802117 	ldw	r2,132(sp)
    4aa0:	003e9e06 	br	451c <___vfprintf_internal_r+0x1784>
    4aa4:	1025883a 	mov	r18,r2
    4aa8:	0039883a 	mov	fp,zero
    4aac:	00800084 	movi	r2,2
    4ab0:	003fd306 	br	4a00 <___vfprintf_internal_r+0x1c68>
    4ab4:	07000b44 	movi	fp,45
    4ab8:	df002785 	stb	fp,158(sp)
    4abc:	003a4006 	br	33c0 <___vfprintf_internal_r+0x628>
    4ac0:	00c00b44 	movi	r3,45
    4ac4:	d8c02785 	stb	r3,158(sp)
    4ac8:	d8802a15 	stw	r2,168(sp)
    4acc:	dc802b17 	ldw	r18,172(sp)
    4ad0:	d8002915 	stw	zero,164(sp)
    4ad4:	07000b44 	movi	fp,45
    4ad8:	003a8006 	br	34dc <___vfprintf_internal_r+0x744>
    4adc:	040000b4 	movhi	r16,2
    4ae0:	8436aa04 	addi	r16,r16,-9560
    4ae4:	003f4706 	br	4804 <___vfprintf_internal_r+0x1a6c>
    4ae8:	d8c02d17 	ldw	r3,180(sp)
    4aec:	d9002f17 	ldw	r4,188(sp)
    4af0:	18800017 	ldw	r2,0(r3)
    4af4:	18c00104 	addi	r3,r3,4
    4af8:	d8c02d15 	stw	r3,180(sp)
    4afc:	11000015 	stw	r4,0(r2)
    4b00:	0038dd06 	br	2e78 <___vfprintf_internal_r+0xe0>
    4b04:	dd802617 	ldw	r22,152(sp)
    4b08:	00bfff44 	movi	r2,-3
    4b0c:	b0801c16 	blt	r22,r2,4b80 <___vfprintf_internal_r+0x1de8>
    4b10:	d9402917 	ldw	r5,164(sp)
    4b14:	2d801a16 	blt	r5,r22,4b80 <___vfprintf_internal_r+0x1de8>
    4b18:	dd803215 	stw	r22,200(sp)
    4b1c:	003e8906 	br	4544 <___vfprintf_internal_r+0x17ac>
    4b20:	010000b4 	movhi	r4,2
    4b24:	2136bf84 	addi	r4,r4,-9474
    4b28:	d9002b15 	stw	r4,172(sp)
    4b2c:	003c9106 	br	3d74 <___vfprintf_internal_r+0xfdc>
    4b30:	e005883a 	mov	r2,fp
    4b34:	003e7906 	br	451c <___vfprintf_internal_r+0x1784>
    4b38:	d9402917 	ldw	r5,164(sp)
    4b3c:	df002783 	ldbu	fp,158(sp)
    4b40:	dcc02d15 	stw	r19,180(sp)
    4b44:	d9402a15 	stw	r5,168(sp)
    4b48:	d9402e15 	stw	r5,184(sp)
    4b4c:	d8002915 	stw	zero,164(sp)
    4b50:	d8003215 	stw	zero,200(sp)
    4b54:	003a5d06 	br	34cc <___vfprintf_internal_r+0x734>
    4b58:	9080004c 	andi	r2,r18,1
    4b5c:	0039883a 	mov	fp,zero
    4b60:	10000426 	beq	r2,zero,4b74 <___vfprintf_internal_r+0x1ddc>
    4b64:	00800c04 	movi	r2,48
    4b68:	dc001dc4 	addi	r16,sp,119
    4b6c:	d8801dc5 	stb	r2,119(sp)
    4b70:	003b8006 	br	3974 <___vfprintf_internal_r+0xbdc>
    4b74:	d8002e15 	stw	zero,184(sp)
    4b78:	dc001e04 	addi	r16,sp,120
    4b7c:	003a4d06 	br	34b4 <___vfprintf_internal_r+0x71c>
    4b80:	8c7fff84 	addi	r17,r17,-2
    4b84:	b5bfffc4 	addi	r22,r22,-1
    4b88:	dd802615 	stw	r22,152(sp)
    4b8c:	dc4022c5 	stb	r17,139(sp)
    4b90:	b000bf16 	blt	r22,zero,4e90 <___vfprintf_internal_r+0x20f8>
    4b94:	00800ac4 	movi	r2,43
    4b98:	d8802305 	stb	r2,140(sp)
    4b9c:	00800244 	movi	r2,9
    4ba0:	15807016 	blt	r2,r22,4d64 <___vfprintf_internal_r+0x1fcc>
    4ba4:	00800c04 	movi	r2,48
    4ba8:	b5800c04 	addi	r22,r22,48
    4bac:	d8802345 	stb	r2,141(sp)
    4bb0:	dd802385 	stb	r22,142(sp)
    4bb4:	d88023c4 	addi	r2,sp,143
    4bb8:	df0022c4 	addi	fp,sp,139
    4bbc:	d8c03317 	ldw	r3,204(sp)
    4bc0:	1739c83a 	sub	fp,r2,fp
    4bc4:	d9003317 	ldw	r4,204(sp)
    4bc8:	e0c7883a 	add	r3,fp,r3
    4bcc:	df003a15 	stw	fp,232(sp)
    4bd0:	d8c02e15 	stw	r3,184(sp)
    4bd4:	00800044 	movi	r2,1
    4bd8:	1100b30e 	bge	r2,r4,4ea8 <___vfprintf_internal_r+0x2110>
    4bdc:	d8c02e17 	ldw	r3,184(sp)
    4be0:	18c00044 	addi	r3,r3,1
    4be4:	d8c02e15 	stw	r3,184(sp)
    4be8:	1805883a 	mov	r2,r3
    4bec:	1800ac16 	blt	r3,zero,4ea0 <___vfprintf_internal_r+0x2108>
    4bf0:	d8003215 	stw	zero,200(sp)
    4bf4:	003e5d06 	br	456c <___vfprintf_internal_r+0x17d4>
    4bf8:	d9002c17 	ldw	r4,176(sp)
    4bfc:	d9801e04 	addi	r6,sp,120
    4c00:	b80b883a 	mov	r5,r23
    4c04:	000b7a00 	call	b7a0 <__sprint_r>
    4c08:	1039651e 	bne	r2,zero,31a0 <___vfprintf_internal_r+0x408>
    4c0c:	dc402617 	ldw	r17,152(sp)
    4c10:	d8c02017 	ldw	r3,128(sp)
    4c14:	d8801f17 	ldw	r2,124(sp)
    4c18:	da000404 	addi	r8,sp,16
    4c1c:	003ed606 	br	4778 <___vfprintf_internal_r+0x19e0>
    4c20:	582b883a 	mov	r21,r11
    4c24:	d8002915 	stw	zero,164(sp)
    4c28:	0038bd06 	br	2f20 <___vfprintf_internal_r+0x188>
    4c2c:	d8802917 	ldw	r2,164(sp)
    4c30:	103e071e 	bne	r2,zero,4450 <___vfprintf_internal_r+0x16b8>
    4c34:	dc002915 	stw	r16,164(sp)
    4c38:	003e0506 	br	4450 <___vfprintf_internal_r+0x16b8>
    4c3c:	d9002917 	ldw	r4,164(sp)
    4c40:	20c00044 	addi	r3,r4,1
    4c44:	003e0f06 	br	4484 <___vfprintf_internal_r+0x16ec>
    4c48:	01400184 	movi	r5,6
    4c4c:	d9402915 	stw	r5,164(sp)
    4c50:	003dff06 	br	4450 <___vfprintf_internal_r+0x16b8>
    4c54:	d8802104 	addi	r2,sp,132
    4c58:	d8800315 	stw	r2,12(sp)
    4c5c:	d8802504 	addi	r2,sp,148
    4c60:	d8800215 	stw	r2,8(sp)
    4c64:	d8802604 	addi	r2,sp,152
    4c68:	d8800115 	stw	r2,4(sp)
    4c6c:	d8802917 	ldw	r2,164(sp)
    4c70:	d9403617 	ldw	r5,216(sp)
    4c74:	d9002c17 	ldw	r4,176(sp)
    4c78:	d8800015 	stw	r2,0(sp)
    4c7c:	01c000c4 	movi	r7,3
    4c80:	980d883a 	mov	r6,r19
    4c84:	da003d15 	stw	r8,244(sp)
    4c88:	00053bc0 	call	53bc <_dtoa_r>
    4c8c:	d8c02917 	ldw	r3,164(sp)
    4c90:	da003d17 	ldw	r8,244(sp)
    4c94:	1021883a 	mov	r16,r2
    4c98:	10f9883a 	add	fp,r2,r3
    4c9c:	81000007 	ldb	r4,0(r16)
    4ca0:	00800c04 	movi	r2,48
    4ca4:	20805e26 	beq	r4,r2,4e20 <___vfprintf_internal_r+0x2088>
    4ca8:	d8c02617 	ldw	r3,152(sp)
    4cac:	e0f9883a 	add	fp,fp,r3
    4cb0:	003e0a06 	br	44dc <___vfprintf_internal_r+0x1744>
    4cb4:	00c00b44 	movi	r3,45
    4cb8:	24e0003c 	xorhi	r19,r4,32768
    4cbc:	d8c02a05 	stb	r3,168(sp)
    4cc0:	003de906 	br	4468 <___vfprintf_internal_r+0x16d0>
    4cc4:	d8c03217 	ldw	r3,200(sp)
    4cc8:	00c07a0e 	bge	zero,r3,4eb4 <___vfprintf_internal_r+0x211c>
    4ccc:	00800044 	movi	r2,1
    4cd0:	d9003317 	ldw	r4,204(sp)
    4cd4:	1105883a 	add	r2,r2,r4
    4cd8:	d8802e15 	stw	r2,184(sp)
    4cdc:	10004e16 	blt	r2,zero,4e18 <___vfprintf_internal_r+0x2080>
    4ce0:	044019c4 	movi	r17,103
    4ce4:	003e2106 	br	456c <___vfprintf_internal_r+0x17d4>
    4ce8:	d9002917 	ldw	r4,164(sp)
    4cec:	d8802104 	addi	r2,sp,132
    4cf0:	d8800315 	stw	r2,12(sp)
    4cf4:	d9000015 	stw	r4,0(sp)
    4cf8:	d8802504 	addi	r2,sp,148
    4cfc:	d9403617 	ldw	r5,216(sp)
    4d00:	d9002c17 	ldw	r4,176(sp)
    4d04:	d8800215 	stw	r2,8(sp)
    4d08:	d8802604 	addi	r2,sp,152
    4d0c:	d8800115 	stw	r2,4(sp)
    4d10:	01c000c4 	movi	r7,3
    4d14:	980d883a 	mov	r6,r19
    4d18:	da003d15 	stw	r8,244(sp)
    4d1c:	00053bc0 	call	53bc <_dtoa_r>
    4d20:	d8c02917 	ldw	r3,164(sp)
    4d24:	da003d17 	ldw	r8,244(sp)
    4d28:	1021883a 	mov	r16,r2
    4d2c:	00801184 	movi	r2,70
    4d30:	80f9883a 	add	fp,r16,r3
    4d34:	88bfd926 	beq	r17,r2,4c9c <___vfprintf_internal_r+0x1f04>
    4d38:	003de806 	br	44dc <___vfprintf_internal_r+0x1744>
    4d3c:	d9002917 	ldw	r4,164(sp)
    4d40:	00c04d0e 	bge	zero,r3,4e78 <___vfprintf_internal_r+0x20e0>
    4d44:	2000441e 	bne	r4,zero,4e58 <___vfprintf_internal_r+0x20c0>
    4d48:	9480004c 	andi	r18,r18,1
    4d4c:	9000421e 	bne	r18,zero,4e58 <___vfprintf_internal_r+0x20c0>
    4d50:	1805883a 	mov	r2,r3
    4d54:	18007016 	blt	r3,zero,4f18 <___vfprintf_internal_r+0x2180>
    4d58:	d8c03217 	ldw	r3,200(sp)
    4d5c:	d8c02e15 	stw	r3,184(sp)
    4d60:	003e0206 	br	456c <___vfprintf_internal_r+0x17d4>
    4d64:	df0022c4 	addi	fp,sp,139
    4d68:	dc002915 	stw	r16,164(sp)
    4d6c:	4027883a 	mov	r19,r8
    4d70:	e021883a 	mov	r16,fp
    4d74:	b009883a 	mov	r4,r22
    4d78:	01400284 	movi	r5,10
    4d7c:	000e1540 	call	e154 <__modsi3>
    4d80:	10800c04 	addi	r2,r2,48
    4d84:	843fffc4 	addi	r16,r16,-1
    4d88:	b009883a 	mov	r4,r22
    4d8c:	01400284 	movi	r5,10
    4d90:	80800005 	stb	r2,0(r16)
    4d94:	000e0d00 	call	e0d0 <__divsi3>
    4d98:	102d883a 	mov	r22,r2
    4d9c:	00800244 	movi	r2,9
    4da0:	15bff416 	blt	r2,r22,4d74 <___vfprintf_internal_r+0x1fdc>
    4da4:	9811883a 	mov	r8,r19
    4da8:	b0800c04 	addi	r2,r22,48
    4dac:	8027883a 	mov	r19,r16
    4db0:	997fffc4 	addi	r5,r19,-1
    4db4:	98bfffc5 	stb	r2,-1(r19)
    4db8:	dc002917 	ldw	r16,164(sp)
    4dbc:	2f006a2e 	bgeu	r5,fp,4f68 <___vfprintf_internal_r+0x21d0>
    4dc0:	d9c02384 	addi	r7,sp,142
    4dc4:	3ccfc83a 	sub	r7,r7,r19
    4dc8:	d9002344 	addi	r4,sp,141
    4dcc:	e1cf883a 	add	r7,fp,r7
    4dd0:	00000106 	br	4dd8 <___vfprintf_internal_r+0x2040>
    4dd4:	28800003 	ldbu	r2,0(r5)
    4dd8:	20800005 	stb	r2,0(r4)
    4ddc:	21000044 	addi	r4,r4,1
    4de0:	29400044 	addi	r5,r5,1
    4de4:	393ffb1e 	bne	r7,r4,4dd4 <___vfprintf_internal_r+0x203c>
    4de8:	d8802304 	addi	r2,sp,140
    4dec:	14c5c83a 	sub	r2,r2,r19
    4df0:	d8c02344 	addi	r3,sp,141
    4df4:	1885883a 	add	r2,r3,r2
    4df8:	003f7006 	br	4bbc <___vfprintf_internal_r+0x1e24>
    4dfc:	0005883a 	mov	r2,zero
    4e00:	003f0f06 	br	4a40 <___vfprintf_internal_r+0x1ca8>
    4e04:	d8c03217 	ldw	r3,200(sp)
    4e08:	18c00044 	addi	r3,r3,1
    4e0c:	d8c02e15 	stw	r3,184(sp)
    4e10:	1805883a 	mov	r2,r3
    4e14:	183fb20e 	bge	r3,zero,4ce0 <___vfprintf_internal_r+0x1f48>
    4e18:	0005883a 	mov	r2,zero
    4e1c:	003fb006 	br	4ce0 <___vfprintf_internal_r+0x1f48>
    4e20:	d9003617 	ldw	r4,216(sp)
    4e24:	000d883a 	mov	r6,zero
    4e28:	000f883a 	mov	r7,zero
    4e2c:	980b883a 	mov	r5,r19
    4e30:	d8c03c15 	stw	r3,240(sp)
    4e34:	da003d15 	stw	r8,244(sp)
    4e38:	000f4180 	call	f418 <__eqdf2>
    4e3c:	d8c03c17 	ldw	r3,240(sp)
    4e40:	da003d17 	ldw	r8,244(sp)
    4e44:	103f9826 	beq	r2,zero,4ca8 <___vfprintf_internal_r+0x1f10>
    4e48:	00800044 	movi	r2,1
    4e4c:	10c7c83a 	sub	r3,r2,r3
    4e50:	d8c02615 	stw	r3,152(sp)
    4e54:	003f9506 	br	4cac <___vfprintf_internal_r+0x1f14>
    4e58:	d9002917 	ldw	r4,164(sp)
    4e5c:	d8c03217 	ldw	r3,200(sp)
    4e60:	20800044 	addi	r2,r4,1
    4e64:	1885883a 	add	r2,r3,r2
    4e68:	d8802e15 	stw	r2,184(sp)
    4e6c:	103dbf0e 	bge	r2,zero,456c <___vfprintf_internal_r+0x17d4>
    4e70:	0005883a 	mov	r2,zero
    4e74:	003dbd06 	br	456c <___vfprintf_internal_r+0x17d4>
    4e78:	2000211e 	bne	r4,zero,4f00 <___vfprintf_internal_r+0x2168>
    4e7c:	9480004c 	andi	r18,r18,1
    4e80:	90001f1e 	bne	r18,zero,4f00 <___vfprintf_internal_r+0x2168>
    4e84:	00800044 	movi	r2,1
    4e88:	d8802e15 	stw	r2,184(sp)
    4e8c:	003db706 	br	456c <___vfprintf_internal_r+0x17d4>
    4e90:	00800b44 	movi	r2,45
    4e94:	05adc83a 	sub	r22,zero,r22
    4e98:	d8802305 	stb	r2,140(sp)
    4e9c:	003f3f06 	br	4b9c <___vfprintf_internal_r+0x1e04>
    4ea0:	0005883a 	mov	r2,zero
    4ea4:	003f5206 	br	4bf0 <___vfprintf_internal_r+0x1e58>
    4ea8:	90a4703a 	and	r18,r18,r2
    4eac:	903f4e26 	beq	r18,zero,4be8 <___vfprintf_internal_r+0x1e50>
    4eb0:	003f4a06 	br	4bdc <___vfprintf_internal_r+0x1e44>
    4eb4:	00800084 	movi	r2,2
    4eb8:	10c5c83a 	sub	r2,r2,r3
    4ebc:	003f8406 	br	4cd0 <___vfprintf_internal_r+0x1f38>
    4ec0:	d8802d17 	ldw	r2,180(sp)
    4ec4:	d9002d17 	ldw	r4,180(sp)
    4ec8:	ac400043 	ldbu	r17,1(r21)
    4ecc:	10800017 	ldw	r2,0(r2)
    4ed0:	582b883a 	mov	r21,r11
    4ed4:	d8802915 	stw	r2,164(sp)
    4ed8:	20800104 	addi	r2,r4,4
    4edc:	d9002917 	ldw	r4,164(sp)
    4ee0:	d8802d15 	stw	r2,180(sp)
    4ee4:	203e7a0e 	bge	r4,zero,48d0 <___vfprintf_internal_r+0x1b38>
    4ee8:	8c403fcc 	andi	r17,r17,255
    4eec:	00bfffc4 	movi	r2,-1
    4ef0:	8c40201c 	xori	r17,r17,128
    4ef4:	d8802915 	stw	r2,164(sp)
    4ef8:	8c7fe004 	addi	r17,r17,-128
    4efc:	00380706 	br	2f1c <___vfprintf_internal_r+0x184>
    4f00:	d8c02917 	ldw	r3,164(sp)
    4f04:	18c00084 	addi	r3,r3,2
    4f08:	d8c02e15 	stw	r3,184(sp)
    4f0c:	1805883a 	mov	r2,r3
    4f10:	183d960e 	bge	r3,zero,456c <___vfprintf_internal_r+0x17d4>
    4f14:	003fd606 	br	4e70 <___vfprintf_internal_r+0x20d8>
    4f18:	0005883a 	mov	r2,zero
    4f1c:	003f8e06 	br	4d58 <___vfprintf_internal_r+0x1fc0>
    4f20:	9080004c 	andi	r2,r18,1
    4f24:	103f811e 	bne	r2,zero,4d2c <___vfprintf_internal_r+0x1f94>
    4f28:	d8802117 	ldw	r2,132(sp)
    4f2c:	1405c83a 	sub	r2,r2,r16
    4f30:	d8803315 	stw	r2,204(sp)
    4f34:	b47ef326 	beq	r22,r17,4b04 <___vfprintf_internal_r+0x1d6c>
    4f38:	dd802617 	ldw	r22,152(sp)
    4f3c:	003f1106 	br	4b84 <___vfprintf_internal_r+0x1dec>
    4f40:	d9c02785 	stb	r7,158(sp)
    4f44:	00390406 	br	3358 <___vfprintf_internal_r+0x5c0>
    4f48:	d9c02785 	stb	r7,158(sp)
    4f4c:	0038d306 	br	329c <___vfprintf_internal_r+0x504>
    4f50:	d9c02785 	stb	r7,158(sp)
    4f54:	003a6106 	br	38dc <___vfprintf_internal_r+0xb44>
    4f58:	d9c02785 	stb	r7,158(sp)
    4f5c:	003af806 	br	3b40 <___vfprintf_internal_r+0xda8>
    4f60:	0005883a 	mov	r2,zero
    4f64:	003d7e06 	br	4560 <___vfprintf_internal_r+0x17c8>
    4f68:	d8802344 	addi	r2,sp,141
    4f6c:	003f1306 	br	4bbc <___vfprintf_internal_r+0x1e24>
    4f70:	d9c02785 	stb	r7,158(sp)
    4f74:	00392306 	br	3404 <___vfprintf_internal_r+0x66c>
    4f78:	d9c02785 	stb	r7,158(sp)
    4f7c:	003aa906 	br	3a24 <___vfprintf_internal_r+0xc8c>
    4f80:	d9c02785 	stb	r7,158(sp)
    4f84:	003a3d06 	br	387c <___vfprintf_internal_r+0xae4>
    4f88:	d9c02785 	stb	r7,158(sp)
    4f8c:	003aca06 	br	3ab8 <___vfprintf_internal_r+0xd20>

00004f90 <__vfprintf_internal>:
    4f90:	008000b4 	movhi	r2,2
    4f94:	10bf8204 	addi	r2,r2,-504
    4f98:	300f883a 	mov	r7,r6
    4f9c:	280d883a 	mov	r6,r5
    4fa0:	200b883a 	mov	r5,r4
    4fa4:	11000017 	ldw	r4,0(r2)
    4fa8:	0002d981 	jmpi	2d98 <___vfprintf_internal_r>

00004fac <__sbprintf>:
    4fac:	2880030b 	ldhu	r2,12(r5)
    4fb0:	2ac01917 	ldw	r11,100(r5)
    4fb4:	2a80038b 	ldhu	r10,14(r5)
    4fb8:	2a400717 	ldw	r9,28(r5)
    4fbc:	2a000917 	ldw	r8,36(r5)
    4fc0:	defee204 	addi	sp,sp,-1144
    4fc4:	00c10004 	movi	r3,1024
    4fc8:	dc011a15 	stw	r16,1128(sp)
    4fcc:	10bfff4c 	andi	r2,r2,65533
    4fd0:	2821883a 	mov	r16,r5
    4fd4:	d8cb883a 	add	r5,sp,r3
    4fd8:	dc811c15 	stw	r18,1136(sp)
    4fdc:	dc411b15 	stw	r17,1132(sp)
    4fe0:	dfc11d15 	stw	ra,1140(sp)
    4fe4:	2025883a 	mov	r18,r4
    4fe8:	d881030d 	sth	r2,1036(sp)
    4fec:	dac11915 	stw	r11,1124(sp)
    4ff0:	da81038d 	sth	r10,1038(sp)
    4ff4:	da410715 	stw	r9,1052(sp)
    4ff8:	da010915 	stw	r8,1060(sp)
    4ffc:	dec10015 	stw	sp,1024(sp)
    5000:	dec10415 	stw	sp,1040(sp)
    5004:	d8c10215 	stw	r3,1032(sp)
    5008:	d8c10515 	stw	r3,1044(sp)
    500c:	d8010615 	stw	zero,1048(sp)
    5010:	0002d980 	call	2d98 <___vfprintf_internal_r>
    5014:	1023883a 	mov	r17,r2
    5018:	10000416 	blt	r2,zero,502c <__sbprintf+0x80>
    501c:	d9410004 	addi	r5,sp,1024
    5020:	9009883a 	mov	r4,r18
    5024:	0006c600 	call	6c60 <_fflush_r>
    5028:	10000d1e 	bne	r2,zero,5060 <__sbprintf+0xb4>
    502c:	d881030b 	ldhu	r2,1036(sp)
    5030:	1080100c 	andi	r2,r2,64
    5034:	10000326 	beq	r2,zero,5044 <__sbprintf+0x98>
    5038:	8080030b 	ldhu	r2,12(r16)
    503c:	10801014 	ori	r2,r2,64
    5040:	8080030d 	sth	r2,12(r16)
    5044:	8805883a 	mov	r2,r17
    5048:	dfc11d17 	ldw	ra,1140(sp)
    504c:	dc811c17 	ldw	r18,1136(sp)
    5050:	dc411b17 	ldw	r17,1132(sp)
    5054:	dc011a17 	ldw	r16,1128(sp)
    5058:	dec11e04 	addi	sp,sp,1144
    505c:	f800283a 	ret
    5060:	047fffc4 	movi	r17,-1
    5064:	003ff106 	br	502c <__sbprintf+0x80>

00005068 <__swsetup_r>:
    5068:	008000b4 	movhi	r2,2
    506c:	defffd04 	addi	sp,sp,-12
    5070:	10bf8204 	addi	r2,r2,-504
    5074:	dc400115 	stw	r17,4(sp)
    5078:	2023883a 	mov	r17,r4
    507c:	11000017 	ldw	r4,0(r2)
    5080:	dc000015 	stw	r16,0(sp)
    5084:	dfc00215 	stw	ra,8(sp)
    5088:	2821883a 	mov	r16,r5
    508c:	20000226 	beq	r4,zero,5098 <__swsetup_r+0x30>
    5090:	20800e17 	ldw	r2,56(r4)
    5094:	10003126 	beq	r2,zero,515c <__swsetup_r+0xf4>
    5098:	8080030b 	ldhu	r2,12(r16)
    509c:	10c0020c 	andi	r3,r2,8
    50a0:	1009883a 	mov	r4,r2
    50a4:	18000f26 	beq	r3,zero,50e4 <__swsetup_r+0x7c>
    50a8:	80c00417 	ldw	r3,16(r16)
    50ac:	18001526 	beq	r3,zero,5104 <__swsetup_r+0x9c>
    50b0:	1100004c 	andi	r4,r2,1
    50b4:	20001c1e 	bne	r4,zero,5128 <__swsetup_r+0xc0>
    50b8:	1080008c 	andi	r2,r2,2
    50bc:	1000291e 	bne	r2,zero,5164 <__swsetup_r+0xfc>
    50c0:	80800517 	ldw	r2,20(r16)
    50c4:	80800215 	stw	r2,8(r16)
    50c8:	18001c26 	beq	r3,zero,513c <__swsetup_r+0xd4>
    50cc:	0005883a 	mov	r2,zero
    50d0:	dfc00217 	ldw	ra,8(sp)
    50d4:	dc400117 	ldw	r17,4(sp)
    50d8:	dc000017 	ldw	r16,0(sp)
    50dc:	dec00304 	addi	sp,sp,12
    50e0:	f800283a 	ret
    50e4:	2080040c 	andi	r2,r4,16
    50e8:	10002e26 	beq	r2,zero,51a4 <__swsetup_r+0x13c>
    50ec:	2080010c 	andi	r2,r4,4
    50f0:	10001e1e 	bne	r2,zero,516c <__swsetup_r+0x104>
    50f4:	80c00417 	ldw	r3,16(r16)
    50f8:	20800214 	ori	r2,r4,8
    50fc:	8080030d 	sth	r2,12(r16)
    5100:	183feb1e 	bne	r3,zero,50b0 <__swsetup_r+0x48>
    5104:	1100a00c 	andi	r4,r2,640
    5108:	01408004 	movi	r5,512
    510c:	217fe826 	beq	r4,r5,50b0 <__swsetup_r+0x48>
    5110:	800b883a 	mov	r5,r16
    5114:	8809883a 	mov	r4,r17
    5118:	0007be00 	call	7be0 <__smakebuf_r>
    511c:	8080030b 	ldhu	r2,12(r16)
    5120:	80c00417 	ldw	r3,16(r16)
    5124:	003fe206 	br	50b0 <__swsetup_r+0x48>
    5128:	80800517 	ldw	r2,20(r16)
    512c:	80000215 	stw	zero,8(r16)
    5130:	0085c83a 	sub	r2,zero,r2
    5134:	80800615 	stw	r2,24(r16)
    5138:	183fe41e 	bne	r3,zero,50cc <__swsetup_r+0x64>
    513c:	80c0030b 	ldhu	r3,12(r16)
    5140:	0005883a 	mov	r2,zero
    5144:	1900200c 	andi	r4,r3,128
    5148:	203fe126 	beq	r4,zero,50d0 <__swsetup_r+0x68>
    514c:	18c01014 	ori	r3,r3,64
    5150:	80c0030d 	sth	r3,12(r16)
    5154:	00bfffc4 	movi	r2,-1
    5158:	003fdd06 	br	50d0 <__swsetup_r+0x68>
    515c:	000703c0 	call	703c <__sinit>
    5160:	003fcd06 	br	5098 <__swsetup_r+0x30>
    5164:	0005883a 	mov	r2,zero
    5168:	003fd606 	br	50c4 <__swsetup_r+0x5c>
    516c:	81400c17 	ldw	r5,48(r16)
    5170:	28000626 	beq	r5,zero,518c <__swsetup_r+0x124>
    5174:	80801004 	addi	r2,r16,64
    5178:	28800326 	beq	r5,r2,5188 <__swsetup_r+0x120>
    517c:	8809883a 	mov	r4,r17
    5180:	00071b00 	call	71b0 <_free_r>
    5184:	8100030b 	ldhu	r4,12(r16)
    5188:	80000c15 	stw	zero,48(r16)
    518c:	80c00417 	ldw	r3,16(r16)
    5190:	00bff6c4 	movi	r2,-37
    5194:	1108703a 	and	r4,r2,r4
    5198:	80000115 	stw	zero,4(r16)
    519c:	80c00015 	stw	r3,0(r16)
    51a0:	003fd506 	br	50f8 <__swsetup_r+0x90>
    51a4:	00800244 	movi	r2,9
    51a8:	88800015 	stw	r2,0(r17)
    51ac:	20801014 	ori	r2,r4,64
    51b0:	8080030d 	sth	r2,12(r16)
    51b4:	00bfffc4 	movi	r2,-1
    51b8:	003fc506 	br	50d0 <__swsetup_r+0x68>

000051bc <quorem>:
    51bc:	defff704 	addi	sp,sp,-36
    51c0:	dc800215 	stw	r18,8(sp)
    51c4:	20800417 	ldw	r2,16(r4)
    51c8:	2c800417 	ldw	r18,16(r5)
    51cc:	dfc00815 	stw	ra,32(sp)
    51d0:	ddc00715 	stw	r23,28(sp)
    51d4:	dd800615 	stw	r22,24(sp)
    51d8:	dd400515 	stw	r21,20(sp)
    51dc:	dd000415 	stw	r20,16(sp)
    51e0:	dcc00315 	stw	r19,12(sp)
    51e4:	dc400115 	stw	r17,4(sp)
    51e8:	dc000015 	stw	r16,0(sp)
    51ec:	14807116 	blt	r2,r18,53b4 <quorem+0x1f8>
    51f0:	94bfffc4 	addi	r18,r18,-1
    51f4:	94ad883a 	add	r22,r18,r18
    51f8:	b5ad883a 	add	r22,r22,r22
    51fc:	2c400504 	addi	r17,r5,20
    5200:	8da9883a 	add	r20,r17,r22
    5204:	25400504 	addi	r21,r4,20
    5208:	282f883a 	mov	r23,r5
    520c:	adad883a 	add	r22,r21,r22
    5210:	a1400017 	ldw	r5,0(r20)
    5214:	2021883a 	mov	r16,r4
    5218:	b1000017 	ldw	r4,0(r22)
    521c:	29400044 	addi	r5,r5,1
    5220:	000e1c80 	call	e1c8 <__udivsi3>
    5224:	1027883a 	mov	r19,r2
    5228:	10002c26 	beq	r2,zero,52dc <quorem+0x120>
    522c:	a813883a 	mov	r9,r21
    5230:	880b883a 	mov	r5,r17
    5234:	0009883a 	mov	r4,zero
    5238:	000d883a 	mov	r6,zero
    523c:	2a000017 	ldw	r8,0(r5)
    5240:	49c00017 	ldw	r7,0(r9)
    5244:	29400104 	addi	r5,r5,4
    5248:	40bfffcc 	andi	r2,r8,65535
    524c:	14c5383a 	mul	r2,r2,r19
    5250:	4010d43a 	srli	r8,r8,16
    5254:	38ffffcc 	andi	r3,r7,65535
    5258:	1105883a 	add	r2,r2,r4
    525c:	1008d43a 	srli	r4,r2,16
    5260:	44d1383a 	mul	r8,r8,r19
    5264:	198d883a 	add	r6,r3,r6
    5268:	10ffffcc 	andi	r3,r2,65535
    526c:	30c7c83a 	sub	r3,r6,r3
    5270:	380ed43a 	srli	r7,r7,16
    5274:	4105883a 	add	r2,r8,r4
    5278:	180dd43a 	srai	r6,r3,16
    527c:	113fffcc 	andi	r4,r2,65535
    5280:	390fc83a 	sub	r7,r7,r4
    5284:	398d883a 	add	r6,r7,r6
    5288:	300e943a 	slli	r7,r6,16
    528c:	18ffffcc 	andi	r3,r3,65535
    5290:	1008d43a 	srli	r4,r2,16
    5294:	38ceb03a 	or	r7,r7,r3
    5298:	49c00015 	stw	r7,0(r9)
    529c:	300dd43a 	srai	r6,r6,16
    52a0:	4a400104 	addi	r9,r9,4
    52a4:	a17fe52e 	bgeu	r20,r5,523c <quorem+0x80>
    52a8:	b0800017 	ldw	r2,0(r22)
    52ac:	10000b1e 	bne	r2,zero,52dc <quorem+0x120>
    52b0:	b0bfff04 	addi	r2,r22,-4
    52b4:	a880082e 	bgeu	r21,r2,52d8 <quorem+0x11c>
    52b8:	b0ffff17 	ldw	r3,-4(r22)
    52bc:	18000326 	beq	r3,zero,52cc <quorem+0x110>
    52c0:	00000506 	br	52d8 <quorem+0x11c>
    52c4:	10c00017 	ldw	r3,0(r2)
    52c8:	1800031e 	bne	r3,zero,52d8 <quorem+0x11c>
    52cc:	10bfff04 	addi	r2,r2,-4
    52d0:	94bfffc4 	addi	r18,r18,-1
    52d4:	a8bffb36 	bltu	r21,r2,52c4 <quorem+0x108>
    52d8:	84800415 	stw	r18,16(r16)
    52dc:	b80b883a 	mov	r5,r23
    52e0:	8009883a 	mov	r4,r16
    52e4:	00093200 	call	9320 <__mcmp>
    52e8:	10002616 	blt	r2,zero,5384 <quorem+0x1c8>
    52ec:	9cc00044 	addi	r19,r19,1
    52f0:	a805883a 	mov	r2,r21
    52f4:	000b883a 	mov	r5,zero
    52f8:	11000017 	ldw	r4,0(r2)
    52fc:	89800017 	ldw	r6,0(r17)
    5300:	10800104 	addi	r2,r2,4
    5304:	20ffffcc 	andi	r3,r4,65535
    5308:	194b883a 	add	r5,r3,r5
    530c:	30ffffcc 	andi	r3,r6,65535
    5310:	28c7c83a 	sub	r3,r5,r3
    5314:	300cd43a 	srli	r6,r6,16
    5318:	2008d43a 	srli	r4,r4,16
    531c:	180bd43a 	srai	r5,r3,16
    5320:	18ffffcc 	andi	r3,r3,65535
    5324:	2189c83a 	sub	r4,r4,r6
    5328:	2149883a 	add	r4,r4,r5
    532c:	200c943a 	slli	r6,r4,16
    5330:	8c400104 	addi	r17,r17,4
    5334:	200bd43a 	srai	r5,r4,16
    5338:	30c6b03a 	or	r3,r6,r3
    533c:	10ffff15 	stw	r3,-4(r2)
    5340:	a47fed2e 	bgeu	r20,r17,52f8 <quorem+0x13c>
    5344:	9485883a 	add	r2,r18,r18
    5348:	1085883a 	add	r2,r2,r2
    534c:	a887883a 	add	r3,r21,r2
    5350:	18800017 	ldw	r2,0(r3)
    5354:	10000b1e 	bne	r2,zero,5384 <quorem+0x1c8>
    5358:	18bfff04 	addi	r2,r3,-4
    535c:	a880082e 	bgeu	r21,r2,5380 <quorem+0x1c4>
    5360:	18ffff17 	ldw	r3,-4(r3)
    5364:	18000326 	beq	r3,zero,5374 <quorem+0x1b8>
    5368:	00000506 	br	5380 <quorem+0x1c4>
    536c:	10c00017 	ldw	r3,0(r2)
    5370:	1800031e 	bne	r3,zero,5380 <quorem+0x1c4>
    5374:	10bfff04 	addi	r2,r2,-4
    5378:	94bfffc4 	addi	r18,r18,-1
    537c:	a8bffb36 	bltu	r21,r2,536c <quorem+0x1b0>
    5380:	84800415 	stw	r18,16(r16)
    5384:	9805883a 	mov	r2,r19
    5388:	dfc00817 	ldw	ra,32(sp)
    538c:	ddc00717 	ldw	r23,28(sp)
    5390:	dd800617 	ldw	r22,24(sp)
    5394:	dd400517 	ldw	r21,20(sp)
    5398:	dd000417 	ldw	r20,16(sp)
    539c:	dcc00317 	ldw	r19,12(sp)
    53a0:	dc800217 	ldw	r18,8(sp)
    53a4:	dc400117 	ldw	r17,4(sp)
    53a8:	dc000017 	ldw	r16,0(sp)
    53ac:	dec00904 	addi	sp,sp,36
    53b0:	f800283a 	ret
    53b4:	0005883a 	mov	r2,zero
    53b8:	003ff306 	br	5388 <quorem+0x1cc>

000053bc <_dtoa_r>:
    53bc:	20801017 	ldw	r2,64(r4)
    53c0:	deffde04 	addi	sp,sp,-136
    53c4:	df002015 	stw	fp,128(sp)
    53c8:	dcc01b15 	stw	r19,108(sp)
    53cc:	dc801a15 	stw	r18,104(sp)
    53d0:	dc401915 	stw	r17,100(sp)
    53d4:	dc001815 	stw	r16,96(sp)
    53d8:	dfc02115 	stw	ra,132(sp)
    53dc:	ddc01f15 	stw	r23,124(sp)
    53e0:	dd801e15 	stw	r22,120(sp)
    53e4:	dd401d15 	stw	r21,116(sp)
    53e8:	dd001c15 	stw	r20,112(sp)
    53ec:	d9c00315 	stw	r7,12(sp)
    53f0:	2039883a 	mov	fp,r4
    53f4:	3023883a 	mov	r17,r6
    53f8:	2825883a 	mov	r18,r5
    53fc:	dc002417 	ldw	r16,144(sp)
    5400:	3027883a 	mov	r19,r6
    5404:	10000826 	beq	r2,zero,5428 <_dtoa_r+0x6c>
    5408:	21801117 	ldw	r6,68(r4)
    540c:	00c00044 	movi	r3,1
    5410:	100b883a 	mov	r5,r2
    5414:	1986983a 	sll	r3,r3,r6
    5418:	11800115 	stw	r6,4(r2)
    541c:	10c00215 	stw	r3,8(r2)
    5420:	0008b000 	call	8b00 <_Bfree>
    5424:	e0001015 	stw	zero,64(fp)
    5428:	88002e16 	blt	r17,zero,54e4 <_dtoa_r+0x128>
    542c:	80000015 	stw	zero,0(r16)
    5430:	889ffc2c 	andhi	r2,r17,32752
    5434:	00dffc34 	movhi	r3,32752
    5438:	10c01c26 	beq	r2,r3,54ac <_dtoa_r+0xf0>
    543c:	000d883a 	mov	r6,zero
    5440:	000f883a 	mov	r7,zero
    5444:	9009883a 	mov	r4,r18
    5448:	980b883a 	mov	r5,r19
    544c:	000f4180 	call	f418 <__eqdf2>
    5450:	10002b1e 	bne	r2,zero,5500 <_dtoa_r+0x144>
    5454:	d9c02317 	ldw	r7,140(sp)
    5458:	00800044 	movi	r2,1
    545c:	38800015 	stw	r2,0(r7)
    5460:	d8802517 	ldw	r2,148(sp)
    5464:	10019e26 	beq	r2,zero,5ae0 <_dtoa_r+0x724>
    5468:	d8c02517 	ldw	r3,148(sp)
    546c:	008000b4 	movhi	r2,2
    5470:	10b6b744 	addi	r2,r2,-9507
    5474:	18800015 	stw	r2,0(r3)
    5478:	10bfffc4 	addi	r2,r2,-1
    547c:	dfc02117 	ldw	ra,132(sp)
    5480:	df002017 	ldw	fp,128(sp)
    5484:	ddc01f17 	ldw	r23,124(sp)
    5488:	dd801e17 	ldw	r22,120(sp)
    548c:	dd401d17 	ldw	r21,116(sp)
    5490:	dd001c17 	ldw	r20,112(sp)
    5494:	dcc01b17 	ldw	r19,108(sp)
    5498:	dc801a17 	ldw	r18,104(sp)
    549c:	dc401917 	ldw	r17,100(sp)
    54a0:	dc001817 	ldw	r16,96(sp)
    54a4:	dec02204 	addi	sp,sp,136
    54a8:	f800283a 	ret
    54ac:	d8c02317 	ldw	r3,140(sp)
    54b0:	0089c3c4 	movi	r2,9999
    54b4:	18800015 	stw	r2,0(r3)
    54b8:	90017726 	beq	r18,zero,5a98 <_dtoa_r+0x6dc>
    54bc:	008000b4 	movhi	r2,2
    54c0:	10b6cb04 	addi	r2,r2,-9428
    54c4:	d9002517 	ldw	r4,148(sp)
    54c8:	203fec26 	beq	r4,zero,547c <_dtoa_r+0xc0>
    54cc:	10c000c7 	ldb	r3,3(r2)
    54d0:	1801781e 	bne	r3,zero,5ab4 <_dtoa_r+0x6f8>
    54d4:	10c000c4 	addi	r3,r2,3
    54d8:	d9802517 	ldw	r6,148(sp)
    54dc:	30c00015 	stw	r3,0(r6)
    54e0:	003fe606 	br	547c <_dtoa_r+0xc0>
    54e4:	04e00034 	movhi	r19,32768
    54e8:	9cffffc4 	addi	r19,r19,-1
    54ec:	00800044 	movi	r2,1
    54f0:	8ce6703a 	and	r19,r17,r19
    54f4:	80800015 	stw	r2,0(r16)
    54f8:	9823883a 	mov	r17,r19
    54fc:	003fcc06 	br	5430 <_dtoa_r+0x74>
    5500:	d8800204 	addi	r2,sp,8
    5504:	d8800015 	stw	r2,0(sp)
    5508:	d9c00104 	addi	r7,sp,4
    550c:	900b883a 	mov	r5,r18
    5510:	980d883a 	mov	r6,r19
    5514:	e009883a 	mov	r4,fp
    5518:	8820d53a 	srli	r16,r17,20
    551c:	00096ec0 	call	96ec <__d2b>
    5520:	d8800915 	stw	r2,36(sp)
    5524:	8001651e 	bne	r16,zero,5abc <_dtoa_r+0x700>
    5528:	dd800217 	ldw	r22,8(sp)
    552c:	dc000117 	ldw	r16,4(sp)
    5530:	00800804 	movi	r2,32
    5534:	b421883a 	add	r16,r22,r16
    5538:	80c10c84 	addi	r3,r16,1074
    553c:	10c2d10e 	bge	r2,r3,6084 <_dtoa_r+0xcc8>
    5540:	00801004 	movi	r2,64
    5544:	81010484 	addi	r4,r16,1042
    5548:	10c7c83a 	sub	r3,r2,r3
    554c:	9108d83a 	srl	r4,r18,r4
    5550:	88e2983a 	sll	r17,r17,r3
    5554:	2448b03a 	or	r4,r4,r17
    5558:	00107e00 	call	107e0 <__floatunsidf>
    555c:	017f8434 	movhi	r5,65040
    5560:	01800044 	movi	r6,1
    5564:	1009883a 	mov	r4,r2
    5568:	194b883a 	add	r5,r3,r5
    556c:	843fffc4 	addi	r16,r16,-1
    5570:	d9801115 	stw	r6,68(sp)
    5574:	000d883a 	mov	r6,zero
    5578:	01cffe34 	movhi	r7,16376
    557c:	000fd880 	call	fd88 <__subdf3>
    5580:	0198dbf4 	movhi	r6,25455
    5584:	01cff4f4 	movhi	r7,16339
    5588:	3190d844 	addi	r6,r6,17249
    558c:	39e1e9c4 	addi	r7,r7,-30809
    5590:	1009883a 	mov	r4,r2
    5594:	180b883a 	mov	r5,r3
    5598:	000f6700 	call	f670 <__muldf3>
    559c:	01a2d874 	movhi	r6,35681
    55a0:	01cff1f4 	movhi	r7,16327
    55a4:	31b22cc4 	addi	r6,r6,-14157
    55a8:	39e28a04 	addi	r7,r7,-30168
    55ac:	180b883a 	mov	r5,r3
    55b0:	1009883a 	mov	r4,r2
    55b4:	000e2840 	call	e284 <__adddf3>
    55b8:	8009883a 	mov	r4,r16
    55bc:	1029883a 	mov	r20,r2
    55c0:	1823883a 	mov	r17,r3
    55c4:	00107040 	call	10704 <__floatsidf>
    55c8:	019427f4 	movhi	r6,20639
    55cc:	01cff4f4 	movhi	r7,16339
    55d0:	319e7ec4 	addi	r6,r6,31227
    55d4:	39d104c4 	addi	r7,r7,17427
    55d8:	1009883a 	mov	r4,r2
    55dc:	180b883a 	mov	r5,r3
    55e0:	000f6700 	call	f670 <__muldf3>
    55e4:	100d883a 	mov	r6,r2
    55e8:	180f883a 	mov	r7,r3
    55ec:	a009883a 	mov	r4,r20
    55f0:	880b883a 	mov	r5,r17
    55f4:	000e2840 	call	e284 <__adddf3>
    55f8:	1009883a 	mov	r4,r2
    55fc:	180b883a 	mov	r5,r3
    5600:	1029883a 	mov	r20,r2
    5604:	1823883a 	mov	r17,r3
    5608:	00106840 	call	10684 <__fixdfsi>
    560c:	000d883a 	mov	r6,zero
    5610:	000f883a 	mov	r7,zero
    5614:	a009883a 	mov	r4,r20
    5618:	880b883a 	mov	r5,r17
    561c:	d8800515 	stw	r2,20(sp)
    5620:	000f57c0 	call	f57c <__ledf2>
    5624:	10028716 	blt	r2,zero,6044 <_dtoa_r+0xc88>
    5628:	d8c00517 	ldw	r3,20(sp)
    562c:	00800584 	movi	r2,22
    5630:	10c27536 	bltu	r2,r3,6008 <_dtoa_r+0xc4c>
    5634:	180490fa 	slli	r2,r3,3
    5638:	00c000b4 	movhi	r3,2
    563c:	18f6e704 	addi	r3,r3,-9316
    5640:	1885883a 	add	r2,r3,r2
    5644:	11000017 	ldw	r4,0(r2)
    5648:	11400117 	ldw	r5,4(r2)
    564c:	900d883a 	mov	r6,r18
    5650:	980f883a 	mov	r7,r19
    5654:	000f4a00 	call	f4a0 <__gedf2>
    5658:	00828d0e 	bge	zero,r2,6090 <_dtoa_r+0xcd4>
    565c:	d9000517 	ldw	r4,20(sp)
    5660:	d8000e15 	stw	zero,56(sp)
    5664:	213fffc4 	addi	r4,r4,-1
    5668:	d9000515 	stw	r4,20(sp)
    566c:	b42dc83a 	sub	r22,r22,r16
    5670:	b5bfffc4 	addi	r22,r22,-1
    5674:	b0026f16 	blt	r22,zero,6034 <_dtoa_r+0xc78>
    5678:	d8000815 	stw	zero,32(sp)
    567c:	d9c00517 	ldw	r7,20(sp)
    5680:	38026416 	blt	r7,zero,6014 <_dtoa_r+0xc58>
    5684:	b1ed883a 	add	r22,r22,r7
    5688:	d9c00d15 	stw	r7,52(sp)
    568c:	d8000a15 	stw	zero,40(sp)
    5690:	d9800317 	ldw	r6,12(sp)
    5694:	00800244 	movi	r2,9
    5698:	11811436 	bltu	r2,r6,5aec <_dtoa_r+0x730>
    569c:	00800144 	movi	r2,5
    56a0:	1184e10e 	bge	r2,r6,6a28 <_dtoa_r+0x166c>
    56a4:	31bfff04 	addi	r6,r6,-4
    56a8:	d9800315 	stw	r6,12(sp)
    56ac:	0023883a 	mov	r17,zero
    56b0:	d9800317 	ldw	r6,12(sp)
    56b4:	008000c4 	movi	r2,3
    56b8:	30836726 	beq	r6,r2,6458 <_dtoa_r+0x109c>
    56bc:	1183410e 	bge	r2,r6,63c4 <_dtoa_r+0x1008>
    56c0:	d9c00317 	ldw	r7,12(sp)
    56c4:	00800104 	movi	r2,4
    56c8:	38827c26 	beq	r7,r2,60bc <_dtoa_r+0xd00>
    56cc:	00800144 	movi	r2,5
    56d0:	3884c41e 	bne	r7,r2,69e4 <_dtoa_r+0x1628>
    56d4:	00800044 	movi	r2,1
    56d8:	d8800b15 	stw	r2,44(sp)
    56dc:	d8c00517 	ldw	r3,20(sp)
    56e0:	d9002217 	ldw	r4,136(sp)
    56e4:	1907883a 	add	r3,r3,r4
    56e8:	19800044 	addi	r6,r3,1
    56ec:	d8c00c15 	stw	r3,48(sp)
    56f0:	d9800615 	stw	r6,24(sp)
    56f4:	0183a40e 	bge	zero,r6,6588 <_dtoa_r+0x11cc>
    56f8:	d9800617 	ldw	r6,24(sp)
    56fc:	3021883a 	mov	r16,r6
    5700:	e0001115 	stw	zero,68(fp)
    5704:	008005c4 	movi	r2,23
    5708:	1184c92e 	bgeu	r2,r6,6a30 <_dtoa_r+0x1674>
    570c:	00c00044 	movi	r3,1
    5710:	00800104 	movi	r2,4
    5714:	1085883a 	add	r2,r2,r2
    5718:	11000504 	addi	r4,r2,20
    571c:	180b883a 	mov	r5,r3
    5720:	18c00044 	addi	r3,r3,1
    5724:	313ffb2e 	bgeu	r6,r4,5714 <_dtoa_r+0x358>
    5728:	e1401115 	stw	r5,68(fp)
    572c:	e009883a 	mov	r4,fp
    5730:	0008a580 	call	8a58 <_Balloc>
    5734:	d8800715 	stw	r2,28(sp)
    5738:	e0801015 	stw	r2,64(fp)
    573c:	00800384 	movi	r2,14
    5740:	1400f736 	bltu	r2,r16,5b20 <_dtoa_r+0x764>
    5744:	8800f626 	beq	r17,zero,5b20 <_dtoa_r+0x764>
    5748:	d9c00517 	ldw	r7,20(sp)
    574c:	01c39a0e 	bge	zero,r7,65b8 <_dtoa_r+0x11fc>
    5750:	388003cc 	andi	r2,r7,15
    5754:	100490fa 	slli	r2,r2,3
    5758:	382bd13a 	srai	r21,r7,4
    575c:	00c000b4 	movhi	r3,2
    5760:	18f6e704 	addi	r3,r3,-9316
    5764:	1885883a 	add	r2,r3,r2
    5768:	a8c0040c 	andi	r3,r21,16
    576c:	12400017 	ldw	r9,0(r2)
    5770:	12000117 	ldw	r8,4(r2)
    5774:	18037926 	beq	r3,zero,655c <_dtoa_r+0x11a0>
    5778:	008000b4 	movhi	r2,2
    577c:	10b6dd04 	addi	r2,r2,-9356
    5780:	11800817 	ldw	r6,32(r2)
    5784:	11c00917 	ldw	r7,36(r2)
    5788:	9009883a 	mov	r4,r18
    578c:	980b883a 	mov	r5,r19
    5790:	da001715 	stw	r8,92(sp)
    5794:	da401615 	stw	r9,88(sp)
    5798:	000eb300 	call	eb30 <__divdf3>
    579c:	da001717 	ldw	r8,92(sp)
    57a0:	da401617 	ldw	r9,88(sp)
    57a4:	ad4003cc 	andi	r21,r21,15
    57a8:	040000c4 	movi	r16,3
    57ac:	1023883a 	mov	r17,r2
    57b0:	1829883a 	mov	r20,r3
    57b4:	a8001126 	beq	r21,zero,57fc <_dtoa_r+0x440>
    57b8:	05c000b4 	movhi	r23,2
    57bc:	bdf6dd04 	addi	r23,r23,-9356
    57c0:	4805883a 	mov	r2,r9
    57c4:	4007883a 	mov	r3,r8
    57c8:	a980004c 	andi	r6,r21,1
    57cc:	1009883a 	mov	r4,r2
    57d0:	a82bd07a 	srai	r21,r21,1
    57d4:	180b883a 	mov	r5,r3
    57d8:	30000426 	beq	r6,zero,57ec <_dtoa_r+0x430>
    57dc:	b9800017 	ldw	r6,0(r23)
    57e0:	b9c00117 	ldw	r7,4(r23)
    57e4:	84000044 	addi	r16,r16,1
    57e8:	000f6700 	call	f670 <__muldf3>
    57ec:	bdc00204 	addi	r23,r23,8
    57f0:	a83ff51e 	bne	r21,zero,57c8 <_dtoa_r+0x40c>
    57f4:	1013883a 	mov	r9,r2
    57f8:	1811883a 	mov	r8,r3
    57fc:	480d883a 	mov	r6,r9
    5800:	400f883a 	mov	r7,r8
    5804:	8809883a 	mov	r4,r17
    5808:	a00b883a 	mov	r5,r20
    580c:	000eb300 	call	eb30 <__divdf3>
    5810:	d8800f15 	stw	r2,60(sp)
    5814:	d8c01015 	stw	r3,64(sp)
    5818:	d8c00e17 	ldw	r3,56(sp)
    581c:	18000626 	beq	r3,zero,5838 <_dtoa_r+0x47c>
    5820:	d9000f17 	ldw	r4,60(sp)
    5824:	d9401017 	ldw	r5,64(sp)
    5828:	000d883a 	mov	r6,zero
    582c:	01cffc34 	movhi	r7,16368
    5830:	000f57c0 	call	f57c <__ledf2>
    5834:	10040b16 	blt	r2,zero,6864 <_dtoa_r+0x14a8>
    5838:	8009883a 	mov	r4,r16
    583c:	00107040 	call	10704 <__floatsidf>
    5840:	d9800f17 	ldw	r6,60(sp)
    5844:	d9c01017 	ldw	r7,64(sp)
    5848:	1009883a 	mov	r4,r2
    584c:	180b883a 	mov	r5,r3
    5850:	000f6700 	call	f670 <__muldf3>
    5854:	000d883a 	mov	r6,zero
    5858:	01d00734 	movhi	r7,16412
    585c:	1009883a 	mov	r4,r2
    5860:	180b883a 	mov	r5,r3
    5864:	000e2840 	call	e284 <__adddf3>
    5868:	1021883a 	mov	r16,r2
    586c:	d8800617 	ldw	r2,24(sp)
    5870:	047f3034 	movhi	r17,64704
    5874:	1c63883a 	add	r17,r3,r17
    5878:	10031826 	beq	r2,zero,64dc <_dtoa_r+0x1120>
    587c:	d8c00517 	ldw	r3,20(sp)
    5880:	db000617 	ldw	r12,24(sp)
    5884:	d8c01315 	stw	r3,76(sp)
    5888:	d9000b17 	ldw	r4,44(sp)
    588c:	20038f26 	beq	r4,zero,66cc <_dtoa_r+0x1310>
    5890:	60bfffc4 	addi	r2,r12,-1
    5894:	100490fa 	slli	r2,r2,3
    5898:	00c000b4 	movhi	r3,2
    589c:	18f6e704 	addi	r3,r3,-9316
    58a0:	1885883a 	add	r2,r3,r2
    58a4:	11800017 	ldw	r6,0(r2)
    58a8:	11c00117 	ldw	r7,4(r2)
    58ac:	d8800717 	ldw	r2,28(sp)
    58b0:	0009883a 	mov	r4,zero
    58b4:	014ff834 	movhi	r5,16352
    58b8:	db001615 	stw	r12,88(sp)
    58bc:	15c00044 	addi	r23,r2,1
    58c0:	000eb300 	call	eb30 <__divdf3>
    58c4:	800d883a 	mov	r6,r16
    58c8:	880f883a 	mov	r7,r17
    58cc:	1009883a 	mov	r4,r2
    58d0:	180b883a 	mov	r5,r3
    58d4:	000fd880 	call	fd88 <__subdf3>
    58d8:	d9401017 	ldw	r5,64(sp)
    58dc:	d9000f17 	ldw	r4,60(sp)
    58e0:	102b883a 	mov	r21,r2
    58e4:	d8c01215 	stw	r3,72(sp)
    58e8:	00106840 	call	10684 <__fixdfsi>
    58ec:	1009883a 	mov	r4,r2
    58f0:	1029883a 	mov	r20,r2
    58f4:	00107040 	call	10704 <__floatsidf>
    58f8:	d9000f17 	ldw	r4,60(sp)
    58fc:	d9401017 	ldw	r5,64(sp)
    5900:	100d883a 	mov	r6,r2
    5904:	180f883a 	mov	r7,r3
    5908:	000fd880 	call	fd88 <__subdf3>
    590c:	1823883a 	mov	r17,r3
    5910:	d8c00717 	ldw	r3,28(sp)
    5914:	d9401217 	ldw	r5,72(sp)
    5918:	a2000c04 	addi	r8,r20,48
    591c:	1021883a 	mov	r16,r2
    5920:	1a000005 	stb	r8,0(r3)
    5924:	800d883a 	mov	r6,r16
    5928:	880f883a 	mov	r7,r17
    592c:	a809883a 	mov	r4,r21
    5930:	4029883a 	mov	r20,r8
    5934:	000f4a00 	call	f4a0 <__gedf2>
    5938:	00841d16 	blt	zero,r2,69b0 <_dtoa_r+0x15f4>
    593c:	800d883a 	mov	r6,r16
    5940:	880f883a 	mov	r7,r17
    5944:	0009883a 	mov	r4,zero
    5948:	014ffc34 	movhi	r5,16368
    594c:	000fd880 	call	fd88 <__subdf3>
    5950:	d9401217 	ldw	r5,72(sp)
    5954:	100d883a 	mov	r6,r2
    5958:	180f883a 	mov	r7,r3
    595c:	a809883a 	mov	r4,r21
    5960:	000f4a00 	call	f4a0 <__gedf2>
    5964:	db001617 	ldw	r12,88(sp)
    5968:	00840e16 	blt	zero,r2,69a4 <_dtoa_r+0x15e8>
    596c:	00800044 	movi	r2,1
    5970:	13006b0e 	bge	r2,r12,5b20 <_dtoa_r+0x764>
    5974:	d9000717 	ldw	r4,28(sp)
    5978:	dd800f15 	stw	r22,60(sp)
    597c:	dcc01015 	stw	r19,64(sp)
    5980:	2319883a 	add	r12,r4,r12
    5984:	dcc01217 	ldw	r19,72(sp)
    5988:	602d883a 	mov	r22,r12
    598c:	dc801215 	stw	r18,72(sp)
    5990:	b825883a 	mov	r18,r23
    5994:	00000906 	br	59bc <_dtoa_r+0x600>
    5998:	000fd880 	call	fd88 <__subdf3>
    599c:	a80d883a 	mov	r6,r21
    59a0:	980f883a 	mov	r7,r19
    59a4:	1009883a 	mov	r4,r2
    59a8:	180b883a 	mov	r5,r3
    59ac:	000f57c0 	call	f57c <__ledf2>
    59b0:	1003e816 	blt	r2,zero,6954 <_dtoa_r+0x1598>
    59b4:	b825883a 	mov	r18,r23
    59b8:	bd83e926 	beq	r23,r22,6960 <_dtoa_r+0x15a4>
    59bc:	a809883a 	mov	r4,r21
    59c0:	980b883a 	mov	r5,r19
    59c4:	000d883a 	mov	r6,zero
    59c8:	01d00934 	movhi	r7,16420
    59cc:	000f6700 	call	f670 <__muldf3>
    59d0:	000d883a 	mov	r6,zero
    59d4:	01d00934 	movhi	r7,16420
    59d8:	8009883a 	mov	r4,r16
    59dc:	880b883a 	mov	r5,r17
    59e0:	102b883a 	mov	r21,r2
    59e4:	1827883a 	mov	r19,r3
    59e8:	000f6700 	call	f670 <__muldf3>
    59ec:	180b883a 	mov	r5,r3
    59f0:	1009883a 	mov	r4,r2
    59f4:	1821883a 	mov	r16,r3
    59f8:	1023883a 	mov	r17,r2
    59fc:	00106840 	call	10684 <__fixdfsi>
    5a00:	1009883a 	mov	r4,r2
    5a04:	1029883a 	mov	r20,r2
    5a08:	00107040 	call	10704 <__floatsidf>
    5a0c:	8809883a 	mov	r4,r17
    5a10:	800b883a 	mov	r5,r16
    5a14:	100d883a 	mov	r6,r2
    5a18:	180f883a 	mov	r7,r3
    5a1c:	000fd880 	call	fd88 <__subdf3>
    5a20:	a5000c04 	addi	r20,r20,48
    5a24:	a80d883a 	mov	r6,r21
    5a28:	980f883a 	mov	r7,r19
    5a2c:	1009883a 	mov	r4,r2
    5a30:	180b883a 	mov	r5,r3
    5a34:	95000005 	stb	r20,0(r18)
    5a38:	1021883a 	mov	r16,r2
    5a3c:	1823883a 	mov	r17,r3
    5a40:	000f57c0 	call	f57c <__ledf2>
    5a44:	bdc00044 	addi	r23,r23,1
    5a48:	800d883a 	mov	r6,r16
    5a4c:	880f883a 	mov	r7,r17
    5a50:	0009883a 	mov	r4,zero
    5a54:	014ffc34 	movhi	r5,16368
    5a58:	103fcf0e 	bge	r2,zero,5998 <_dtoa_r+0x5dc>
    5a5c:	d8c01317 	ldw	r3,76(sp)
    5a60:	d8c00515 	stw	r3,20(sp)
    5a64:	d9400917 	ldw	r5,36(sp)
    5a68:	e009883a 	mov	r4,fp
    5a6c:	0008b000 	call	8b00 <_Bfree>
    5a70:	d9000517 	ldw	r4,20(sp)
    5a74:	d9802317 	ldw	r6,140(sp)
    5a78:	d9c02517 	ldw	r7,148(sp)
    5a7c:	b8000005 	stb	zero,0(r23)
    5a80:	20800044 	addi	r2,r4,1
    5a84:	30800015 	stw	r2,0(r6)
    5a88:	3802aa26 	beq	r7,zero,6534 <_dtoa_r+0x1178>
    5a8c:	3dc00015 	stw	r23,0(r7)
    5a90:	d8800717 	ldw	r2,28(sp)
    5a94:	003e7906 	br	547c <_dtoa_r+0xc0>
    5a98:	00800434 	movhi	r2,16
    5a9c:	10bfffc4 	addi	r2,r2,-1
    5aa0:	88a2703a 	and	r17,r17,r2
    5aa4:	883e851e 	bne	r17,zero,54bc <_dtoa_r+0x100>
    5aa8:	008000b4 	movhi	r2,2
    5aac:	10b6c804 	addi	r2,r2,-9440
    5ab0:	003e8406 	br	54c4 <_dtoa_r+0x108>
    5ab4:	10c00204 	addi	r3,r2,8
    5ab8:	003e8706 	br	54d8 <_dtoa_r+0x11c>
    5abc:	01400434 	movhi	r5,16
    5ac0:	297fffc4 	addi	r5,r5,-1
    5ac4:	994a703a 	and	r5,r19,r5
    5ac8:	9009883a 	mov	r4,r18
    5acc:	843f0044 	addi	r16,r16,-1023
    5ad0:	294ffc34 	orhi	r5,r5,16368
    5ad4:	dd800217 	ldw	r22,8(sp)
    5ad8:	d8001115 	stw	zero,68(sp)
    5adc:	003ea506 	br	5574 <_dtoa_r+0x1b8>
    5ae0:	008000b4 	movhi	r2,2
    5ae4:	10b6b704 	addi	r2,r2,-9508
    5ae8:	003e6406 	br	547c <_dtoa_r+0xc0>
    5aec:	e0001115 	stw	zero,68(fp)
    5af0:	000b883a 	mov	r5,zero
    5af4:	e009883a 	mov	r4,fp
    5af8:	0008a580 	call	8a58 <_Balloc>
    5afc:	01bfffc4 	movi	r6,-1
    5b00:	01c00044 	movi	r7,1
    5b04:	d8800715 	stw	r2,28(sp)
    5b08:	d9800c15 	stw	r6,48(sp)
    5b0c:	e0801015 	stw	r2,64(fp)
    5b10:	d8000315 	stw	zero,12(sp)
    5b14:	d9c00b15 	stw	r7,44(sp)
    5b18:	d9800615 	stw	r6,24(sp)
    5b1c:	d8002215 	stw	zero,136(sp)
    5b20:	d8800117 	ldw	r2,4(sp)
    5b24:	10008916 	blt	r2,zero,5d4c <_dtoa_r+0x990>
    5b28:	d9000517 	ldw	r4,20(sp)
    5b2c:	00c00384 	movi	r3,14
    5b30:	19008616 	blt	r3,r4,5d4c <_dtoa_r+0x990>
    5b34:	200490fa 	slli	r2,r4,3
    5b38:	00c000b4 	movhi	r3,2
    5b3c:	d9802217 	ldw	r6,136(sp)
    5b40:	18f6e704 	addi	r3,r3,-9316
    5b44:	1885883a 	add	r2,r3,r2
    5b48:	14000017 	ldw	r16,0(r2)
    5b4c:	14400117 	ldw	r17,4(r2)
    5b50:	30016316 	blt	r6,zero,60e0 <_dtoa_r+0xd24>
    5b54:	800d883a 	mov	r6,r16
    5b58:	880f883a 	mov	r7,r17
    5b5c:	9009883a 	mov	r4,r18
    5b60:	980b883a 	mov	r5,r19
    5b64:	000eb300 	call	eb30 <__divdf3>
    5b68:	180b883a 	mov	r5,r3
    5b6c:	1009883a 	mov	r4,r2
    5b70:	00106840 	call	10684 <__fixdfsi>
    5b74:	1009883a 	mov	r4,r2
    5b78:	102b883a 	mov	r21,r2
    5b7c:	00107040 	call	10704 <__floatsidf>
    5b80:	800d883a 	mov	r6,r16
    5b84:	880f883a 	mov	r7,r17
    5b88:	1009883a 	mov	r4,r2
    5b8c:	180b883a 	mov	r5,r3
    5b90:	000f6700 	call	f670 <__muldf3>
    5b94:	100d883a 	mov	r6,r2
    5b98:	180f883a 	mov	r7,r3
    5b9c:	9009883a 	mov	r4,r18
    5ba0:	980b883a 	mov	r5,r19
    5ba4:	000fd880 	call	fd88 <__subdf3>
    5ba8:	d9c00717 	ldw	r7,28(sp)
    5bac:	1009883a 	mov	r4,r2
    5bb0:	a8800c04 	addi	r2,r21,48
    5bb4:	38800005 	stb	r2,0(r7)
    5bb8:	3dc00044 	addi	r23,r7,1
    5bbc:	d9c00617 	ldw	r7,24(sp)
    5bc0:	01800044 	movi	r6,1
    5bc4:	180b883a 	mov	r5,r3
    5bc8:	2005883a 	mov	r2,r4
    5bcc:	39803826 	beq	r7,r6,5cb0 <_dtoa_r+0x8f4>
    5bd0:	000d883a 	mov	r6,zero
    5bd4:	01d00934 	movhi	r7,16420
    5bd8:	000f6700 	call	f670 <__muldf3>
    5bdc:	000d883a 	mov	r6,zero
    5be0:	000f883a 	mov	r7,zero
    5be4:	1009883a 	mov	r4,r2
    5be8:	180b883a 	mov	r5,r3
    5bec:	1025883a 	mov	r18,r2
    5bf0:	1827883a 	mov	r19,r3
    5bf4:	000f4180 	call	f418 <__eqdf2>
    5bf8:	103f9a26 	beq	r2,zero,5a64 <_dtoa_r+0x6a8>
    5bfc:	d9c00617 	ldw	r7,24(sp)
    5c00:	d8c00717 	ldw	r3,28(sp)
    5c04:	b829883a 	mov	r20,r23
    5c08:	38bfffc4 	addi	r2,r7,-1
    5c0c:	18ad883a 	add	r22,r3,r2
    5c10:	00000a06 	br	5c3c <_dtoa_r+0x880>
    5c14:	000f6700 	call	f670 <__muldf3>
    5c18:	000d883a 	mov	r6,zero
    5c1c:	000f883a 	mov	r7,zero
    5c20:	1009883a 	mov	r4,r2
    5c24:	180b883a 	mov	r5,r3
    5c28:	1025883a 	mov	r18,r2
    5c2c:	1827883a 	mov	r19,r3
    5c30:	b829883a 	mov	r20,r23
    5c34:	000f4180 	call	f418 <__eqdf2>
    5c38:	103f8a26 	beq	r2,zero,5a64 <_dtoa_r+0x6a8>
    5c3c:	800d883a 	mov	r6,r16
    5c40:	880f883a 	mov	r7,r17
    5c44:	9009883a 	mov	r4,r18
    5c48:	980b883a 	mov	r5,r19
    5c4c:	000eb300 	call	eb30 <__divdf3>
    5c50:	180b883a 	mov	r5,r3
    5c54:	1009883a 	mov	r4,r2
    5c58:	00106840 	call	10684 <__fixdfsi>
    5c5c:	1009883a 	mov	r4,r2
    5c60:	102b883a 	mov	r21,r2
    5c64:	00107040 	call	10704 <__floatsidf>
    5c68:	800d883a 	mov	r6,r16
    5c6c:	880f883a 	mov	r7,r17
    5c70:	1009883a 	mov	r4,r2
    5c74:	180b883a 	mov	r5,r3
    5c78:	000f6700 	call	f670 <__muldf3>
    5c7c:	100d883a 	mov	r6,r2
    5c80:	180f883a 	mov	r7,r3
    5c84:	9009883a 	mov	r4,r18
    5c88:	980b883a 	mov	r5,r19
    5c8c:	000fd880 	call	fd88 <__subdf3>
    5c90:	aa000c04 	addi	r8,r21,48
    5c94:	a2000005 	stb	r8,0(r20)
    5c98:	000d883a 	mov	r6,zero
    5c9c:	01d00934 	movhi	r7,16420
    5ca0:	1009883a 	mov	r4,r2
    5ca4:	180b883a 	mov	r5,r3
    5ca8:	a5c00044 	addi	r23,r20,1
    5cac:	b53fd91e 	bne	r22,r20,5c14 <_dtoa_r+0x858>
    5cb0:	100d883a 	mov	r6,r2
    5cb4:	180f883a 	mov	r7,r3
    5cb8:	1009883a 	mov	r4,r2
    5cbc:	180b883a 	mov	r5,r3
    5cc0:	000e2840 	call	e284 <__adddf3>
    5cc4:	100d883a 	mov	r6,r2
    5cc8:	180f883a 	mov	r7,r3
    5ccc:	8009883a 	mov	r4,r16
    5cd0:	880b883a 	mov	r5,r17
    5cd4:	1027883a 	mov	r19,r2
    5cd8:	1825883a 	mov	r18,r3
    5cdc:	000f57c0 	call	f57c <__ledf2>
    5ce0:	10000816 	blt	r2,zero,5d04 <_dtoa_r+0x948>
    5ce4:	980d883a 	mov	r6,r19
    5ce8:	900f883a 	mov	r7,r18
    5cec:	8009883a 	mov	r4,r16
    5cf0:	880b883a 	mov	r5,r17
    5cf4:	000f4180 	call	f418 <__eqdf2>
    5cf8:	103f5a1e 	bne	r2,zero,5a64 <_dtoa_r+0x6a8>
    5cfc:	ad40004c 	andi	r21,r21,1
    5d00:	a83f5826 	beq	r21,zero,5a64 <_dtoa_r+0x6a8>
    5d04:	bd3fffc3 	ldbu	r20,-1(r23)
    5d08:	b8bfffc4 	addi	r2,r23,-1
    5d0c:	1007883a 	mov	r3,r2
    5d10:	01400e44 	movi	r5,57
    5d14:	d9800717 	ldw	r6,28(sp)
    5d18:	00000506 	br	5d30 <_dtoa_r+0x974>
    5d1c:	18ffffc4 	addi	r3,r3,-1
    5d20:	11824726 	beq	r2,r6,6640 <_dtoa_r+0x1284>
    5d24:	1d000003 	ldbu	r20,0(r3)
    5d28:	102f883a 	mov	r23,r2
    5d2c:	10bfffc4 	addi	r2,r2,-1
    5d30:	a1003fcc 	andi	r4,r20,255
    5d34:	2100201c 	xori	r4,r4,128
    5d38:	213fe004 	addi	r4,r4,-128
    5d3c:	217ff726 	beq	r4,r5,5d1c <_dtoa_r+0x960>
    5d40:	a2000044 	addi	r8,r20,1
    5d44:	12000005 	stb	r8,0(r2)
    5d48:	003f4606 	br	5a64 <_dtoa_r+0x6a8>
    5d4c:	d9000b17 	ldw	r4,44(sp)
    5d50:	2000c826 	beq	r4,zero,6074 <_dtoa_r+0xcb8>
    5d54:	d9800317 	ldw	r6,12(sp)
    5d58:	00c00044 	movi	r3,1
    5d5c:	1980f90e 	bge	r3,r6,6144 <_dtoa_r+0xd88>
    5d60:	d8800617 	ldw	r2,24(sp)
    5d64:	d8c00a17 	ldw	r3,40(sp)
    5d68:	157fffc4 	addi	r21,r2,-1
    5d6c:	1d41f316 	blt	r3,r21,653c <_dtoa_r+0x1180>
    5d70:	1d6bc83a 	sub	r21,r3,r21
    5d74:	d9c00617 	ldw	r7,24(sp)
    5d78:	3802aa16 	blt	r7,zero,6824 <_dtoa_r+0x1468>
    5d7c:	dd000817 	ldw	r20,32(sp)
    5d80:	d8800617 	ldw	r2,24(sp)
    5d84:	d8c00817 	ldw	r3,32(sp)
    5d88:	01400044 	movi	r5,1
    5d8c:	e009883a 	mov	r4,fp
    5d90:	1887883a 	add	r3,r3,r2
    5d94:	d8c00815 	stw	r3,32(sp)
    5d98:	b0ad883a 	add	r22,r22,r2
    5d9c:	0008e640 	call	8e64 <__i2b>
    5da0:	1023883a 	mov	r17,r2
    5da4:	a0000826 	beq	r20,zero,5dc8 <_dtoa_r+0xa0c>
    5da8:	0580070e 	bge	zero,r22,5dc8 <_dtoa_r+0xa0c>
    5dac:	a005883a 	mov	r2,r20
    5db0:	b500b916 	blt	r22,r20,6098 <_dtoa_r+0xcdc>
    5db4:	d9000817 	ldw	r4,32(sp)
    5db8:	a0a9c83a 	sub	r20,r20,r2
    5dbc:	b0adc83a 	sub	r22,r22,r2
    5dc0:	2089c83a 	sub	r4,r4,r2
    5dc4:	d9000815 	stw	r4,32(sp)
    5dc8:	d9800a17 	ldw	r6,40(sp)
    5dcc:	0181810e 	bge	zero,r6,63d4 <_dtoa_r+0x1018>
    5dd0:	d9c00b17 	ldw	r7,44(sp)
    5dd4:	3800b326 	beq	r7,zero,60a4 <_dtoa_r+0xce8>
    5dd8:	a800b226 	beq	r21,zero,60a4 <_dtoa_r+0xce8>
    5ddc:	880b883a 	mov	r5,r17
    5de0:	a80d883a 	mov	r6,r21
    5de4:	e009883a 	mov	r4,fp
    5de8:	00090980 	call	9098 <__pow5mult>
    5dec:	d9800917 	ldw	r6,36(sp)
    5df0:	100b883a 	mov	r5,r2
    5df4:	e009883a 	mov	r4,fp
    5df8:	1023883a 	mov	r17,r2
    5dfc:	0008ea00 	call	8ea0 <__multiply>
    5e00:	1021883a 	mov	r16,r2
    5e04:	d8800a17 	ldw	r2,40(sp)
    5e08:	d9400917 	ldw	r5,36(sp)
    5e0c:	e009883a 	mov	r4,fp
    5e10:	1545c83a 	sub	r2,r2,r21
    5e14:	d8800a15 	stw	r2,40(sp)
    5e18:	0008b000 	call	8b00 <_Bfree>
    5e1c:	d8c00a17 	ldw	r3,40(sp)
    5e20:	18009f1e 	bne	r3,zero,60a0 <_dtoa_r+0xce4>
    5e24:	05c00044 	movi	r23,1
    5e28:	e009883a 	mov	r4,fp
    5e2c:	b80b883a 	mov	r5,r23
    5e30:	0008e640 	call	8e64 <__i2b>
    5e34:	d9000d17 	ldw	r4,52(sp)
    5e38:	102b883a 	mov	r21,r2
    5e3c:	2000ce26 	beq	r4,zero,6178 <_dtoa_r+0xdbc>
    5e40:	200d883a 	mov	r6,r4
    5e44:	100b883a 	mov	r5,r2
    5e48:	e009883a 	mov	r4,fp
    5e4c:	00090980 	call	9098 <__pow5mult>
    5e50:	d9800317 	ldw	r6,12(sp)
    5e54:	102b883a 	mov	r21,r2
    5e58:	b981810e 	bge	r23,r6,6460 <_dtoa_r+0x10a4>
    5e5c:	0027883a 	mov	r19,zero
    5e60:	a8800417 	ldw	r2,16(r21)
    5e64:	05c00804 	movi	r23,32
    5e68:	10800104 	addi	r2,r2,4
    5e6c:	1085883a 	add	r2,r2,r2
    5e70:	1085883a 	add	r2,r2,r2
    5e74:	a885883a 	add	r2,r21,r2
    5e78:	11000017 	ldw	r4,0(r2)
    5e7c:	0008d4c0 	call	8d4c <__hi0bits>
    5e80:	b885c83a 	sub	r2,r23,r2
    5e84:	1585883a 	add	r2,r2,r22
    5e88:	108007cc 	andi	r2,r2,31
    5e8c:	1000b326 	beq	r2,zero,615c <_dtoa_r+0xda0>
    5e90:	00c00804 	movi	r3,32
    5e94:	1887c83a 	sub	r3,r3,r2
    5e98:	01000104 	movi	r4,4
    5e9c:	20c2cd0e 	bge	r4,r3,69d4 <_dtoa_r+0x1618>
    5ea0:	00c00704 	movi	r3,28
    5ea4:	1885c83a 	sub	r2,r3,r2
    5ea8:	d8c00817 	ldw	r3,32(sp)
    5eac:	a0a9883a 	add	r20,r20,r2
    5eb0:	b0ad883a 	add	r22,r22,r2
    5eb4:	1887883a 	add	r3,r3,r2
    5eb8:	d8c00815 	stw	r3,32(sp)
    5ebc:	d9800817 	ldw	r6,32(sp)
    5ec0:	0180040e 	bge	zero,r6,5ed4 <_dtoa_r+0xb18>
    5ec4:	800b883a 	mov	r5,r16
    5ec8:	e009883a 	mov	r4,fp
    5ecc:	00091d80 	call	91d8 <__lshift>
    5ed0:	1021883a 	mov	r16,r2
    5ed4:	0580050e 	bge	zero,r22,5eec <_dtoa_r+0xb30>
    5ed8:	a80b883a 	mov	r5,r21
    5edc:	b00d883a 	mov	r6,r22
    5ee0:	e009883a 	mov	r4,fp
    5ee4:	00091d80 	call	91d8 <__lshift>
    5ee8:	102b883a 	mov	r21,r2
    5eec:	d9c00e17 	ldw	r7,56(sp)
    5ef0:	3801211e 	bne	r7,zero,6378 <_dtoa_r+0xfbc>
    5ef4:	d9800617 	ldw	r6,24(sp)
    5ef8:	0181380e 	bge	zero,r6,63dc <_dtoa_r+0x1020>
    5efc:	d8c00b17 	ldw	r3,44(sp)
    5f00:	1800ab1e 	bne	r3,zero,61b0 <_dtoa_r+0xdf4>
    5f04:	dc800717 	ldw	r18,28(sp)
    5f08:	dcc00617 	ldw	r19,24(sp)
    5f0c:	9029883a 	mov	r20,r18
    5f10:	00000206 	br	5f1c <_dtoa_r+0xb60>
    5f14:	0008b280 	call	8b28 <__multadd>
    5f18:	1021883a 	mov	r16,r2
    5f1c:	a80b883a 	mov	r5,r21
    5f20:	8009883a 	mov	r4,r16
    5f24:	00051bc0 	call	51bc <quorem>
    5f28:	10800c04 	addi	r2,r2,48
    5f2c:	90800005 	stb	r2,0(r18)
    5f30:	94800044 	addi	r18,r18,1
    5f34:	9507c83a 	sub	r3,r18,r20
    5f38:	000f883a 	mov	r7,zero
    5f3c:	01800284 	movi	r6,10
    5f40:	800b883a 	mov	r5,r16
    5f44:	e009883a 	mov	r4,fp
    5f48:	1cfff216 	blt	r3,r19,5f14 <_dtoa_r+0xb58>
    5f4c:	1011883a 	mov	r8,r2
    5f50:	d8800617 	ldw	r2,24(sp)
    5f54:	0082370e 	bge	zero,r2,6834 <_dtoa_r+0x1478>
    5f58:	d9000717 	ldw	r4,28(sp)
    5f5c:	0025883a 	mov	r18,zero
    5f60:	20af883a 	add	r23,r4,r2
    5f64:	01800044 	movi	r6,1
    5f68:	800b883a 	mov	r5,r16
    5f6c:	e009883a 	mov	r4,fp
    5f70:	da001715 	stw	r8,92(sp)
    5f74:	00091d80 	call	91d8 <__lshift>
    5f78:	a80b883a 	mov	r5,r21
    5f7c:	1009883a 	mov	r4,r2
    5f80:	d8800915 	stw	r2,36(sp)
    5f84:	00093200 	call	9320 <__mcmp>
    5f88:	da001717 	ldw	r8,92(sp)
    5f8c:	0081800e 	bge	zero,r2,6590 <_dtoa_r+0x11d4>
    5f90:	b93fffc3 	ldbu	r4,-1(r23)
    5f94:	b8bfffc4 	addi	r2,r23,-1
    5f98:	1007883a 	mov	r3,r2
    5f9c:	01800e44 	movi	r6,57
    5fa0:	d9c00717 	ldw	r7,28(sp)
    5fa4:	00000506 	br	5fbc <_dtoa_r+0xc00>
    5fa8:	18ffffc4 	addi	r3,r3,-1
    5fac:	11c12326 	beq	r2,r7,643c <_dtoa_r+0x1080>
    5fb0:	19000003 	ldbu	r4,0(r3)
    5fb4:	102f883a 	mov	r23,r2
    5fb8:	10bfffc4 	addi	r2,r2,-1
    5fbc:	21403fcc 	andi	r5,r4,255
    5fc0:	2940201c 	xori	r5,r5,128
    5fc4:	297fe004 	addi	r5,r5,-128
    5fc8:	29bff726 	beq	r5,r6,5fa8 <_dtoa_r+0xbec>
    5fcc:	21000044 	addi	r4,r4,1
    5fd0:	11000005 	stb	r4,0(r2)
    5fd4:	a80b883a 	mov	r5,r21
    5fd8:	e009883a 	mov	r4,fp
    5fdc:	0008b000 	call	8b00 <_Bfree>
    5fe0:	883ea026 	beq	r17,zero,5a64 <_dtoa_r+0x6a8>
    5fe4:	90000426 	beq	r18,zero,5ff8 <_dtoa_r+0xc3c>
    5fe8:	94400326 	beq	r18,r17,5ff8 <_dtoa_r+0xc3c>
    5fec:	900b883a 	mov	r5,r18
    5ff0:	e009883a 	mov	r4,fp
    5ff4:	0008b000 	call	8b00 <_Bfree>
    5ff8:	880b883a 	mov	r5,r17
    5ffc:	e009883a 	mov	r4,fp
    6000:	0008b000 	call	8b00 <_Bfree>
    6004:	003e9706 	br	5a64 <_dtoa_r+0x6a8>
    6008:	01800044 	movi	r6,1
    600c:	d9800e15 	stw	r6,56(sp)
    6010:	003d9606 	br	566c <_dtoa_r+0x2b0>
    6014:	d8800817 	ldw	r2,32(sp)
    6018:	d8c00517 	ldw	r3,20(sp)
    601c:	d8000d15 	stw	zero,52(sp)
    6020:	10c5c83a 	sub	r2,r2,r3
    6024:	00c9c83a 	sub	r4,zero,r3
    6028:	d8800815 	stw	r2,32(sp)
    602c:	d9000a15 	stw	r4,40(sp)
    6030:	003d9706 	br	5690 <_dtoa_r+0x2d4>
    6034:	05adc83a 	sub	r22,zero,r22
    6038:	dd800815 	stw	r22,32(sp)
    603c:	002d883a 	mov	r22,zero
    6040:	003d8e06 	br	567c <_dtoa_r+0x2c0>
    6044:	d9000517 	ldw	r4,20(sp)
    6048:	00107040 	call	10704 <__floatsidf>
    604c:	100d883a 	mov	r6,r2
    6050:	180f883a 	mov	r7,r3
    6054:	a009883a 	mov	r4,r20
    6058:	880b883a 	mov	r5,r17
    605c:	000f4180 	call	f418 <__eqdf2>
    6060:	103d7126 	beq	r2,zero,5628 <_dtoa_r+0x26c>
    6064:	d9c00517 	ldw	r7,20(sp)
    6068:	39ffffc4 	addi	r7,r7,-1
    606c:	d9c00515 	stw	r7,20(sp)
    6070:	003d6d06 	br	5628 <_dtoa_r+0x26c>
    6074:	dd400a17 	ldw	r21,40(sp)
    6078:	dd000817 	ldw	r20,32(sp)
    607c:	0023883a 	mov	r17,zero
    6080:	003f4806 	br	5da4 <_dtoa_r+0x9e8>
    6084:	10e3c83a 	sub	r17,r2,r3
    6088:	9448983a 	sll	r4,r18,r17
    608c:	003d3206 	br	5558 <_dtoa_r+0x19c>
    6090:	d8000e15 	stw	zero,56(sp)
    6094:	003d7506 	br	566c <_dtoa_r+0x2b0>
    6098:	b005883a 	mov	r2,r22
    609c:	003f4506 	br	5db4 <_dtoa_r+0x9f8>
    60a0:	dc000915 	stw	r16,36(sp)
    60a4:	d9800a17 	ldw	r6,40(sp)
    60a8:	d9400917 	ldw	r5,36(sp)
    60ac:	e009883a 	mov	r4,fp
    60b0:	00090980 	call	9098 <__pow5mult>
    60b4:	1021883a 	mov	r16,r2
    60b8:	003f5a06 	br	5e24 <_dtoa_r+0xa68>
    60bc:	01c00044 	movi	r7,1
    60c0:	d9c00b15 	stw	r7,44(sp)
    60c4:	d8802217 	ldw	r2,136(sp)
    60c8:	0081280e 	bge	zero,r2,656c <_dtoa_r+0x11b0>
    60cc:	100d883a 	mov	r6,r2
    60d0:	1021883a 	mov	r16,r2
    60d4:	d8800c15 	stw	r2,48(sp)
    60d8:	d8800615 	stw	r2,24(sp)
    60dc:	003d8806 	br	5700 <_dtoa_r+0x344>
    60e0:	d8800617 	ldw	r2,24(sp)
    60e4:	00be9b16 	blt	zero,r2,5b54 <_dtoa_r+0x798>
    60e8:	10010f1e 	bne	r2,zero,6528 <_dtoa_r+0x116c>
    60ec:	880b883a 	mov	r5,r17
    60f0:	000d883a 	mov	r6,zero
    60f4:	01d00534 	movhi	r7,16404
    60f8:	8009883a 	mov	r4,r16
    60fc:	000f6700 	call	f670 <__muldf3>
    6100:	900d883a 	mov	r6,r18
    6104:	980f883a 	mov	r7,r19
    6108:	1009883a 	mov	r4,r2
    610c:	180b883a 	mov	r5,r3
    6110:	000f4a00 	call	f4a0 <__gedf2>
    6114:	002b883a 	mov	r21,zero
    6118:	0023883a 	mov	r17,zero
    611c:	1000bf16 	blt	r2,zero,641c <_dtoa_r+0x1060>
    6120:	d9802217 	ldw	r6,136(sp)
    6124:	ddc00717 	ldw	r23,28(sp)
    6128:	018c303a 	nor	r6,zero,r6
    612c:	d9800515 	stw	r6,20(sp)
    6130:	a80b883a 	mov	r5,r21
    6134:	e009883a 	mov	r4,fp
    6138:	0008b000 	call	8b00 <_Bfree>
    613c:	883e4926 	beq	r17,zero,5a64 <_dtoa_r+0x6a8>
    6140:	003fad06 	br	5ff8 <_dtoa_r+0xc3c>
    6144:	d9c01117 	ldw	r7,68(sp)
    6148:	3801bc26 	beq	r7,zero,683c <_dtoa_r+0x1480>
    614c:	10810cc4 	addi	r2,r2,1075
    6150:	dd400a17 	ldw	r21,40(sp)
    6154:	dd000817 	ldw	r20,32(sp)
    6158:	003f0a06 	br	5d84 <_dtoa_r+0x9c8>
    615c:	00800704 	movi	r2,28
    6160:	d9000817 	ldw	r4,32(sp)
    6164:	a0a9883a 	add	r20,r20,r2
    6168:	b0ad883a 	add	r22,r22,r2
    616c:	2089883a 	add	r4,r4,r2
    6170:	d9000815 	stw	r4,32(sp)
    6174:	003f5106 	br	5ebc <_dtoa_r+0xb00>
    6178:	d8c00317 	ldw	r3,12(sp)
    617c:	b8c1fc0e 	bge	r23,r3,6970 <_dtoa_r+0x15b4>
    6180:	0027883a 	mov	r19,zero
    6184:	b805883a 	mov	r2,r23
    6188:	003f3e06 	br	5e84 <_dtoa_r+0xac8>
    618c:	880b883a 	mov	r5,r17
    6190:	e009883a 	mov	r4,fp
    6194:	000f883a 	mov	r7,zero
    6198:	01800284 	movi	r6,10
    619c:	0008b280 	call	8b28 <__multadd>
    61a0:	d9000c17 	ldw	r4,48(sp)
    61a4:	1023883a 	mov	r17,r2
    61a8:	0102040e 	bge	zero,r4,69bc <_dtoa_r+0x1600>
    61ac:	d9000615 	stw	r4,24(sp)
    61b0:	0500050e 	bge	zero,r20,61c8 <_dtoa_r+0xe0c>
    61b4:	880b883a 	mov	r5,r17
    61b8:	a00d883a 	mov	r6,r20
    61bc:	e009883a 	mov	r4,fp
    61c0:	00091d80 	call	91d8 <__lshift>
    61c4:	1023883a 	mov	r17,r2
    61c8:	9801241e 	bne	r19,zero,665c <_dtoa_r+0x12a0>
    61cc:	8829883a 	mov	r20,r17
    61d0:	d9000617 	ldw	r4,24(sp)
    61d4:	dcc00717 	ldw	r19,28(sp)
    61d8:	9480004c 	andi	r18,r18,1
    61dc:	20bfffc4 	addi	r2,r4,-1
    61e0:	9885883a 	add	r2,r19,r2
    61e4:	d8800415 	stw	r2,16(sp)
    61e8:	dc800615 	stw	r18,24(sp)
    61ec:	a80b883a 	mov	r5,r21
    61f0:	8009883a 	mov	r4,r16
    61f4:	00051bc0 	call	51bc <quorem>
    61f8:	880b883a 	mov	r5,r17
    61fc:	8009883a 	mov	r4,r16
    6200:	102f883a 	mov	r23,r2
    6204:	00093200 	call	9320 <__mcmp>
    6208:	a80b883a 	mov	r5,r21
    620c:	a00d883a 	mov	r6,r20
    6210:	e009883a 	mov	r4,fp
    6214:	102d883a 	mov	r22,r2
    6218:	00093800 	call	9380 <__mdiff>
    621c:	1007883a 	mov	r3,r2
    6220:	10800317 	ldw	r2,12(r2)
    6224:	bc800c04 	addi	r18,r23,48
    6228:	180b883a 	mov	r5,r3
    622c:	10004e1e 	bne	r2,zero,6368 <_dtoa_r+0xfac>
    6230:	8009883a 	mov	r4,r16
    6234:	d8c01615 	stw	r3,88(sp)
    6238:	00093200 	call	9320 <__mcmp>
    623c:	d8c01617 	ldw	r3,88(sp)
    6240:	e009883a 	mov	r4,fp
    6244:	d8801615 	stw	r2,88(sp)
    6248:	180b883a 	mov	r5,r3
    624c:	0008b000 	call	8b00 <_Bfree>
    6250:	d8801617 	ldw	r2,88(sp)
    6254:	1000041e 	bne	r2,zero,6268 <_dtoa_r+0xeac>
    6258:	d9800317 	ldw	r6,12(sp)
    625c:	3000021e 	bne	r6,zero,6268 <_dtoa_r+0xeac>
    6260:	d8c00617 	ldw	r3,24(sp)
    6264:	18003726 	beq	r3,zero,6344 <_dtoa_r+0xf88>
    6268:	b0002016 	blt	r22,zero,62ec <_dtoa_r+0xf30>
    626c:	b000041e 	bne	r22,zero,6280 <_dtoa_r+0xec4>
    6270:	d9000317 	ldw	r4,12(sp)
    6274:	2000021e 	bne	r4,zero,6280 <_dtoa_r+0xec4>
    6278:	d8c00617 	ldw	r3,24(sp)
    627c:	18001b26 	beq	r3,zero,62ec <_dtoa_r+0xf30>
    6280:	00810716 	blt	zero,r2,66a0 <_dtoa_r+0x12e4>
    6284:	d8c00417 	ldw	r3,16(sp)
    6288:	9d800044 	addi	r22,r19,1
    628c:	9c800005 	stb	r18,0(r19)
    6290:	b02f883a 	mov	r23,r22
    6294:	98c10626 	beq	r19,r3,66b0 <_dtoa_r+0x12f4>
    6298:	800b883a 	mov	r5,r16
    629c:	000f883a 	mov	r7,zero
    62a0:	01800284 	movi	r6,10
    62a4:	e009883a 	mov	r4,fp
    62a8:	0008b280 	call	8b28 <__multadd>
    62ac:	1021883a 	mov	r16,r2
    62b0:	000f883a 	mov	r7,zero
    62b4:	01800284 	movi	r6,10
    62b8:	880b883a 	mov	r5,r17
    62bc:	e009883a 	mov	r4,fp
    62c0:	8d002526 	beq	r17,r20,6358 <_dtoa_r+0xf9c>
    62c4:	0008b280 	call	8b28 <__multadd>
    62c8:	a00b883a 	mov	r5,r20
    62cc:	000f883a 	mov	r7,zero
    62d0:	01800284 	movi	r6,10
    62d4:	e009883a 	mov	r4,fp
    62d8:	1023883a 	mov	r17,r2
    62dc:	0008b280 	call	8b28 <__multadd>
    62e0:	1029883a 	mov	r20,r2
    62e4:	b027883a 	mov	r19,r22
    62e8:	003fc006 	br	61ec <_dtoa_r+0xe30>
    62ec:	9011883a 	mov	r8,r18
    62f0:	00800e0e 	bge	zero,r2,632c <_dtoa_r+0xf70>
    62f4:	800b883a 	mov	r5,r16
    62f8:	01800044 	movi	r6,1
    62fc:	e009883a 	mov	r4,fp
    6300:	da001715 	stw	r8,92(sp)
    6304:	00091d80 	call	91d8 <__lshift>
    6308:	a80b883a 	mov	r5,r21
    630c:	1009883a 	mov	r4,r2
    6310:	1021883a 	mov	r16,r2
    6314:	00093200 	call	9320 <__mcmp>
    6318:	da001717 	ldw	r8,92(sp)
    631c:	0081960e 	bge	zero,r2,6978 <_dtoa_r+0x15bc>
    6320:	00800e44 	movi	r2,57
    6324:	40817026 	beq	r8,r2,68e8 <_dtoa_r+0x152c>
    6328:	ba000c44 	addi	r8,r23,49
    632c:	8825883a 	mov	r18,r17
    6330:	9dc00044 	addi	r23,r19,1
    6334:	9a000005 	stb	r8,0(r19)
    6338:	a023883a 	mov	r17,r20
    633c:	dc000915 	stw	r16,36(sp)
    6340:	003f2406 	br	5fd4 <_dtoa_r+0xc18>
    6344:	00800e44 	movi	r2,57
    6348:	9011883a 	mov	r8,r18
    634c:	90816626 	beq	r18,r2,68e8 <_dtoa_r+0x152c>
    6350:	05bff516 	blt	zero,r22,6328 <_dtoa_r+0xf6c>
    6354:	003ff506 	br	632c <_dtoa_r+0xf70>
    6358:	0008b280 	call	8b28 <__multadd>
    635c:	1023883a 	mov	r17,r2
    6360:	1029883a 	mov	r20,r2
    6364:	003fdf06 	br	62e4 <_dtoa_r+0xf28>
    6368:	e009883a 	mov	r4,fp
    636c:	0008b000 	call	8b00 <_Bfree>
    6370:	00800044 	movi	r2,1
    6374:	003fbc06 	br	6268 <_dtoa_r+0xeac>
    6378:	a80b883a 	mov	r5,r21
    637c:	8009883a 	mov	r4,r16
    6380:	00093200 	call	9320 <__mcmp>
    6384:	103edb0e 	bge	r2,zero,5ef4 <_dtoa_r+0xb38>
    6388:	800b883a 	mov	r5,r16
    638c:	000f883a 	mov	r7,zero
    6390:	01800284 	movi	r6,10
    6394:	e009883a 	mov	r4,fp
    6398:	0008b280 	call	8b28 <__multadd>
    639c:	1021883a 	mov	r16,r2
    63a0:	d8800517 	ldw	r2,20(sp)
    63a4:	d8c00b17 	ldw	r3,44(sp)
    63a8:	10bfffc4 	addi	r2,r2,-1
    63ac:	d8800515 	stw	r2,20(sp)
    63b0:	183f761e 	bne	r3,zero,618c <_dtoa_r+0xdd0>
    63b4:	d9000c17 	ldw	r4,48(sp)
    63b8:	0101730e 	bge	zero,r4,6988 <_dtoa_r+0x15cc>
    63bc:	d9000615 	stw	r4,24(sp)
    63c0:	003ed006 	br	5f04 <_dtoa_r+0xb48>
    63c4:	00800084 	movi	r2,2
    63c8:	3081861e 	bne	r6,r2,69e4 <_dtoa_r+0x1628>
    63cc:	d8000b15 	stw	zero,44(sp)
    63d0:	003f3c06 	br	60c4 <_dtoa_r+0xd08>
    63d4:	dc000917 	ldw	r16,36(sp)
    63d8:	003e9206 	br	5e24 <_dtoa_r+0xa68>
    63dc:	d9c00317 	ldw	r7,12(sp)
    63e0:	00800084 	movi	r2,2
    63e4:	11fec50e 	bge	r2,r7,5efc <_dtoa_r+0xb40>
    63e8:	d9000617 	ldw	r4,24(sp)
    63ec:	20013c1e 	bne	r4,zero,68e0 <_dtoa_r+0x1524>
    63f0:	a80b883a 	mov	r5,r21
    63f4:	000f883a 	mov	r7,zero
    63f8:	01800144 	movi	r6,5
    63fc:	e009883a 	mov	r4,fp
    6400:	0008b280 	call	8b28 <__multadd>
    6404:	100b883a 	mov	r5,r2
    6408:	8009883a 	mov	r4,r16
    640c:	102b883a 	mov	r21,r2
    6410:	00093200 	call	9320 <__mcmp>
    6414:	dc000915 	stw	r16,36(sp)
    6418:	00bf410e 	bge	zero,r2,6120 <_dtoa_r+0xd64>
    641c:	d9c00717 	ldw	r7,28(sp)
    6420:	00800c44 	movi	r2,49
    6424:	38800005 	stb	r2,0(r7)
    6428:	d8800517 	ldw	r2,20(sp)
    642c:	3dc00044 	addi	r23,r7,1
    6430:	10800044 	addi	r2,r2,1
    6434:	d8800515 	stw	r2,20(sp)
    6438:	003f3d06 	br	6130 <_dtoa_r+0xd74>
    643c:	d9800517 	ldw	r6,20(sp)
    6440:	d9c00717 	ldw	r7,28(sp)
    6444:	00800c44 	movi	r2,49
    6448:	31800044 	addi	r6,r6,1
    644c:	d9800515 	stw	r6,20(sp)
    6450:	38800005 	stb	r2,0(r7)
    6454:	003edf06 	br	5fd4 <_dtoa_r+0xc18>
    6458:	d8000b15 	stw	zero,44(sp)
    645c:	003c9f06 	br	56dc <_dtoa_r+0x320>
    6460:	903e7e1e 	bne	r18,zero,5e5c <_dtoa_r+0xaa0>
    6464:	00800434 	movhi	r2,16
    6468:	10bfffc4 	addi	r2,r2,-1
    646c:	9884703a 	and	r2,r19,r2
    6470:	1000ea1e 	bne	r2,zero,681c <_dtoa_r+0x1460>
    6474:	9cdffc2c 	andhi	r19,r19,32752
    6478:	9800e826 	beq	r19,zero,681c <_dtoa_r+0x1460>
    647c:	d9c00817 	ldw	r7,32(sp)
    6480:	b5800044 	addi	r22,r22,1
    6484:	04c00044 	movi	r19,1
    6488:	39c00044 	addi	r7,r7,1
    648c:	d9c00815 	stw	r7,32(sp)
    6490:	d8800d17 	ldw	r2,52(sp)
    6494:	103e721e 	bne	r2,zero,5e60 <_dtoa_r+0xaa4>
    6498:	00800044 	movi	r2,1
    649c:	003e7906 	br	5e84 <_dtoa_r+0xac8>
    64a0:	8009883a 	mov	r4,r16
    64a4:	00107040 	call	10704 <__floatsidf>
    64a8:	d9800f17 	ldw	r6,60(sp)
    64ac:	d9c01017 	ldw	r7,64(sp)
    64b0:	1009883a 	mov	r4,r2
    64b4:	180b883a 	mov	r5,r3
    64b8:	000f6700 	call	f670 <__muldf3>
    64bc:	000d883a 	mov	r6,zero
    64c0:	01d00734 	movhi	r7,16412
    64c4:	1009883a 	mov	r4,r2
    64c8:	180b883a 	mov	r5,r3
    64cc:	000e2840 	call	e284 <__adddf3>
    64d0:	047f3034 	movhi	r17,64704
    64d4:	1021883a 	mov	r16,r2
    64d8:	1c63883a 	add	r17,r3,r17
    64dc:	d9000f17 	ldw	r4,60(sp)
    64e0:	d9401017 	ldw	r5,64(sp)
    64e4:	000d883a 	mov	r6,zero
    64e8:	01d00534 	movhi	r7,16404
    64ec:	000fd880 	call	fd88 <__subdf3>
    64f0:	800d883a 	mov	r6,r16
    64f4:	880f883a 	mov	r7,r17
    64f8:	1009883a 	mov	r4,r2
    64fc:	180b883a 	mov	r5,r3
    6500:	102b883a 	mov	r21,r2
    6504:	1829883a 	mov	r20,r3
    6508:	000f4a00 	call	f4a0 <__gedf2>
    650c:	00806c16 	blt	zero,r2,66c0 <_dtoa_r+0x1304>
    6510:	89e0003c 	xorhi	r7,r17,32768
    6514:	800d883a 	mov	r6,r16
    6518:	a809883a 	mov	r4,r21
    651c:	a00b883a 	mov	r5,r20
    6520:	000f57c0 	call	f57c <__ledf2>
    6524:	103d7e0e 	bge	r2,zero,5b20 <_dtoa_r+0x764>
    6528:	002b883a 	mov	r21,zero
    652c:	0023883a 	mov	r17,zero
    6530:	003efb06 	br	6120 <_dtoa_r+0xd64>
    6534:	d8800717 	ldw	r2,28(sp)
    6538:	003bd006 	br	547c <_dtoa_r+0xc0>
    653c:	d9000a17 	ldw	r4,40(sp)
    6540:	d9800d17 	ldw	r6,52(sp)
    6544:	dd400a15 	stw	r21,40(sp)
    6548:	a905c83a 	sub	r2,r21,r4
    654c:	308d883a 	add	r6,r6,r2
    6550:	d9800d15 	stw	r6,52(sp)
    6554:	002b883a 	mov	r21,zero
    6558:	003e0606 	br	5d74 <_dtoa_r+0x9b8>
    655c:	9023883a 	mov	r17,r18
    6560:	9829883a 	mov	r20,r19
    6564:	04000084 	movi	r16,2
    6568:	003c9206 	br	57b4 <_dtoa_r+0x3f8>
    656c:	04000044 	movi	r16,1
    6570:	dc000c15 	stw	r16,48(sp)
    6574:	dc000615 	stw	r16,24(sp)
    6578:	dc002215 	stw	r16,136(sp)
    657c:	e0001115 	stw	zero,68(fp)
    6580:	000b883a 	mov	r5,zero
    6584:	003c6906 	br	572c <_dtoa_r+0x370>
    6588:	3021883a 	mov	r16,r6
    658c:	003ffb06 	br	657c <_dtoa_r+0x11c0>
    6590:	1000021e 	bne	r2,zero,659c <_dtoa_r+0x11e0>
    6594:	4200004c 	andi	r8,r8,1
    6598:	403e7d1e 	bne	r8,zero,5f90 <_dtoa_r+0xbd4>
    659c:	01000c04 	movi	r4,48
    65a0:	00000106 	br	65a8 <_dtoa_r+0x11ec>
    65a4:	102f883a 	mov	r23,r2
    65a8:	b8bfffc4 	addi	r2,r23,-1
    65ac:	10c00007 	ldb	r3,0(r2)
    65b0:	193ffc26 	beq	r3,r4,65a4 <_dtoa_r+0x11e8>
    65b4:	003e8706 	br	5fd4 <_dtoa_r+0xc18>
    65b8:	d8800517 	ldw	r2,20(sp)
    65bc:	00a3c83a 	sub	r17,zero,r2
    65c0:	8800a426 	beq	r17,zero,6854 <_dtoa_r+0x1498>
    65c4:	888003cc 	andi	r2,r17,15
    65c8:	100490fa 	slli	r2,r2,3
    65cc:	00c000b4 	movhi	r3,2
    65d0:	18f6e704 	addi	r3,r3,-9316
    65d4:	1885883a 	add	r2,r3,r2
    65d8:	11800017 	ldw	r6,0(r2)
    65dc:	11c00117 	ldw	r7,4(r2)
    65e0:	9009883a 	mov	r4,r18
    65e4:	980b883a 	mov	r5,r19
    65e8:	8823d13a 	srai	r17,r17,4
    65ec:	000f6700 	call	f670 <__muldf3>
    65f0:	d8800f15 	stw	r2,60(sp)
    65f4:	d8c01015 	stw	r3,64(sp)
    65f8:	8800e826 	beq	r17,zero,699c <_dtoa_r+0x15e0>
    65fc:	050000b4 	movhi	r20,2
    6600:	a536dd04 	addi	r20,r20,-9356
    6604:	04000084 	movi	r16,2
    6608:	8980004c 	andi	r6,r17,1
    660c:	1009883a 	mov	r4,r2
    6610:	8823d07a 	srai	r17,r17,1
    6614:	180b883a 	mov	r5,r3
    6618:	30000426 	beq	r6,zero,662c <_dtoa_r+0x1270>
    661c:	a1800017 	ldw	r6,0(r20)
    6620:	a1c00117 	ldw	r7,4(r20)
    6624:	84000044 	addi	r16,r16,1
    6628:	000f6700 	call	f670 <__muldf3>
    662c:	a5000204 	addi	r20,r20,8
    6630:	883ff51e 	bne	r17,zero,6608 <_dtoa_r+0x124c>
    6634:	d8800f15 	stw	r2,60(sp)
    6638:	d8c01015 	stw	r3,64(sp)
    663c:	003c7606 	br	5818 <_dtoa_r+0x45c>
    6640:	00c00c04 	movi	r3,48
    6644:	10c00005 	stb	r3,0(r2)
    6648:	d8c00517 	ldw	r3,20(sp)
    664c:	bd3fffc3 	ldbu	r20,-1(r23)
    6650:	18c00044 	addi	r3,r3,1
    6654:	d8c00515 	stw	r3,20(sp)
    6658:	003db906 	br	5d40 <_dtoa_r+0x984>
    665c:	89400117 	ldw	r5,4(r17)
    6660:	e009883a 	mov	r4,fp
    6664:	0008a580 	call	8a58 <_Balloc>
    6668:	89800417 	ldw	r6,16(r17)
    666c:	89400304 	addi	r5,r17,12
    6670:	11000304 	addi	r4,r2,12
    6674:	31800084 	addi	r6,r6,2
    6678:	318d883a 	add	r6,r6,r6
    667c:	318d883a 	add	r6,r6,r6
    6680:	1027883a 	mov	r19,r2
    6684:	000868c0 	call	868c <memcpy>
    6688:	01800044 	movi	r6,1
    668c:	980b883a 	mov	r5,r19
    6690:	e009883a 	mov	r4,fp
    6694:	00091d80 	call	91d8 <__lshift>
    6698:	1029883a 	mov	r20,r2
    669c:	003ecc06 	br	61d0 <_dtoa_r+0xe14>
    66a0:	00800e44 	movi	r2,57
    66a4:	90809026 	beq	r18,r2,68e8 <_dtoa_r+0x152c>
    66a8:	92000044 	addi	r8,r18,1
    66ac:	003f1f06 	br	632c <_dtoa_r+0xf70>
    66b0:	9011883a 	mov	r8,r18
    66b4:	8825883a 	mov	r18,r17
    66b8:	a023883a 	mov	r17,r20
    66bc:	003e2906 	br	5f64 <_dtoa_r+0xba8>
    66c0:	002b883a 	mov	r21,zero
    66c4:	0023883a 	mov	r17,zero
    66c8:	003f5406 	br	641c <_dtoa_r+0x1060>
    66cc:	61bfffc4 	addi	r6,r12,-1
    66d0:	300490fa 	slli	r2,r6,3
    66d4:	00c000b4 	movhi	r3,2
    66d8:	18f6e704 	addi	r3,r3,-9316
    66dc:	1885883a 	add	r2,r3,r2
    66e0:	11000017 	ldw	r4,0(r2)
    66e4:	11400117 	ldw	r5,4(r2)
    66e8:	d8800717 	ldw	r2,28(sp)
    66ec:	880f883a 	mov	r7,r17
    66f0:	d9801215 	stw	r6,72(sp)
    66f4:	800d883a 	mov	r6,r16
    66f8:	db001615 	stw	r12,88(sp)
    66fc:	15c00044 	addi	r23,r2,1
    6700:	000f6700 	call	f670 <__muldf3>
    6704:	d9401017 	ldw	r5,64(sp)
    6708:	d9000f17 	ldw	r4,60(sp)
    670c:	d8c01515 	stw	r3,84(sp)
    6710:	d8801415 	stw	r2,80(sp)
    6714:	00106840 	call	10684 <__fixdfsi>
    6718:	1009883a 	mov	r4,r2
    671c:	1021883a 	mov	r16,r2
    6720:	00107040 	call	10704 <__floatsidf>
    6724:	d9000f17 	ldw	r4,60(sp)
    6728:	d9401017 	ldw	r5,64(sp)
    672c:	100d883a 	mov	r6,r2
    6730:	180f883a 	mov	r7,r3
    6734:	000fd880 	call	fd88 <__subdf3>
    6738:	1829883a 	mov	r20,r3
    673c:	d8c00717 	ldw	r3,28(sp)
    6740:	84000c04 	addi	r16,r16,48
    6744:	1023883a 	mov	r17,r2
    6748:	1c000005 	stb	r16,0(r3)
    674c:	db001617 	ldw	r12,88(sp)
    6750:	00800044 	movi	r2,1
    6754:	60802226 	beq	r12,r2,67e0 <_dtoa_r+0x1424>
    6758:	d9c00717 	ldw	r7,28(sp)
    675c:	8805883a 	mov	r2,r17
    6760:	b82b883a 	mov	r21,r23
    6764:	3b19883a 	add	r12,r7,r12
    6768:	6023883a 	mov	r17,r12
    676c:	a007883a 	mov	r3,r20
    6770:	dc800f15 	stw	r18,60(sp)
    6774:	000d883a 	mov	r6,zero
    6778:	01d00934 	movhi	r7,16420
    677c:	1009883a 	mov	r4,r2
    6780:	180b883a 	mov	r5,r3
    6784:	000f6700 	call	f670 <__muldf3>
    6788:	180b883a 	mov	r5,r3
    678c:	1009883a 	mov	r4,r2
    6790:	1829883a 	mov	r20,r3
    6794:	1025883a 	mov	r18,r2
    6798:	00106840 	call	10684 <__fixdfsi>
    679c:	1009883a 	mov	r4,r2
    67a0:	1021883a 	mov	r16,r2
    67a4:	00107040 	call	10704 <__floatsidf>
    67a8:	100d883a 	mov	r6,r2
    67ac:	180f883a 	mov	r7,r3
    67b0:	9009883a 	mov	r4,r18
    67b4:	a00b883a 	mov	r5,r20
    67b8:	84000c04 	addi	r16,r16,48
    67bc:	000fd880 	call	fd88 <__subdf3>
    67c0:	ad400044 	addi	r21,r21,1
    67c4:	ac3fffc5 	stb	r16,-1(r21)
    67c8:	ac7fea1e 	bne	r21,r17,6774 <_dtoa_r+0x13b8>
    67cc:	1023883a 	mov	r17,r2
    67d0:	d8801217 	ldw	r2,72(sp)
    67d4:	dc800f17 	ldw	r18,60(sp)
    67d8:	1829883a 	mov	r20,r3
    67dc:	b8af883a 	add	r23,r23,r2
    67e0:	d9001417 	ldw	r4,80(sp)
    67e4:	d9401517 	ldw	r5,84(sp)
    67e8:	000d883a 	mov	r6,zero
    67ec:	01cff834 	movhi	r7,16352
    67f0:	000e2840 	call	e284 <__adddf3>
    67f4:	880d883a 	mov	r6,r17
    67f8:	a00f883a 	mov	r7,r20
    67fc:	1009883a 	mov	r4,r2
    6800:	180b883a 	mov	r5,r3
    6804:	000f57c0 	call	f57c <__ledf2>
    6808:	10003e0e 	bge	r2,zero,6904 <_dtoa_r+0x1548>
    680c:	d9001317 	ldw	r4,76(sp)
    6810:	bd3fffc3 	ldbu	r20,-1(r23)
    6814:	d9000515 	stw	r4,20(sp)
    6818:	003d3b06 	br	5d08 <_dtoa_r+0x94c>
    681c:	0027883a 	mov	r19,zero
    6820:	003f1b06 	br	6490 <_dtoa_r+0x10d4>
    6824:	d8800817 	ldw	r2,32(sp)
    6828:	11e9c83a 	sub	r20,r2,r7
    682c:	0005883a 	mov	r2,zero
    6830:	003d5406 	br	5d84 <_dtoa_r+0x9c8>
    6834:	00800044 	movi	r2,1
    6838:	003dc706 	br	5f58 <_dtoa_r+0xb9c>
    683c:	d8c00217 	ldw	r3,8(sp)
    6840:	00800d84 	movi	r2,54
    6844:	dd400a17 	ldw	r21,40(sp)
    6848:	10c5c83a 	sub	r2,r2,r3
    684c:	dd000817 	ldw	r20,32(sp)
    6850:	003d4c06 	br	5d84 <_dtoa_r+0x9c8>
    6854:	dc800f15 	stw	r18,60(sp)
    6858:	dcc01015 	stw	r19,64(sp)
    685c:	04000084 	movi	r16,2
    6860:	003bed06 	br	5818 <_dtoa_r+0x45c>
    6864:	d9000617 	ldw	r4,24(sp)
    6868:	203f0d26 	beq	r4,zero,64a0 <_dtoa_r+0x10e4>
    686c:	d9800c17 	ldw	r6,48(sp)
    6870:	01bcab0e 	bge	zero,r6,5b20 <_dtoa_r+0x764>
    6874:	d9401017 	ldw	r5,64(sp)
    6878:	d9000f17 	ldw	r4,60(sp)
    687c:	000d883a 	mov	r6,zero
    6880:	01d00934 	movhi	r7,16420
    6884:	000f6700 	call	f670 <__muldf3>
    6888:	81000044 	addi	r4,r16,1
    688c:	d8800f15 	stw	r2,60(sp)
    6890:	d8c01015 	stw	r3,64(sp)
    6894:	00107040 	call	10704 <__floatsidf>
    6898:	d9800f17 	ldw	r6,60(sp)
    689c:	d9c01017 	ldw	r7,64(sp)
    68a0:	1009883a 	mov	r4,r2
    68a4:	180b883a 	mov	r5,r3
    68a8:	000f6700 	call	f670 <__muldf3>
    68ac:	01d00734 	movhi	r7,16412
    68b0:	000d883a 	mov	r6,zero
    68b4:	1009883a 	mov	r4,r2
    68b8:	180b883a 	mov	r5,r3
    68bc:	000e2840 	call	e284 <__adddf3>
    68c0:	d9c00517 	ldw	r7,20(sp)
    68c4:	047f3034 	movhi	r17,64704
    68c8:	1021883a 	mov	r16,r2
    68cc:	39ffffc4 	addi	r7,r7,-1
    68d0:	d9c01315 	stw	r7,76(sp)
    68d4:	1c63883a 	add	r17,r3,r17
    68d8:	db000c17 	ldw	r12,48(sp)
    68dc:	003bea06 	br	5888 <_dtoa_r+0x4cc>
    68e0:	dc000915 	stw	r16,36(sp)
    68e4:	003e0e06 	br	6120 <_dtoa_r+0xd64>
    68e8:	01000e44 	movi	r4,57
    68ec:	8825883a 	mov	r18,r17
    68f0:	9dc00044 	addi	r23,r19,1
    68f4:	99000005 	stb	r4,0(r19)
    68f8:	a023883a 	mov	r17,r20
    68fc:	dc000915 	stw	r16,36(sp)
    6900:	003da406 	br	5f94 <_dtoa_r+0xbd8>
    6904:	d9801417 	ldw	r6,80(sp)
    6908:	d9c01517 	ldw	r7,84(sp)
    690c:	0009883a 	mov	r4,zero
    6910:	014ff834 	movhi	r5,16352
    6914:	000fd880 	call	fd88 <__subdf3>
    6918:	880d883a 	mov	r6,r17
    691c:	a00f883a 	mov	r7,r20
    6920:	1009883a 	mov	r4,r2
    6924:	180b883a 	mov	r5,r3
    6928:	000f4a00 	call	f4a0 <__gedf2>
    692c:	00bc7c0e 	bge	zero,r2,5b20 <_dtoa_r+0x764>
    6930:	01000c04 	movi	r4,48
    6934:	00000106 	br	693c <_dtoa_r+0x1580>
    6938:	102f883a 	mov	r23,r2
    693c:	b8bfffc4 	addi	r2,r23,-1
    6940:	10c00007 	ldb	r3,0(r2)
    6944:	193ffc26 	beq	r3,r4,6938 <_dtoa_r+0x157c>
    6948:	d9801317 	ldw	r6,76(sp)
    694c:	d9800515 	stw	r6,20(sp)
    6950:	003c4406 	br	5a64 <_dtoa_r+0x6a8>
    6954:	d9801317 	ldw	r6,76(sp)
    6958:	d9800515 	stw	r6,20(sp)
    695c:	003cea06 	br	5d08 <_dtoa_r+0x94c>
    6960:	dd800f17 	ldw	r22,60(sp)
    6964:	dcc01017 	ldw	r19,64(sp)
    6968:	dc801217 	ldw	r18,72(sp)
    696c:	003c6c06 	br	5b20 <_dtoa_r+0x764>
    6970:	903e031e 	bne	r18,zero,6180 <_dtoa_r+0xdc4>
    6974:	003ebb06 	br	6464 <_dtoa_r+0x10a8>
    6978:	103e6c1e 	bne	r2,zero,632c <_dtoa_r+0xf70>
    697c:	4080004c 	andi	r2,r8,1
    6980:	103e6a26 	beq	r2,zero,632c <_dtoa_r+0xf70>
    6984:	003e6606 	br	6320 <_dtoa_r+0xf64>
    6988:	d8c00317 	ldw	r3,12(sp)
    698c:	00800084 	movi	r2,2
    6990:	10c02916 	blt	r2,r3,6a38 <_dtoa_r+0x167c>
    6994:	d9000c17 	ldw	r4,48(sp)
    6998:	003e8806 	br	63bc <_dtoa_r+0x1000>
    699c:	04000084 	movi	r16,2
    69a0:	003b9d06 	br	5818 <_dtoa_r+0x45c>
    69a4:	d9001317 	ldw	r4,76(sp)
    69a8:	d9000515 	stw	r4,20(sp)
    69ac:	003cd606 	br	5d08 <_dtoa_r+0x94c>
    69b0:	d8801317 	ldw	r2,76(sp)
    69b4:	d8800515 	stw	r2,20(sp)
    69b8:	003c2a06 	br	5a64 <_dtoa_r+0x6a8>
    69bc:	d9800317 	ldw	r6,12(sp)
    69c0:	00800084 	movi	r2,2
    69c4:	11801516 	blt	r2,r6,6a1c <_dtoa_r+0x1660>
    69c8:	d9c00c17 	ldw	r7,48(sp)
    69cc:	d9c00615 	stw	r7,24(sp)
    69d0:	003df706 	br	61b0 <_dtoa_r+0xdf4>
    69d4:	193d3926 	beq	r3,r4,5ebc <_dtoa_r+0xb00>
    69d8:	00c00f04 	movi	r3,60
    69dc:	1885c83a 	sub	r2,r3,r2
    69e0:	003ddf06 	br	6160 <_dtoa_r+0xda4>
    69e4:	e009883a 	mov	r4,fp
    69e8:	e0001115 	stw	zero,68(fp)
    69ec:	000b883a 	mov	r5,zero
    69f0:	0008a580 	call	8a58 <_Balloc>
    69f4:	d8800715 	stw	r2,28(sp)
    69f8:	d8c00717 	ldw	r3,28(sp)
    69fc:	00bfffc4 	movi	r2,-1
    6a00:	01000044 	movi	r4,1
    6a04:	d8800c15 	stw	r2,48(sp)
    6a08:	e0c01015 	stw	r3,64(fp)
    6a0c:	d9000b15 	stw	r4,44(sp)
    6a10:	d8800615 	stw	r2,24(sp)
    6a14:	d8002215 	stw	zero,136(sp)
    6a18:	003c4106 	br	5b20 <_dtoa_r+0x764>
    6a1c:	d8c00c17 	ldw	r3,48(sp)
    6a20:	d8c00615 	stw	r3,24(sp)
    6a24:	003e7006 	br	63e8 <_dtoa_r+0x102c>
    6a28:	04400044 	movi	r17,1
    6a2c:	003b2006 	br	56b0 <_dtoa_r+0x2f4>
    6a30:	000b883a 	mov	r5,zero
    6a34:	003b3d06 	br	572c <_dtoa_r+0x370>
    6a38:	d8800c17 	ldw	r2,48(sp)
    6a3c:	d8800615 	stw	r2,24(sp)
    6a40:	003e6906 	br	63e8 <_dtoa_r+0x102c>

00006a44 <__sflush_r>:
    6a44:	2880030b 	ldhu	r2,12(r5)
    6a48:	defffb04 	addi	sp,sp,-20
    6a4c:	dcc00315 	stw	r19,12(sp)
    6a50:	dc400115 	stw	r17,4(sp)
    6a54:	dfc00415 	stw	ra,16(sp)
    6a58:	dc800215 	stw	r18,8(sp)
    6a5c:	dc000015 	stw	r16,0(sp)
    6a60:	10c0020c 	andi	r3,r2,8
    6a64:	2823883a 	mov	r17,r5
    6a68:	2027883a 	mov	r19,r4
    6a6c:	1800311e 	bne	r3,zero,6b34 <__sflush_r+0xf0>
    6a70:	28c00117 	ldw	r3,4(r5)
    6a74:	10820014 	ori	r2,r2,2048
    6a78:	2880030d 	sth	r2,12(r5)
    6a7c:	00c04b0e 	bge	zero,r3,6bac <__sflush_r+0x168>
    6a80:	8a000a17 	ldw	r8,40(r17)
    6a84:	40002326 	beq	r8,zero,6b14 <__sflush_r+0xd0>
    6a88:	9c000017 	ldw	r16,0(r19)
    6a8c:	10c4000c 	andi	r3,r2,4096
    6a90:	98000015 	stw	zero,0(r19)
    6a94:	18004826 	beq	r3,zero,6bb8 <__sflush_r+0x174>
    6a98:	89801417 	ldw	r6,80(r17)
    6a9c:	10c0010c 	andi	r3,r2,4
    6aa0:	18000626 	beq	r3,zero,6abc <__sflush_r+0x78>
    6aa4:	88c00117 	ldw	r3,4(r17)
    6aa8:	88800c17 	ldw	r2,48(r17)
    6aac:	30cdc83a 	sub	r6,r6,r3
    6ab0:	10000226 	beq	r2,zero,6abc <__sflush_r+0x78>
    6ab4:	88800f17 	ldw	r2,60(r17)
    6ab8:	308dc83a 	sub	r6,r6,r2
    6abc:	89400717 	ldw	r5,28(r17)
    6ac0:	000f883a 	mov	r7,zero
    6ac4:	9809883a 	mov	r4,r19
    6ac8:	403ee83a 	callr	r8
    6acc:	00ffffc4 	movi	r3,-1
    6ad0:	10c04426 	beq	r2,r3,6be4 <__sflush_r+0x1a0>
    6ad4:	88c0030b 	ldhu	r3,12(r17)
    6ad8:	89000417 	ldw	r4,16(r17)
    6adc:	88000115 	stw	zero,4(r17)
    6ae0:	197dffcc 	andi	r5,r3,63487
    6ae4:	8940030d 	sth	r5,12(r17)
    6ae8:	89000015 	stw	r4,0(r17)
    6aec:	18c4000c 	andi	r3,r3,4096
    6af0:	18002c1e 	bne	r3,zero,6ba4 <__sflush_r+0x160>
    6af4:	89400c17 	ldw	r5,48(r17)
    6af8:	9c000015 	stw	r16,0(r19)
    6afc:	28000526 	beq	r5,zero,6b14 <__sflush_r+0xd0>
    6b00:	88801004 	addi	r2,r17,64
    6b04:	28800226 	beq	r5,r2,6b10 <__sflush_r+0xcc>
    6b08:	9809883a 	mov	r4,r19
    6b0c:	00071b00 	call	71b0 <_free_r>
    6b10:	88000c15 	stw	zero,48(r17)
    6b14:	0005883a 	mov	r2,zero
    6b18:	dfc00417 	ldw	ra,16(sp)
    6b1c:	dcc00317 	ldw	r19,12(sp)
    6b20:	dc800217 	ldw	r18,8(sp)
    6b24:	dc400117 	ldw	r17,4(sp)
    6b28:	dc000017 	ldw	r16,0(sp)
    6b2c:	dec00504 	addi	sp,sp,20
    6b30:	f800283a 	ret
    6b34:	2c800417 	ldw	r18,16(r5)
    6b38:	903ff626 	beq	r18,zero,6b14 <__sflush_r+0xd0>
    6b3c:	2c000017 	ldw	r16,0(r5)
    6b40:	108000cc 	andi	r2,r2,3
    6b44:	2c800015 	stw	r18,0(r5)
    6b48:	84a1c83a 	sub	r16,r16,r18
    6b4c:	1000131e 	bne	r2,zero,6b9c <__sflush_r+0x158>
    6b50:	28800517 	ldw	r2,20(r5)
    6b54:	88800215 	stw	r2,8(r17)
    6b58:	04000316 	blt	zero,r16,6b68 <__sflush_r+0x124>
    6b5c:	003fed06 	br	6b14 <__sflush_r+0xd0>
    6b60:	90a5883a 	add	r18,r18,r2
    6b64:	043feb0e 	bge	zero,r16,6b14 <__sflush_r+0xd0>
    6b68:	88800917 	ldw	r2,36(r17)
    6b6c:	89400717 	ldw	r5,28(r17)
    6b70:	800f883a 	mov	r7,r16
    6b74:	900d883a 	mov	r6,r18
    6b78:	9809883a 	mov	r4,r19
    6b7c:	103ee83a 	callr	r2
    6b80:	80a1c83a 	sub	r16,r16,r2
    6b84:	00bff616 	blt	zero,r2,6b60 <__sflush_r+0x11c>
    6b88:	88c0030b 	ldhu	r3,12(r17)
    6b8c:	00bfffc4 	movi	r2,-1
    6b90:	18c01014 	ori	r3,r3,64
    6b94:	88c0030d 	sth	r3,12(r17)
    6b98:	003fdf06 	br	6b18 <__sflush_r+0xd4>
    6b9c:	0005883a 	mov	r2,zero
    6ba0:	003fec06 	br	6b54 <__sflush_r+0x110>
    6ba4:	88801415 	stw	r2,80(r17)
    6ba8:	003fd206 	br	6af4 <__sflush_r+0xb0>
    6bac:	28c00f17 	ldw	r3,60(r5)
    6bb0:	00ffb316 	blt	zero,r3,6a80 <__sflush_r+0x3c>
    6bb4:	003fd706 	br	6b14 <__sflush_r+0xd0>
    6bb8:	89400717 	ldw	r5,28(r17)
    6bbc:	000d883a 	mov	r6,zero
    6bc0:	01c00044 	movi	r7,1
    6bc4:	9809883a 	mov	r4,r19
    6bc8:	403ee83a 	callr	r8
    6bcc:	100d883a 	mov	r6,r2
    6bd0:	00bfffc4 	movi	r2,-1
    6bd4:	30801426 	beq	r6,r2,6c28 <__sflush_r+0x1e4>
    6bd8:	8880030b 	ldhu	r2,12(r17)
    6bdc:	8a000a17 	ldw	r8,40(r17)
    6be0:	003fae06 	br	6a9c <__sflush_r+0x58>
    6be4:	98c00017 	ldw	r3,0(r19)
    6be8:	183fba26 	beq	r3,zero,6ad4 <__sflush_r+0x90>
    6bec:	01000744 	movi	r4,29
    6bf0:	19000626 	beq	r3,r4,6c0c <__sflush_r+0x1c8>
    6bf4:	01000584 	movi	r4,22
    6bf8:	19000426 	beq	r3,r4,6c0c <__sflush_r+0x1c8>
    6bfc:	88c0030b 	ldhu	r3,12(r17)
    6c00:	18c01014 	ori	r3,r3,64
    6c04:	88c0030d 	sth	r3,12(r17)
    6c08:	003fc306 	br	6b18 <__sflush_r+0xd4>
    6c0c:	8880030b 	ldhu	r2,12(r17)
    6c10:	88c00417 	ldw	r3,16(r17)
    6c14:	88000115 	stw	zero,4(r17)
    6c18:	10bdffcc 	andi	r2,r2,63487
    6c1c:	8880030d 	sth	r2,12(r17)
    6c20:	88c00015 	stw	r3,0(r17)
    6c24:	003fb306 	br	6af4 <__sflush_r+0xb0>
    6c28:	98800017 	ldw	r2,0(r19)
    6c2c:	103fea26 	beq	r2,zero,6bd8 <__sflush_r+0x194>
    6c30:	00c00744 	movi	r3,29
    6c34:	10c00226 	beq	r2,r3,6c40 <__sflush_r+0x1fc>
    6c38:	00c00584 	movi	r3,22
    6c3c:	10c0031e 	bne	r2,r3,6c4c <__sflush_r+0x208>
    6c40:	9c000015 	stw	r16,0(r19)
    6c44:	0005883a 	mov	r2,zero
    6c48:	003fb306 	br	6b18 <__sflush_r+0xd4>
    6c4c:	88c0030b 	ldhu	r3,12(r17)
    6c50:	3005883a 	mov	r2,r6
    6c54:	18c01014 	ori	r3,r3,64
    6c58:	88c0030d 	sth	r3,12(r17)
    6c5c:	003fae06 	br	6b18 <__sflush_r+0xd4>

00006c60 <_fflush_r>:
    6c60:	defffd04 	addi	sp,sp,-12
    6c64:	dc000115 	stw	r16,4(sp)
    6c68:	dfc00215 	stw	ra,8(sp)
    6c6c:	2021883a 	mov	r16,r4
    6c70:	20000226 	beq	r4,zero,6c7c <_fflush_r+0x1c>
    6c74:	20800e17 	ldw	r2,56(r4)
    6c78:	10000c26 	beq	r2,zero,6cac <_fflush_r+0x4c>
    6c7c:	2880030f 	ldh	r2,12(r5)
    6c80:	1000051e 	bne	r2,zero,6c98 <_fflush_r+0x38>
    6c84:	0005883a 	mov	r2,zero
    6c88:	dfc00217 	ldw	ra,8(sp)
    6c8c:	dc000117 	ldw	r16,4(sp)
    6c90:	dec00304 	addi	sp,sp,12
    6c94:	f800283a 	ret
    6c98:	8009883a 	mov	r4,r16
    6c9c:	dfc00217 	ldw	ra,8(sp)
    6ca0:	dc000117 	ldw	r16,4(sp)
    6ca4:	dec00304 	addi	sp,sp,12
    6ca8:	0006a441 	jmpi	6a44 <__sflush_r>
    6cac:	d9400015 	stw	r5,0(sp)
    6cb0:	000703c0 	call	703c <__sinit>
    6cb4:	d9400017 	ldw	r5,0(sp)
    6cb8:	003ff006 	br	6c7c <_fflush_r+0x1c>

00006cbc <fflush>:
    6cbc:	20000526 	beq	r4,zero,6cd4 <fflush+0x18>
    6cc0:	008000b4 	movhi	r2,2
    6cc4:	10bf8204 	addi	r2,r2,-504
    6cc8:	200b883a 	mov	r5,r4
    6ccc:	11000017 	ldw	r4,0(r2)
    6cd0:	0006c601 	jmpi	6c60 <_fflush_r>
    6cd4:	008000b4 	movhi	r2,2
    6cd8:	10bf8104 	addi	r2,r2,-508
    6cdc:	11000017 	ldw	r4,0(r2)
    6ce0:	01400034 	movhi	r5,0
    6ce4:	295b1804 	addi	r5,r5,27744
    6ce8:	0007a401 	jmpi	7a40 <_fwalk_reent>

00006cec <__fp_unlock>:
    6cec:	0005883a 	mov	r2,zero
    6cf0:	f800283a 	ret

00006cf4 <_cleanup_r>:
    6cf4:	01400074 	movhi	r5,1
    6cf8:	29739904 	addi	r5,r5,-12700
    6cfc:	0007a401 	jmpi	7a40 <_fwalk_reent>

00006d00 <__sinit.part.1>:
    6d00:	defff704 	addi	sp,sp,-36
    6d04:	00c00034 	movhi	r3,0
    6d08:	dfc00815 	stw	ra,32(sp)
    6d0c:	ddc00715 	stw	r23,28(sp)
    6d10:	dd800615 	stw	r22,24(sp)
    6d14:	dd400515 	stw	r21,20(sp)
    6d18:	dd000415 	stw	r20,16(sp)
    6d1c:	dcc00315 	stw	r19,12(sp)
    6d20:	dc800215 	stw	r18,8(sp)
    6d24:	dc400115 	stw	r17,4(sp)
    6d28:	dc000015 	stw	r16,0(sp)
    6d2c:	18db3d04 	addi	r3,r3,27892
    6d30:	24000117 	ldw	r16,4(r4)
    6d34:	20c00f15 	stw	r3,60(r4)
    6d38:	2080bb04 	addi	r2,r4,748
    6d3c:	00c000c4 	movi	r3,3
    6d40:	20c0b915 	stw	r3,740(r4)
    6d44:	2080ba15 	stw	r2,744(r4)
    6d48:	2000b815 	stw	zero,736(r4)
    6d4c:	05c00204 	movi	r23,8
    6d50:	00800104 	movi	r2,4
    6d54:	2025883a 	mov	r18,r4
    6d58:	b80d883a 	mov	r6,r23
    6d5c:	81001704 	addi	r4,r16,92
    6d60:	000b883a 	mov	r5,zero
    6d64:	80000015 	stw	zero,0(r16)
    6d68:	80000115 	stw	zero,4(r16)
    6d6c:	80000215 	stw	zero,8(r16)
    6d70:	8080030d 	sth	r2,12(r16)
    6d74:	80001915 	stw	zero,100(r16)
    6d78:	8000038d 	sth	zero,14(r16)
    6d7c:	80000415 	stw	zero,16(r16)
    6d80:	80000515 	stw	zero,20(r16)
    6d84:	80000615 	stw	zero,24(r16)
    6d88:	00089300 	call	8930 <memset>
    6d8c:	05800074 	movhi	r22,1
    6d90:	94400217 	ldw	r17,8(r18)
    6d94:	05400074 	movhi	r21,1
    6d98:	05000074 	movhi	r20,1
    6d9c:	04c00074 	movhi	r19,1
    6da0:	b5a82004 	addi	r22,r22,-24448
    6da4:	ad683704 	addi	r21,r21,-24356
    6da8:	a5285604 	addi	r20,r20,-24232
    6dac:	9ce86d04 	addi	r19,r19,-24140
    6db0:	85800815 	stw	r22,32(r16)
    6db4:	85400915 	stw	r21,36(r16)
    6db8:	85000a15 	stw	r20,40(r16)
    6dbc:	84c00b15 	stw	r19,44(r16)
    6dc0:	84000715 	stw	r16,28(r16)
    6dc4:	00800284 	movi	r2,10
    6dc8:	8880030d 	sth	r2,12(r17)
    6dcc:	00800044 	movi	r2,1
    6dd0:	b80d883a 	mov	r6,r23
    6dd4:	89001704 	addi	r4,r17,92
    6dd8:	000b883a 	mov	r5,zero
    6ddc:	88000015 	stw	zero,0(r17)
    6de0:	88000115 	stw	zero,4(r17)
    6de4:	88000215 	stw	zero,8(r17)
    6de8:	88001915 	stw	zero,100(r17)
    6dec:	8880038d 	sth	r2,14(r17)
    6df0:	88000415 	stw	zero,16(r17)
    6df4:	88000515 	stw	zero,20(r17)
    6df8:	88000615 	stw	zero,24(r17)
    6dfc:	00089300 	call	8930 <memset>
    6e00:	94000317 	ldw	r16,12(r18)
    6e04:	00800484 	movi	r2,18
    6e08:	8c400715 	stw	r17,28(r17)
    6e0c:	8d800815 	stw	r22,32(r17)
    6e10:	8d400915 	stw	r21,36(r17)
    6e14:	8d000a15 	stw	r20,40(r17)
    6e18:	8cc00b15 	stw	r19,44(r17)
    6e1c:	8080030d 	sth	r2,12(r16)
    6e20:	00800084 	movi	r2,2
    6e24:	80000015 	stw	zero,0(r16)
    6e28:	80000115 	stw	zero,4(r16)
    6e2c:	80000215 	stw	zero,8(r16)
    6e30:	80001915 	stw	zero,100(r16)
    6e34:	8080038d 	sth	r2,14(r16)
    6e38:	80000415 	stw	zero,16(r16)
    6e3c:	80000515 	stw	zero,20(r16)
    6e40:	80000615 	stw	zero,24(r16)
    6e44:	b80d883a 	mov	r6,r23
    6e48:	000b883a 	mov	r5,zero
    6e4c:	81001704 	addi	r4,r16,92
    6e50:	00089300 	call	8930 <memset>
    6e54:	00800044 	movi	r2,1
    6e58:	84000715 	stw	r16,28(r16)
    6e5c:	85800815 	stw	r22,32(r16)
    6e60:	85400915 	stw	r21,36(r16)
    6e64:	85000a15 	stw	r20,40(r16)
    6e68:	84c00b15 	stw	r19,44(r16)
    6e6c:	90800e15 	stw	r2,56(r18)
    6e70:	dfc00817 	ldw	ra,32(sp)
    6e74:	ddc00717 	ldw	r23,28(sp)
    6e78:	dd800617 	ldw	r22,24(sp)
    6e7c:	dd400517 	ldw	r21,20(sp)
    6e80:	dd000417 	ldw	r20,16(sp)
    6e84:	dcc00317 	ldw	r19,12(sp)
    6e88:	dc800217 	ldw	r18,8(sp)
    6e8c:	dc400117 	ldw	r17,4(sp)
    6e90:	dc000017 	ldw	r16,0(sp)
    6e94:	dec00904 	addi	sp,sp,36
    6e98:	f800283a 	ret

00006e9c <__fp_lock>:
    6e9c:	0005883a 	mov	r2,zero
    6ea0:	f800283a 	ret

00006ea4 <__sfmoreglue>:
    6ea4:	defffc04 	addi	sp,sp,-16
    6ea8:	dc400115 	stw	r17,4(sp)
    6eac:	2c7fffc4 	addi	r17,r5,-1
    6eb0:	8c401a24 	muli	r17,r17,104
    6eb4:	dc800215 	stw	r18,8(sp)
    6eb8:	2825883a 	mov	r18,r5
    6ebc:	89401d04 	addi	r5,r17,116
    6ec0:	dc000015 	stw	r16,0(sp)
    6ec4:	dfc00315 	stw	ra,12(sp)
    6ec8:	0007d9c0 	call	7d9c <_malloc_r>
    6ecc:	1021883a 	mov	r16,r2
    6ed0:	10000726 	beq	r2,zero,6ef0 <__sfmoreglue+0x4c>
    6ed4:	11000304 	addi	r4,r2,12
    6ed8:	10000015 	stw	zero,0(r2)
    6edc:	14800115 	stw	r18,4(r2)
    6ee0:	11000215 	stw	r4,8(r2)
    6ee4:	89801a04 	addi	r6,r17,104
    6ee8:	000b883a 	mov	r5,zero
    6eec:	00089300 	call	8930 <memset>
    6ef0:	8005883a 	mov	r2,r16
    6ef4:	dfc00317 	ldw	ra,12(sp)
    6ef8:	dc800217 	ldw	r18,8(sp)
    6efc:	dc400117 	ldw	r17,4(sp)
    6f00:	dc000017 	ldw	r16,0(sp)
    6f04:	dec00404 	addi	sp,sp,16
    6f08:	f800283a 	ret

00006f0c <__sfp>:
    6f0c:	defffb04 	addi	sp,sp,-20
    6f10:	dc000015 	stw	r16,0(sp)
    6f14:	040000b4 	movhi	r16,2
    6f18:	843f8104 	addi	r16,r16,-508
    6f1c:	dcc00315 	stw	r19,12(sp)
    6f20:	2027883a 	mov	r19,r4
    6f24:	81000017 	ldw	r4,0(r16)
    6f28:	dfc00415 	stw	ra,16(sp)
    6f2c:	dc800215 	stw	r18,8(sp)
    6f30:	20800e17 	ldw	r2,56(r4)
    6f34:	dc400115 	stw	r17,4(sp)
    6f38:	1000021e 	bne	r2,zero,6f44 <__sfp+0x38>
    6f3c:	0006d000 	call	6d00 <__sinit.part.1>
    6f40:	81000017 	ldw	r4,0(r16)
    6f44:	2480b804 	addi	r18,r4,736
    6f48:	047fffc4 	movi	r17,-1
    6f4c:	91000117 	ldw	r4,4(r18)
    6f50:	94000217 	ldw	r16,8(r18)
    6f54:	213fffc4 	addi	r4,r4,-1
    6f58:	20000a16 	blt	r4,zero,6f84 <__sfp+0x78>
    6f5c:	8080030f 	ldh	r2,12(r16)
    6f60:	10000c26 	beq	r2,zero,6f94 <__sfp+0x88>
    6f64:	80c01d04 	addi	r3,r16,116
    6f68:	00000206 	br	6f74 <__sfp+0x68>
    6f6c:	18bfe60f 	ldh	r2,-104(r3)
    6f70:	10000826 	beq	r2,zero,6f94 <__sfp+0x88>
    6f74:	213fffc4 	addi	r4,r4,-1
    6f78:	1c3ffd04 	addi	r16,r3,-12
    6f7c:	18c01a04 	addi	r3,r3,104
    6f80:	247ffa1e 	bne	r4,r17,6f6c <__sfp+0x60>
    6f84:	90800017 	ldw	r2,0(r18)
    6f88:	10001d26 	beq	r2,zero,7000 <__sfp+0xf4>
    6f8c:	1025883a 	mov	r18,r2
    6f90:	003fee06 	br	6f4c <__sfp+0x40>
    6f94:	00bfffc4 	movi	r2,-1
    6f98:	8080038d 	sth	r2,14(r16)
    6f9c:	00800044 	movi	r2,1
    6fa0:	8080030d 	sth	r2,12(r16)
    6fa4:	80001915 	stw	zero,100(r16)
    6fa8:	80000015 	stw	zero,0(r16)
    6fac:	80000215 	stw	zero,8(r16)
    6fb0:	80000115 	stw	zero,4(r16)
    6fb4:	80000415 	stw	zero,16(r16)
    6fb8:	80000515 	stw	zero,20(r16)
    6fbc:	80000615 	stw	zero,24(r16)
    6fc0:	01800204 	movi	r6,8
    6fc4:	000b883a 	mov	r5,zero
    6fc8:	81001704 	addi	r4,r16,92
    6fcc:	00089300 	call	8930 <memset>
    6fd0:	8005883a 	mov	r2,r16
    6fd4:	80000c15 	stw	zero,48(r16)
    6fd8:	80000d15 	stw	zero,52(r16)
    6fdc:	80001115 	stw	zero,68(r16)
    6fe0:	80001215 	stw	zero,72(r16)
    6fe4:	dfc00417 	ldw	ra,16(sp)
    6fe8:	dcc00317 	ldw	r19,12(sp)
    6fec:	dc800217 	ldw	r18,8(sp)
    6ff0:	dc400117 	ldw	r17,4(sp)
    6ff4:	dc000017 	ldw	r16,0(sp)
    6ff8:	dec00504 	addi	sp,sp,20
    6ffc:	f800283a 	ret
    7000:	01400104 	movi	r5,4
    7004:	9809883a 	mov	r4,r19
    7008:	0006ea40 	call	6ea4 <__sfmoreglue>
    700c:	90800015 	stw	r2,0(r18)
    7010:	103fde1e 	bne	r2,zero,6f8c <__sfp+0x80>
    7014:	00800304 	movi	r2,12
    7018:	98800015 	stw	r2,0(r19)
    701c:	0005883a 	mov	r2,zero
    7020:	003ff006 	br	6fe4 <__sfp+0xd8>

00007024 <_cleanup>:
    7024:	008000b4 	movhi	r2,2
    7028:	10bf8104 	addi	r2,r2,-508
    702c:	11000017 	ldw	r4,0(r2)
    7030:	01400074 	movhi	r5,1
    7034:	29739904 	addi	r5,r5,-12700
    7038:	0007a401 	jmpi	7a40 <_fwalk_reent>

0000703c <__sinit>:
    703c:	20800e17 	ldw	r2,56(r4)
    7040:	10000126 	beq	r2,zero,7048 <__sinit+0xc>
    7044:	f800283a 	ret
    7048:	0006d001 	jmpi	6d00 <__sinit.part.1>

0000704c <__sfp_lock_acquire>:
    704c:	f800283a 	ret

00007050 <__sfp_lock_release>:
    7050:	f800283a 	ret

00007054 <__sinit_lock_acquire>:
    7054:	f800283a 	ret

00007058 <__sinit_lock_release>:
    7058:	f800283a 	ret

0000705c <__fp_lock_all>:
    705c:	008000b4 	movhi	r2,2
    7060:	10bf8204 	addi	r2,r2,-504
    7064:	11000017 	ldw	r4,0(r2)
    7068:	01400034 	movhi	r5,0
    706c:	295ba704 	addi	r5,r5,28316
    7070:	000797c1 	jmpi	797c <_fwalk>

00007074 <__fp_unlock_all>:
    7074:	008000b4 	movhi	r2,2
    7078:	10bf8204 	addi	r2,r2,-504
    707c:	11000017 	ldw	r4,0(r2)
    7080:	01400034 	movhi	r5,0
    7084:	295b3b04 	addi	r5,r5,27884
    7088:	000797c1 	jmpi	797c <_fwalk>

0000708c <_malloc_trim_r>:
    708c:	defffb04 	addi	sp,sp,-20
    7090:	dcc00315 	stw	r19,12(sp)
    7094:	04c000b4 	movhi	r19,2
    7098:	dc800215 	stw	r18,8(sp)
    709c:	dc400115 	stw	r17,4(sp)
    70a0:	dc000015 	stw	r16,0(sp)
    70a4:	dfc00415 	stw	ra,16(sp)
    70a8:	2821883a 	mov	r16,r5
    70ac:	9cf93704 	addi	r19,r19,-6948
    70b0:	2025883a 	mov	r18,r4
    70b4:	001134c0 	call	1134c <__malloc_lock>
    70b8:	98800217 	ldw	r2,8(r19)
    70bc:	14400117 	ldw	r17,4(r2)
    70c0:	00bfff04 	movi	r2,-4
    70c4:	88a2703a 	and	r17,r17,r2
    70c8:	8c21c83a 	sub	r16,r17,r16
    70cc:	8403fbc4 	addi	r16,r16,4079
    70d0:	8020d33a 	srli	r16,r16,12
    70d4:	0083ffc4 	movi	r2,4095
    70d8:	843fffc4 	addi	r16,r16,-1
    70dc:	8020933a 	slli	r16,r16,12
    70e0:	1400060e 	bge	r2,r16,70fc <_malloc_trim_r+0x70>
    70e4:	000b883a 	mov	r5,zero
    70e8:	9009883a 	mov	r4,r18
    70ec:	000a02c0 	call	a02c <_sbrk_r>
    70f0:	98c00217 	ldw	r3,8(r19)
    70f4:	1c47883a 	add	r3,r3,r17
    70f8:	10c00a26 	beq	r2,r3,7124 <_malloc_trim_r+0x98>
    70fc:	9009883a 	mov	r4,r18
    7100:	001146c0 	call	1146c <__malloc_unlock>
    7104:	0005883a 	mov	r2,zero
    7108:	dfc00417 	ldw	ra,16(sp)
    710c:	dcc00317 	ldw	r19,12(sp)
    7110:	dc800217 	ldw	r18,8(sp)
    7114:	dc400117 	ldw	r17,4(sp)
    7118:	dc000017 	ldw	r16,0(sp)
    711c:	dec00504 	addi	sp,sp,20
    7120:	f800283a 	ret
    7124:	040bc83a 	sub	r5,zero,r16
    7128:	9009883a 	mov	r4,r18
    712c:	000a02c0 	call	a02c <_sbrk_r>
    7130:	00ffffc4 	movi	r3,-1
    7134:	10c00d26 	beq	r2,r3,716c <_malloc_trim_r+0xe0>
    7138:	00c000b4 	movhi	r3,2
    713c:	18c78304 	addi	r3,r3,7692
    7140:	18800017 	ldw	r2,0(r3)
    7144:	99000217 	ldw	r4,8(r19)
    7148:	8c23c83a 	sub	r17,r17,r16
    714c:	8c400054 	ori	r17,r17,1
    7150:	1421c83a 	sub	r16,r2,r16
    7154:	24400115 	stw	r17,4(r4)
    7158:	9009883a 	mov	r4,r18
    715c:	1c000015 	stw	r16,0(r3)
    7160:	001146c0 	call	1146c <__malloc_unlock>
    7164:	00800044 	movi	r2,1
    7168:	003fe706 	br	7108 <_malloc_trim_r+0x7c>
    716c:	000b883a 	mov	r5,zero
    7170:	9009883a 	mov	r4,r18
    7174:	000a02c0 	call	a02c <_sbrk_r>
    7178:	99000217 	ldw	r4,8(r19)
    717c:	014003c4 	movi	r5,15
    7180:	1107c83a 	sub	r3,r2,r4
    7184:	28ffdd0e 	bge	r5,r3,70fc <_malloc_trim_r+0x70>
    7188:	014000b4 	movhi	r5,2
    718c:	297f8404 	addi	r5,r5,-496
    7190:	29400017 	ldw	r5,0(r5)
    7194:	18c00054 	ori	r3,r3,1
    7198:	20c00115 	stw	r3,4(r4)
    719c:	00c000b4 	movhi	r3,2
    71a0:	1145c83a 	sub	r2,r2,r5
    71a4:	18c78304 	addi	r3,r3,7692
    71a8:	18800015 	stw	r2,0(r3)
    71ac:	003fd306 	br	70fc <_malloc_trim_r+0x70>

000071b0 <_free_r>:
    71b0:	28004126 	beq	r5,zero,72b8 <_free_r+0x108>
    71b4:	defffd04 	addi	sp,sp,-12
    71b8:	dc400115 	stw	r17,4(sp)
    71bc:	dc000015 	stw	r16,0(sp)
    71c0:	2023883a 	mov	r17,r4
    71c4:	2821883a 	mov	r16,r5
    71c8:	dfc00215 	stw	ra,8(sp)
    71cc:	001134c0 	call	1134c <__malloc_lock>
    71d0:	81ffff17 	ldw	r7,-4(r16)
    71d4:	00bfff84 	movi	r2,-2
    71d8:	010000b4 	movhi	r4,2
    71dc:	81bffe04 	addi	r6,r16,-8
    71e0:	3884703a 	and	r2,r7,r2
    71e4:	21393704 	addi	r4,r4,-6948
    71e8:	308b883a 	add	r5,r6,r2
    71ec:	2a400117 	ldw	r9,4(r5)
    71f0:	22000217 	ldw	r8,8(r4)
    71f4:	00ffff04 	movi	r3,-4
    71f8:	48c6703a 	and	r3,r9,r3
    71fc:	2a005726 	beq	r5,r8,735c <_free_r+0x1ac>
    7200:	28c00115 	stw	r3,4(r5)
    7204:	39c0004c 	andi	r7,r7,1
    7208:	3800091e 	bne	r7,zero,7230 <_free_r+0x80>
    720c:	823ffe17 	ldw	r8,-8(r16)
    7210:	22400204 	addi	r9,r4,8
    7214:	320dc83a 	sub	r6,r6,r8
    7218:	31c00217 	ldw	r7,8(r6)
    721c:	1205883a 	add	r2,r2,r8
    7220:	3a406526 	beq	r7,r9,73b8 <_free_r+0x208>
    7224:	32000317 	ldw	r8,12(r6)
    7228:	3a000315 	stw	r8,12(r7)
    722c:	41c00215 	stw	r7,8(r8)
    7230:	28cf883a 	add	r7,r5,r3
    7234:	39c00117 	ldw	r7,4(r7)
    7238:	39c0004c 	andi	r7,r7,1
    723c:	38003a26 	beq	r7,zero,7328 <_free_r+0x178>
    7240:	10c00054 	ori	r3,r2,1
    7244:	30c00115 	stw	r3,4(r6)
    7248:	3087883a 	add	r3,r6,r2
    724c:	18800015 	stw	r2,0(r3)
    7250:	00c07fc4 	movi	r3,511
    7254:	18801936 	bltu	r3,r2,72bc <_free_r+0x10c>
    7258:	1004d0fa 	srli	r2,r2,3
    725c:	01c00044 	movi	r7,1
    7260:	21400117 	ldw	r5,4(r4)
    7264:	10c00044 	addi	r3,r2,1
    7268:	18c7883a 	add	r3,r3,r3
    726c:	1005d0ba 	srai	r2,r2,2
    7270:	18c7883a 	add	r3,r3,r3
    7274:	18c7883a 	add	r3,r3,r3
    7278:	1907883a 	add	r3,r3,r4
    727c:	3884983a 	sll	r2,r7,r2
    7280:	19c00017 	ldw	r7,0(r3)
    7284:	1a3ffe04 	addi	r8,r3,-8
    7288:	1144b03a 	or	r2,r2,r5
    728c:	32000315 	stw	r8,12(r6)
    7290:	31c00215 	stw	r7,8(r6)
    7294:	20800115 	stw	r2,4(r4)
    7298:	19800015 	stw	r6,0(r3)
    729c:	39800315 	stw	r6,12(r7)
    72a0:	8809883a 	mov	r4,r17
    72a4:	dfc00217 	ldw	ra,8(sp)
    72a8:	dc400117 	ldw	r17,4(sp)
    72ac:	dc000017 	ldw	r16,0(sp)
    72b0:	dec00304 	addi	sp,sp,12
    72b4:	001146c1 	jmpi	1146c <__malloc_unlock>
    72b8:	f800283a 	ret
    72bc:	100ad27a 	srli	r5,r2,9
    72c0:	00c00104 	movi	r3,4
    72c4:	19404a36 	bltu	r3,r5,73f0 <_free_r+0x240>
    72c8:	100ad1ba 	srli	r5,r2,6
    72cc:	28c00e44 	addi	r3,r5,57
    72d0:	18c7883a 	add	r3,r3,r3
    72d4:	29400e04 	addi	r5,r5,56
    72d8:	18c7883a 	add	r3,r3,r3
    72dc:	18c7883a 	add	r3,r3,r3
    72e0:	1909883a 	add	r4,r3,r4
    72e4:	20c00017 	ldw	r3,0(r4)
    72e8:	01c000b4 	movhi	r7,2
    72ec:	213ffe04 	addi	r4,r4,-8
    72f0:	39f93704 	addi	r7,r7,-6948
    72f4:	20c04426 	beq	r4,r3,7408 <_free_r+0x258>
    72f8:	01ffff04 	movi	r7,-4
    72fc:	19400117 	ldw	r5,4(r3)
    7300:	29ca703a 	and	r5,r5,r7
    7304:	1140022e 	bgeu	r2,r5,7310 <_free_r+0x160>
    7308:	18c00217 	ldw	r3,8(r3)
    730c:	20fffb1e 	bne	r4,r3,72fc <_free_r+0x14c>
    7310:	19000317 	ldw	r4,12(r3)
    7314:	31000315 	stw	r4,12(r6)
    7318:	30c00215 	stw	r3,8(r6)
    731c:	21800215 	stw	r6,8(r4)
    7320:	19800315 	stw	r6,12(r3)
    7324:	003fde06 	br	72a0 <_free_r+0xf0>
    7328:	29c00217 	ldw	r7,8(r5)
    732c:	10c5883a 	add	r2,r2,r3
    7330:	00c000b4 	movhi	r3,2
    7334:	18f93904 	addi	r3,r3,-6940
    7338:	38c03b26 	beq	r7,r3,7428 <_free_r+0x278>
    733c:	2a000317 	ldw	r8,12(r5)
    7340:	11400054 	ori	r5,r2,1
    7344:	3087883a 	add	r3,r6,r2
    7348:	3a000315 	stw	r8,12(r7)
    734c:	41c00215 	stw	r7,8(r8)
    7350:	31400115 	stw	r5,4(r6)
    7354:	18800015 	stw	r2,0(r3)
    7358:	003fbd06 	br	7250 <_free_r+0xa0>
    735c:	39c0004c 	andi	r7,r7,1
    7360:	10c5883a 	add	r2,r2,r3
    7364:	3800071e 	bne	r7,zero,7384 <_free_r+0x1d4>
    7368:	81fffe17 	ldw	r7,-8(r16)
    736c:	31cdc83a 	sub	r6,r6,r7
    7370:	30c00317 	ldw	r3,12(r6)
    7374:	31400217 	ldw	r5,8(r6)
    7378:	11c5883a 	add	r2,r2,r7
    737c:	28c00315 	stw	r3,12(r5)
    7380:	19400215 	stw	r5,8(r3)
    7384:	10c00054 	ori	r3,r2,1
    7388:	30c00115 	stw	r3,4(r6)
    738c:	00c000b4 	movhi	r3,2
    7390:	18ff8504 	addi	r3,r3,-492
    7394:	18c00017 	ldw	r3,0(r3)
    7398:	21800215 	stw	r6,8(r4)
    739c:	10ffc036 	bltu	r2,r3,72a0 <_free_r+0xf0>
    73a0:	008000b4 	movhi	r2,2
    73a4:	10876104 	addi	r2,r2,7556
    73a8:	11400017 	ldw	r5,0(r2)
    73ac:	8809883a 	mov	r4,r17
    73b0:	000708c0 	call	708c <_malloc_trim_r>
    73b4:	003fba06 	br	72a0 <_free_r+0xf0>
    73b8:	28c9883a 	add	r4,r5,r3
    73bc:	21000117 	ldw	r4,4(r4)
    73c0:	2100004c 	andi	r4,r4,1
    73c4:	2000391e 	bne	r4,zero,74ac <_free_r+0x2fc>
    73c8:	29c00217 	ldw	r7,8(r5)
    73cc:	29000317 	ldw	r4,12(r5)
    73d0:	1885883a 	add	r2,r3,r2
    73d4:	10c00054 	ori	r3,r2,1
    73d8:	39000315 	stw	r4,12(r7)
    73dc:	21c00215 	stw	r7,8(r4)
    73e0:	30c00115 	stw	r3,4(r6)
    73e4:	308d883a 	add	r6,r6,r2
    73e8:	30800015 	stw	r2,0(r6)
    73ec:	003fac06 	br	72a0 <_free_r+0xf0>
    73f0:	00c00504 	movi	r3,20
    73f4:	19401536 	bltu	r3,r5,744c <_free_r+0x29c>
    73f8:	28c01704 	addi	r3,r5,92
    73fc:	18c7883a 	add	r3,r3,r3
    7400:	294016c4 	addi	r5,r5,91
    7404:	003fb406 	br	72d8 <_free_r+0x128>
    7408:	280bd0ba 	srai	r5,r5,2
    740c:	00c00044 	movi	r3,1
    7410:	38800117 	ldw	r2,4(r7)
    7414:	194a983a 	sll	r5,r3,r5
    7418:	2007883a 	mov	r3,r4
    741c:	2884b03a 	or	r2,r5,r2
    7420:	38800115 	stw	r2,4(r7)
    7424:	003fbb06 	br	7314 <_free_r+0x164>
    7428:	21800515 	stw	r6,20(r4)
    742c:	21800415 	stw	r6,16(r4)
    7430:	10c00054 	ori	r3,r2,1
    7434:	31c00315 	stw	r7,12(r6)
    7438:	31c00215 	stw	r7,8(r6)
    743c:	30c00115 	stw	r3,4(r6)
    7440:	308d883a 	add	r6,r6,r2
    7444:	30800015 	stw	r2,0(r6)
    7448:	003f9506 	br	72a0 <_free_r+0xf0>
    744c:	00c01504 	movi	r3,84
    7450:	19400536 	bltu	r3,r5,7468 <_free_r+0x2b8>
    7454:	100ad33a 	srli	r5,r2,12
    7458:	28c01bc4 	addi	r3,r5,111
    745c:	18c7883a 	add	r3,r3,r3
    7460:	29401b84 	addi	r5,r5,110
    7464:	003f9c06 	br	72d8 <_free_r+0x128>
    7468:	00c05504 	movi	r3,340
    746c:	19400536 	bltu	r3,r5,7484 <_free_r+0x2d4>
    7470:	100ad3fa 	srli	r5,r2,15
    7474:	28c01e04 	addi	r3,r5,120
    7478:	18c7883a 	add	r3,r3,r3
    747c:	29401dc4 	addi	r5,r5,119
    7480:	003f9506 	br	72d8 <_free_r+0x128>
    7484:	00c15504 	movi	r3,1364
    7488:	19400536 	bltu	r3,r5,74a0 <_free_r+0x2f0>
    748c:	100ad4ba 	srli	r5,r2,18
    7490:	28c01f44 	addi	r3,r5,125
    7494:	18c7883a 	add	r3,r3,r3
    7498:	29401f04 	addi	r5,r5,124
    749c:	003f8e06 	br	72d8 <_free_r+0x128>
    74a0:	00c03f84 	movi	r3,254
    74a4:	01401f84 	movi	r5,126
    74a8:	003f8b06 	br	72d8 <_free_r+0x128>
    74ac:	10c00054 	ori	r3,r2,1
    74b0:	30c00115 	stw	r3,4(r6)
    74b4:	308d883a 	add	r6,r6,r2
    74b8:	30800015 	stw	r2,0(r6)
    74bc:	003f7806 	br	72a0 <_free_r+0xf0>

000074c0 <__sfvwrite_r>:
    74c0:	30800217 	ldw	r2,8(r6)
    74c4:	10006726 	beq	r2,zero,7664 <__sfvwrite_r+0x1a4>
    74c8:	28c0030b 	ldhu	r3,12(r5)
    74cc:	defff404 	addi	sp,sp,-48
    74d0:	dd400715 	stw	r21,28(sp)
    74d4:	dd000615 	stw	r20,24(sp)
    74d8:	dc000215 	stw	r16,8(sp)
    74dc:	dfc00b15 	stw	ra,44(sp)
    74e0:	df000a15 	stw	fp,40(sp)
    74e4:	ddc00915 	stw	r23,36(sp)
    74e8:	dd800815 	stw	r22,32(sp)
    74ec:	dcc00515 	stw	r19,20(sp)
    74f0:	dc800415 	stw	r18,16(sp)
    74f4:	dc400315 	stw	r17,12(sp)
    74f8:	1880020c 	andi	r2,r3,8
    74fc:	2821883a 	mov	r16,r5
    7500:	202b883a 	mov	r21,r4
    7504:	3029883a 	mov	r20,r6
    7508:	10002726 	beq	r2,zero,75a8 <__sfvwrite_r+0xe8>
    750c:	28800417 	ldw	r2,16(r5)
    7510:	10002526 	beq	r2,zero,75a8 <__sfvwrite_r+0xe8>
    7514:	1880008c 	andi	r2,r3,2
    7518:	a4400017 	ldw	r17,0(r20)
    751c:	10002a26 	beq	r2,zero,75c8 <__sfvwrite_r+0x108>
    7520:	05a00034 	movhi	r22,32768
    7524:	0027883a 	mov	r19,zero
    7528:	0025883a 	mov	r18,zero
    752c:	b5bf0004 	addi	r22,r22,-1024
    7530:	980d883a 	mov	r6,r19
    7534:	a809883a 	mov	r4,r21
    7538:	90004626 	beq	r18,zero,7654 <__sfvwrite_r+0x194>
    753c:	900f883a 	mov	r7,r18
    7540:	b480022e 	bgeu	r22,r18,754c <__sfvwrite_r+0x8c>
    7544:	01e00034 	movhi	r7,32768
    7548:	39ff0004 	addi	r7,r7,-1024
    754c:	80800917 	ldw	r2,36(r16)
    7550:	81400717 	ldw	r5,28(r16)
    7554:	103ee83a 	callr	r2
    7558:	0080570e 	bge	zero,r2,76b8 <__sfvwrite_r+0x1f8>
    755c:	a0c00217 	ldw	r3,8(r20)
    7560:	98a7883a 	add	r19,r19,r2
    7564:	90a5c83a 	sub	r18,r18,r2
    7568:	1885c83a 	sub	r2,r3,r2
    756c:	a0800215 	stw	r2,8(r20)
    7570:	103fef1e 	bne	r2,zero,7530 <__sfvwrite_r+0x70>
    7574:	0005883a 	mov	r2,zero
    7578:	dfc00b17 	ldw	ra,44(sp)
    757c:	df000a17 	ldw	fp,40(sp)
    7580:	ddc00917 	ldw	r23,36(sp)
    7584:	dd800817 	ldw	r22,32(sp)
    7588:	dd400717 	ldw	r21,28(sp)
    758c:	dd000617 	ldw	r20,24(sp)
    7590:	dcc00517 	ldw	r19,20(sp)
    7594:	dc800417 	ldw	r18,16(sp)
    7598:	dc400317 	ldw	r17,12(sp)
    759c:	dc000217 	ldw	r16,8(sp)
    75a0:	dec00c04 	addi	sp,sp,48
    75a4:	f800283a 	ret
    75a8:	800b883a 	mov	r5,r16
    75ac:	a809883a 	mov	r4,r21
    75b0:	00050680 	call	5068 <__swsetup_r>
    75b4:	1000eb1e 	bne	r2,zero,7964 <__sfvwrite_r+0x4a4>
    75b8:	80c0030b 	ldhu	r3,12(r16)
    75bc:	a4400017 	ldw	r17,0(r20)
    75c0:	1880008c 	andi	r2,r3,2
    75c4:	103fd61e 	bne	r2,zero,7520 <__sfvwrite_r+0x60>
    75c8:	1880004c 	andi	r2,r3,1
    75cc:	10003f1e 	bne	r2,zero,76cc <__sfvwrite_r+0x20c>
    75d0:	0039883a 	mov	fp,zero
    75d4:	0025883a 	mov	r18,zero
    75d8:	90001a26 	beq	r18,zero,7644 <__sfvwrite_r+0x184>
    75dc:	1880800c 	andi	r2,r3,512
    75e0:	84c00217 	ldw	r19,8(r16)
    75e4:	10002126 	beq	r2,zero,766c <__sfvwrite_r+0x1ac>
    75e8:	982f883a 	mov	r23,r19
    75ec:	94c09336 	bltu	r18,r19,783c <__sfvwrite_r+0x37c>
    75f0:	1881200c 	andi	r2,r3,1152
    75f4:	10009e1e 	bne	r2,zero,7870 <__sfvwrite_r+0x3b0>
    75f8:	81000017 	ldw	r4,0(r16)
    75fc:	b80d883a 	mov	r6,r23
    7600:	e00b883a 	mov	r5,fp
    7604:	00087d40 	call	87d4 <memmove>
    7608:	80c00217 	ldw	r3,8(r16)
    760c:	81000017 	ldw	r4,0(r16)
    7610:	9005883a 	mov	r2,r18
    7614:	1ce7c83a 	sub	r19,r3,r19
    7618:	25cf883a 	add	r7,r4,r23
    761c:	84c00215 	stw	r19,8(r16)
    7620:	81c00015 	stw	r7,0(r16)
    7624:	a0c00217 	ldw	r3,8(r20)
    7628:	e0b9883a 	add	fp,fp,r2
    762c:	90a5c83a 	sub	r18,r18,r2
    7630:	18a7c83a 	sub	r19,r3,r2
    7634:	a4c00215 	stw	r19,8(r20)
    7638:	983fce26 	beq	r19,zero,7574 <__sfvwrite_r+0xb4>
    763c:	80c0030b 	ldhu	r3,12(r16)
    7640:	903fe61e 	bne	r18,zero,75dc <__sfvwrite_r+0x11c>
    7644:	8f000017 	ldw	fp,0(r17)
    7648:	8c800117 	ldw	r18,4(r17)
    764c:	8c400204 	addi	r17,r17,8
    7650:	003fe106 	br	75d8 <__sfvwrite_r+0x118>
    7654:	8cc00017 	ldw	r19,0(r17)
    7658:	8c800117 	ldw	r18,4(r17)
    765c:	8c400204 	addi	r17,r17,8
    7660:	003fb306 	br	7530 <__sfvwrite_r+0x70>
    7664:	0005883a 	mov	r2,zero
    7668:	f800283a 	ret
    766c:	81000017 	ldw	r4,0(r16)
    7670:	80800417 	ldw	r2,16(r16)
    7674:	11005736 	bltu	r2,r4,77d4 <__sfvwrite_r+0x314>
    7678:	85c00517 	ldw	r23,20(r16)
    767c:	95c05536 	bltu	r18,r23,77d4 <__sfvwrite_r+0x314>
    7680:	00a00034 	movhi	r2,32768
    7684:	10bfffc4 	addi	r2,r2,-1
    7688:	9009883a 	mov	r4,r18
    768c:	1480012e 	bgeu	r2,r18,7694 <__sfvwrite_r+0x1d4>
    7690:	1009883a 	mov	r4,r2
    7694:	b80b883a 	mov	r5,r23
    7698:	000e0d00 	call	e0d0 <__divsi3>
    769c:	15cf383a 	mul	r7,r2,r23
    76a0:	81400717 	ldw	r5,28(r16)
    76a4:	80800917 	ldw	r2,36(r16)
    76a8:	e00d883a 	mov	r6,fp
    76ac:	a809883a 	mov	r4,r21
    76b0:	103ee83a 	callr	r2
    76b4:	00bfdb16 	blt	zero,r2,7624 <__sfvwrite_r+0x164>
    76b8:	8080030b 	ldhu	r2,12(r16)
    76bc:	10801014 	ori	r2,r2,64
    76c0:	8080030d 	sth	r2,12(r16)
    76c4:	00bfffc4 	movi	r2,-1
    76c8:	003fab06 	br	7578 <__sfvwrite_r+0xb8>
    76cc:	0027883a 	mov	r19,zero
    76d0:	0011883a 	mov	r8,zero
    76d4:	0039883a 	mov	fp,zero
    76d8:	0025883a 	mov	r18,zero
    76dc:	90001f26 	beq	r18,zero,775c <__sfvwrite_r+0x29c>
    76e0:	40005a26 	beq	r8,zero,784c <__sfvwrite_r+0x38c>
    76e4:	982d883a 	mov	r22,r19
    76e8:	94c0012e 	bgeu	r18,r19,76f0 <__sfvwrite_r+0x230>
    76ec:	902d883a 	mov	r22,r18
    76f0:	81000017 	ldw	r4,0(r16)
    76f4:	80800417 	ldw	r2,16(r16)
    76f8:	b02f883a 	mov	r23,r22
    76fc:	81c00517 	ldw	r7,20(r16)
    7700:	1100032e 	bgeu	r2,r4,7710 <__sfvwrite_r+0x250>
    7704:	80c00217 	ldw	r3,8(r16)
    7708:	38c7883a 	add	r3,r7,r3
    770c:	1d801816 	blt	r3,r22,7770 <__sfvwrite_r+0x2b0>
    7710:	b1c03e16 	blt	r22,r7,780c <__sfvwrite_r+0x34c>
    7714:	80800917 	ldw	r2,36(r16)
    7718:	81400717 	ldw	r5,28(r16)
    771c:	e00d883a 	mov	r6,fp
    7720:	da000115 	stw	r8,4(sp)
    7724:	a809883a 	mov	r4,r21
    7728:	103ee83a 	callr	r2
    772c:	102f883a 	mov	r23,r2
    7730:	da000117 	ldw	r8,4(sp)
    7734:	00bfe00e 	bge	zero,r2,76b8 <__sfvwrite_r+0x1f8>
    7738:	9de7c83a 	sub	r19,r19,r23
    773c:	98001f26 	beq	r19,zero,77bc <__sfvwrite_r+0x2fc>
    7740:	a0800217 	ldw	r2,8(r20)
    7744:	e5f9883a 	add	fp,fp,r23
    7748:	95e5c83a 	sub	r18,r18,r23
    774c:	15efc83a 	sub	r23,r2,r23
    7750:	a5c00215 	stw	r23,8(r20)
    7754:	b83f8726 	beq	r23,zero,7574 <__sfvwrite_r+0xb4>
    7758:	903fe11e 	bne	r18,zero,76e0 <__sfvwrite_r+0x220>
    775c:	8f000017 	ldw	fp,0(r17)
    7760:	8c800117 	ldw	r18,4(r17)
    7764:	0011883a 	mov	r8,zero
    7768:	8c400204 	addi	r17,r17,8
    776c:	003fdb06 	br	76dc <__sfvwrite_r+0x21c>
    7770:	180d883a 	mov	r6,r3
    7774:	e00b883a 	mov	r5,fp
    7778:	da000115 	stw	r8,4(sp)
    777c:	d8c00015 	stw	r3,0(sp)
    7780:	00087d40 	call	87d4 <memmove>
    7784:	d8c00017 	ldw	r3,0(sp)
    7788:	80800017 	ldw	r2,0(r16)
    778c:	800b883a 	mov	r5,r16
    7790:	a809883a 	mov	r4,r21
    7794:	10c5883a 	add	r2,r2,r3
    7798:	80800015 	stw	r2,0(r16)
    779c:	d8c00015 	stw	r3,0(sp)
    77a0:	0006c600 	call	6c60 <_fflush_r>
    77a4:	d8c00017 	ldw	r3,0(sp)
    77a8:	da000117 	ldw	r8,4(sp)
    77ac:	103fc21e 	bne	r2,zero,76b8 <__sfvwrite_r+0x1f8>
    77b0:	182f883a 	mov	r23,r3
    77b4:	9de7c83a 	sub	r19,r19,r23
    77b8:	983fe11e 	bne	r19,zero,7740 <__sfvwrite_r+0x280>
    77bc:	800b883a 	mov	r5,r16
    77c0:	a809883a 	mov	r4,r21
    77c4:	0006c600 	call	6c60 <_fflush_r>
    77c8:	103fbb1e 	bne	r2,zero,76b8 <__sfvwrite_r+0x1f8>
    77cc:	0011883a 	mov	r8,zero
    77d0:	003fdb06 	br	7740 <__sfvwrite_r+0x280>
    77d4:	94c0012e 	bgeu	r18,r19,77dc <__sfvwrite_r+0x31c>
    77d8:	9027883a 	mov	r19,r18
    77dc:	980d883a 	mov	r6,r19
    77e0:	e00b883a 	mov	r5,fp
    77e4:	00087d40 	call	87d4 <memmove>
    77e8:	80800217 	ldw	r2,8(r16)
    77ec:	80c00017 	ldw	r3,0(r16)
    77f0:	14c5c83a 	sub	r2,r2,r19
    77f4:	1cc7883a 	add	r3,r3,r19
    77f8:	80800215 	stw	r2,8(r16)
    77fc:	80c00015 	stw	r3,0(r16)
    7800:	10004326 	beq	r2,zero,7910 <__sfvwrite_r+0x450>
    7804:	9805883a 	mov	r2,r19
    7808:	003f8606 	br	7624 <__sfvwrite_r+0x164>
    780c:	b00d883a 	mov	r6,r22
    7810:	e00b883a 	mov	r5,fp
    7814:	da000115 	stw	r8,4(sp)
    7818:	00087d40 	call	87d4 <memmove>
    781c:	80800217 	ldw	r2,8(r16)
    7820:	80c00017 	ldw	r3,0(r16)
    7824:	da000117 	ldw	r8,4(sp)
    7828:	1585c83a 	sub	r2,r2,r22
    782c:	1dad883a 	add	r22,r3,r22
    7830:	80800215 	stw	r2,8(r16)
    7834:	85800015 	stw	r22,0(r16)
    7838:	003fbf06 	br	7738 <__sfvwrite_r+0x278>
    783c:	81000017 	ldw	r4,0(r16)
    7840:	9027883a 	mov	r19,r18
    7844:	902f883a 	mov	r23,r18
    7848:	003f6c06 	br	75fc <__sfvwrite_r+0x13c>
    784c:	900d883a 	mov	r6,r18
    7850:	01400284 	movi	r5,10
    7854:	e009883a 	mov	r4,fp
    7858:	00085a80 	call	85a8 <memchr>
    785c:	10003e26 	beq	r2,zero,7958 <__sfvwrite_r+0x498>
    7860:	10800044 	addi	r2,r2,1
    7864:	1727c83a 	sub	r19,r2,fp
    7868:	02000044 	movi	r8,1
    786c:	003f9d06 	br	76e4 <__sfvwrite_r+0x224>
    7870:	80800517 	ldw	r2,20(r16)
    7874:	81400417 	ldw	r5,16(r16)
    7878:	81c00017 	ldw	r7,0(r16)
    787c:	10a7883a 	add	r19,r2,r2
    7880:	9885883a 	add	r2,r19,r2
    7884:	1026d7fa 	srli	r19,r2,31
    7888:	396dc83a 	sub	r22,r7,r5
    788c:	b1000044 	addi	r4,r22,1
    7890:	9885883a 	add	r2,r19,r2
    7894:	1027d07a 	srai	r19,r2,1
    7898:	2485883a 	add	r2,r4,r18
    789c:	980d883a 	mov	r6,r19
    78a0:	9880022e 	bgeu	r19,r2,78ac <__sfvwrite_r+0x3ec>
    78a4:	1027883a 	mov	r19,r2
    78a8:	100d883a 	mov	r6,r2
    78ac:	18c1000c 	andi	r3,r3,1024
    78b0:	18001c26 	beq	r3,zero,7924 <__sfvwrite_r+0x464>
    78b4:	300b883a 	mov	r5,r6
    78b8:	a809883a 	mov	r4,r21
    78bc:	0007d9c0 	call	7d9c <_malloc_r>
    78c0:	102f883a 	mov	r23,r2
    78c4:	10002926 	beq	r2,zero,796c <__sfvwrite_r+0x4ac>
    78c8:	81400417 	ldw	r5,16(r16)
    78cc:	b00d883a 	mov	r6,r22
    78d0:	1009883a 	mov	r4,r2
    78d4:	000868c0 	call	868c <memcpy>
    78d8:	8080030b 	ldhu	r2,12(r16)
    78dc:	00fedfc4 	movi	r3,-1153
    78e0:	10c4703a 	and	r2,r2,r3
    78e4:	10802014 	ori	r2,r2,128
    78e8:	8080030d 	sth	r2,12(r16)
    78ec:	bd89883a 	add	r4,r23,r22
    78f0:	9d8fc83a 	sub	r7,r19,r22
    78f4:	85c00415 	stw	r23,16(r16)
    78f8:	84c00515 	stw	r19,20(r16)
    78fc:	81000015 	stw	r4,0(r16)
    7900:	9027883a 	mov	r19,r18
    7904:	81c00215 	stw	r7,8(r16)
    7908:	902f883a 	mov	r23,r18
    790c:	003f3b06 	br	75fc <__sfvwrite_r+0x13c>
    7910:	800b883a 	mov	r5,r16
    7914:	a809883a 	mov	r4,r21
    7918:	0006c600 	call	6c60 <_fflush_r>
    791c:	103fb926 	beq	r2,zero,7804 <__sfvwrite_r+0x344>
    7920:	003f6506 	br	76b8 <__sfvwrite_r+0x1f8>
    7924:	a809883a 	mov	r4,r21
    7928:	0009a540 	call	9a54 <_realloc_r>
    792c:	102f883a 	mov	r23,r2
    7930:	103fee1e 	bne	r2,zero,78ec <__sfvwrite_r+0x42c>
    7934:	81400417 	ldw	r5,16(r16)
    7938:	a809883a 	mov	r4,r21
    793c:	00071b00 	call	71b0 <_free_r>
    7940:	8080030b 	ldhu	r2,12(r16)
    7944:	00ffdfc4 	movi	r3,-129
    7948:	1884703a 	and	r2,r3,r2
    794c:	00c00304 	movi	r3,12
    7950:	a8c00015 	stw	r3,0(r21)
    7954:	003f5906 	br	76bc <__sfvwrite_r+0x1fc>
    7958:	94c00044 	addi	r19,r18,1
    795c:	02000044 	movi	r8,1
    7960:	003f6006 	br	76e4 <__sfvwrite_r+0x224>
    7964:	00bfffc4 	movi	r2,-1
    7968:	003f0306 	br	7578 <__sfvwrite_r+0xb8>
    796c:	00800304 	movi	r2,12
    7970:	a8800015 	stw	r2,0(r21)
    7974:	8080030b 	ldhu	r2,12(r16)
    7978:	003f5006 	br	76bc <__sfvwrite_r+0x1fc>

0000797c <_fwalk>:
    797c:	defff704 	addi	sp,sp,-36
    7980:	dd000415 	stw	r20,16(sp)
    7984:	dfc00815 	stw	ra,32(sp)
    7988:	ddc00715 	stw	r23,28(sp)
    798c:	dd800615 	stw	r22,24(sp)
    7990:	dd400515 	stw	r21,20(sp)
    7994:	dcc00315 	stw	r19,12(sp)
    7998:	dc800215 	stw	r18,8(sp)
    799c:	dc400115 	stw	r17,4(sp)
    79a0:	dc000015 	stw	r16,0(sp)
    79a4:	2500b804 	addi	r20,r4,736
    79a8:	a0002326 	beq	r20,zero,7a38 <_fwalk+0xbc>
    79ac:	282b883a 	mov	r21,r5
    79b0:	002f883a 	mov	r23,zero
    79b4:	05800044 	movi	r22,1
    79b8:	04ffffc4 	movi	r19,-1
    79bc:	a4400117 	ldw	r17,4(r20)
    79c0:	a4800217 	ldw	r18,8(r20)
    79c4:	8c7fffc4 	addi	r17,r17,-1
    79c8:	88000d16 	blt	r17,zero,7a00 <_fwalk+0x84>
    79cc:	94000304 	addi	r16,r18,12
    79d0:	94800384 	addi	r18,r18,14
    79d4:	8080000b 	ldhu	r2,0(r16)
    79d8:	8c7fffc4 	addi	r17,r17,-1
    79dc:	813ffd04 	addi	r4,r16,-12
    79e0:	b080042e 	bgeu	r22,r2,79f4 <_fwalk+0x78>
    79e4:	9080000f 	ldh	r2,0(r18)
    79e8:	14c00226 	beq	r2,r19,79f4 <_fwalk+0x78>
    79ec:	a83ee83a 	callr	r21
    79f0:	b8aeb03a 	or	r23,r23,r2
    79f4:	84001a04 	addi	r16,r16,104
    79f8:	94801a04 	addi	r18,r18,104
    79fc:	8cfff51e 	bne	r17,r19,79d4 <_fwalk+0x58>
    7a00:	a5000017 	ldw	r20,0(r20)
    7a04:	a03fed1e 	bne	r20,zero,79bc <_fwalk+0x40>
    7a08:	b805883a 	mov	r2,r23
    7a0c:	dfc00817 	ldw	ra,32(sp)
    7a10:	ddc00717 	ldw	r23,28(sp)
    7a14:	dd800617 	ldw	r22,24(sp)
    7a18:	dd400517 	ldw	r21,20(sp)
    7a1c:	dd000417 	ldw	r20,16(sp)
    7a20:	dcc00317 	ldw	r19,12(sp)
    7a24:	dc800217 	ldw	r18,8(sp)
    7a28:	dc400117 	ldw	r17,4(sp)
    7a2c:	dc000017 	ldw	r16,0(sp)
    7a30:	dec00904 	addi	sp,sp,36
    7a34:	f800283a 	ret
    7a38:	002f883a 	mov	r23,zero
    7a3c:	003ff206 	br	7a08 <_fwalk+0x8c>

00007a40 <_fwalk_reent>:
    7a40:	defff704 	addi	sp,sp,-36
    7a44:	dd000415 	stw	r20,16(sp)
    7a48:	dfc00815 	stw	ra,32(sp)
    7a4c:	ddc00715 	stw	r23,28(sp)
    7a50:	dd800615 	stw	r22,24(sp)
    7a54:	dd400515 	stw	r21,20(sp)
    7a58:	dcc00315 	stw	r19,12(sp)
    7a5c:	dc800215 	stw	r18,8(sp)
    7a60:	dc400115 	stw	r17,4(sp)
    7a64:	dc000015 	stw	r16,0(sp)
    7a68:	2500b804 	addi	r20,r4,736
    7a6c:	a0002326 	beq	r20,zero,7afc <_fwalk_reent+0xbc>
    7a70:	282b883a 	mov	r21,r5
    7a74:	2027883a 	mov	r19,r4
    7a78:	002f883a 	mov	r23,zero
    7a7c:	05800044 	movi	r22,1
    7a80:	04bfffc4 	movi	r18,-1
    7a84:	a4400117 	ldw	r17,4(r20)
    7a88:	a4000217 	ldw	r16,8(r20)
    7a8c:	8c7fffc4 	addi	r17,r17,-1
    7a90:	88000c16 	blt	r17,zero,7ac4 <_fwalk_reent+0x84>
    7a94:	84000304 	addi	r16,r16,12
    7a98:	8080000b 	ldhu	r2,0(r16)
    7a9c:	8c7fffc4 	addi	r17,r17,-1
    7aa0:	817ffd04 	addi	r5,r16,-12
    7aa4:	b080052e 	bgeu	r22,r2,7abc <_fwalk_reent+0x7c>
    7aa8:	8080008f 	ldh	r2,2(r16)
    7aac:	9809883a 	mov	r4,r19
    7ab0:	14800226 	beq	r2,r18,7abc <_fwalk_reent+0x7c>
    7ab4:	a83ee83a 	callr	r21
    7ab8:	b8aeb03a 	or	r23,r23,r2
    7abc:	84001a04 	addi	r16,r16,104
    7ac0:	8cbff51e 	bne	r17,r18,7a98 <_fwalk_reent+0x58>
    7ac4:	a5000017 	ldw	r20,0(r20)
    7ac8:	a03fee1e 	bne	r20,zero,7a84 <_fwalk_reent+0x44>
    7acc:	b805883a 	mov	r2,r23
    7ad0:	dfc00817 	ldw	ra,32(sp)
    7ad4:	ddc00717 	ldw	r23,28(sp)
    7ad8:	dd800617 	ldw	r22,24(sp)
    7adc:	dd400517 	ldw	r21,20(sp)
    7ae0:	dd000417 	ldw	r20,16(sp)
    7ae4:	dcc00317 	ldw	r19,12(sp)
    7ae8:	dc800217 	ldw	r18,8(sp)
    7aec:	dc400117 	ldw	r17,4(sp)
    7af0:	dc000017 	ldw	r16,0(sp)
    7af4:	dec00904 	addi	sp,sp,36
    7af8:	f800283a 	ret
    7afc:	002f883a 	mov	r23,zero
    7b00:	003ff206 	br	7acc <_fwalk_reent+0x8c>

00007b04 <_setlocale_r>:
    7b04:	30001b26 	beq	r6,zero,7b74 <_setlocale_r+0x70>
    7b08:	014000b4 	movhi	r5,2
    7b0c:	defffe04 	addi	sp,sp,-8
    7b10:	2976cd04 	addi	r5,r5,-9420
    7b14:	3009883a 	mov	r4,r6
    7b18:	dc000015 	stw	r16,0(sp)
    7b1c:	dfc00115 	stw	ra,4(sp)
    7b20:	3021883a 	mov	r16,r6
    7b24:	000a1bc0 	call	a1bc <strcmp>
    7b28:	1000061e 	bne	r2,zero,7b44 <_setlocale_r+0x40>
    7b2c:	008000b4 	movhi	r2,2
    7b30:	10b6cc04 	addi	r2,r2,-9424
    7b34:	dfc00117 	ldw	ra,4(sp)
    7b38:	dc000017 	ldw	r16,0(sp)
    7b3c:	dec00204 	addi	sp,sp,8
    7b40:	f800283a 	ret
    7b44:	014000b4 	movhi	r5,2
    7b48:	2976cc04 	addi	r5,r5,-9424
    7b4c:	8009883a 	mov	r4,r16
    7b50:	000a1bc0 	call	a1bc <strcmp>
    7b54:	103ff526 	beq	r2,zero,7b2c <_setlocale_r+0x28>
    7b58:	014000b4 	movhi	r5,2
    7b5c:	2976af04 	addi	r5,r5,-9540
    7b60:	8009883a 	mov	r4,r16
    7b64:	000a1bc0 	call	a1bc <strcmp>
    7b68:	103ff026 	beq	r2,zero,7b2c <_setlocale_r+0x28>
    7b6c:	0005883a 	mov	r2,zero
    7b70:	003ff006 	br	7b34 <_setlocale_r+0x30>
    7b74:	008000b4 	movhi	r2,2
    7b78:	10b6cc04 	addi	r2,r2,-9424
    7b7c:	f800283a 	ret

00007b80 <__locale_charset>:
    7b80:	008000b4 	movhi	r2,2
    7b84:	10b92104 	addi	r2,r2,-7036
    7b88:	f800283a 	ret

00007b8c <__locale_mb_cur_max>:
    7b8c:	008000b4 	movhi	r2,2
    7b90:	10bf8304 	addi	r2,r2,-500
    7b94:	10800017 	ldw	r2,0(r2)
    7b98:	f800283a 	ret

00007b9c <__locale_msgcharset>:
    7b9c:	008000b4 	movhi	r2,2
    7ba0:	10b91904 	addi	r2,r2,-7068
    7ba4:	f800283a 	ret

00007ba8 <__locale_cjk_lang>:
    7ba8:	0005883a 	mov	r2,zero
    7bac:	f800283a 	ret

00007bb0 <_localeconv_r>:
    7bb0:	008000b4 	movhi	r2,2
    7bb4:	10b92904 	addi	r2,r2,-7004
    7bb8:	f800283a 	ret

00007bbc <setlocale>:
    7bbc:	008000b4 	movhi	r2,2
    7bc0:	10bf8204 	addi	r2,r2,-504
    7bc4:	280d883a 	mov	r6,r5
    7bc8:	200b883a 	mov	r5,r4
    7bcc:	11000017 	ldw	r4,0(r2)
    7bd0:	0007b041 	jmpi	7b04 <_setlocale_r>

00007bd4 <localeconv>:
    7bd4:	008000b4 	movhi	r2,2
    7bd8:	10b92904 	addi	r2,r2,-7004
    7bdc:	f800283a 	ret

00007be0 <__smakebuf_r>:
    7be0:	2880030b 	ldhu	r2,12(r5)
    7be4:	10c0008c 	andi	r3,r2,2
    7be8:	1800411e 	bne	r3,zero,7cf0 <__smakebuf_r+0x110>
    7bec:	deffec04 	addi	sp,sp,-80
    7bf0:	dc000f15 	stw	r16,60(sp)
    7bf4:	2821883a 	mov	r16,r5
    7bf8:	2940038f 	ldh	r5,14(r5)
    7bfc:	dc401015 	stw	r17,64(sp)
    7c00:	dfc01315 	stw	ra,76(sp)
    7c04:	dcc01215 	stw	r19,72(sp)
    7c08:	dc801115 	stw	r18,68(sp)
    7c0c:	2023883a 	mov	r17,r4
    7c10:	28001c16 	blt	r5,zero,7c84 <__smakebuf_r+0xa4>
    7c14:	d80d883a 	mov	r6,sp
    7c18:	000d1700 	call	d170 <_fstat_r>
    7c1c:	10001816 	blt	r2,zero,7c80 <__smakebuf_r+0xa0>
    7c20:	d8800117 	ldw	r2,4(sp)
    7c24:	00e00014 	movui	r3,32768
    7c28:	10bc000c 	andi	r2,r2,61440
    7c2c:	14c80020 	cmpeqi	r19,r2,8192
    7c30:	10c03726 	beq	r2,r3,7d10 <__smakebuf_r+0x130>
    7c34:	80c0030b 	ldhu	r3,12(r16)
    7c38:	18c20014 	ori	r3,r3,2048
    7c3c:	80c0030d 	sth	r3,12(r16)
    7c40:	00c80004 	movi	r3,8192
    7c44:	10c0521e 	bne	r2,r3,7d90 <__smakebuf_r+0x1b0>
    7c48:	8140038f 	ldh	r5,14(r16)
    7c4c:	8809883a 	mov	r4,r17
    7c50:	000d1cc0 	call	d1cc <_isatty_r>
    7c54:	10004c26 	beq	r2,zero,7d88 <__smakebuf_r+0x1a8>
    7c58:	8080030b 	ldhu	r2,12(r16)
    7c5c:	80c010c4 	addi	r3,r16,67
    7c60:	80c00015 	stw	r3,0(r16)
    7c64:	10800054 	ori	r2,r2,1
    7c68:	8080030d 	sth	r2,12(r16)
    7c6c:	00800044 	movi	r2,1
    7c70:	80c00415 	stw	r3,16(r16)
    7c74:	80800515 	stw	r2,20(r16)
    7c78:	04810004 	movi	r18,1024
    7c7c:	00000706 	br	7c9c <__smakebuf_r+0xbc>
    7c80:	8080030b 	ldhu	r2,12(r16)
    7c84:	10c0200c 	andi	r3,r2,128
    7c88:	18001f1e 	bne	r3,zero,7d08 <__smakebuf_r+0x128>
    7c8c:	04810004 	movi	r18,1024
    7c90:	10820014 	ori	r2,r2,2048
    7c94:	8080030d 	sth	r2,12(r16)
    7c98:	0027883a 	mov	r19,zero
    7c9c:	900b883a 	mov	r5,r18
    7ca0:	8809883a 	mov	r4,r17
    7ca4:	0007d9c0 	call	7d9c <_malloc_r>
    7ca8:	10002c26 	beq	r2,zero,7d5c <__smakebuf_r+0x17c>
    7cac:	80c0030b 	ldhu	r3,12(r16)
    7cb0:	01000034 	movhi	r4,0
    7cb4:	211b3d04 	addi	r4,r4,27892
    7cb8:	89000f15 	stw	r4,60(r17)
    7cbc:	18c02014 	ori	r3,r3,128
    7cc0:	80c0030d 	sth	r3,12(r16)
    7cc4:	80800015 	stw	r2,0(r16)
    7cc8:	80800415 	stw	r2,16(r16)
    7ccc:	84800515 	stw	r18,20(r16)
    7cd0:	98001a1e 	bne	r19,zero,7d3c <__smakebuf_r+0x15c>
    7cd4:	dfc01317 	ldw	ra,76(sp)
    7cd8:	dcc01217 	ldw	r19,72(sp)
    7cdc:	dc801117 	ldw	r18,68(sp)
    7ce0:	dc401017 	ldw	r17,64(sp)
    7ce4:	dc000f17 	ldw	r16,60(sp)
    7ce8:	dec01404 	addi	sp,sp,80
    7cec:	f800283a 	ret
    7cf0:	288010c4 	addi	r2,r5,67
    7cf4:	28800015 	stw	r2,0(r5)
    7cf8:	28800415 	stw	r2,16(r5)
    7cfc:	00800044 	movi	r2,1
    7d00:	28800515 	stw	r2,20(r5)
    7d04:	f800283a 	ret
    7d08:	04801004 	movi	r18,64
    7d0c:	003fe006 	br	7c90 <__smakebuf_r+0xb0>
    7d10:	81000a17 	ldw	r4,40(r16)
    7d14:	00c00074 	movhi	r3,1
    7d18:	18e85604 	addi	r3,r3,-24232
    7d1c:	20ffc51e 	bne	r4,r3,7c34 <__smakebuf_r+0x54>
    7d20:	8080030b 	ldhu	r2,12(r16)
    7d24:	04810004 	movi	r18,1024
    7d28:	84801315 	stw	r18,76(r16)
    7d2c:	1484b03a 	or	r2,r2,r18
    7d30:	8080030d 	sth	r2,12(r16)
    7d34:	0027883a 	mov	r19,zero
    7d38:	003fd806 	br	7c9c <__smakebuf_r+0xbc>
    7d3c:	8140038f 	ldh	r5,14(r16)
    7d40:	8809883a 	mov	r4,r17
    7d44:	000d1cc0 	call	d1cc <_isatty_r>
    7d48:	103fe226 	beq	r2,zero,7cd4 <__smakebuf_r+0xf4>
    7d4c:	8080030b 	ldhu	r2,12(r16)
    7d50:	10800054 	ori	r2,r2,1
    7d54:	8080030d 	sth	r2,12(r16)
    7d58:	003fde06 	br	7cd4 <__smakebuf_r+0xf4>
    7d5c:	8080030b 	ldhu	r2,12(r16)
    7d60:	10c0800c 	andi	r3,r2,512
    7d64:	183fdb1e 	bne	r3,zero,7cd4 <__smakebuf_r+0xf4>
    7d68:	10800094 	ori	r2,r2,2
    7d6c:	80c010c4 	addi	r3,r16,67
    7d70:	8080030d 	sth	r2,12(r16)
    7d74:	00800044 	movi	r2,1
    7d78:	80c00015 	stw	r3,0(r16)
    7d7c:	80c00415 	stw	r3,16(r16)
    7d80:	80800515 	stw	r2,20(r16)
    7d84:	003fd306 	br	7cd4 <__smakebuf_r+0xf4>
    7d88:	04810004 	movi	r18,1024
    7d8c:	003fc306 	br	7c9c <__smakebuf_r+0xbc>
    7d90:	0027883a 	mov	r19,zero
    7d94:	04810004 	movi	r18,1024
    7d98:	003fc006 	br	7c9c <__smakebuf_r+0xbc>

00007d9c <_malloc_r>:
    7d9c:	defff504 	addi	sp,sp,-44
    7da0:	dc800315 	stw	r18,12(sp)
    7da4:	dfc00a15 	stw	ra,40(sp)
    7da8:	df000915 	stw	fp,36(sp)
    7dac:	ddc00815 	stw	r23,32(sp)
    7db0:	dd800715 	stw	r22,28(sp)
    7db4:	dd400615 	stw	r21,24(sp)
    7db8:	dd000515 	stw	r20,20(sp)
    7dbc:	dcc00415 	stw	r19,16(sp)
    7dc0:	dc400215 	stw	r17,8(sp)
    7dc4:	dc000115 	stw	r16,4(sp)
    7dc8:	288002c4 	addi	r2,r5,11
    7dcc:	00c00584 	movi	r3,22
    7dd0:	2025883a 	mov	r18,r4
    7dd4:	18807f2e 	bgeu	r3,r2,7fd4 <_malloc_r+0x238>
    7dd8:	047ffe04 	movi	r17,-8
    7ddc:	1462703a 	and	r17,r2,r17
    7de0:	8800a316 	blt	r17,zero,8070 <_malloc_r+0x2d4>
    7de4:	8940a236 	bltu	r17,r5,8070 <_malloc_r+0x2d4>
    7de8:	001134c0 	call	1134c <__malloc_lock>
    7dec:	00807dc4 	movi	r2,503
    7df0:	1441e92e 	bgeu	r2,r17,8598 <_malloc_r+0x7fc>
    7df4:	8804d27a 	srli	r2,r17,9
    7df8:	1000a126 	beq	r2,zero,8080 <_malloc_r+0x2e4>
    7dfc:	00c00104 	movi	r3,4
    7e00:	18811e36 	bltu	r3,r2,827c <_malloc_r+0x4e0>
    7e04:	8804d1ba 	srli	r2,r17,6
    7e08:	12000e44 	addi	r8,r2,57
    7e0c:	11c00e04 	addi	r7,r2,56
    7e10:	4209883a 	add	r4,r8,r8
    7e14:	04c000b4 	movhi	r19,2
    7e18:	2109883a 	add	r4,r4,r4
    7e1c:	9cf93704 	addi	r19,r19,-6948
    7e20:	2109883a 	add	r4,r4,r4
    7e24:	9909883a 	add	r4,r19,r4
    7e28:	24000117 	ldw	r16,4(r4)
    7e2c:	213ffe04 	addi	r4,r4,-8
    7e30:	24009726 	beq	r4,r16,8090 <_malloc_r+0x2f4>
    7e34:	80800117 	ldw	r2,4(r16)
    7e38:	01bfff04 	movi	r6,-4
    7e3c:	014003c4 	movi	r5,15
    7e40:	1184703a 	and	r2,r2,r6
    7e44:	1447c83a 	sub	r3,r2,r17
    7e48:	28c00716 	blt	r5,r3,7e68 <_malloc_r+0xcc>
    7e4c:	1800920e 	bge	r3,zero,8098 <_malloc_r+0x2fc>
    7e50:	84000317 	ldw	r16,12(r16)
    7e54:	24008e26 	beq	r4,r16,8090 <_malloc_r+0x2f4>
    7e58:	80800117 	ldw	r2,4(r16)
    7e5c:	1184703a 	and	r2,r2,r6
    7e60:	1447c83a 	sub	r3,r2,r17
    7e64:	28fff90e 	bge	r5,r3,7e4c <_malloc_r+0xb0>
    7e68:	3809883a 	mov	r4,r7
    7e6c:	018000b4 	movhi	r6,2
    7e70:	9c000417 	ldw	r16,16(r19)
    7e74:	31b93704 	addi	r6,r6,-6948
    7e78:	32000204 	addi	r8,r6,8
    7e7c:	82013426 	beq	r16,r8,8350 <_malloc_r+0x5b4>
    7e80:	80c00117 	ldw	r3,4(r16)
    7e84:	00bfff04 	movi	r2,-4
    7e88:	188e703a 	and	r7,r3,r2
    7e8c:	3c45c83a 	sub	r2,r7,r17
    7e90:	00c003c4 	movi	r3,15
    7e94:	18811f16 	blt	r3,r2,8314 <_malloc_r+0x578>
    7e98:	32000515 	stw	r8,20(r6)
    7e9c:	32000415 	stw	r8,16(r6)
    7ea0:	10007f0e 	bge	r2,zero,80a0 <_malloc_r+0x304>
    7ea4:	00807fc4 	movi	r2,511
    7ea8:	11c0fd36 	bltu	r2,r7,82a0 <_malloc_r+0x504>
    7eac:	3806d0fa 	srli	r3,r7,3
    7eb0:	01c00044 	movi	r7,1
    7eb4:	30800117 	ldw	r2,4(r6)
    7eb8:	19400044 	addi	r5,r3,1
    7ebc:	294b883a 	add	r5,r5,r5
    7ec0:	1807d0ba 	srai	r3,r3,2
    7ec4:	294b883a 	add	r5,r5,r5
    7ec8:	294b883a 	add	r5,r5,r5
    7ecc:	298b883a 	add	r5,r5,r6
    7ed0:	38c6983a 	sll	r3,r7,r3
    7ed4:	29c00017 	ldw	r7,0(r5)
    7ed8:	2a7ffe04 	addi	r9,r5,-8
    7edc:	1886b03a 	or	r3,r3,r2
    7ee0:	82400315 	stw	r9,12(r16)
    7ee4:	81c00215 	stw	r7,8(r16)
    7ee8:	30c00115 	stw	r3,4(r6)
    7eec:	2c000015 	stw	r16,0(r5)
    7ef0:	3c000315 	stw	r16,12(r7)
    7ef4:	2005d0ba 	srai	r2,r4,2
    7ef8:	01400044 	movi	r5,1
    7efc:	288a983a 	sll	r5,r5,r2
    7f00:	19406f36 	bltu	r3,r5,80c0 <_malloc_r+0x324>
    7f04:	28c4703a 	and	r2,r5,r3
    7f08:	10000a1e 	bne	r2,zero,7f34 <_malloc_r+0x198>
    7f0c:	00bfff04 	movi	r2,-4
    7f10:	294b883a 	add	r5,r5,r5
    7f14:	2088703a 	and	r4,r4,r2
    7f18:	28c4703a 	and	r2,r5,r3
    7f1c:	21000104 	addi	r4,r4,4
    7f20:	1000041e 	bne	r2,zero,7f34 <_malloc_r+0x198>
    7f24:	294b883a 	add	r5,r5,r5
    7f28:	28c4703a 	and	r2,r5,r3
    7f2c:	21000104 	addi	r4,r4,4
    7f30:	103ffc26 	beq	r2,zero,7f24 <_malloc_r+0x188>
    7f34:	02bfff04 	movi	r10,-4
    7f38:	024003c4 	movi	r9,15
    7f3c:	21800044 	addi	r6,r4,1
    7f40:	318d883a 	add	r6,r6,r6
    7f44:	318d883a 	add	r6,r6,r6
    7f48:	318d883a 	add	r6,r6,r6
    7f4c:	998d883a 	add	r6,r19,r6
    7f50:	333ffe04 	addi	r12,r6,-8
    7f54:	2017883a 	mov	r11,r4
    7f58:	31800104 	addi	r6,r6,4
    7f5c:	34000017 	ldw	r16,0(r6)
    7f60:	31fffd04 	addi	r7,r6,-12
    7f64:	81c0041e 	bne	r16,r7,7f78 <_malloc_r+0x1dc>
    7f68:	0000fb06 	br	8358 <_malloc_r+0x5bc>
    7f6c:	1801030e 	bge	r3,zero,837c <_malloc_r+0x5e0>
    7f70:	84000317 	ldw	r16,12(r16)
    7f74:	81c0f826 	beq	r16,r7,8358 <_malloc_r+0x5bc>
    7f78:	80800117 	ldw	r2,4(r16)
    7f7c:	1284703a 	and	r2,r2,r10
    7f80:	1447c83a 	sub	r3,r2,r17
    7f84:	48fff90e 	bge	r9,r3,7f6c <_malloc_r+0x1d0>
    7f88:	80800317 	ldw	r2,12(r16)
    7f8c:	81000217 	ldw	r4,8(r16)
    7f90:	89400054 	ori	r5,r17,1
    7f94:	81400115 	stw	r5,4(r16)
    7f98:	20800315 	stw	r2,12(r4)
    7f9c:	11000215 	stw	r4,8(r2)
    7fa0:	8463883a 	add	r17,r16,r17
    7fa4:	9c400515 	stw	r17,20(r19)
    7fa8:	9c400415 	stw	r17,16(r19)
    7fac:	18800054 	ori	r2,r3,1
    7fb0:	88800115 	stw	r2,4(r17)
    7fb4:	8a000315 	stw	r8,12(r17)
    7fb8:	8a000215 	stw	r8,8(r17)
    7fbc:	88e3883a 	add	r17,r17,r3
    7fc0:	88c00015 	stw	r3,0(r17)
    7fc4:	9009883a 	mov	r4,r18
    7fc8:	001146c0 	call	1146c <__malloc_unlock>
    7fcc:	80800204 	addi	r2,r16,8
    7fd0:	00001b06 	br	8040 <_malloc_r+0x2a4>
    7fd4:	04400404 	movi	r17,16
    7fd8:	89402536 	bltu	r17,r5,8070 <_malloc_r+0x2d4>
    7fdc:	001134c0 	call	1134c <__malloc_lock>
    7fe0:	00800184 	movi	r2,6
    7fe4:	01000084 	movi	r4,2
    7fe8:	04c000b4 	movhi	r19,2
    7fec:	1085883a 	add	r2,r2,r2
    7ff0:	9cf93704 	addi	r19,r19,-6948
    7ff4:	1085883a 	add	r2,r2,r2
    7ff8:	9885883a 	add	r2,r19,r2
    7ffc:	14000117 	ldw	r16,4(r2)
    8000:	10fffe04 	addi	r3,r2,-8
    8004:	80c0d926 	beq	r16,r3,836c <_malloc_r+0x5d0>
    8008:	80c00117 	ldw	r3,4(r16)
    800c:	81000317 	ldw	r4,12(r16)
    8010:	00bfff04 	movi	r2,-4
    8014:	1884703a 	and	r2,r3,r2
    8018:	81400217 	ldw	r5,8(r16)
    801c:	8085883a 	add	r2,r16,r2
    8020:	10c00117 	ldw	r3,4(r2)
    8024:	29000315 	stw	r4,12(r5)
    8028:	21400215 	stw	r5,8(r4)
    802c:	18c00054 	ori	r3,r3,1
    8030:	10c00115 	stw	r3,4(r2)
    8034:	9009883a 	mov	r4,r18
    8038:	001146c0 	call	1146c <__malloc_unlock>
    803c:	80800204 	addi	r2,r16,8
    8040:	dfc00a17 	ldw	ra,40(sp)
    8044:	df000917 	ldw	fp,36(sp)
    8048:	ddc00817 	ldw	r23,32(sp)
    804c:	dd800717 	ldw	r22,28(sp)
    8050:	dd400617 	ldw	r21,24(sp)
    8054:	dd000517 	ldw	r20,20(sp)
    8058:	dcc00417 	ldw	r19,16(sp)
    805c:	dc800317 	ldw	r18,12(sp)
    8060:	dc400217 	ldw	r17,8(sp)
    8064:	dc000117 	ldw	r16,4(sp)
    8068:	dec00b04 	addi	sp,sp,44
    806c:	f800283a 	ret
    8070:	00800304 	movi	r2,12
    8074:	90800015 	stw	r2,0(r18)
    8078:	0005883a 	mov	r2,zero
    807c:	003ff006 	br	8040 <_malloc_r+0x2a4>
    8080:	01002004 	movi	r4,128
    8084:	02001004 	movi	r8,64
    8088:	01c00fc4 	movi	r7,63
    808c:	003f6106 	br	7e14 <_malloc_r+0x78>
    8090:	4009883a 	mov	r4,r8
    8094:	003f7506 	br	7e6c <_malloc_r+0xd0>
    8098:	81000317 	ldw	r4,12(r16)
    809c:	003fde06 	br	8018 <_malloc_r+0x27c>
    80a0:	81c5883a 	add	r2,r16,r7
    80a4:	11400117 	ldw	r5,4(r2)
    80a8:	9009883a 	mov	r4,r18
    80ac:	29400054 	ori	r5,r5,1
    80b0:	11400115 	stw	r5,4(r2)
    80b4:	001146c0 	call	1146c <__malloc_unlock>
    80b8:	80800204 	addi	r2,r16,8
    80bc:	003fe006 	br	8040 <_malloc_r+0x2a4>
    80c0:	9c000217 	ldw	r16,8(r19)
    80c4:	00bfff04 	movi	r2,-4
    80c8:	85800117 	ldw	r22,4(r16)
    80cc:	b0ac703a 	and	r22,r22,r2
    80d0:	b4400336 	bltu	r22,r17,80e0 <_malloc_r+0x344>
    80d4:	b445c83a 	sub	r2,r22,r17
    80d8:	00c003c4 	movi	r3,15
    80dc:	18805d16 	blt	r3,r2,8254 <_malloc_r+0x4b8>
    80e0:	05c000b4 	movhi	r23,2
    80e4:	008000b4 	movhi	r2,2
    80e8:	10876104 	addi	r2,r2,7556
    80ec:	bdff8404 	addi	r23,r23,-496
    80f0:	15400017 	ldw	r21,0(r2)
    80f4:	b8c00017 	ldw	r3,0(r23)
    80f8:	00bfffc4 	movi	r2,-1
    80fc:	858d883a 	add	r6,r16,r22
    8100:	8d6b883a 	add	r21,r17,r21
    8104:	1880ea26 	beq	r3,r2,84b0 <_malloc_r+0x714>
    8108:	ad4403c4 	addi	r21,r21,4111
    810c:	00bc0004 	movi	r2,-4096
    8110:	a8aa703a 	and	r21,r21,r2
    8114:	a80b883a 	mov	r5,r21
    8118:	9009883a 	mov	r4,r18
    811c:	d9800015 	stw	r6,0(sp)
    8120:	000a02c0 	call	a02c <_sbrk_r>
    8124:	1029883a 	mov	r20,r2
    8128:	00bfffc4 	movi	r2,-1
    812c:	d9800017 	ldw	r6,0(sp)
    8130:	a080e826 	beq	r20,r2,84d4 <_malloc_r+0x738>
    8134:	a180a636 	bltu	r20,r6,83d0 <_malloc_r+0x634>
    8138:	070000b4 	movhi	fp,2
    813c:	e7078304 	addi	fp,fp,7692
    8140:	e0800017 	ldw	r2,0(fp)
    8144:	a887883a 	add	r3,r21,r2
    8148:	e0c00015 	stw	r3,0(fp)
    814c:	3500e626 	beq	r6,r20,84e8 <_malloc_r+0x74c>
    8150:	b9000017 	ldw	r4,0(r23)
    8154:	00bfffc4 	movi	r2,-1
    8158:	2080ee26 	beq	r4,r2,8514 <_malloc_r+0x778>
    815c:	a185c83a 	sub	r2,r20,r6
    8160:	10c5883a 	add	r2,r2,r3
    8164:	e0800015 	stw	r2,0(fp)
    8168:	a0c001cc 	andi	r3,r20,7
    816c:	1800bc26 	beq	r3,zero,8460 <_malloc_r+0x6c4>
    8170:	a0e9c83a 	sub	r20,r20,r3
    8174:	00840204 	movi	r2,4104
    8178:	a5000204 	addi	r20,r20,8
    817c:	10c7c83a 	sub	r3,r2,r3
    8180:	a545883a 	add	r2,r20,r21
    8184:	1083ffcc 	andi	r2,r2,4095
    8188:	18abc83a 	sub	r21,r3,r2
    818c:	a80b883a 	mov	r5,r21
    8190:	9009883a 	mov	r4,r18
    8194:	000a02c0 	call	a02c <_sbrk_r>
    8198:	00ffffc4 	movi	r3,-1
    819c:	10c0e126 	beq	r2,r3,8524 <_malloc_r+0x788>
    81a0:	1505c83a 	sub	r2,r2,r20
    81a4:	1545883a 	add	r2,r2,r21
    81a8:	10800054 	ori	r2,r2,1
    81ac:	e0c00017 	ldw	r3,0(fp)
    81b0:	9d000215 	stw	r20,8(r19)
    81b4:	a0800115 	stw	r2,4(r20)
    81b8:	a8c7883a 	add	r3,r21,r3
    81bc:	e0c00015 	stw	r3,0(fp)
    81c0:	84c00e26 	beq	r16,r19,81fc <_malloc_r+0x460>
    81c4:	018003c4 	movi	r6,15
    81c8:	3580a72e 	bgeu	r6,r22,8468 <_malloc_r+0x6cc>
    81cc:	81400117 	ldw	r5,4(r16)
    81d0:	013ffe04 	movi	r4,-8
    81d4:	b0bffd04 	addi	r2,r22,-12
    81d8:	1104703a 	and	r2,r2,r4
    81dc:	2900004c 	andi	r4,r5,1
    81e0:	2088b03a 	or	r4,r4,r2
    81e4:	81000115 	stw	r4,4(r16)
    81e8:	01400144 	movi	r5,5
    81ec:	8089883a 	add	r4,r16,r2
    81f0:	21400115 	stw	r5,4(r4)
    81f4:	21400215 	stw	r5,8(r4)
    81f8:	3080cd36 	bltu	r6,r2,8530 <_malloc_r+0x794>
    81fc:	008000b4 	movhi	r2,2
    8200:	10876004 	addi	r2,r2,7552
    8204:	11000017 	ldw	r4,0(r2)
    8208:	20c0012e 	bgeu	r4,r3,8210 <_malloc_r+0x474>
    820c:	10c00015 	stw	r3,0(r2)
    8210:	008000b4 	movhi	r2,2
    8214:	10875f04 	addi	r2,r2,7548
    8218:	11000017 	ldw	r4,0(r2)
    821c:	9c000217 	ldw	r16,8(r19)
    8220:	20c0012e 	bgeu	r4,r3,8228 <_malloc_r+0x48c>
    8224:	10c00015 	stw	r3,0(r2)
    8228:	80c00117 	ldw	r3,4(r16)
    822c:	00bfff04 	movi	r2,-4
    8230:	1886703a 	and	r3,r3,r2
    8234:	1c45c83a 	sub	r2,r3,r17
    8238:	1c400236 	bltu	r3,r17,8244 <_malloc_r+0x4a8>
    823c:	00c003c4 	movi	r3,15
    8240:	18800416 	blt	r3,r2,8254 <_malloc_r+0x4b8>
    8244:	9009883a 	mov	r4,r18
    8248:	001146c0 	call	1146c <__malloc_unlock>
    824c:	0005883a 	mov	r2,zero
    8250:	003f7b06 	br	8040 <_malloc_r+0x2a4>
    8254:	88c00054 	ori	r3,r17,1
    8258:	80c00115 	stw	r3,4(r16)
    825c:	8463883a 	add	r17,r16,r17
    8260:	10800054 	ori	r2,r2,1
    8264:	9c400215 	stw	r17,8(r19)
    8268:	88800115 	stw	r2,4(r17)
    826c:	9009883a 	mov	r4,r18
    8270:	001146c0 	call	1146c <__malloc_unlock>
    8274:	80800204 	addi	r2,r16,8
    8278:	003f7106 	br	8040 <_malloc_r+0x2a4>
    827c:	00c00504 	movi	r3,20
    8280:	18804a2e 	bgeu	r3,r2,83ac <_malloc_r+0x610>
    8284:	00c01504 	movi	r3,84
    8288:	18806e36 	bltu	r3,r2,8444 <_malloc_r+0x6a8>
    828c:	8804d33a 	srli	r2,r17,12
    8290:	12001bc4 	addi	r8,r2,111
    8294:	11c01b84 	addi	r7,r2,110
    8298:	4209883a 	add	r4,r8,r8
    829c:	003edd06 	br	7e14 <_malloc_r+0x78>
    82a0:	3804d27a 	srli	r2,r7,9
    82a4:	00c00104 	movi	r3,4
    82a8:	1880442e 	bgeu	r3,r2,83bc <_malloc_r+0x620>
    82ac:	00c00504 	movi	r3,20
    82b0:	18808136 	bltu	r3,r2,84b8 <_malloc_r+0x71c>
    82b4:	11401704 	addi	r5,r2,92
    82b8:	10c016c4 	addi	r3,r2,91
    82bc:	294b883a 	add	r5,r5,r5
    82c0:	294b883a 	add	r5,r5,r5
    82c4:	294b883a 	add	r5,r5,r5
    82c8:	994b883a 	add	r5,r19,r5
    82cc:	28800017 	ldw	r2,0(r5)
    82d0:	018000b4 	movhi	r6,2
    82d4:	297ffe04 	addi	r5,r5,-8
    82d8:	31b93704 	addi	r6,r6,-6948
    82dc:	28806526 	beq	r5,r2,8474 <_malloc_r+0x6d8>
    82e0:	01bfff04 	movi	r6,-4
    82e4:	10c00117 	ldw	r3,4(r2)
    82e8:	1986703a 	and	r3,r3,r6
    82ec:	38c0022e 	bgeu	r7,r3,82f8 <_malloc_r+0x55c>
    82f0:	10800217 	ldw	r2,8(r2)
    82f4:	28bffb1e 	bne	r5,r2,82e4 <_malloc_r+0x548>
    82f8:	11400317 	ldw	r5,12(r2)
    82fc:	98c00117 	ldw	r3,4(r19)
    8300:	81400315 	stw	r5,12(r16)
    8304:	80800215 	stw	r2,8(r16)
    8308:	2c000215 	stw	r16,8(r5)
    830c:	14000315 	stw	r16,12(r2)
    8310:	003ef806 	br	7ef4 <_malloc_r+0x158>
    8314:	88c00054 	ori	r3,r17,1
    8318:	80c00115 	stw	r3,4(r16)
    831c:	8463883a 	add	r17,r16,r17
    8320:	34400515 	stw	r17,20(r6)
    8324:	34400415 	stw	r17,16(r6)
    8328:	10c00054 	ori	r3,r2,1
    832c:	8a000315 	stw	r8,12(r17)
    8330:	8a000215 	stw	r8,8(r17)
    8334:	88c00115 	stw	r3,4(r17)
    8338:	88a3883a 	add	r17,r17,r2
    833c:	88800015 	stw	r2,0(r17)
    8340:	9009883a 	mov	r4,r18
    8344:	001146c0 	call	1146c <__malloc_unlock>
    8348:	80800204 	addi	r2,r16,8
    834c:	003f3c06 	br	8040 <_malloc_r+0x2a4>
    8350:	30c00117 	ldw	r3,4(r6)
    8354:	003ee706 	br	7ef4 <_malloc_r+0x158>
    8358:	5ac00044 	addi	r11,r11,1
    835c:	588000cc 	andi	r2,r11,3
    8360:	31800204 	addi	r6,r6,8
    8364:	103efd1e 	bne	r2,zero,7f5c <_malloc_r+0x1c0>
    8368:	00002406 	br	83fc <_malloc_r+0x660>
    836c:	14000317 	ldw	r16,12(r2)
    8370:	143f251e 	bne	r2,r16,8008 <_malloc_r+0x26c>
    8374:	21000084 	addi	r4,r4,2
    8378:	003ebc06 	br	7e6c <_malloc_r+0xd0>
    837c:	8085883a 	add	r2,r16,r2
    8380:	10c00117 	ldw	r3,4(r2)
    8384:	81000317 	ldw	r4,12(r16)
    8388:	81400217 	ldw	r5,8(r16)
    838c:	18c00054 	ori	r3,r3,1
    8390:	10c00115 	stw	r3,4(r2)
    8394:	29000315 	stw	r4,12(r5)
    8398:	21400215 	stw	r5,8(r4)
    839c:	9009883a 	mov	r4,r18
    83a0:	001146c0 	call	1146c <__malloc_unlock>
    83a4:	80800204 	addi	r2,r16,8
    83a8:	003f2506 	br	8040 <_malloc_r+0x2a4>
    83ac:	12001704 	addi	r8,r2,92
    83b0:	11c016c4 	addi	r7,r2,91
    83b4:	4209883a 	add	r4,r8,r8
    83b8:	003e9606 	br	7e14 <_malloc_r+0x78>
    83bc:	3804d1ba 	srli	r2,r7,6
    83c0:	11400e44 	addi	r5,r2,57
    83c4:	10c00e04 	addi	r3,r2,56
    83c8:	294b883a 	add	r5,r5,r5
    83cc:	003fbc06 	br	82c0 <_malloc_r+0x524>
    83d0:	84ff5926 	beq	r16,r19,8138 <_malloc_r+0x39c>
    83d4:	008000b4 	movhi	r2,2
    83d8:	10b93704 	addi	r2,r2,-6948
    83dc:	14000217 	ldw	r16,8(r2)
    83e0:	00bfff04 	movi	r2,-4
    83e4:	80c00117 	ldw	r3,4(r16)
    83e8:	1886703a 	and	r3,r3,r2
    83ec:	003f9106 	br	8234 <_malloc_r+0x498>
    83f0:	60800217 	ldw	r2,8(r12)
    83f4:	213fffc4 	addi	r4,r4,-1
    83f8:	1300651e 	bne	r2,r12,8590 <_malloc_r+0x7f4>
    83fc:	208000cc 	andi	r2,r4,3
    8400:	633ffe04 	addi	r12,r12,-8
    8404:	103ffa1e 	bne	r2,zero,83f0 <_malloc_r+0x654>
    8408:	98800117 	ldw	r2,4(r19)
    840c:	0146303a 	nor	r3,zero,r5
    8410:	1884703a 	and	r2,r3,r2
    8414:	98800115 	stw	r2,4(r19)
    8418:	294b883a 	add	r5,r5,r5
    841c:	117f2836 	bltu	r2,r5,80c0 <_malloc_r+0x324>
    8420:	283f2726 	beq	r5,zero,80c0 <_malloc_r+0x324>
    8424:	2886703a 	and	r3,r5,r2
    8428:	5809883a 	mov	r4,r11
    842c:	183ec31e 	bne	r3,zero,7f3c <_malloc_r+0x1a0>
    8430:	294b883a 	add	r5,r5,r5
    8434:	2886703a 	and	r3,r5,r2
    8438:	21000104 	addi	r4,r4,4
    843c:	183ffc26 	beq	r3,zero,8430 <_malloc_r+0x694>
    8440:	003ebe06 	br	7f3c <_malloc_r+0x1a0>
    8444:	00c05504 	movi	r3,340
    8448:	18801236 	bltu	r3,r2,8494 <_malloc_r+0x6f8>
    844c:	8804d3fa 	srli	r2,r17,15
    8450:	12001e04 	addi	r8,r2,120
    8454:	11c01dc4 	addi	r7,r2,119
    8458:	4209883a 	add	r4,r8,r8
    845c:	003e6d06 	br	7e14 <_malloc_r+0x78>
    8460:	00c40004 	movi	r3,4096
    8464:	003f4606 	br	8180 <_malloc_r+0x3e4>
    8468:	00800044 	movi	r2,1
    846c:	a0800115 	stw	r2,4(r20)
    8470:	003f7406 	br	8244 <_malloc_r+0x4a8>
    8474:	1805d0ba 	srai	r2,r3,2
    8478:	01c00044 	movi	r7,1
    847c:	30c00117 	ldw	r3,4(r6)
    8480:	388e983a 	sll	r7,r7,r2
    8484:	2805883a 	mov	r2,r5
    8488:	38c6b03a 	or	r3,r7,r3
    848c:	30c00115 	stw	r3,4(r6)
    8490:	003f9b06 	br	8300 <_malloc_r+0x564>
    8494:	00c15504 	movi	r3,1364
    8498:	18801a36 	bltu	r3,r2,8504 <_malloc_r+0x768>
    849c:	8804d4ba 	srli	r2,r17,18
    84a0:	12001f44 	addi	r8,r2,125
    84a4:	11c01f04 	addi	r7,r2,124
    84a8:	4209883a 	add	r4,r8,r8
    84ac:	003e5906 	br	7e14 <_malloc_r+0x78>
    84b0:	ad400404 	addi	r21,r21,16
    84b4:	003f1706 	br	8114 <_malloc_r+0x378>
    84b8:	00c01504 	movi	r3,84
    84bc:	18802336 	bltu	r3,r2,854c <_malloc_r+0x7b0>
    84c0:	3804d33a 	srli	r2,r7,12
    84c4:	11401bc4 	addi	r5,r2,111
    84c8:	10c01b84 	addi	r3,r2,110
    84cc:	294b883a 	add	r5,r5,r5
    84d0:	003f7b06 	br	82c0 <_malloc_r+0x524>
    84d4:	9c000217 	ldw	r16,8(r19)
    84d8:	00bfff04 	movi	r2,-4
    84dc:	80c00117 	ldw	r3,4(r16)
    84e0:	1886703a 	and	r3,r3,r2
    84e4:	003f5306 	br	8234 <_malloc_r+0x498>
    84e8:	3083ffcc 	andi	r2,r6,4095
    84ec:	103f181e 	bne	r2,zero,8150 <_malloc_r+0x3b4>
    84f0:	99000217 	ldw	r4,8(r19)
    84f4:	b545883a 	add	r2,r22,r21
    84f8:	10800054 	ori	r2,r2,1
    84fc:	20800115 	stw	r2,4(r4)
    8500:	003f3e06 	br	81fc <_malloc_r+0x460>
    8504:	01003f84 	movi	r4,254
    8508:	02001fc4 	movi	r8,127
    850c:	01c01f84 	movi	r7,126
    8510:	003e4006 	br	7e14 <_malloc_r+0x78>
    8514:	008000b4 	movhi	r2,2
    8518:	10bf8404 	addi	r2,r2,-496
    851c:	15000015 	stw	r20,0(r2)
    8520:	003f1106 	br	8168 <_malloc_r+0x3cc>
    8524:	00800044 	movi	r2,1
    8528:	002b883a 	mov	r21,zero
    852c:	003f1f06 	br	81ac <_malloc_r+0x410>
    8530:	81400204 	addi	r5,r16,8
    8534:	9009883a 	mov	r4,r18
    8538:	00071b00 	call	71b0 <_free_r>
    853c:	008000b4 	movhi	r2,2
    8540:	10878304 	addi	r2,r2,7692
    8544:	10c00017 	ldw	r3,0(r2)
    8548:	003f2c06 	br	81fc <_malloc_r+0x460>
    854c:	00c05504 	movi	r3,340
    8550:	18800536 	bltu	r3,r2,8568 <_malloc_r+0x7cc>
    8554:	3804d3fa 	srli	r2,r7,15
    8558:	11401e04 	addi	r5,r2,120
    855c:	10c01dc4 	addi	r3,r2,119
    8560:	294b883a 	add	r5,r5,r5
    8564:	003f5606 	br	82c0 <_malloc_r+0x524>
    8568:	00c15504 	movi	r3,1364
    856c:	18800536 	bltu	r3,r2,8584 <_malloc_r+0x7e8>
    8570:	3804d4ba 	srli	r2,r7,18
    8574:	11401f44 	addi	r5,r2,125
    8578:	10c01f04 	addi	r3,r2,124
    857c:	294b883a 	add	r5,r5,r5
    8580:	003f4f06 	br	82c0 <_malloc_r+0x524>
    8584:	01403f84 	movi	r5,254
    8588:	00c01f84 	movi	r3,126
    858c:	003f4c06 	br	82c0 <_malloc_r+0x524>
    8590:	98800117 	ldw	r2,4(r19)
    8594:	003fa006 	br	8418 <_malloc_r+0x67c>
    8598:	8808d0fa 	srli	r4,r17,3
    859c:	20800044 	addi	r2,r4,1
    85a0:	1085883a 	add	r2,r2,r2
    85a4:	003e9006 	br	7fe8 <_malloc_r+0x24c>

000085a8 <memchr>:
    85a8:	208000cc 	andi	r2,r4,3
    85ac:	280f883a 	mov	r7,r5
    85b0:	10003426 	beq	r2,zero,8684 <memchr+0xdc>
    85b4:	30bfffc4 	addi	r2,r6,-1
    85b8:	30001a26 	beq	r6,zero,8624 <memchr+0x7c>
    85bc:	20c00003 	ldbu	r3,0(r4)
    85c0:	29803fcc 	andi	r6,r5,255
    85c4:	30c0051e 	bne	r6,r3,85dc <memchr+0x34>
    85c8:	00001806 	br	862c <memchr+0x84>
    85cc:	10001526 	beq	r2,zero,8624 <memchr+0x7c>
    85d0:	20c00003 	ldbu	r3,0(r4)
    85d4:	10bfffc4 	addi	r2,r2,-1
    85d8:	30c01426 	beq	r6,r3,862c <memchr+0x84>
    85dc:	21000044 	addi	r4,r4,1
    85e0:	20c000cc 	andi	r3,r4,3
    85e4:	183ff91e 	bne	r3,zero,85cc <memchr+0x24>
    85e8:	020000c4 	movi	r8,3
    85ec:	40801136 	bltu	r8,r2,8634 <memchr+0x8c>
    85f0:	10000c26 	beq	r2,zero,8624 <memchr+0x7c>
    85f4:	20c00003 	ldbu	r3,0(r4)
    85f8:	29403fcc 	andi	r5,r5,255
    85fc:	28c00b26 	beq	r5,r3,862c <memchr+0x84>
    8600:	20c00044 	addi	r3,r4,1
    8604:	39803fcc 	andi	r6,r7,255
    8608:	2089883a 	add	r4,r4,r2
    860c:	00000306 	br	861c <memchr+0x74>
    8610:	18c00044 	addi	r3,r3,1
    8614:	197fffc3 	ldbu	r5,-1(r3)
    8618:	31400526 	beq	r6,r5,8630 <memchr+0x88>
    861c:	1805883a 	mov	r2,r3
    8620:	20fffb1e 	bne	r4,r3,8610 <memchr+0x68>
    8624:	0005883a 	mov	r2,zero
    8628:	f800283a 	ret
    862c:	2005883a 	mov	r2,r4
    8630:	f800283a 	ret
    8634:	28c03fcc 	andi	r3,r5,255
    8638:	1812923a 	slli	r9,r3,8
    863c:	02ffbff4 	movhi	r11,65279
    8640:	02a02074 	movhi	r10,32897
    8644:	48d2b03a 	or	r9,r9,r3
    8648:	4806943a 	slli	r3,r9,16
    864c:	5affbfc4 	addi	r11,r11,-257
    8650:	52a02004 	addi	r10,r10,-32640
    8654:	48d2b03a 	or	r9,r9,r3
    8658:	20c00017 	ldw	r3,0(r4)
    865c:	48c6f03a 	xor	r3,r9,r3
    8660:	1acd883a 	add	r6,r3,r11
    8664:	00c6303a 	nor	r3,zero,r3
    8668:	30c6703a 	and	r3,r6,r3
    866c:	1a86703a 	and	r3,r3,r10
    8670:	183fe01e 	bne	r3,zero,85f4 <memchr+0x4c>
    8674:	10bfff04 	addi	r2,r2,-4
    8678:	21000104 	addi	r4,r4,4
    867c:	40bff636 	bltu	r8,r2,8658 <memchr+0xb0>
    8680:	003fdb06 	br	85f0 <memchr+0x48>
    8684:	3005883a 	mov	r2,r6
    8688:	003fd706 	br	85e8 <memchr+0x40>

0000868c <memcpy>:
    868c:	defffd04 	addi	sp,sp,-12
    8690:	dfc00215 	stw	ra,8(sp)
    8694:	dc400115 	stw	r17,4(sp)
    8698:	dc000015 	stw	r16,0(sp)
    869c:	00c003c4 	movi	r3,15
    86a0:	2005883a 	mov	r2,r4
    86a4:	1980452e 	bgeu	r3,r6,87bc <memcpy+0x130>
    86a8:	2906b03a 	or	r3,r5,r4
    86ac:	18c000cc 	andi	r3,r3,3
    86b0:	1800441e 	bne	r3,zero,87c4 <memcpy+0x138>
    86b4:	347ffc04 	addi	r17,r6,-16
    86b8:	8822d13a 	srli	r17,r17,4
    86bc:	28c00104 	addi	r3,r5,4
    86c0:	23400104 	addi	r13,r4,4
    86c4:	8820913a 	slli	r16,r17,4
    86c8:	2b000204 	addi	r12,r5,8
    86cc:	22c00204 	addi	r11,r4,8
    86d0:	84000504 	addi	r16,r16,20
    86d4:	2a800304 	addi	r10,r5,12
    86d8:	22400304 	addi	r9,r4,12
    86dc:	2c21883a 	add	r16,r5,r16
    86e0:	2811883a 	mov	r8,r5
    86e4:	200f883a 	mov	r7,r4
    86e8:	41000017 	ldw	r4,0(r8)
    86ec:	1fc00017 	ldw	ra,0(r3)
    86f0:	63c00017 	ldw	r15,0(r12)
    86f4:	39000015 	stw	r4,0(r7)
    86f8:	53800017 	ldw	r14,0(r10)
    86fc:	6fc00015 	stw	ra,0(r13)
    8700:	5bc00015 	stw	r15,0(r11)
    8704:	4b800015 	stw	r14,0(r9)
    8708:	18c00404 	addi	r3,r3,16
    870c:	39c00404 	addi	r7,r7,16
    8710:	42000404 	addi	r8,r8,16
    8714:	6b400404 	addi	r13,r13,16
    8718:	63000404 	addi	r12,r12,16
    871c:	5ac00404 	addi	r11,r11,16
    8720:	52800404 	addi	r10,r10,16
    8724:	4a400404 	addi	r9,r9,16
    8728:	1c3fef1e 	bne	r3,r16,86e8 <memcpy+0x5c>
    872c:	89c00044 	addi	r7,r17,1
    8730:	380e913a 	slli	r7,r7,4
    8734:	310003cc 	andi	r4,r6,15
    8738:	02c000c4 	movi	r11,3
    873c:	11c7883a 	add	r3,r2,r7
    8740:	29cb883a 	add	r5,r5,r7
    8744:	5900212e 	bgeu	r11,r4,87cc <memcpy+0x140>
    8748:	1813883a 	mov	r9,r3
    874c:	2811883a 	mov	r8,r5
    8750:	200f883a 	mov	r7,r4
    8754:	42800017 	ldw	r10,0(r8)
    8758:	4a400104 	addi	r9,r9,4
    875c:	39ffff04 	addi	r7,r7,-4
    8760:	4abfff15 	stw	r10,-4(r9)
    8764:	42000104 	addi	r8,r8,4
    8768:	59fffa36 	bltu	r11,r7,8754 <memcpy+0xc8>
    876c:	213fff04 	addi	r4,r4,-4
    8770:	2008d0ba 	srli	r4,r4,2
    8774:	318000cc 	andi	r6,r6,3
    8778:	21000044 	addi	r4,r4,1
    877c:	2109883a 	add	r4,r4,r4
    8780:	2109883a 	add	r4,r4,r4
    8784:	1907883a 	add	r3,r3,r4
    8788:	290b883a 	add	r5,r5,r4
    878c:	30000626 	beq	r6,zero,87a8 <memcpy+0x11c>
    8790:	198d883a 	add	r6,r3,r6
    8794:	29c00003 	ldbu	r7,0(r5)
    8798:	18c00044 	addi	r3,r3,1
    879c:	29400044 	addi	r5,r5,1
    87a0:	19ffffc5 	stb	r7,-1(r3)
    87a4:	19bffb1e 	bne	r3,r6,8794 <memcpy+0x108>
    87a8:	dfc00217 	ldw	ra,8(sp)
    87ac:	dc400117 	ldw	r17,4(sp)
    87b0:	dc000017 	ldw	r16,0(sp)
    87b4:	dec00304 	addi	sp,sp,12
    87b8:	f800283a 	ret
    87bc:	2007883a 	mov	r3,r4
    87c0:	003ff206 	br	878c <memcpy+0x100>
    87c4:	2007883a 	mov	r3,r4
    87c8:	003ff106 	br	8790 <memcpy+0x104>
    87cc:	200d883a 	mov	r6,r4
    87d0:	003fee06 	br	878c <memcpy+0x100>

000087d4 <memmove>:
    87d4:	2005883a 	mov	r2,r4
    87d8:	29000b2e 	bgeu	r5,r4,8808 <memmove+0x34>
    87dc:	298f883a 	add	r7,r5,r6
    87e0:	21c0092e 	bgeu	r4,r7,8808 <memmove+0x34>
    87e4:	2187883a 	add	r3,r4,r6
    87e8:	198bc83a 	sub	r5,r3,r6
    87ec:	30004826 	beq	r6,zero,8910 <memmove+0x13c>
    87f0:	39ffffc4 	addi	r7,r7,-1
    87f4:	39000003 	ldbu	r4,0(r7)
    87f8:	18ffffc4 	addi	r3,r3,-1
    87fc:	19000005 	stb	r4,0(r3)
    8800:	28fffb1e 	bne	r5,r3,87f0 <memmove+0x1c>
    8804:	f800283a 	ret
    8808:	00c003c4 	movi	r3,15
    880c:	1980412e 	bgeu	r3,r6,8914 <memmove+0x140>
    8810:	2886b03a 	or	r3,r5,r2
    8814:	18c000cc 	andi	r3,r3,3
    8818:	1800401e 	bne	r3,zero,891c <memmove+0x148>
    881c:	33fffc04 	addi	r15,r6,-16
    8820:	781ed13a 	srli	r15,r15,4
    8824:	28c00104 	addi	r3,r5,4
    8828:	13400104 	addi	r13,r2,4
    882c:	781c913a 	slli	r14,r15,4
    8830:	2b000204 	addi	r12,r5,8
    8834:	12c00204 	addi	r11,r2,8
    8838:	73800504 	addi	r14,r14,20
    883c:	2a800304 	addi	r10,r5,12
    8840:	12400304 	addi	r9,r2,12
    8844:	2b9d883a 	add	r14,r5,r14
    8848:	2811883a 	mov	r8,r5
    884c:	100f883a 	mov	r7,r2
    8850:	41000017 	ldw	r4,0(r8)
    8854:	39c00404 	addi	r7,r7,16
    8858:	18c00404 	addi	r3,r3,16
    885c:	393ffc15 	stw	r4,-16(r7)
    8860:	193ffc17 	ldw	r4,-16(r3)
    8864:	6b400404 	addi	r13,r13,16
    8868:	5ac00404 	addi	r11,r11,16
    886c:	693ffc15 	stw	r4,-16(r13)
    8870:	61000017 	ldw	r4,0(r12)
    8874:	4a400404 	addi	r9,r9,16
    8878:	42000404 	addi	r8,r8,16
    887c:	593ffc15 	stw	r4,-16(r11)
    8880:	51000017 	ldw	r4,0(r10)
    8884:	63000404 	addi	r12,r12,16
    8888:	52800404 	addi	r10,r10,16
    888c:	493ffc15 	stw	r4,-16(r9)
    8890:	1bbfef1e 	bne	r3,r14,8850 <memmove+0x7c>
    8894:	79000044 	addi	r4,r15,1
    8898:	2008913a 	slli	r4,r4,4
    889c:	328003cc 	andi	r10,r6,15
    88a0:	02c000c4 	movi	r11,3
    88a4:	1107883a 	add	r3,r2,r4
    88a8:	290b883a 	add	r5,r5,r4
    88ac:	5a801e2e 	bgeu	r11,r10,8928 <memmove+0x154>
    88b0:	1813883a 	mov	r9,r3
    88b4:	2811883a 	mov	r8,r5
    88b8:	500f883a 	mov	r7,r10
    88bc:	41000017 	ldw	r4,0(r8)
    88c0:	4a400104 	addi	r9,r9,4
    88c4:	39ffff04 	addi	r7,r7,-4
    88c8:	493fff15 	stw	r4,-4(r9)
    88cc:	42000104 	addi	r8,r8,4
    88d0:	59fffa36 	bltu	r11,r7,88bc <memmove+0xe8>
    88d4:	513fff04 	addi	r4,r10,-4
    88d8:	2008d0ba 	srli	r4,r4,2
    88dc:	318000cc 	andi	r6,r6,3
    88e0:	21000044 	addi	r4,r4,1
    88e4:	2109883a 	add	r4,r4,r4
    88e8:	2109883a 	add	r4,r4,r4
    88ec:	1907883a 	add	r3,r3,r4
    88f0:	290b883a 	add	r5,r5,r4
    88f4:	30000b26 	beq	r6,zero,8924 <memmove+0x150>
    88f8:	198d883a 	add	r6,r3,r6
    88fc:	29c00003 	ldbu	r7,0(r5)
    8900:	18c00044 	addi	r3,r3,1
    8904:	29400044 	addi	r5,r5,1
    8908:	19ffffc5 	stb	r7,-1(r3)
    890c:	19bffb1e 	bne	r3,r6,88fc <memmove+0x128>
    8910:	f800283a 	ret
    8914:	1007883a 	mov	r3,r2
    8918:	003ff606 	br	88f4 <memmove+0x120>
    891c:	1007883a 	mov	r3,r2
    8920:	003ff506 	br	88f8 <memmove+0x124>
    8924:	f800283a 	ret
    8928:	500d883a 	mov	r6,r10
    892c:	003ff106 	br	88f4 <memmove+0x120>

00008930 <memset>:
    8930:	20c000cc 	andi	r3,r4,3
    8934:	2005883a 	mov	r2,r4
    8938:	18004426 	beq	r3,zero,8a4c <memset+0x11c>
    893c:	31ffffc4 	addi	r7,r6,-1
    8940:	30004026 	beq	r6,zero,8a44 <memset+0x114>
    8944:	2813883a 	mov	r9,r5
    8948:	200d883a 	mov	r6,r4
    894c:	2007883a 	mov	r3,r4
    8950:	00000406 	br	8964 <memset+0x34>
    8954:	3a3fffc4 	addi	r8,r7,-1
    8958:	31800044 	addi	r6,r6,1
    895c:	38003926 	beq	r7,zero,8a44 <memset+0x114>
    8960:	400f883a 	mov	r7,r8
    8964:	18c00044 	addi	r3,r3,1
    8968:	32400005 	stb	r9,0(r6)
    896c:	1a0000cc 	andi	r8,r3,3
    8970:	403ff81e 	bne	r8,zero,8954 <memset+0x24>
    8974:	010000c4 	movi	r4,3
    8978:	21c02d2e 	bgeu	r4,r7,8a30 <memset+0x100>
    897c:	29003fcc 	andi	r4,r5,255
    8980:	200c923a 	slli	r6,r4,8
    8984:	3108b03a 	or	r4,r6,r4
    8988:	200c943a 	slli	r6,r4,16
    898c:	218cb03a 	or	r6,r4,r6
    8990:	010003c4 	movi	r4,15
    8994:	21c0182e 	bgeu	r4,r7,89f8 <memset+0xc8>
    8998:	3b3ffc04 	addi	r12,r7,-16
    899c:	6018d13a 	srli	r12,r12,4
    89a0:	1a000104 	addi	r8,r3,4
    89a4:	1ac00204 	addi	r11,r3,8
    89a8:	6008913a 	slli	r4,r12,4
    89ac:	1a800304 	addi	r10,r3,12
    89b0:	1813883a 	mov	r9,r3
    89b4:	21000504 	addi	r4,r4,20
    89b8:	1909883a 	add	r4,r3,r4
    89bc:	49800015 	stw	r6,0(r9)
    89c0:	41800015 	stw	r6,0(r8)
    89c4:	59800015 	stw	r6,0(r11)
    89c8:	51800015 	stw	r6,0(r10)
    89cc:	42000404 	addi	r8,r8,16
    89d0:	4a400404 	addi	r9,r9,16
    89d4:	5ac00404 	addi	r11,r11,16
    89d8:	52800404 	addi	r10,r10,16
    89dc:	413ff71e 	bne	r8,r4,89bc <memset+0x8c>
    89e0:	63000044 	addi	r12,r12,1
    89e4:	6018913a 	slli	r12,r12,4
    89e8:	39c003cc 	andi	r7,r7,15
    89ec:	010000c4 	movi	r4,3
    89f0:	1b07883a 	add	r3,r3,r12
    89f4:	21c00e2e 	bgeu	r4,r7,8a30 <memset+0x100>
    89f8:	1813883a 	mov	r9,r3
    89fc:	3811883a 	mov	r8,r7
    8a00:	010000c4 	movi	r4,3
    8a04:	49800015 	stw	r6,0(r9)
    8a08:	423fff04 	addi	r8,r8,-4
    8a0c:	4a400104 	addi	r9,r9,4
    8a10:	223ffc36 	bltu	r4,r8,8a04 <memset+0xd4>
    8a14:	393fff04 	addi	r4,r7,-4
    8a18:	2008d0ba 	srli	r4,r4,2
    8a1c:	39c000cc 	andi	r7,r7,3
    8a20:	21000044 	addi	r4,r4,1
    8a24:	2109883a 	add	r4,r4,r4
    8a28:	2109883a 	add	r4,r4,r4
    8a2c:	1907883a 	add	r3,r3,r4
    8a30:	38000526 	beq	r7,zero,8a48 <memset+0x118>
    8a34:	19cf883a 	add	r7,r3,r7
    8a38:	19400005 	stb	r5,0(r3)
    8a3c:	18c00044 	addi	r3,r3,1
    8a40:	38fffd1e 	bne	r7,r3,8a38 <memset+0x108>
    8a44:	f800283a 	ret
    8a48:	f800283a 	ret
    8a4c:	2007883a 	mov	r3,r4
    8a50:	300f883a 	mov	r7,r6
    8a54:	003fc706 	br	8974 <memset+0x44>

00008a58 <_Balloc>:
    8a58:	20801317 	ldw	r2,76(r4)
    8a5c:	defffc04 	addi	sp,sp,-16
    8a60:	dc400115 	stw	r17,4(sp)
    8a64:	dc000015 	stw	r16,0(sp)
    8a68:	dfc00315 	stw	ra,12(sp)
    8a6c:	dc800215 	stw	r18,8(sp)
    8a70:	2023883a 	mov	r17,r4
    8a74:	2821883a 	mov	r16,r5
    8a78:	10000f26 	beq	r2,zero,8ab8 <_Balloc+0x60>
    8a7c:	8407883a 	add	r3,r16,r16
    8a80:	18c7883a 	add	r3,r3,r3
    8a84:	10c7883a 	add	r3,r2,r3
    8a88:	18800017 	ldw	r2,0(r3)
    8a8c:	10001126 	beq	r2,zero,8ad4 <_Balloc+0x7c>
    8a90:	11000017 	ldw	r4,0(r2)
    8a94:	19000015 	stw	r4,0(r3)
    8a98:	10000415 	stw	zero,16(r2)
    8a9c:	10000315 	stw	zero,12(r2)
    8aa0:	dfc00317 	ldw	ra,12(sp)
    8aa4:	dc800217 	ldw	r18,8(sp)
    8aa8:	dc400117 	ldw	r17,4(sp)
    8aac:	dc000017 	ldw	r16,0(sp)
    8ab0:	dec00404 	addi	sp,sp,16
    8ab4:	f800283a 	ret
    8ab8:	01800844 	movi	r6,33
    8abc:	01400104 	movi	r5,4
    8ac0:	000cda00 	call	cda0 <_calloc_r>
    8ac4:	88801315 	stw	r2,76(r17)
    8ac8:	103fec1e 	bne	r2,zero,8a7c <_Balloc+0x24>
    8acc:	0005883a 	mov	r2,zero
    8ad0:	003ff306 	br	8aa0 <_Balloc+0x48>
    8ad4:	01400044 	movi	r5,1
    8ad8:	2c24983a 	sll	r18,r5,r16
    8adc:	8809883a 	mov	r4,r17
    8ae0:	91800144 	addi	r6,r18,5
    8ae4:	318d883a 	add	r6,r6,r6
    8ae8:	318d883a 	add	r6,r6,r6
    8aec:	000cda00 	call	cda0 <_calloc_r>
    8af0:	103ff626 	beq	r2,zero,8acc <_Balloc+0x74>
    8af4:	14000115 	stw	r16,4(r2)
    8af8:	14800215 	stw	r18,8(r2)
    8afc:	003fe606 	br	8a98 <_Balloc+0x40>

00008b00 <_Bfree>:
    8b00:	28000826 	beq	r5,zero,8b24 <_Bfree+0x24>
    8b04:	28c00117 	ldw	r3,4(r5)
    8b08:	20801317 	ldw	r2,76(r4)
    8b0c:	18c7883a 	add	r3,r3,r3
    8b10:	18c7883a 	add	r3,r3,r3
    8b14:	10c5883a 	add	r2,r2,r3
    8b18:	10c00017 	ldw	r3,0(r2)
    8b1c:	28c00015 	stw	r3,0(r5)
    8b20:	11400015 	stw	r5,0(r2)
    8b24:	f800283a 	ret

00008b28 <__multadd>:
    8b28:	defffa04 	addi	sp,sp,-24
    8b2c:	dc800315 	stw	r18,12(sp)
    8b30:	dc400215 	stw	r17,8(sp)
    8b34:	dc000115 	stw	r16,4(sp)
    8b38:	2823883a 	mov	r17,r5
    8b3c:	2c000417 	ldw	r16,16(r5)
    8b40:	dfc00515 	stw	ra,20(sp)
    8b44:	dcc00415 	stw	r19,16(sp)
    8b48:	2025883a 	mov	r18,r4
    8b4c:	29400504 	addi	r5,r5,20
    8b50:	0011883a 	mov	r8,zero
    8b54:	28c00017 	ldw	r3,0(r5)
    8b58:	29400104 	addi	r5,r5,4
    8b5c:	42000044 	addi	r8,r8,1
    8b60:	18bfffcc 	andi	r2,r3,65535
    8b64:	1185383a 	mul	r2,r2,r6
    8b68:	1806d43a 	srli	r3,r3,16
    8b6c:	11cf883a 	add	r7,r2,r7
    8b70:	3808d43a 	srli	r4,r7,16
    8b74:	1987383a 	mul	r3,r3,r6
    8b78:	38bfffcc 	andi	r2,r7,65535
    8b7c:	1907883a 	add	r3,r3,r4
    8b80:	1808943a 	slli	r4,r3,16
    8b84:	180ed43a 	srli	r7,r3,16
    8b88:	2085883a 	add	r2,r4,r2
    8b8c:	28bfff15 	stw	r2,-4(r5)
    8b90:	443ff016 	blt	r8,r16,8b54 <__multadd+0x2c>
    8b94:	38000926 	beq	r7,zero,8bbc <__multadd+0x94>
    8b98:	88800217 	ldw	r2,8(r17)
    8b9c:	80800f0e 	bge	r16,r2,8bdc <__multadd+0xb4>
    8ba0:	80800144 	addi	r2,r16,5
    8ba4:	1085883a 	add	r2,r2,r2
    8ba8:	1085883a 	add	r2,r2,r2
    8bac:	8885883a 	add	r2,r17,r2
    8bb0:	11c00015 	stw	r7,0(r2)
    8bb4:	84000044 	addi	r16,r16,1
    8bb8:	8c000415 	stw	r16,16(r17)
    8bbc:	8805883a 	mov	r2,r17
    8bc0:	dfc00517 	ldw	ra,20(sp)
    8bc4:	dcc00417 	ldw	r19,16(sp)
    8bc8:	dc800317 	ldw	r18,12(sp)
    8bcc:	dc400217 	ldw	r17,8(sp)
    8bd0:	dc000117 	ldw	r16,4(sp)
    8bd4:	dec00604 	addi	sp,sp,24
    8bd8:	f800283a 	ret
    8bdc:	89400117 	ldw	r5,4(r17)
    8be0:	9009883a 	mov	r4,r18
    8be4:	d9c00015 	stw	r7,0(sp)
    8be8:	29400044 	addi	r5,r5,1
    8bec:	0008a580 	call	8a58 <_Balloc>
    8bf0:	89800417 	ldw	r6,16(r17)
    8bf4:	89400304 	addi	r5,r17,12
    8bf8:	11000304 	addi	r4,r2,12
    8bfc:	31800084 	addi	r6,r6,2
    8c00:	318d883a 	add	r6,r6,r6
    8c04:	318d883a 	add	r6,r6,r6
    8c08:	1027883a 	mov	r19,r2
    8c0c:	000868c0 	call	868c <memcpy>
    8c10:	d9c00017 	ldw	r7,0(sp)
    8c14:	88000a26 	beq	r17,zero,8c40 <__multadd+0x118>
    8c18:	88c00117 	ldw	r3,4(r17)
    8c1c:	90801317 	ldw	r2,76(r18)
    8c20:	18c7883a 	add	r3,r3,r3
    8c24:	18c7883a 	add	r3,r3,r3
    8c28:	10c5883a 	add	r2,r2,r3
    8c2c:	10c00017 	ldw	r3,0(r2)
    8c30:	88c00015 	stw	r3,0(r17)
    8c34:	14400015 	stw	r17,0(r2)
    8c38:	9823883a 	mov	r17,r19
    8c3c:	003fd806 	br	8ba0 <__multadd+0x78>
    8c40:	9823883a 	mov	r17,r19
    8c44:	003fd606 	br	8ba0 <__multadd+0x78>

00008c48 <__s2b>:
    8c48:	defff904 	addi	sp,sp,-28
    8c4c:	dc400115 	stw	r17,4(sp)
    8c50:	dc000015 	stw	r16,0(sp)
    8c54:	2023883a 	mov	r17,r4
    8c58:	2821883a 	mov	r16,r5
    8c5c:	39000204 	addi	r4,r7,8
    8c60:	01400244 	movi	r5,9
    8c64:	dcc00315 	stw	r19,12(sp)
    8c68:	dc800215 	stw	r18,8(sp)
    8c6c:	dfc00615 	stw	ra,24(sp)
    8c70:	dd400515 	stw	r21,20(sp)
    8c74:	dd000415 	stw	r20,16(sp)
    8c78:	3825883a 	mov	r18,r7
    8c7c:	3027883a 	mov	r19,r6
    8c80:	000e0d00 	call	e0d0 <__divsi3>
    8c84:	00c00044 	movi	r3,1
    8c88:	000b883a 	mov	r5,zero
    8c8c:	1880030e 	bge	r3,r2,8c9c <__s2b+0x54>
    8c90:	18c7883a 	add	r3,r3,r3
    8c94:	29400044 	addi	r5,r5,1
    8c98:	18bffd16 	blt	r3,r2,8c90 <__s2b+0x48>
    8c9c:	8809883a 	mov	r4,r17
    8ca0:	0008a580 	call	8a58 <_Balloc>
    8ca4:	d8c00717 	ldw	r3,28(sp)
    8ca8:	10c00515 	stw	r3,20(r2)
    8cac:	00c00044 	movi	r3,1
    8cb0:	10c00415 	stw	r3,16(r2)
    8cb4:	00c00244 	movi	r3,9
    8cb8:	1cc0210e 	bge	r3,r19,8d40 <__s2b+0xf8>
    8cbc:	80eb883a 	add	r21,r16,r3
    8cc0:	a829883a 	mov	r20,r21
    8cc4:	84e1883a 	add	r16,r16,r19
    8cc8:	a1c00007 	ldb	r7,0(r20)
    8ccc:	01800284 	movi	r6,10
    8cd0:	a5000044 	addi	r20,r20,1
    8cd4:	100b883a 	mov	r5,r2
    8cd8:	39fff404 	addi	r7,r7,-48
    8cdc:	8809883a 	mov	r4,r17
    8ce0:	0008b280 	call	8b28 <__multadd>
    8ce4:	a43ff81e 	bne	r20,r16,8cc8 <__s2b+0x80>
    8ce8:	ace1883a 	add	r16,r21,r19
    8cec:	843ffe04 	addi	r16,r16,-8
    8cf0:	9c800a0e 	bge	r19,r18,8d1c <__s2b+0xd4>
    8cf4:	94e5c83a 	sub	r18,r18,r19
    8cf8:	84a5883a 	add	r18,r16,r18
    8cfc:	81c00007 	ldb	r7,0(r16)
    8d00:	01800284 	movi	r6,10
    8d04:	84000044 	addi	r16,r16,1
    8d08:	100b883a 	mov	r5,r2
    8d0c:	39fff404 	addi	r7,r7,-48
    8d10:	8809883a 	mov	r4,r17
    8d14:	0008b280 	call	8b28 <__multadd>
    8d18:	84bff81e 	bne	r16,r18,8cfc <__s2b+0xb4>
    8d1c:	dfc00617 	ldw	ra,24(sp)
    8d20:	dd400517 	ldw	r21,20(sp)
    8d24:	dd000417 	ldw	r20,16(sp)
    8d28:	dcc00317 	ldw	r19,12(sp)
    8d2c:	dc800217 	ldw	r18,8(sp)
    8d30:	dc400117 	ldw	r17,4(sp)
    8d34:	dc000017 	ldw	r16,0(sp)
    8d38:	dec00704 	addi	sp,sp,28
    8d3c:	f800283a 	ret
    8d40:	84000284 	addi	r16,r16,10
    8d44:	1827883a 	mov	r19,r3
    8d48:	003fe906 	br	8cf0 <__s2b+0xa8>

00008d4c <__hi0bits>:
    8d4c:	20bfffec 	andhi	r2,r4,65535
    8d50:	1000141e 	bne	r2,zero,8da4 <__hi0bits+0x58>
    8d54:	2008943a 	slli	r4,r4,16
    8d58:	00800404 	movi	r2,16
    8d5c:	20ffc02c 	andhi	r3,r4,65280
    8d60:	1800021e 	bne	r3,zero,8d6c <__hi0bits+0x20>
    8d64:	2008923a 	slli	r4,r4,8
    8d68:	10800204 	addi	r2,r2,8
    8d6c:	20fc002c 	andhi	r3,r4,61440
    8d70:	1800021e 	bne	r3,zero,8d7c <__hi0bits+0x30>
    8d74:	2008913a 	slli	r4,r4,4
    8d78:	10800104 	addi	r2,r2,4
    8d7c:	20f0002c 	andhi	r3,r4,49152
    8d80:	1800031e 	bne	r3,zero,8d90 <__hi0bits+0x44>
    8d84:	2109883a 	add	r4,r4,r4
    8d88:	10800084 	addi	r2,r2,2
    8d8c:	2109883a 	add	r4,r4,r4
    8d90:	20000316 	blt	r4,zero,8da0 <__hi0bits+0x54>
    8d94:	2110002c 	andhi	r4,r4,16384
    8d98:	2000041e 	bne	r4,zero,8dac <__hi0bits+0x60>
    8d9c:	00800804 	movi	r2,32
    8da0:	f800283a 	ret
    8da4:	0005883a 	mov	r2,zero
    8da8:	003fec06 	br	8d5c <__hi0bits+0x10>
    8dac:	10800044 	addi	r2,r2,1
    8db0:	f800283a 	ret

00008db4 <__lo0bits>:
    8db4:	20c00017 	ldw	r3,0(r4)
    8db8:	188001cc 	andi	r2,r3,7
    8dbc:	10000826 	beq	r2,zero,8de0 <__lo0bits+0x2c>
    8dc0:	1880004c 	andi	r2,r3,1
    8dc4:	1000211e 	bne	r2,zero,8e4c <__lo0bits+0x98>
    8dc8:	1880008c 	andi	r2,r3,2
    8dcc:	1000211e 	bne	r2,zero,8e54 <__lo0bits+0xa0>
    8dd0:	1806d0ba 	srli	r3,r3,2
    8dd4:	00800084 	movi	r2,2
    8dd8:	20c00015 	stw	r3,0(r4)
    8ddc:	f800283a 	ret
    8de0:	18bfffcc 	andi	r2,r3,65535
    8de4:	10001326 	beq	r2,zero,8e34 <__lo0bits+0x80>
    8de8:	0005883a 	mov	r2,zero
    8dec:	19403fcc 	andi	r5,r3,255
    8df0:	2800021e 	bne	r5,zero,8dfc <__lo0bits+0x48>
    8df4:	1806d23a 	srli	r3,r3,8
    8df8:	10800204 	addi	r2,r2,8
    8dfc:	194003cc 	andi	r5,r3,15
    8e00:	2800021e 	bne	r5,zero,8e0c <__lo0bits+0x58>
    8e04:	1806d13a 	srli	r3,r3,4
    8e08:	10800104 	addi	r2,r2,4
    8e0c:	194000cc 	andi	r5,r3,3
    8e10:	2800021e 	bne	r5,zero,8e1c <__lo0bits+0x68>
    8e14:	1806d0ba 	srli	r3,r3,2
    8e18:	10800084 	addi	r2,r2,2
    8e1c:	1940004c 	andi	r5,r3,1
    8e20:	2800081e 	bne	r5,zero,8e44 <__lo0bits+0x90>
    8e24:	1806d07a 	srli	r3,r3,1
    8e28:	1800051e 	bne	r3,zero,8e40 <__lo0bits+0x8c>
    8e2c:	00800804 	movi	r2,32
    8e30:	f800283a 	ret
    8e34:	1806d43a 	srli	r3,r3,16
    8e38:	00800404 	movi	r2,16
    8e3c:	003feb06 	br	8dec <__lo0bits+0x38>
    8e40:	10800044 	addi	r2,r2,1
    8e44:	20c00015 	stw	r3,0(r4)
    8e48:	f800283a 	ret
    8e4c:	0005883a 	mov	r2,zero
    8e50:	f800283a 	ret
    8e54:	1806d07a 	srli	r3,r3,1
    8e58:	00800044 	movi	r2,1
    8e5c:	20c00015 	stw	r3,0(r4)
    8e60:	f800283a 	ret

00008e64 <__i2b>:
    8e64:	defffd04 	addi	sp,sp,-12
    8e68:	dc000015 	stw	r16,0(sp)
    8e6c:	04000044 	movi	r16,1
    8e70:	dc400115 	stw	r17,4(sp)
    8e74:	2823883a 	mov	r17,r5
    8e78:	800b883a 	mov	r5,r16
    8e7c:	dfc00215 	stw	ra,8(sp)
    8e80:	0008a580 	call	8a58 <_Balloc>
    8e84:	14400515 	stw	r17,20(r2)
    8e88:	14000415 	stw	r16,16(r2)
    8e8c:	dfc00217 	ldw	ra,8(sp)
    8e90:	dc400117 	ldw	r17,4(sp)
    8e94:	dc000017 	ldw	r16,0(sp)
    8e98:	dec00304 	addi	sp,sp,12
    8e9c:	f800283a 	ret

00008ea0 <__multiply>:
    8ea0:	defffa04 	addi	sp,sp,-24
    8ea4:	dcc00315 	stw	r19,12(sp)
    8ea8:	dc800215 	stw	r18,8(sp)
    8eac:	34c00417 	ldw	r19,16(r6)
    8eb0:	2c800417 	ldw	r18,16(r5)
    8eb4:	dd000415 	stw	r20,16(sp)
    8eb8:	dc400115 	stw	r17,4(sp)
    8ebc:	dfc00515 	stw	ra,20(sp)
    8ec0:	dc000015 	stw	r16,0(sp)
    8ec4:	2829883a 	mov	r20,r5
    8ec8:	3023883a 	mov	r17,r6
    8ecc:	94c0050e 	bge	r18,r19,8ee4 <__multiply+0x44>
    8ed0:	9007883a 	mov	r3,r18
    8ed4:	3029883a 	mov	r20,r6
    8ed8:	9825883a 	mov	r18,r19
    8edc:	2823883a 	mov	r17,r5
    8ee0:	1827883a 	mov	r19,r3
    8ee4:	a0800217 	ldw	r2,8(r20)
    8ee8:	94e1883a 	add	r16,r18,r19
    8eec:	a1400117 	ldw	r5,4(r20)
    8ef0:	1400010e 	bge	r2,r16,8ef8 <__multiply+0x58>
    8ef4:	29400044 	addi	r5,r5,1
    8ef8:	0008a580 	call	8a58 <_Balloc>
    8efc:	8415883a 	add	r10,r16,r16
    8f00:	12c00504 	addi	r11,r2,20
    8f04:	5295883a 	add	r10,r10,r10
    8f08:	5a95883a 	add	r10,r11,r10
    8f0c:	5807883a 	mov	r3,r11
    8f10:	5a80032e 	bgeu	r11,r10,8f20 <__multiply+0x80>
    8f14:	18000015 	stw	zero,0(r3)
    8f18:	18c00104 	addi	r3,r3,4
    8f1c:	1abffd36 	bltu	r3,r10,8f14 <__multiply+0x74>
    8f20:	9ce7883a 	add	r19,r19,r19
    8f24:	94a5883a 	add	r18,r18,r18
    8f28:	89800504 	addi	r6,r17,20
    8f2c:	9ce7883a 	add	r19,r19,r19
    8f30:	a3400504 	addi	r13,r20,20
    8f34:	94a5883a 	add	r18,r18,r18
    8f38:	34d9883a 	add	r12,r6,r19
    8f3c:	6c93883a 	add	r9,r13,r18
    8f40:	3300422e 	bgeu	r6,r12,904c <__multiply+0x1ac>
    8f44:	37c00017 	ldw	ra,0(r6)
    8f48:	fbffffcc 	andi	r15,ra,65535
    8f4c:	78001b26 	beq	r15,zero,8fbc <__multiply+0x11c>
    8f50:	5811883a 	mov	r8,r11
    8f54:	681d883a 	mov	r14,r13
    8f58:	000f883a 	mov	r7,zero
    8f5c:	71000017 	ldw	r4,0(r14)
    8f60:	40c00017 	ldw	r3,0(r8)
    8f64:	73800104 	addi	r14,r14,4
    8f68:	217fffcc 	andi	r5,r4,65535
    8f6c:	2bcb383a 	mul	r5,r5,r15
    8f70:	2008d43a 	srli	r4,r4,16
    8f74:	1c7fffcc 	andi	r17,r3,65535
    8f78:	2c4b883a 	add	r5,r5,r17
    8f7c:	29cb883a 	add	r5,r5,r7
    8f80:	23c9383a 	mul	r4,r4,r15
    8f84:	1806d43a 	srli	r3,r3,16
    8f88:	280ed43a 	srli	r7,r5,16
    8f8c:	297fffcc 	andi	r5,r5,65535
    8f90:	20c7883a 	add	r3,r4,r3
    8f94:	19c7883a 	add	r3,r3,r7
    8f98:	1808943a 	slli	r4,r3,16
    8f9c:	4023883a 	mov	r17,r8
    8fa0:	180ed43a 	srli	r7,r3,16
    8fa4:	214ab03a 	or	r5,r4,r5
    8fa8:	41400015 	stw	r5,0(r8)
    8fac:	42000104 	addi	r8,r8,4
    8fb0:	727fea36 	bltu	r14,r9,8f5c <__multiply+0xbc>
    8fb4:	89c00115 	stw	r7,4(r17)
    8fb8:	37c00017 	ldw	ra,0(r6)
    8fbc:	f83ed43a 	srli	ra,ra,16
    8fc0:	f8001f26 	beq	ra,zero,9040 <__multiply+0x1a0>
    8fc4:	58c00017 	ldw	r3,0(r11)
    8fc8:	681d883a 	mov	r14,r13
    8fcc:	581f883a 	mov	r15,r11
    8fd0:	1811883a 	mov	r8,r3
    8fd4:	5825883a 	mov	r18,r11
    8fd8:	000f883a 	mov	r7,zero
    8fdc:	00000106 	br	8fe4 <__multiply+0x144>
    8fe0:	8825883a 	mov	r18,r17
    8fe4:	7140000b 	ldhu	r5,0(r14)
    8fe8:	4010d43a 	srli	r8,r8,16
    8fec:	193fffcc 	andi	r4,r3,65535
    8ff0:	2fcb383a 	mul	r5,r5,ra
    8ff4:	7bc00104 	addi	r15,r15,4
    8ff8:	73800104 	addi	r14,r14,4
    8ffc:	2a0b883a 	add	r5,r5,r8
    9000:	29cb883a 	add	r5,r5,r7
    9004:	2806943a 	slli	r3,r5,16
    9008:	94400104 	addi	r17,r18,4
    900c:	280ad43a 	srli	r5,r5,16
    9010:	1908b03a 	or	r4,r3,r4
    9014:	793fff15 	stw	r4,-4(r15)
    9018:	70ffff17 	ldw	r3,-4(r14)
    901c:	8a000017 	ldw	r8,0(r17)
    9020:	1806d43a 	srli	r3,r3,16
    9024:	413fffcc 	andi	r4,r8,65535
    9028:	1fc7383a 	mul	r3,r3,ra
    902c:	1907883a 	add	r3,r3,r4
    9030:	1947883a 	add	r3,r3,r5
    9034:	180ed43a 	srli	r7,r3,16
    9038:	727fe936 	bltu	r14,r9,8fe0 <__multiply+0x140>
    903c:	90c00115 	stw	r3,4(r18)
    9040:	31800104 	addi	r6,r6,4
    9044:	5ac00104 	addi	r11,r11,4
    9048:	333fbe36 	bltu	r6,r12,8f44 <__multiply+0xa4>
    904c:	0400090e 	bge	zero,r16,9074 <__multiply+0x1d4>
    9050:	50ffff17 	ldw	r3,-4(r10)
    9054:	52bfff04 	addi	r10,r10,-4
    9058:	18000326 	beq	r3,zero,9068 <__multiply+0x1c8>
    905c:	00000506 	br	9074 <__multiply+0x1d4>
    9060:	50c00017 	ldw	r3,0(r10)
    9064:	1800031e 	bne	r3,zero,9074 <__multiply+0x1d4>
    9068:	843fffc4 	addi	r16,r16,-1
    906c:	52bfff04 	addi	r10,r10,-4
    9070:	803ffb1e 	bne	r16,zero,9060 <__multiply+0x1c0>
    9074:	14000415 	stw	r16,16(r2)
    9078:	dfc00517 	ldw	ra,20(sp)
    907c:	dd000417 	ldw	r20,16(sp)
    9080:	dcc00317 	ldw	r19,12(sp)
    9084:	dc800217 	ldw	r18,8(sp)
    9088:	dc400117 	ldw	r17,4(sp)
    908c:	dc000017 	ldw	r16,0(sp)
    9090:	dec00604 	addi	sp,sp,24
    9094:	f800283a 	ret

00009098 <__pow5mult>:
    9098:	defffa04 	addi	sp,sp,-24
    909c:	dcc00315 	stw	r19,12(sp)
    90a0:	dc000015 	stw	r16,0(sp)
    90a4:	dfc00515 	stw	ra,20(sp)
    90a8:	dd000415 	stw	r20,16(sp)
    90ac:	dc800215 	stw	r18,8(sp)
    90b0:	dc400115 	stw	r17,4(sp)
    90b4:	308000cc 	andi	r2,r6,3
    90b8:	3021883a 	mov	r16,r6
    90bc:	2027883a 	mov	r19,r4
    90c0:	10002f1e 	bne	r2,zero,9180 <__pow5mult+0xe8>
    90c4:	2825883a 	mov	r18,r5
    90c8:	8021d0ba 	srai	r16,r16,2
    90cc:	80001a26 	beq	r16,zero,9138 <__pow5mult+0xa0>
    90d0:	9c401217 	ldw	r17,72(r19)
    90d4:	8800061e 	bne	r17,zero,90f0 <__pow5mult+0x58>
    90d8:	00003406 	br	91ac <__pow5mult+0x114>
    90dc:	8021d07a 	srai	r16,r16,1
    90e0:	80001526 	beq	r16,zero,9138 <__pow5mult+0xa0>
    90e4:	88800017 	ldw	r2,0(r17)
    90e8:	10001c26 	beq	r2,zero,915c <__pow5mult+0xc4>
    90ec:	1023883a 	mov	r17,r2
    90f0:	8080004c 	andi	r2,r16,1
    90f4:	103ff926 	beq	r2,zero,90dc <__pow5mult+0x44>
    90f8:	880d883a 	mov	r6,r17
    90fc:	900b883a 	mov	r5,r18
    9100:	9809883a 	mov	r4,r19
    9104:	0008ea00 	call	8ea0 <__multiply>
    9108:	90001b26 	beq	r18,zero,9178 <__pow5mult+0xe0>
    910c:	91000117 	ldw	r4,4(r18)
    9110:	98c01317 	ldw	r3,76(r19)
    9114:	8021d07a 	srai	r16,r16,1
    9118:	2109883a 	add	r4,r4,r4
    911c:	2109883a 	add	r4,r4,r4
    9120:	1907883a 	add	r3,r3,r4
    9124:	19000017 	ldw	r4,0(r3)
    9128:	91000015 	stw	r4,0(r18)
    912c:	1c800015 	stw	r18,0(r3)
    9130:	1025883a 	mov	r18,r2
    9134:	803feb1e 	bne	r16,zero,90e4 <__pow5mult+0x4c>
    9138:	9005883a 	mov	r2,r18
    913c:	dfc00517 	ldw	ra,20(sp)
    9140:	dd000417 	ldw	r20,16(sp)
    9144:	dcc00317 	ldw	r19,12(sp)
    9148:	dc800217 	ldw	r18,8(sp)
    914c:	dc400117 	ldw	r17,4(sp)
    9150:	dc000017 	ldw	r16,0(sp)
    9154:	dec00604 	addi	sp,sp,24
    9158:	f800283a 	ret
    915c:	880d883a 	mov	r6,r17
    9160:	880b883a 	mov	r5,r17
    9164:	9809883a 	mov	r4,r19
    9168:	0008ea00 	call	8ea0 <__multiply>
    916c:	88800015 	stw	r2,0(r17)
    9170:	10000015 	stw	zero,0(r2)
    9174:	003fdd06 	br	90ec <__pow5mult+0x54>
    9178:	1025883a 	mov	r18,r2
    917c:	003fd706 	br	90dc <__pow5mult+0x44>
    9180:	10bfffc4 	addi	r2,r2,-1
    9184:	1085883a 	add	r2,r2,r2
    9188:	00c000b4 	movhi	r3,2
    918c:	18f6d004 	addi	r3,r3,-9408
    9190:	1085883a 	add	r2,r2,r2
    9194:	1885883a 	add	r2,r3,r2
    9198:	11800017 	ldw	r6,0(r2)
    919c:	000f883a 	mov	r7,zero
    91a0:	0008b280 	call	8b28 <__multadd>
    91a4:	1025883a 	mov	r18,r2
    91a8:	003fc706 	br	90c8 <__pow5mult+0x30>
    91ac:	05000044 	movi	r20,1
    91b0:	a00b883a 	mov	r5,r20
    91b4:	9809883a 	mov	r4,r19
    91b8:	0008a580 	call	8a58 <_Balloc>
    91bc:	1023883a 	mov	r17,r2
    91c0:	00809c44 	movi	r2,625
    91c4:	88800515 	stw	r2,20(r17)
    91c8:	8d000415 	stw	r20,16(r17)
    91cc:	9c401215 	stw	r17,72(r19)
    91d0:	88000015 	stw	zero,0(r17)
    91d4:	003fc606 	br	90f0 <__pow5mult+0x58>

000091d8 <__lshift>:
    91d8:	defff904 	addi	sp,sp,-28
    91dc:	dd400515 	stw	r21,20(sp)
    91e0:	dcc00315 	stw	r19,12(sp)
    91e4:	302bd17a 	srai	r21,r6,5
    91e8:	2cc00417 	ldw	r19,16(r5)
    91ec:	28800217 	ldw	r2,8(r5)
    91f0:	dd000415 	stw	r20,16(sp)
    91f4:	ace7883a 	add	r19,r21,r19
    91f8:	dc800215 	stw	r18,8(sp)
    91fc:	dc400115 	stw	r17,4(sp)
    9200:	dc000015 	stw	r16,0(sp)
    9204:	dfc00615 	stw	ra,24(sp)
    9208:	9c000044 	addi	r16,r19,1
    920c:	2823883a 	mov	r17,r5
    9210:	3029883a 	mov	r20,r6
    9214:	2025883a 	mov	r18,r4
    9218:	29400117 	ldw	r5,4(r5)
    921c:	1400030e 	bge	r2,r16,922c <__lshift+0x54>
    9220:	1085883a 	add	r2,r2,r2
    9224:	29400044 	addi	r5,r5,1
    9228:	143ffd16 	blt	r2,r16,9220 <__lshift+0x48>
    922c:	9009883a 	mov	r4,r18
    9230:	0008a580 	call	8a58 <_Balloc>
    9234:	10c00504 	addi	r3,r2,20
    9238:	0540070e 	bge	zero,r21,9258 <__lshift+0x80>
    923c:	ad6b883a 	add	r21,r21,r21
    9240:	ad6b883a 	add	r21,r21,r21
    9244:	1809883a 	mov	r4,r3
    9248:	1d47883a 	add	r3,r3,r21
    924c:	20000015 	stw	zero,0(r4)
    9250:	21000104 	addi	r4,r4,4
    9254:	193ffd1e 	bne	r3,r4,924c <__lshift+0x74>
    9258:	8a000417 	ldw	r8,16(r17)
    925c:	89000504 	addi	r4,r17,20
    9260:	a18007cc 	andi	r6,r20,31
    9264:	4211883a 	add	r8,r8,r8
    9268:	4211883a 	add	r8,r8,r8
    926c:	2211883a 	add	r8,r4,r8
    9270:	30002326 	beq	r6,zero,9300 <__lshift+0x128>
    9274:	02400804 	movi	r9,32
    9278:	4993c83a 	sub	r9,r9,r6
    927c:	000b883a 	mov	r5,zero
    9280:	21c00017 	ldw	r7,0(r4)
    9284:	1815883a 	mov	r10,r3
    9288:	18c00104 	addi	r3,r3,4
    928c:	398e983a 	sll	r7,r7,r6
    9290:	21000104 	addi	r4,r4,4
    9294:	394ab03a 	or	r5,r7,r5
    9298:	197fff15 	stw	r5,-4(r3)
    929c:	217fff17 	ldw	r5,-4(r4)
    92a0:	2a4ad83a 	srl	r5,r5,r9
    92a4:	223ff636 	bltu	r4,r8,9280 <__lshift+0xa8>
    92a8:	51400115 	stw	r5,4(r10)
    92ac:	28001a1e 	bne	r5,zero,9318 <__lshift+0x140>
    92b0:	843fffc4 	addi	r16,r16,-1
    92b4:	14000415 	stw	r16,16(r2)
    92b8:	88000826 	beq	r17,zero,92dc <__lshift+0x104>
    92bc:	89000117 	ldw	r4,4(r17)
    92c0:	90c01317 	ldw	r3,76(r18)
    92c4:	2109883a 	add	r4,r4,r4
    92c8:	2109883a 	add	r4,r4,r4
    92cc:	1907883a 	add	r3,r3,r4
    92d0:	19000017 	ldw	r4,0(r3)
    92d4:	89000015 	stw	r4,0(r17)
    92d8:	1c400015 	stw	r17,0(r3)
    92dc:	dfc00617 	ldw	ra,24(sp)
    92e0:	dd400517 	ldw	r21,20(sp)
    92e4:	dd000417 	ldw	r20,16(sp)
    92e8:	dcc00317 	ldw	r19,12(sp)
    92ec:	dc800217 	ldw	r18,8(sp)
    92f0:	dc400117 	ldw	r17,4(sp)
    92f4:	dc000017 	ldw	r16,0(sp)
    92f8:	dec00704 	addi	sp,sp,28
    92fc:	f800283a 	ret
    9300:	21400017 	ldw	r5,0(r4)
    9304:	18c00104 	addi	r3,r3,4
    9308:	21000104 	addi	r4,r4,4
    930c:	197fff15 	stw	r5,-4(r3)
    9310:	223ffb36 	bltu	r4,r8,9300 <__lshift+0x128>
    9314:	003fe606 	br	92b0 <__lshift+0xd8>
    9318:	9c000084 	addi	r16,r19,2
    931c:	003fe406 	br	92b0 <__lshift+0xd8>

00009320 <__mcmp>:
    9320:	20800417 	ldw	r2,16(r4)
    9324:	28c00417 	ldw	r3,16(r5)
    9328:	10c5c83a 	sub	r2,r2,r3
    932c:	1000111e 	bne	r2,zero,9374 <__mcmp+0x54>
    9330:	18c7883a 	add	r3,r3,r3
    9334:	18c7883a 	add	r3,r3,r3
    9338:	21000504 	addi	r4,r4,20
    933c:	29400504 	addi	r5,r5,20
    9340:	20c5883a 	add	r2,r4,r3
    9344:	28cb883a 	add	r5,r5,r3
    9348:	00000106 	br	9350 <__mcmp+0x30>
    934c:	20800a2e 	bgeu	r4,r2,9378 <__mcmp+0x58>
    9350:	10bfff04 	addi	r2,r2,-4
    9354:	297fff04 	addi	r5,r5,-4
    9358:	11800017 	ldw	r6,0(r2)
    935c:	28c00017 	ldw	r3,0(r5)
    9360:	30fffa26 	beq	r6,r3,934c <__mcmp+0x2c>
    9364:	30c00236 	bltu	r6,r3,9370 <__mcmp+0x50>
    9368:	00800044 	movi	r2,1
    936c:	f800283a 	ret
    9370:	00bfffc4 	movi	r2,-1
    9374:	f800283a 	ret
    9378:	0005883a 	mov	r2,zero
    937c:	f800283a 	ret

00009380 <__mdiff>:
    9380:	28c00417 	ldw	r3,16(r5)
    9384:	30800417 	ldw	r2,16(r6)
    9388:	defffa04 	addi	sp,sp,-24
    938c:	dcc00315 	stw	r19,12(sp)
    9390:	dc800215 	stw	r18,8(sp)
    9394:	dfc00515 	stw	ra,20(sp)
    9398:	dd000415 	stw	r20,16(sp)
    939c:	dc400115 	stw	r17,4(sp)
    93a0:	dc000015 	stw	r16,0(sp)
    93a4:	1887c83a 	sub	r3,r3,r2
    93a8:	2825883a 	mov	r18,r5
    93ac:	3027883a 	mov	r19,r6
    93b0:	1800141e 	bne	r3,zero,9404 <__mdiff+0x84>
    93b4:	1085883a 	add	r2,r2,r2
    93b8:	1085883a 	add	r2,r2,r2
    93bc:	2a000504 	addi	r8,r5,20
    93c0:	34000504 	addi	r16,r6,20
    93c4:	4087883a 	add	r3,r8,r2
    93c8:	8085883a 	add	r2,r16,r2
    93cc:	00000106 	br	93d4 <__mdiff+0x54>
    93d0:	40c0592e 	bgeu	r8,r3,9538 <__mdiff+0x1b8>
    93d4:	18ffff04 	addi	r3,r3,-4
    93d8:	10bfff04 	addi	r2,r2,-4
    93dc:	19c00017 	ldw	r7,0(r3)
    93e0:	11400017 	ldw	r5,0(r2)
    93e4:	397ffa26 	beq	r7,r5,93d0 <__mdiff+0x50>
    93e8:	3940592e 	bgeu	r7,r5,9550 <__mdiff+0x1d0>
    93ec:	9005883a 	mov	r2,r18
    93f0:	4023883a 	mov	r17,r8
    93f4:	9825883a 	mov	r18,r19
    93f8:	05000044 	movi	r20,1
    93fc:	1027883a 	mov	r19,r2
    9400:	00000406 	br	9414 <__mdiff+0x94>
    9404:	18005616 	blt	r3,zero,9560 <__mdiff+0x1e0>
    9408:	34400504 	addi	r17,r6,20
    940c:	2c000504 	addi	r16,r5,20
    9410:	0029883a 	mov	r20,zero
    9414:	91400117 	ldw	r5,4(r18)
    9418:	0008a580 	call	8a58 <_Balloc>
    941c:	92400417 	ldw	r9,16(r18)
    9420:	9b000417 	ldw	r12,16(r19)
    9424:	12c00504 	addi	r11,r2,20
    9428:	4a51883a 	add	r8,r9,r9
    942c:	6319883a 	add	r12,r12,r12
    9430:	4211883a 	add	r8,r8,r8
    9434:	6319883a 	add	r12,r12,r12
    9438:	15000315 	stw	r20,12(r2)
    943c:	8211883a 	add	r8,r16,r8
    9440:	8b19883a 	add	r12,r17,r12
    9444:	0007883a 	mov	r3,zero
    9448:	81400017 	ldw	r5,0(r16)
    944c:	89c00017 	ldw	r7,0(r17)
    9450:	59800104 	addi	r6,r11,4
    9454:	293fffcc 	andi	r4,r5,65535
    9458:	20c7883a 	add	r3,r4,r3
    945c:	393fffcc 	andi	r4,r7,65535
    9460:	1909c83a 	sub	r4,r3,r4
    9464:	280ad43a 	srli	r5,r5,16
    9468:	380ed43a 	srli	r7,r7,16
    946c:	2007d43a 	srai	r3,r4,16
    9470:	213fffcc 	andi	r4,r4,65535
    9474:	29cbc83a 	sub	r5,r5,r7
    9478:	28c7883a 	add	r3,r5,r3
    947c:	180a943a 	slli	r5,r3,16
    9480:	8c400104 	addi	r17,r17,4
    9484:	84000104 	addi	r16,r16,4
    9488:	2908b03a 	or	r4,r5,r4
    948c:	59000015 	stw	r4,0(r11)
    9490:	1807d43a 	srai	r3,r3,16
    9494:	3015883a 	mov	r10,r6
    9498:	3017883a 	mov	r11,r6
    949c:	8b3fea36 	bltu	r17,r12,9448 <__mdiff+0xc8>
    94a0:	8200162e 	bgeu	r16,r8,94fc <__mdiff+0x17c>
    94a4:	8017883a 	mov	r11,r16
    94a8:	59400017 	ldw	r5,0(r11)
    94ac:	31800104 	addi	r6,r6,4
    94b0:	5ac00104 	addi	r11,r11,4
    94b4:	293fffcc 	andi	r4,r5,65535
    94b8:	20c7883a 	add	r3,r4,r3
    94bc:	280ed43a 	srli	r7,r5,16
    94c0:	180bd43a 	srai	r5,r3,16
    94c4:	193fffcc 	andi	r4,r3,65535
    94c8:	3947883a 	add	r3,r7,r5
    94cc:	180a943a 	slli	r5,r3,16
    94d0:	1807d43a 	srai	r3,r3,16
    94d4:	2908b03a 	or	r4,r5,r4
    94d8:	313fff15 	stw	r4,-4(r6)
    94dc:	5a3ff236 	bltu	r11,r8,94a8 <__mdiff+0x128>
    94e0:	0406303a 	nor	r3,zero,r16
    94e4:	1a07883a 	add	r3,r3,r8
    94e8:	1806d0ba 	srli	r3,r3,2
    94ec:	18c00044 	addi	r3,r3,1
    94f0:	18c7883a 	add	r3,r3,r3
    94f4:	18c7883a 	add	r3,r3,r3
    94f8:	50d5883a 	add	r10,r10,r3
    94fc:	50ffff04 	addi	r3,r10,-4
    9500:	2000041e 	bne	r4,zero,9514 <__mdiff+0x194>
    9504:	18ffff04 	addi	r3,r3,-4
    9508:	19000017 	ldw	r4,0(r3)
    950c:	4a7fffc4 	addi	r9,r9,-1
    9510:	203ffc26 	beq	r4,zero,9504 <__mdiff+0x184>
    9514:	12400415 	stw	r9,16(r2)
    9518:	dfc00517 	ldw	ra,20(sp)
    951c:	dd000417 	ldw	r20,16(sp)
    9520:	dcc00317 	ldw	r19,12(sp)
    9524:	dc800217 	ldw	r18,8(sp)
    9528:	dc400117 	ldw	r17,4(sp)
    952c:	dc000017 	ldw	r16,0(sp)
    9530:	dec00604 	addi	sp,sp,24
    9534:	f800283a 	ret
    9538:	000b883a 	mov	r5,zero
    953c:	0008a580 	call	8a58 <_Balloc>
    9540:	00c00044 	movi	r3,1
    9544:	10c00415 	stw	r3,16(r2)
    9548:	10000515 	stw	zero,20(r2)
    954c:	003ff206 	br	9518 <__mdiff+0x198>
    9550:	8023883a 	mov	r17,r16
    9554:	0029883a 	mov	r20,zero
    9558:	4021883a 	mov	r16,r8
    955c:	003fad06 	br	9414 <__mdiff+0x94>
    9560:	9005883a 	mov	r2,r18
    9564:	94400504 	addi	r17,r18,20
    9568:	9c000504 	addi	r16,r19,20
    956c:	9825883a 	mov	r18,r19
    9570:	05000044 	movi	r20,1
    9574:	1027883a 	mov	r19,r2
    9578:	003fa606 	br	9414 <__mdiff+0x94>

0000957c <__ulp>:
    957c:	295ffc2c 	andhi	r5,r5,32752
    9580:	00bf3034 	movhi	r2,64704
    9584:	2887883a 	add	r3,r5,r2
    9588:	00c0020e 	bge	zero,r3,9594 <__ulp+0x18>
    958c:	0005883a 	mov	r2,zero
    9590:	f800283a 	ret
    9594:	00c7c83a 	sub	r3,zero,r3
    9598:	1807d53a 	srai	r3,r3,20
    959c:	008004c4 	movi	r2,19
    95a0:	10c00b0e 	bge	r2,r3,95d0 <__ulp+0x54>
    95a4:	18bffb04 	addi	r2,r3,-20
    95a8:	01000784 	movi	r4,30
    95ac:	0007883a 	mov	r3,zero
    95b0:	20800516 	blt	r4,r2,95c8 <__ulp+0x4c>
    95b4:	010007c4 	movi	r4,31
    95b8:	2089c83a 	sub	r4,r4,r2
    95bc:	00800044 	movi	r2,1
    95c0:	1104983a 	sll	r2,r2,r4
    95c4:	f800283a 	ret
    95c8:	00800044 	movi	r2,1
    95cc:	f800283a 	ret
    95d0:	01400234 	movhi	r5,8
    95d4:	28c7d83a 	sra	r3,r5,r3
    95d8:	0005883a 	mov	r2,zero
    95dc:	f800283a 	ret

000095e0 <__b2d>:
    95e0:	defffa04 	addi	sp,sp,-24
    95e4:	dc000015 	stw	r16,0(sp)
    95e8:	24000417 	ldw	r16,16(r4)
    95ec:	dc400115 	stw	r17,4(sp)
    95f0:	24400504 	addi	r17,r4,20
    95f4:	8421883a 	add	r16,r16,r16
    95f8:	8421883a 	add	r16,r16,r16
    95fc:	8c21883a 	add	r16,r17,r16
    9600:	dc800215 	stw	r18,8(sp)
    9604:	84bfff17 	ldw	r18,-4(r16)
    9608:	dd000415 	stw	r20,16(sp)
    960c:	dcc00315 	stw	r19,12(sp)
    9610:	9009883a 	mov	r4,r18
    9614:	2829883a 	mov	r20,r5
    9618:	dfc00515 	stw	ra,20(sp)
    961c:	0008d4c0 	call	8d4c <__hi0bits>
    9620:	00c00804 	movi	r3,32
    9624:	1889c83a 	sub	r4,r3,r2
    9628:	a1000015 	stw	r4,0(r20)
    962c:	01000284 	movi	r4,10
    9630:	84ffff04 	addi	r19,r16,-4
    9634:	20801216 	blt	r4,r2,9680 <__b2d+0xa0>
    9638:	018002c4 	movi	r6,11
    963c:	308dc83a 	sub	r6,r6,r2
    9640:	9186d83a 	srl	r3,r18,r6
    9644:	18cffc34 	orhi	r3,r3,16368
    9648:	8cc0212e 	bgeu	r17,r19,96d0 <__b2d+0xf0>
    964c:	813ffe17 	ldw	r4,-8(r16)
    9650:	218cd83a 	srl	r6,r4,r6
    9654:	10800544 	addi	r2,r2,21
    9658:	9084983a 	sll	r2,r18,r2
    965c:	1184b03a 	or	r2,r2,r6
    9660:	dfc00517 	ldw	ra,20(sp)
    9664:	dd000417 	ldw	r20,16(sp)
    9668:	dcc00317 	ldw	r19,12(sp)
    966c:	dc800217 	ldw	r18,8(sp)
    9670:	dc400117 	ldw	r17,4(sp)
    9674:	dc000017 	ldw	r16,0(sp)
    9678:	dec00604 	addi	sp,sp,24
    967c:	f800283a 	ret
    9680:	8cc00f2e 	bgeu	r17,r19,96c0 <__b2d+0xe0>
    9684:	117ffd44 	addi	r5,r2,-11
    9688:	80bffe17 	ldw	r2,-8(r16)
    968c:	28000e26 	beq	r5,zero,96c8 <__b2d+0xe8>
    9690:	1949c83a 	sub	r4,r3,r5
    9694:	9164983a 	sll	r18,r18,r5
    9698:	1106d83a 	srl	r3,r2,r4
    969c:	81bffe04 	addi	r6,r16,-8
    96a0:	948ffc34 	orhi	r18,r18,16368
    96a4:	90c6b03a 	or	r3,r18,r3
    96a8:	89800e2e 	bgeu	r17,r6,96e4 <__b2d+0x104>
    96ac:	81bffd17 	ldw	r6,-12(r16)
    96b0:	1144983a 	sll	r2,r2,r5
    96b4:	310ad83a 	srl	r5,r6,r4
    96b8:	2884b03a 	or	r2,r5,r2
    96bc:	003fe806 	br	9660 <__b2d+0x80>
    96c0:	10bffd44 	addi	r2,r2,-11
    96c4:	1000041e 	bne	r2,zero,96d8 <__b2d+0xf8>
    96c8:	90cffc34 	orhi	r3,r18,16368
    96cc:	003fe406 	br	9660 <__b2d+0x80>
    96d0:	000d883a 	mov	r6,zero
    96d4:	003fdf06 	br	9654 <__b2d+0x74>
    96d8:	90a4983a 	sll	r18,r18,r2
    96dc:	0005883a 	mov	r2,zero
    96e0:	003ff906 	br	96c8 <__b2d+0xe8>
    96e4:	1144983a 	sll	r2,r2,r5
    96e8:	003fdd06 	br	9660 <__b2d+0x80>

000096ec <__d2b>:
    96ec:	defff804 	addi	sp,sp,-32
    96f0:	dc000215 	stw	r16,8(sp)
    96f4:	3021883a 	mov	r16,r6
    96f8:	dc400315 	stw	r17,12(sp)
    96fc:	8022907a 	slli	r17,r16,1
    9700:	dd000615 	stw	r20,24(sp)
    9704:	2829883a 	mov	r20,r5
    9708:	01400044 	movi	r5,1
    970c:	dcc00515 	stw	r19,20(sp)
    9710:	dc800415 	stw	r18,16(sp)
    9714:	dfc00715 	stw	ra,28(sp)
    9718:	3825883a 	mov	r18,r7
    971c:	8822d57a 	srli	r17,r17,21
    9720:	0008a580 	call	8a58 <_Balloc>
    9724:	1027883a 	mov	r19,r2
    9728:	00800434 	movhi	r2,16
    972c:	10bfffc4 	addi	r2,r2,-1
    9730:	808c703a 	and	r6,r16,r2
    9734:	88000126 	beq	r17,zero,973c <__d2b+0x50>
    9738:	31800434 	orhi	r6,r6,16
    973c:	d9800015 	stw	r6,0(sp)
    9740:	a0002426 	beq	r20,zero,97d4 <__d2b+0xe8>
    9744:	d9000104 	addi	r4,sp,4
    9748:	dd000115 	stw	r20,4(sp)
    974c:	0008db40 	call	8db4 <__lo0bits>
    9750:	d8c00017 	ldw	r3,0(sp)
    9754:	10002f1e 	bne	r2,zero,9814 <__d2b+0x128>
    9758:	d9000117 	ldw	r4,4(sp)
    975c:	99000515 	stw	r4,20(r19)
    9760:	1821003a 	cmpeq	r16,r3,zero
    9764:	01000084 	movi	r4,2
    9768:	2421c83a 	sub	r16,r4,r16
    976c:	98c00615 	stw	r3,24(r19)
    9770:	9c000415 	stw	r16,16(r19)
    9774:	88001f1e 	bne	r17,zero,97f4 <__d2b+0x108>
    9778:	10bef384 	addi	r2,r2,-1074
    977c:	90800015 	stw	r2,0(r18)
    9780:	00900034 	movhi	r2,16384
    9784:	10bfffc4 	addi	r2,r2,-1
    9788:	8085883a 	add	r2,r16,r2
    978c:	1085883a 	add	r2,r2,r2
    9790:	1085883a 	add	r2,r2,r2
    9794:	9885883a 	add	r2,r19,r2
    9798:	11000517 	ldw	r4,20(r2)
    979c:	8020917a 	slli	r16,r16,5
    97a0:	0008d4c0 	call	8d4c <__hi0bits>
    97a4:	d8c00817 	ldw	r3,32(sp)
    97a8:	8085c83a 	sub	r2,r16,r2
    97ac:	18800015 	stw	r2,0(r3)
    97b0:	9805883a 	mov	r2,r19
    97b4:	dfc00717 	ldw	ra,28(sp)
    97b8:	dd000617 	ldw	r20,24(sp)
    97bc:	dcc00517 	ldw	r19,20(sp)
    97c0:	dc800417 	ldw	r18,16(sp)
    97c4:	dc400317 	ldw	r17,12(sp)
    97c8:	dc000217 	ldw	r16,8(sp)
    97cc:	dec00804 	addi	sp,sp,32
    97d0:	f800283a 	ret
    97d4:	d809883a 	mov	r4,sp
    97d8:	0008db40 	call	8db4 <__lo0bits>
    97dc:	d8c00017 	ldw	r3,0(sp)
    97e0:	04000044 	movi	r16,1
    97e4:	9c000415 	stw	r16,16(r19)
    97e8:	98c00515 	stw	r3,20(r19)
    97ec:	10800804 	addi	r2,r2,32
    97f0:	883fe126 	beq	r17,zero,9778 <__d2b+0x8c>
    97f4:	00c00d44 	movi	r3,53
    97f8:	8c7ef344 	addi	r17,r17,-1075
    97fc:	88a3883a 	add	r17,r17,r2
    9800:	1885c83a 	sub	r2,r3,r2
    9804:	d8c00817 	ldw	r3,32(sp)
    9808:	94400015 	stw	r17,0(r18)
    980c:	18800015 	stw	r2,0(r3)
    9810:	003fe706 	br	97b0 <__d2b+0xc4>
    9814:	01000804 	movi	r4,32
    9818:	2089c83a 	sub	r4,r4,r2
    981c:	1908983a 	sll	r4,r3,r4
    9820:	d9400117 	ldw	r5,4(sp)
    9824:	1886d83a 	srl	r3,r3,r2
    9828:	2148b03a 	or	r4,r4,r5
    982c:	99000515 	stw	r4,20(r19)
    9830:	d8c00015 	stw	r3,0(sp)
    9834:	003fca06 	br	9760 <__d2b+0x74>

00009838 <__ratio>:
    9838:	defff904 	addi	sp,sp,-28
    983c:	dc400315 	stw	r17,12(sp)
    9840:	2823883a 	mov	r17,r5
    9844:	d9400104 	addi	r5,sp,4
    9848:	dfc00615 	stw	ra,24(sp)
    984c:	dcc00515 	stw	r19,20(sp)
    9850:	dc800415 	stw	r18,16(sp)
    9854:	2027883a 	mov	r19,r4
    9858:	dc000215 	stw	r16,8(sp)
    985c:	00095e00 	call	95e0 <__b2d>
    9860:	d80b883a 	mov	r5,sp
    9864:	8809883a 	mov	r4,r17
    9868:	1025883a 	mov	r18,r2
    986c:	1821883a 	mov	r16,r3
    9870:	00095e00 	call	95e0 <__b2d>
    9874:	8a000417 	ldw	r8,16(r17)
    9878:	99000417 	ldw	r4,16(r19)
    987c:	d9400117 	ldw	r5,4(sp)
    9880:	2209c83a 	sub	r4,r4,r8
    9884:	2010917a 	slli	r8,r4,5
    9888:	d9000017 	ldw	r4,0(sp)
    988c:	2909c83a 	sub	r4,r5,r4
    9890:	4109883a 	add	r4,r8,r4
    9894:	01000e0e 	bge	zero,r4,98d0 <__ratio+0x98>
    9898:	2008953a 	slli	r4,r4,20
    989c:	2421883a 	add	r16,r4,r16
    98a0:	100d883a 	mov	r6,r2
    98a4:	180f883a 	mov	r7,r3
    98a8:	9009883a 	mov	r4,r18
    98ac:	800b883a 	mov	r5,r16
    98b0:	000eb300 	call	eb30 <__divdf3>
    98b4:	dfc00617 	ldw	ra,24(sp)
    98b8:	dcc00517 	ldw	r19,20(sp)
    98bc:	dc800417 	ldw	r18,16(sp)
    98c0:	dc400317 	ldw	r17,12(sp)
    98c4:	dc000217 	ldw	r16,8(sp)
    98c8:	dec00704 	addi	sp,sp,28
    98cc:	f800283a 	ret
    98d0:	2008953a 	slli	r4,r4,20
    98d4:	1907c83a 	sub	r3,r3,r4
    98d8:	003ff106 	br	98a0 <__ratio+0x68>

000098dc <_mprec_log10>:
    98dc:	defffe04 	addi	sp,sp,-8
    98e0:	dc000015 	stw	r16,0(sp)
    98e4:	dfc00115 	stw	ra,4(sp)
    98e8:	008005c4 	movi	r2,23
    98ec:	2021883a 	mov	r16,r4
    98f0:	11000d0e 	bge	r2,r4,9928 <_mprec_log10+0x4c>
    98f4:	0005883a 	mov	r2,zero
    98f8:	00cffc34 	movhi	r3,16368
    98fc:	843fffc4 	addi	r16,r16,-1
    9900:	000d883a 	mov	r6,zero
    9904:	01d00934 	movhi	r7,16420
    9908:	1009883a 	mov	r4,r2
    990c:	180b883a 	mov	r5,r3
    9910:	000f6700 	call	f670 <__muldf3>
    9914:	803ff91e 	bne	r16,zero,98fc <_mprec_log10+0x20>
    9918:	dfc00117 	ldw	ra,4(sp)
    991c:	dc000017 	ldw	r16,0(sp)
    9920:	dec00204 	addi	sp,sp,8
    9924:	f800283a 	ret
    9928:	202090fa 	slli	r16,r4,3
    992c:	008000b4 	movhi	r2,2
    9930:	10b6e704 	addi	r2,r2,-9316
    9934:	1421883a 	add	r16,r2,r16
    9938:	80800017 	ldw	r2,0(r16)
    993c:	80c00117 	ldw	r3,4(r16)
    9940:	dfc00117 	ldw	ra,4(sp)
    9944:	dc000017 	ldw	r16,0(sp)
    9948:	dec00204 	addi	sp,sp,8
    994c:	f800283a 	ret

00009950 <__copybits>:
    9950:	297fffc4 	addi	r5,r5,-1
    9954:	280fd17a 	srai	r7,r5,5
    9958:	30c00417 	ldw	r3,16(r6)
    995c:	30800504 	addi	r2,r6,20
    9960:	39c00044 	addi	r7,r7,1
    9964:	18c7883a 	add	r3,r3,r3
    9968:	39cf883a 	add	r7,r7,r7
    996c:	18c7883a 	add	r3,r3,r3
    9970:	39cf883a 	add	r7,r7,r7
    9974:	10c7883a 	add	r3,r2,r3
    9978:	21cf883a 	add	r7,r4,r7
    997c:	10c00d2e 	bgeu	r2,r3,99b4 <__copybits+0x64>
    9980:	200b883a 	mov	r5,r4
    9984:	12000017 	ldw	r8,0(r2)
    9988:	29400104 	addi	r5,r5,4
    998c:	10800104 	addi	r2,r2,4
    9990:	2a3fff15 	stw	r8,-4(r5)
    9994:	10fffb36 	bltu	r2,r3,9984 <__copybits+0x34>
    9998:	1985c83a 	sub	r2,r3,r6
    999c:	10bffac4 	addi	r2,r2,-21
    99a0:	1004d0ba 	srli	r2,r2,2
    99a4:	10800044 	addi	r2,r2,1
    99a8:	1085883a 	add	r2,r2,r2
    99ac:	1085883a 	add	r2,r2,r2
    99b0:	2089883a 	add	r4,r4,r2
    99b4:	21c0032e 	bgeu	r4,r7,99c4 <__copybits+0x74>
    99b8:	20000015 	stw	zero,0(r4)
    99bc:	21000104 	addi	r4,r4,4
    99c0:	21fffd36 	bltu	r4,r7,99b8 <__copybits+0x68>
    99c4:	f800283a 	ret

000099c8 <__any_on>:
    99c8:	20c00417 	ldw	r3,16(r4)
    99cc:	2805d17a 	srai	r2,r5,5
    99d0:	21000504 	addi	r4,r4,20
    99d4:	18800d0e 	bge	r3,r2,9a0c <__any_on+0x44>
    99d8:	18c7883a 	add	r3,r3,r3
    99dc:	18c7883a 	add	r3,r3,r3
    99e0:	20c7883a 	add	r3,r4,r3
    99e4:	20c0192e 	bgeu	r4,r3,9a4c <__any_on+0x84>
    99e8:	18bfff17 	ldw	r2,-4(r3)
    99ec:	18ffff04 	addi	r3,r3,-4
    99f0:	1000041e 	bne	r2,zero,9a04 <__any_on+0x3c>
    99f4:	20c0142e 	bgeu	r4,r3,9a48 <__any_on+0x80>
    99f8:	18ffff04 	addi	r3,r3,-4
    99fc:	19400017 	ldw	r5,0(r3)
    9a00:	283ffc26 	beq	r5,zero,99f4 <__any_on+0x2c>
    9a04:	00800044 	movi	r2,1
    9a08:	f800283a 	ret
    9a0c:	10c00a0e 	bge	r2,r3,9a38 <__any_on+0x70>
    9a10:	1085883a 	add	r2,r2,r2
    9a14:	1085883a 	add	r2,r2,r2
    9a18:	294007cc 	andi	r5,r5,31
    9a1c:	2087883a 	add	r3,r4,r2
    9a20:	283ff026 	beq	r5,zero,99e4 <__any_on+0x1c>
    9a24:	19800017 	ldw	r6,0(r3)
    9a28:	3144d83a 	srl	r2,r6,r5
    9a2c:	114a983a 	sll	r5,r2,r5
    9a30:	317ff41e 	bne	r6,r5,9a04 <__any_on+0x3c>
    9a34:	003feb06 	br	99e4 <__any_on+0x1c>
    9a38:	1085883a 	add	r2,r2,r2
    9a3c:	1085883a 	add	r2,r2,r2
    9a40:	2087883a 	add	r3,r4,r2
    9a44:	003fe706 	br	99e4 <__any_on+0x1c>
    9a48:	f800283a 	ret
    9a4c:	0005883a 	mov	r2,zero
    9a50:	f800283a 	ret

00009a54 <_realloc_r>:
    9a54:	defff604 	addi	sp,sp,-40
    9a58:	dc800215 	stw	r18,8(sp)
    9a5c:	dfc00915 	stw	ra,36(sp)
    9a60:	df000815 	stw	fp,32(sp)
    9a64:	ddc00715 	stw	r23,28(sp)
    9a68:	dd800615 	stw	r22,24(sp)
    9a6c:	dd400515 	stw	r21,20(sp)
    9a70:	dd000415 	stw	r20,16(sp)
    9a74:	dcc00315 	stw	r19,12(sp)
    9a78:	dc400115 	stw	r17,4(sp)
    9a7c:	dc000015 	stw	r16,0(sp)
    9a80:	3025883a 	mov	r18,r6
    9a84:	2800b726 	beq	r5,zero,9d64 <_realloc_r+0x310>
    9a88:	282b883a 	mov	r21,r5
    9a8c:	2029883a 	mov	r20,r4
    9a90:	001134c0 	call	1134c <__malloc_lock>
    9a94:	a8bfff17 	ldw	r2,-4(r21)
    9a98:	043fff04 	movi	r16,-4
    9a9c:	90c002c4 	addi	r3,r18,11
    9aa0:	01000584 	movi	r4,22
    9aa4:	acfffe04 	addi	r19,r21,-8
    9aa8:	1420703a 	and	r16,r2,r16
    9aac:	20c0332e 	bgeu	r4,r3,9b7c <_realloc_r+0x128>
    9ab0:	047ffe04 	movi	r17,-8
    9ab4:	1c62703a 	and	r17,r3,r17
    9ab8:	8807883a 	mov	r3,r17
    9abc:	88005816 	blt	r17,zero,9c20 <_realloc_r+0x1cc>
    9ac0:	8c805736 	bltu	r17,r18,9c20 <_realloc_r+0x1cc>
    9ac4:	80c0300e 	bge	r16,r3,9b88 <_realloc_r+0x134>
    9ac8:	070000b4 	movhi	fp,2
    9acc:	e7393704 	addi	fp,fp,-6948
    9ad0:	e1c00217 	ldw	r7,8(fp)
    9ad4:	9c09883a 	add	r4,r19,r16
    9ad8:	22000117 	ldw	r8,4(r4)
    9adc:	21c06326 	beq	r4,r7,9c6c <_realloc_r+0x218>
    9ae0:	017fff84 	movi	r5,-2
    9ae4:	414a703a 	and	r5,r8,r5
    9ae8:	214b883a 	add	r5,r4,r5
    9aec:	29800117 	ldw	r6,4(r5)
    9af0:	3180004c 	andi	r6,r6,1
    9af4:	30003f26 	beq	r6,zero,9bf4 <_realloc_r+0x1a0>
    9af8:	1080004c 	andi	r2,r2,1
    9afc:	10008326 	beq	r2,zero,9d0c <_realloc_r+0x2b8>
    9b00:	900b883a 	mov	r5,r18
    9b04:	a009883a 	mov	r4,r20
    9b08:	0007d9c0 	call	7d9c <_malloc_r>
    9b0c:	1025883a 	mov	r18,r2
    9b10:	10011e26 	beq	r2,zero,9f8c <_realloc_r+0x538>
    9b14:	a93fff17 	ldw	r4,-4(r21)
    9b18:	10fffe04 	addi	r3,r2,-8
    9b1c:	00bfff84 	movi	r2,-2
    9b20:	2084703a 	and	r2,r4,r2
    9b24:	9885883a 	add	r2,r19,r2
    9b28:	1880ee26 	beq	r3,r2,9ee4 <_realloc_r+0x490>
    9b2c:	81bfff04 	addi	r6,r16,-4
    9b30:	00800904 	movi	r2,36
    9b34:	1180b836 	bltu	r2,r6,9e18 <_realloc_r+0x3c4>
    9b38:	00c004c4 	movi	r3,19
    9b3c:	19809636 	bltu	r3,r6,9d98 <_realloc_r+0x344>
    9b40:	9005883a 	mov	r2,r18
    9b44:	a807883a 	mov	r3,r21
    9b48:	19000017 	ldw	r4,0(r3)
    9b4c:	11000015 	stw	r4,0(r2)
    9b50:	19000117 	ldw	r4,4(r3)
    9b54:	11000115 	stw	r4,4(r2)
    9b58:	18c00217 	ldw	r3,8(r3)
    9b5c:	10c00215 	stw	r3,8(r2)
    9b60:	a80b883a 	mov	r5,r21
    9b64:	a009883a 	mov	r4,r20
    9b68:	00071b00 	call	71b0 <_free_r>
    9b6c:	a009883a 	mov	r4,r20
    9b70:	001146c0 	call	1146c <__malloc_unlock>
    9b74:	9005883a 	mov	r2,r18
    9b78:	00001206 	br	9bc4 <_realloc_r+0x170>
    9b7c:	00c00404 	movi	r3,16
    9b80:	1823883a 	mov	r17,r3
    9b84:	003fce06 	br	9ac0 <_realloc_r+0x6c>
    9b88:	a825883a 	mov	r18,r21
    9b8c:	8445c83a 	sub	r2,r16,r17
    9b90:	00c003c4 	movi	r3,15
    9b94:	18802636 	bltu	r3,r2,9c30 <_realloc_r+0x1dc>
    9b98:	99800117 	ldw	r6,4(r19)
    9b9c:	9c07883a 	add	r3,r19,r16
    9ba0:	3180004c 	andi	r6,r6,1
    9ba4:	3420b03a 	or	r16,r6,r16
    9ba8:	9c000115 	stw	r16,4(r19)
    9bac:	18800117 	ldw	r2,4(r3)
    9bb0:	10800054 	ori	r2,r2,1
    9bb4:	18800115 	stw	r2,4(r3)
    9bb8:	a009883a 	mov	r4,r20
    9bbc:	001146c0 	call	1146c <__malloc_unlock>
    9bc0:	9005883a 	mov	r2,r18
    9bc4:	dfc00917 	ldw	ra,36(sp)
    9bc8:	df000817 	ldw	fp,32(sp)
    9bcc:	ddc00717 	ldw	r23,28(sp)
    9bd0:	dd800617 	ldw	r22,24(sp)
    9bd4:	dd400517 	ldw	r21,20(sp)
    9bd8:	dd000417 	ldw	r20,16(sp)
    9bdc:	dcc00317 	ldw	r19,12(sp)
    9be0:	dc800217 	ldw	r18,8(sp)
    9be4:	dc400117 	ldw	r17,4(sp)
    9be8:	dc000017 	ldw	r16,0(sp)
    9bec:	dec00a04 	addi	sp,sp,40
    9bf0:	f800283a 	ret
    9bf4:	017fff04 	movi	r5,-4
    9bf8:	414a703a 	and	r5,r8,r5
    9bfc:	814d883a 	add	r6,r16,r5
    9c00:	30c01f16 	blt	r6,r3,9c80 <_realloc_r+0x22c>
    9c04:	20800317 	ldw	r2,12(r4)
    9c08:	20c00217 	ldw	r3,8(r4)
    9c0c:	a825883a 	mov	r18,r21
    9c10:	3021883a 	mov	r16,r6
    9c14:	18800315 	stw	r2,12(r3)
    9c18:	10c00215 	stw	r3,8(r2)
    9c1c:	003fdb06 	br	9b8c <_realloc_r+0x138>
    9c20:	00800304 	movi	r2,12
    9c24:	a0800015 	stw	r2,0(r20)
    9c28:	0005883a 	mov	r2,zero
    9c2c:	003fe506 	br	9bc4 <_realloc_r+0x170>
    9c30:	98c00117 	ldw	r3,4(r19)
    9c34:	9c4b883a 	add	r5,r19,r17
    9c38:	11000054 	ori	r4,r2,1
    9c3c:	18c0004c 	andi	r3,r3,1
    9c40:	1c62b03a 	or	r17,r3,r17
    9c44:	9c400115 	stw	r17,4(r19)
    9c48:	29000115 	stw	r4,4(r5)
    9c4c:	2885883a 	add	r2,r5,r2
    9c50:	10c00117 	ldw	r3,4(r2)
    9c54:	29400204 	addi	r5,r5,8
    9c58:	a009883a 	mov	r4,r20
    9c5c:	18c00054 	ori	r3,r3,1
    9c60:	10c00115 	stw	r3,4(r2)
    9c64:	00071b00 	call	71b0 <_free_r>
    9c68:	003fd306 	br	9bb8 <_realloc_r+0x164>
    9c6c:	017fff04 	movi	r5,-4
    9c70:	414a703a 	and	r5,r8,r5
    9c74:	89800404 	addi	r6,r17,16
    9c78:	8151883a 	add	r8,r16,r5
    9c7c:	4180590e 	bge	r8,r6,9de4 <_realloc_r+0x390>
    9c80:	1080004c 	andi	r2,r2,1
    9c84:	103f9e1e 	bne	r2,zero,9b00 <_realloc_r+0xac>
    9c88:	adbffe17 	ldw	r22,-8(r21)
    9c8c:	00bfff04 	movi	r2,-4
    9c90:	9dadc83a 	sub	r22,r19,r22
    9c94:	b1800117 	ldw	r6,4(r22)
    9c98:	3084703a 	and	r2,r6,r2
    9c9c:	20002026 	beq	r4,zero,9d20 <_realloc_r+0x2cc>
    9ca0:	80af883a 	add	r23,r16,r2
    9ca4:	b96f883a 	add	r23,r23,r5
    9ca8:	21c05f26 	beq	r4,r7,9e28 <_realloc_r+0x3d4>
    9cac:	b8c01c16 	blt	r23,r3,9d20 <_realloc_r+0x2cc>
    9cb0:	20800317 	ldw	r2,12(r4)
    9cb4:	20c00217 	ldw	r3,8(r4)
    9cb8:	81bfff04 	addi	r6,r16,-4
    9cbc:	01000904 	movi	r4,36
    9cc0:	18800315 	stw	r2,12(r3)
    9cc4:	10c00215 	stw	r3,8(r2)
    9cc8:	b0c00217 	ldw	r3,8(r22)
    9ccc:	b0800317 	ldw	r2,12(r22)
    9cd0:	b4800204 	addi	r18,r22,8
    9cd4:	18800315 	stw	r2,12(r3)
    9cd8:	10c00215 	stw	r3,8(r2)
    9cdc:	21801b36 	bltu	r4,r6,9d4c <_realloc_r+0x2f8>
    9ce0:	008004c4 	movi	r2,19
    9ce4:	1180352e 	bgeu	r2,r6,9dbc <_realloc_r+0x368>
    9ce8:	a8800017 	ldw	r2,0(r21)
    9cec:	b0800215 	stw	r2,8(r22)
    9cf0:	a8800117 	ldw	r2,4(r21)
    9cf4:	b0800315 	stw	r2,12(r22)
    9cf8:	008006c4 	movi	r2,27
    9cfc:	11807f36 	bltu	r2,r6,9efc <_realloc_r+0x4a8>
    9d00:	b0800404 	addi	r2,r22,16
    9d04:	ad400204 	addi	r21,r21,8
    9d08:	00002d06 	br	9dc0 <_realloc_r+0x36c>
    9d0c:	adbffe17 	ldw	r22,-8(r21)
    9d10:	00bfff04 	movi	r2,-4
    9d14:	9dadc83a 	sub	r22,r19,r22
    9d18:	b1000117 	ldw	r4,4(r22)
    9d1c:	2084703a 	and	r2,r4,r2
    9d20:	b03f7726 	beq	r22,zero,9b00 <_realloc_r+0xac>
    9d24:	80af883a 	add	r23,r16,r2
    9d28:	b8ff7516 	blt	r23,r3,9b00 <_realloc_r+0xac>
    9d2c:	b0800317 	ldw	r2,12(r22)
    9d30:	b0c00217 	ldw	r3,8(r22)
    9d34:	81bfff04 	addi	r6,r16,-4
    9d38:	01000904 	movi	r4,36
    9d3c:	18800315 	stw	r2,12(r3)
    9d40:	10c00215 	stw	r3,8(r2)
    9d44:	b4800204 	addi	r18,r22,8
    9d48:	21bfe52e 	bgeu	r4,r6,9ce0 <_realloc_r+0x28c>
    9d4c:	a80b883a 	mov	r5,r21
    9d50:	9009883a 	mov	r4,r18
    9d54:	00087d40 	call	87d4 <memmove>
    9d58:	b821883a 	mov	r16,r23
    9d5c:	b027883a 	mov	r19,r22
    9d60:	003f8a06 	br	9b8c <_realloc_r+0x138>
    9d64:	300b883a 	mov	r5,r6
    9d68:	dfc00917 	ldw	ra,36(sp)
    9d6c:	df000817 	ldw	fp,32(sp)
    9d70:	ddc00717 	ldw	r23,28(sp)
    9d74:	dd800617 	ldw	r22,24(sp)
    9d78:	dd400517 	ldw	r21,20(sp)
    9d7c:	dd000417 	ldw	r20,16(sp)
    9d80:	dcc00317 	ldw	r19,12(sp)
    9d84:	dc800217 	ldw	r18,8(sp)
    9d88:	dc400117 	ldw	r17,4(sp)
    9d8c:	dc000017 	ldw	r16,0(sp)
    9d90:	dec00a04 	addi	sp,sp,40
    9d94:	0007d9c1 	jmpi	7d9c <_malloc_r>
    9d98:	a8c00017 	ldw	r3,0(r21)
    9d9c:	90c00015 	stw	r3,0(r18)
    9da0:	a8c00117 	ldw	r3,4(r21)
    9da4:	90c00115 	stw	r3,4(r18)
    9da8:	00c006c4 	movi	r3,27
    9dac:	19804536 	bltu	r3,r6,9ec4 <_realloc_r+0x470>
    9db0:	90800204 	addi	r2,r18,8
    9db4:	a8c00204 	addi	r3,r21,8
    9db8:	003f6306 	br	9b48 <_realloc_r+0xf4>
    9dbc:	9005883a 	mov	r2,r18
    9dc0:	a8c00017 	ldw	r3,0(r21)
    9dc4:	b821883a 	mov	r16,r23
    9dc8:	b027883a 	mov	r19,r22
    9dcc:	10c00015 	stw	r3,0(r2)
    9dd0:	a8c00117 	ldw	r3,4(r21)
    9dd4:	10c00115 	stw	r3,4(r2)
    9dd8:	a8c00217 	ldw	r3,8(r21)
    9ddc:	10c00215 	stw	r3,8(r2)
    9de0:	003f6a06 	br	9b8c <_realloc_r+0x138>
    9de4:	9c67883a 	add	r19,r19,r17
    9de8:	4445c83a 	sub	r2,r8,r17
    9dec:	e4c00215 	stw	r19,8(fp)
    9df0:	10800054 	ori	r2,r2,1
    9df4:	98800115 	stw	r2,4(r19)
    9df8:	a8bfff17 	ldw	r2,-4(r21)
    9dfc:	a009883a 	mov	r4,r20
    9e00:	1080004c 	andi	r2,r2,1
    9e04:	1462b03a 	or	r17,r2,r17
    9e08:	ac7fff15 	stw	r17,-4(r21)
    9e0c:	001146c0 	call	1146c <__malloc_unlock>
    9e10:	a805883a 	mov	r2,r21
    9e14:	003f6b06 	br	9bc4 <_realloc_r+0x170>
    9e18:	a80b883a 	mov	r5,r21
    9e1c:	9009883a 	mov	r4,r18
    9e20:	00087d40 	call	87d4 <memmove>
    9e24:	003f4e06 	br	9b60 <_realloc_r+0x10c>
    9e28:	89000404 	addi	r4,r17,16
    9e2c:	b93fbc16 	blt	r23,r4,9d20 <_realloc_r+0x2cc>
    9e30:	b0800317 	ldw	r2,12(r22)
    9e34:	b0c00217 	ldw	r3,8(r22)
    9e38:	81bfff04 	addi	r6,r16,-4
    9e3c:	01000904 	movi	r4,36
    9e40:	18800315 	stw	r2,12(r3)
    9e44:	10c00215 	stw	r3,8(r2)
    9e48:	b4800204 	addi	r18,r22,8
    9e4c:	21804336 	bltu	r4,r6,9f5c <_realloc_r+0x508>
    9e50:	008004c4 	movi	r2,19
    9e54:	11803f2e 	bgeu	r2,r6,9f54 <_realloc_r+0x500>
    9e58:	a8800017 	ldw	r2,0(r21)
    9e5c:	b0800215 	stw	r2,8(r22)
    9e60:	a8800117 	ldw	r2,4(r21)
    9e64:	b0800315 	stw	r2,12(r22)
    9e68:	008006c4 	movi	r2,27
    9e6c:	11803f36 	bltu	r2,r6,9f6c <_realloc_r+0x518>
    9e70:	b0800404 	addi	r2,r22,16
    9e74:	ad400204 	addi	r21,r21,8
    9e78:	a8c00017 	ldw	r3,0(r21)
    9e7c:	10c00015 	stw	r3,0(r2)
    9e80:	a8c00117 	ldw	r3,4(r21)
    9e84:	10c00115 	stw	r3,4(r2)
    9e88:	a8c00217 	ldw	r3,8(r21)
    9e8c:	10c00215 	stw	r3,8(r2)
    9e90:	b447883a 	add	r3,r22,r17
    9e94:	bc45c83a 	sub	r2,r23,r17
    9e98:	e0c00215 	stw	r3,8(fp)
    9e9c:	10800054 	ori	r2,r2,1
    9ea0:	18800115 	stw	r2,4(r3)
    9ea4:	b0800117 	ldw	r2,4(r22)
    9ea8:	a009883a 	mov	r4,r20
    9eac:	1080004c 	andi	r2,r2,1
    9eb0:	1462b03a 	or	r17,r2,r17
    9eb4:	b4400115 	stw	r17,4(r22)
    9eb8:	001146c0 	call	1146c <__malloc_unlock>
    9ebc:	9005883a 	mov	r2,r18
    9ec0:	003f4006 	br	9bc4 <_realloc_r+0x170>
    9ec4:	a8c00217 	ldw	r3,8(r21)
    9ec8:	90c00215 	stw	r3,8(r18)
    9ecc:	a8c00317 	ldw	r3,12(r21)
    9ed0:	90c00315 	stw	r3,12(r18)
    9ed4:	30801126 	beq	r6,r2,9f1c <_realloc_r+0x4c8>
    9ed8:	90800404 	addi	r2,r18,16
    9edc:	a8c00404 	addi	r3,r21,16
    9ee0:	003f1906 	br	9b48 <_realloc_r+0xf4>
    9ee4:	90ffff17 	ldw	r3,-4(r18)
    9ee8:	00bfff04 	movi	r2,-4
    9eec:	a825883a 	mov	r18,r21
    9ef0:	1884703a 	and	r2,r3,r2
    9ef4:	80a1883a 	add	r16,r16,r2
    9ef8:	003f2406 	br	9b8c <_realloc_r+0x138>
    9efc:	a8800217 	ldw	r2,8(r21)
    9f00:	b0800415 	stw	r2,16(r22)
    9f04:	a8800317 	ldw	r2,12(r21)
    9f08:	b0800515 	stw	r2,20(r22)
    9f0c:	31000a26 	beq	r6,r4,9f38 <_realloc_r+0x4e4>
    9f10:	b0800604 	addi	r2,r22,24
    9f14:	ad400404 	addi	r21,r21,16
    9f18:	003fa906 	br	9dc0 <_realloc_r+0x36c>
    9f1c:	a9000417 	ldw	r4,16(r21)
    9f20:	90800604 	addi	r2,r18,24
    9f24:	a8c00604 	addi	r3,r21,24
    9f28:	91000415 	stw	r4,16(r18)
    9f2c:	a9000517 	ldw	r4,20(r21)
    9f30:	91000515 	stw	r4,20(r18)
    9f34:	003f0406 	br	9b48 <_realloc_r+0xf4>
    9f38:	a8c00417 	ldw	r3,16(r21)
    9f3c:	ad400604 	addi	r21,r21,24
    9f40:	b0800804 	addi	r2,r22,32
    9f44:	b0c00615 	stw	r3,24(r22)
    9f48:	a8ffff17 	ldw	r3,-4(r21)
    9f4c:	b0c00715 	stw	r3,28(r22)
    9f50:	003f9b06 	br	9dc0 <_realloc_r+0x36c>
    9f54:	9005883a 	mov	r2,r18
    9f58:	003fc706 	br	9e78 <_realloc_r+0x424>
    9f5c:	a80b883a 	mov	r5,r21
    9f60:	9009883a 	mov	r4,r18
    9f64:	00087d40 	call	87d4 <memmove>
    9f68:	003fc906 	br	9e90 <_realloc_r+0x43c>
    9f6c:	a8800217 	ldw	r2,8(r21)
    9f70:	b0800415 	stw	r2,16(r22)
    9f74:	a8800317 	ldw	r2,12(r21)
    9f78:	b0800515 	stw	r2,20(r22)
    9f7c:	31000726 	beq	r6,r4,9f9c <_realloc_r+0x548>
    9f80:	b0800604 	addi	r2,r22,24
    9f84:	ad400404 	addi	r21,r21,16
    9f88:	003fbb06 	br	9e78 <_realloc_r+0x424>
    9f8c:	a009883a 	mov	r4,r20
    9f90:	001146c0 	call	1146c <__malloc_unlock>
    9f94:	0005883a 	mov	r2,zero
    9f98:	003f0a06 	br	9bc4 <_realloc_r+0x170>
    9f9c:	a8c00417 	ldw	r3,16(r21)
    9fa0:	ad400604 	addi	r21,r21,24
    9fa4:	b0800804 	addi	r2,r22,32
    9fa8:	b0c00615 	stw	r3,24(r22)
    9fac:	a8ffff17 	ldw	r3,-4(r21)
    9fb0:	b0c00715 	stw	r3,28(r22)
    9fb4:	003fb006 	br	9e78 <_realloc_r+0x424>

00009fb8 <__fpclassifyd>:
    9fb8:	00a00034 	movhi	r2,32768
    9fbc:	10bfffc4 	addi	r2,r2,-1
    9fc0:	2884703a 	and	r2,r5,r2
    9fc4:	10000726 	beq	r2,zero,9fe4 <__fpclassifyd+0x2c>
    9fc8:	00fffc34 	movhi	r3,65520
    9fcc:	019ff834 	movhi	r6,32736
    9fd0:	28c7883a 	add	r3,r5,r3
    9fd4:	31bfffc4 	addi	r6,r6,-1
    9fd8:	30c00536 	bltu	r6,r3,9ff0 <__fpclassifyd+0x38>
    9fdc:	00800104 	movi	r2,4
    9fe0:	f800283a 	ret
    9fe4:	2000021e 	bne	r4,zero,9ff0 <__fpclassifyd+0x38>
    9fe8:	00800084 	movi	r2,2
    9fec:	f800283a 	ret
    9ff0:	00dffc34 	movhi	r3,32752
    9ff4:	019ff834 	movhi	r6,32736
    9ff8:	28cb883a 	add	r5,r5,r3
    9ffc:	31bfffc4 	addi	r6,r6,-1
    a000:	317ff62e 	bgeu	r6,r5,9fdc <__fpclassifyd+0x24>
    a004:	01400434 	movhi	r5,16
    a008:	297fffc4 	addi	r5,r5,-1
    a00c:	28800236 	bltu	r5,r2,a018 <__fpclassifyd+0x60>
    a010:	008000c4 	movi	r2,3
    a014:	f800283a 	ret
    a018:	10c00226 	beq	r2,r3,a024 <__fpclassifyd+0x6c>
    a01c:	0005883a 	mov	r2,zero
    a020:	f800283a 	ret
    a024:	2005003a 	cmpeq	r2,r4,zero
    a028:	f800283a 	ret

0000a02c <_sbrk_r>:
    a02c:	defffd04 	addi	sp,sp,-12
    a030:	dc000015 	stw	r16,0(sp)
    a034:	040000b4 	movhi	r16,2
    a038:	dc400115 	stw	r17,4(sp)
    a03c:	84076204 	addi	r16,r16,7560
    a040:	2023883a 	mov	r17,r4
    a044:	2809883a 	mov	r4,r5
    a048:	dfc00215 	stw	ra,8(sp)
    a04c:	80000015 	stw	zero,0(r16)
    a050:	00110440 	call	11044 <sbrk>
    a054:	00ffffc4 	movi	r3,-1
    a058:	10c00526 	beq	r2,r3,a070 <_sbrk_r+0x44>
    a05c:	dfc00217 	ldw	ra,8(sp)
    a060:	dc400117 	ldw	r17,4(sp)
    a064:	dc000017 	ldw	r16,0(sp)
    a068:	dec00304 	addi	sp,sp,12
    a06c:	f800283a 	ret
    a070:	80c00017 	ldw	r3,0(r16)
    a074:	183ff926 	beq	r3,zero,a05c <_sbrk_r+0x30>
    a078:	88c00015 	stw	r3,0(r17)
    a07c:	003ff706 	br	a05c <_sbrk_r+0x30>

0000a080 <__sread>:
    a080:	defffe04 	addi	sp,sp,-8
    a084:	dc000015 	stw	r16,0(sp)
    a088:	2821883a 	mov	r16,r5
    a08c:	2940038f 	ldh	r5,14(r5)
    a090:	dfc00115 	stw	ra,4(sp)
    a094:	000d2800 	call	d280 <_read_r>
    a098:	10000716 	blt	r2,zero,a0b8 <__sread+0x38>
    a09c:	80c01417 	ldw	r3,80(r16)
    a0a0:	1887883a 	add	r3,r3,r2
    a0a4:	80c01415 	stw	r3,80(r16)
    a0a8:	dfc00117 	ldw	ra,4(sp)
    a0ac:	dc000017 	ldw	r16,0(sp)
    a0b0:	dec00204 	addi	sp,sp,8
    a0b4:	f800283a 	ret
    a0b8:	80c0030b 	ldhu	r3,12(r16)
    a0bc:	18fbffcc 	andi	r3,r3,61439
    a0c0:	80c0030d 	sth	r3,12(r16)
    a0c4:	dfc00117 	ldw	ra,4(sp)
    a0c8:	dc000017 	ldw	r16,0(sp)
    a0cc:	dec00204 	addi	sp,sp,8
    a0d0:	f800283a 	ret

0000a0d4 <__seofread>:
    a0d4:	0005883a 	mov	r2,zero
    a0d8:	f800283a 	ret

0000a0dc <__swrite>:
    a0dc:	2880030b 	ldhu	r2,12(r5)
    a0e0:	defffb04 	addi	sp,sp,-20
    a0e4:	dcc00315 	stw	r19,12(sp)
    a0e8:	dc800215 	stw	r18,8(sp)
    a0ec:	dc400115 	stw	r17,4(sp)
    a0f0:	dc000015 	stw	r16,0(sp)
    a0f4:	dfc00415 	stw	ra,16(sp)
    a0f8:	10c0400c 	andi	r3,r2,256
    a0fc:	2821883a 	mov	r16,r5
    a100:	2023883a 	mov	r17,r4
    a104:	3025883a 	mov	r18,r6
    a108:	3827883a 	mov	r19,r7
    a10c:	18000526 	beq	r3,zero,a124 <__swrite+0x48>
    a110:	2940038f 	ldh	r5,14(r5)
    a114:	01c00084 	movi	r7,2
    a118:	000d883a 	mov	r6,zero
    a11c:	000d2200 	call	d220 <_lseek_r>
    a120:	8080030b 	ldhu	r2,12(r16)
    a124:	8140038f 	ldh	r5,14(r16)
    a128:	10bbffcc 	andi	r2,r2,61439
    a12c:	980f883a 	mov	r7,r19
    a130:	900d883a 	mov	r6,r18
    a134:	8809883a 	mov	r4,r17
    a138:	8080030d 	sth	r2,12(r16)
    a13c:	dfc00417 	ldw	ra,16(sp)
    a140:	dcc00317 	ldw	r19,12(sp)
    a144:	dc800217 	ldw	r18,8(sp)
    a148:	dc400117 	ldw	r17,4(sp)
    a14c:	dc000017 	ldw	r16,0(sp)
    a150:	dec00504 	addi	sp,sp,20
    a154:	000ccec1 	jmpi	ccec <_write_r>

0000a158 <__sseek>:
    a158:	defffe04 	addi	sp,sp,-8
    a15c:	dc000015 	stw	r16,0(sp)
    a160:	2821883a 	mov	r16,r5
    a164:	2940038f 	ldh	r5,14(r5)
    a168:	dfc00115 	stw	ra,4(sp)
    a16c:	000d2200 	call	d220 <_lseek_r>
    a170:	00ffffc4 	movi	r3,-1
    a174:	10c00826 	beq	r2,r3,a198 <__sseek+0x40>
    a178:	80c0030b 	ldhu	r3,12(r16)
    a17c:	80801415 	stw	r2,80(r16)
    a180:	18c40014 	ori	r3,r3,4096
    a184:	80c0030d 	sth	r3,12(r16)
    a188:	dfc00117 	ldw	ra,4(sp)
    a18c:	dc000017 	ldw	r16,0(sp)
    a190:	dec00204 	addi	sp,sp,8
    a194:	f800283a 	ret
    a198:	80c0030b 	ldhu	r3,12(r16)
    a19c:	18fbffcc 	andi	r3,r3,61439
    a1a0:	80c0030d 	sth	r3,12(r16)
    a1a4:	dfc00117 	ldw	ra,4(sp)
    a1a8:	dc000017 	ldw	r16,0(sp)
    a1ac:	dec00204 	addi	sp,sp,8
    a1b0:	f800283a 	ret

0000a1b4 <__sclose>:
    a1b4:	2940038f 	ldh	r5,14(r5)
    a1b8:	000cd4c1 	jmpi	cd4c <_close_r>

0000a1bc <strcmp>:
    a1bc:	2144b03a 	or	r2,r4,r5
    a1c0:	108000cc 	andi	r2,r2,3
    a1c4:	1000171e 	bne	r2,zero,a224 <strcmp+0x68>
    a1c8:	20800017 	ldw	r2,0(r4)
    a1cc:	28c00017 	ldw	r3,0(r5)
    a1d0:	10c0141e 	bne	r2,r3,a224 <strcmp+0x68>
    a1d4:	027fbff4 	movhi	r9,65279
    a1d8:	4a7fbfc4 	addi	r9,r9,-257
    a1dc:	0086303a 	nor	r3,zero,r2
    a1e0:	02202074 	movhi	r8,32897
    a1e4:	1245883a 	add	r2,r2,r9
    a1e8:	42202004 	addi	r8,r8,-32640
    a1ec:	10c4703a 	and	r2,r2,r3
    a1f0:	1204703a 	and	r2,r2,r8
    a1f4:	10000226 	beq	r2,zero,a200 <strcmp+0x44>
    a1f8:	00002306 	br	a288 <strcmp+0xcc>
    a1fc:	1000221e 	bne	r2,zero,a288 <strcmp+0xcc>
    a200:	21000104 	addi	r4,r4,4
    a204:	20c00017 	ldw	r3,0(r4)
    a208:	29400104 	addi	r5,r5,4
    a20c:	29800017 	ldw	r6,0(r5)
    a210:	1a4f883a 	add	r7,r3,r9
    a214:	00c4303a 	nor	r2,zero,r3
    a218:	3884703a 	and	r2,r7,r2
    a21c:	1204703a 	and	r2,r2,r8
    a220:	19bff626 	beq	r3,r6,a1fc <strcmp+0x40>
    a224:	20800003 	ldbu	r2,0(r4)
    a228:	10c03fcc 	andi	r3,r2,255
    a22c:	18c0201c 	xori	r3,r3,128
    a230:	18ffe004 	addi	r3,r3,-128
    a234:	18000c26 	beq	r3,zero,a268 <strcmp+0xac>
    a238:	29800007 	ldb	r6,0(r5)
    a23c:	19800326 	beq	r3,r6,a24c <strcmp+0x90>
    a240:	00001306 	br	a290 <strcmp+0xd4>
    a244:	29800007 	ldb	r6,0(r5)
    a248:	11800b1e 	bne	r2,r6,a278 <strcmp+0xbc>
    a24c:	21000044 	addi	r4,r4,1
    a250:	20c00003 	ldbu	r3,0(r4)
    a254:	29400044 	addi	r5,r5,1
    a258:	18803fcc 	andi	r2,r3,255
    a25c:	1080201c 	xori	r2,r2,128
    a260:	10bfe004 	addi	r2,r2,-128
    a264:	103ff71e 	bne	r2,zero,a244 <strcmp+0x88>
    a268:	0007883a 	mov	r3,zero
    a26c:	28800003 	ldbu	r2,0(r5)
    a270:	1885c83a 	sub	r2,r3,r2
    a274:	f800283a 	ret
    a278:	28800003 	ldbu	r2,0(r5)
    a27c:	18c03fcc 	andi	r3,r3,255
    a280:	1885c83a 	sub	r2,r3,r2
    a284:	f800283a 	ret
    a288:	0005883a 	mov	r2,zero
    a28c:	f800283a 	ret
    a290:	10c03fcc 	andi	r3,r2,255
    a294:	003ff506 	br	a26c <strcmp+0xb0>

0000a298 <__ssprint_r>:
    a298:	30800217 	ldw	r2,8(r6)
    a29c:	defff604 	addi	sp,sp,-40
    a2a0:	dc800215 	stw	r18,8(sp)
    a2a4:	dfc00915 	stw	ra,36(sp)
    a2a8:	df000815 	stw	fp,32(sp)
    a2ac:	ddc00715 	stw	r23,28(sp)
    a2b0:	dd800615 	stw	r22,24(sp)
    a2b4:	dd400515 	stw	r21,20(sp)
    a2b8:	dd000415 	stw	r20,16(sp)
    a2bc:	dcc00315 	stw	r19,12(sp)
    a2c0:	dc400115 	stw	r17,4(sp)
    a2c4:	dc000015 	stw	r16,0(sp)
    a2c8:	3025883a 	mov	r18,r6
    a2cc:	10005826 	beq	r2,zero,a430 <__ssprint_r+0x198>
    a2d0:	2027883a 	mov	r19,r4
    a2d4:	35c00017 	ldw	r23,0(r6)
    a2d8:	29000017 	ldw	r4,0(r5)
    a2dc:	28800217 	ldw	r2,8(r5)
    a2e0:	2823883a 	mov	r17,r5
    a2e4:	0039883a 	mov	fp,zero
    a2e8:	0021883a 	mov	r16,zero
    a2ec:	80003926 	beq	r16,zero,a3d4 <__ssprint_r+0x13c>
    a2f0:	102b883a 	mov	r21,r2
    a2f4:	102d883a 	mov	r22,r2
    a2f8:	80803a36 	bltu	r16,r2,a3e4 <__ssprint_r+0x14c>
    a2fc:	88c0030b 	ldhu	r3,12(r17)
    a300:	1881200c 	andi	r2,r3,1152
    a304:	10002626 	beq	r2,zero,a3a0 <__ssprint_r+0x108>
    a308:	88800517 	ldw	r2,20(r17)
    a30c:	89400417 	ldw	r5,16(r17)
    a310:	81800044 	addi	r6,r16,1
    a314:	108f883a 	add	r7,r2,r2
    a318:	3885883a 	add	r2,r7,r2
    a31c:	100ed7fa 	srli	r7,r2,31
    a320:	216dc83a 	sub	r22,r4,r5
    a324:	3589883a 	add	r4,r6,r22
    a328:	3885883a 	add	r2,r7,r2
    a32c:	102bd07a 	srai	r21,r2,1
    a330:	a80d883a 	mov	r6,r21
    a334:	a900022e 	bgeu	r21,r4,a340 <__ssprint_r+0xa8>
    a338:	202b883a 	mov	r21,r4
    a33c:	200d883a 	mov	r6,r4
    a340:	18c1000c 	andi	r3,r3,1024
    a344:	18002a26 	beq	r3,zero,a3f0 <__ssprint_r+0x158>
    a348:	300b883a 	mov	r5,r6
    a34c:	9809883a 	mov	r4,r19
    a350:	0007d9c0 	call	7d9c <_malloc_r>
    a354:	1029883a 	mov	r20,r2
    a358:	10002c26 	beq	r2,zero,a40c <__ssprint_r+0x174>
    a35c:	89400417 	ldw	r5,16(r17)
    a360:	b00d883a 	mov	r6,r22
    a364:	1009883a 	mov	r4,r2
    a368:	000868c0 	call	868c <memcpy>
    a36c:	8880030b 	ldhu	r2,12(r17)
    a370:	00fedfc4 	movi	r3,-1153
    a374:	10c4703a 	and	r2,r2,r3
    a378:	10802014 	ori	r2,r2,128
    a37c:	8880030d 	sth	r2,12(r17)
    a380:	a589883a 	add	r4,r20,r22
    a384:	adadc83a 	sub	r22,r21,r22
    a388:	8d400515 	stw	r21,20(r17)
    a38c:	8d800215 	stw	r22,8(r17)
    a390:	8d000415 	stw	r20,16(r17)
    a394:	89000015 	stw	r4,0(r17)
    a398:	802b883a 	mov	r21,r16
    a39c:	802d883a 	mov	r22,r16
    a3a0:	b00d883a 	mov	r6,r22
    a3a4:	e00b883a 	mov	r5,fp
    a3a8:	00087d40 	call	87d4 <memmove>
    a3ac:	88800217 	ldw	r2,8(r17)
    a3b0:	89000017 	ldw	r4,0(r17)
    a3b4:	90c00217 	ldw	r3,8(r18)
    a3b8:	1545c83a 	sub	r2,r2,r21
    a3bc:	2589883a 	add	r4,r4,r22
    a3c0:	88800215 	stw	r2,8(r17)
    a3c4:	89000015 	stw	r4,0(r17)
    a3c8:	1c21c83a 	sub	r16,r3,r16
    a3cc:	94000215 	stw	r16,8(r18)
    a3d0:	80001726 	beq	r16,zero,a430 <__ssprint_r+0x198>
    a3d4:	bf000017 	ldw	fp,0(r23)
    a3d8:	bc000117 	ldw	r16,4(r23)
    a3dc:	bdc00204 	addi	r23,r23,8
    a3e0:	003fc206 	br	a2ec <__ssprint_r+0x54>
    a3e4:	802b883a 	mov	r21,r16
    a3e8:	802d883a 	mov	r22,r16
    a3ec:	003fec06 	br	a3a0 <__ssprint_r+0x108>
    a3f0:	9809883a 	mov	r4,r19
    a3f4:	0009a540 	call	9a54 <_realloc_r>
    a3f8:	1029883a 	mov	r20,r2
    a3fc:	103fe01e 	bne	r2,zero,a380 <__ssprint_r+0xe8>
    a400:	89400417 	ldw	r5,16(r17)
    a404:	9809883a 	mov	r4,r19
    a408:	00071b00 	call	71b0 <_free_r>
    a40c:	88c0030b 	ldhu	r3,12(r17)
    a410:	00800304 	movi	r2,12
    a414:	98800015 	stw	r2,0(r19)
    a418:	18c01014 	ori	r3,r3,64
    a41c:	88c0030d 	sth	r3,12(r17)
    a420:	00bfffc4 	movi	r2,-1
    a424:	90000215 	stw	zero,8(r18)
    a428:	90000115 	stw	zero,4(r18)
    a42c:	00000206 	br	a438 <__ssprint_r+0x1a0>
    a430:	90000115 	stw	zero,4(r18)
    a434:	0005883a 	mov	r2,zero
    a438:	dfc00917 	ldw	ra,36(sp)
    a43c:	df000817 	ldw	fp,32(sp)
    a440:	ddc00717 	ldw	r23,28(sp)
    a444:	dd800617 	ldw	r22,24(sp)
    a448:	dd400517 	ldw	r21,20(sp)
    a44c:	dd000417 	ldw	r20,16(sp)
    a450:	dcc00317 	ldw	r19,12(sp)
    a454:	dc800217 	ldw	r18,8(sp)
    a458:	dc400117 	ldw	r17,4(sp)
    a45c:	dc000017 	ldw	r16,0(sp)
    a460:	dec00a04 	addi	sp,sp,40
    a464:	f800283a 	ret

0000a468 <___svfiprintf_internal_r>:
    a468:	2880030b 	ldhu	r2,12(r5)
    a46c:	deffc804 	addi	sp,sp,-224
    a470:	dcc03115 	stw	r19,196(sp)
    a474:	dfc03715 	stw	ra,220(sp)
    a478:	df003615 	stw	fp,216(sp)
    a47c:	ddc03515 	stw	r23,212(sp)
    a480:	dd803415 	stw	r22,208(sp)
    a484:	dd403315 	stw	r21,204(sp)
    a488:	dd003215 	stw	r20,200(sp)
    a48c:	dc803015 	stw	r18,192(sp)
    a490:	dc402f15 	stw	r17,188(sp)
    a494:	dc002e15 	stw	r16,184(sp)
    a498:	d9402715 	stw	r5,156(sp)
    a49c:	d9002a15 	stw	r4,168(sp)
    a4a0:	1080200c 	andi	r2,r2,128
    a4a4:	d9c02315 	stw	r7,140(sp)
    a4a8:	3027883a 	mov	r19,r6
    a4ac:	10000226 	beq	r2,zero,a4b8 <___svfiprintf_internal_r+0x50>
    a4b0:	28800417 	ldw	r2,16(r5)
    a4b4:	10041d26 	beq	r2,zero,b52c <___svfiprintf_internal_r+0x10c4>
    a4b8:	dac01a04 	addi	r11,sp,104
    a4bc:	dac01e15 	stw	r11,120(sp)
    a4c0:	d8801e17 	ldw	r2,120(sp)
    a4c4:	dac019c4 	addi	r11,sp,103
    a4c8:	dd402a17 	ldw	r21,168(sp)
    a4cc:	ddc02717 	ldw	r23,156(sp)
    a4d0:	058000b4 	movhi	r22,2
    a4d4:	050000b4 	movhi	r20,2
    a4d8:	dac01f15 	stw	r11,124(sp)
    a4dc:	12d7c83a 	sub	r11,r2,r11
    a4e0:	b5b71d04 	addi	r22,r22,-9100
    a4e4:	a5371904 	addi	r20,r20,-9116
    a4e8:	dec01a15 	stw	sp,104(sp)
    a4ec:	d8001c15 	stw	zero,112(sp)
    a4f0:	d8001b15 	stw	zero,108(sp)
    a4f4:	d811883a 	mov	r8,sp
    a4f8:	d8002915 	stw	zero,164(sp)
    a4fc:	d8002515 	stw	zero,148(sp)
    a500:	dac02b15 	stw	r11,172(sp)
    a504:	98800007 	ldb	r2,0(r19)
    a508:	1002dd26 	beq	r2,zero,b080 <___svfiprintf_internal_r+0xc18>
    a50c:	00c00944 	movi	r3,37
    a510:	9823883a 	mov	r17,r19
    a514:	10c0021e 	bne	r2,r3,a520 <___svfiprintf_internal_r+0xb8>
    a518:	00001406 	br	a56c <___svfiprintf_internal_r+0x104>
    a51c:	10c00326 	beq	r2,r3,a52c <___svfiprintf_internal_r+0xc4>
    a520:	8c400044 	addi	r17,r17,1
    a524:	88800007 	ldb	r2,0(r17)
    a528:	103ffc1e 	bne	r2,zero,a51c <___svfiprintf_internal_r+0xb4>
    a52c:	8ce1c83a 	sub	r16,r17,r19
    a530:	80000e26 	beq	r16,zero,a56c <___svfiprintf_internal_r+0x104>
    a534:	d8c01c17 	ldw	r3,112(sp)
    a538:	d8801b17 	ldw	r2,108(sp)
    a53c:	44c00015 	stw	r19,0(r8)
    a540:	1c07883a 	add	r3,r3,r16
    a544:	10800044 	addi	r2,r2,1
    a548:	d8c01c15 	stw	r3,112(sp)
    a54c:	44000115 	stw	r16,4(r8)
    a550:	d8801b15 	stw	r2,108(sp)
    a554:	00c001c4 	movi	r3,7
    a558:	18831e16 	blt	r3,r2,b1d4 <___svfiprintf_internal_r+0xd6c>
    a55c:	42000204 	addi	r8,r8,8
    a560:	dac02517 	ldw	r11,148(sp)
    a564:	5c17883a 	add	r11,r11,r16
    a568:	dac02515 	stw	r11,148(sp)
    a56c:	88800007 	ldb	r2,0(r17)
    a570:	1002c526 	beq	r2,zero,b088 <___svfiprintf_internal_r+0xc20>
    a574:	88c00047 	ldb	r3,1(r17)
    a578:	8cc00044 	addi	r19,r17,1
    a57c:	d8001d85 	stb	zero,118(sp)
    a580:	0009883a 	mov	r4,zero
    a584:	000f883a 	mov	r7,zero
    a588:	043fffc4 	movi	r16,-1
    a58c:	d8002415 	stw	zero,144(sp)
    a590:	0025883a 	mov	r18,zero
    a594:	01401604 	movi	r5,88
    a598:	01800244 	movi	r6,9
    a59c:	02800a84 	movi	r10,42
    a5a0:	02401b04 	movi	r9,108
    a5a4:	9cc00044 	addi	r19,r19,1
    a5a8:	18bff804 	addi	r2,r3,-32
    a5ac:	2881dd36 	bltu	r5,r2,ad24 <___svfiprintf_internal_r+0x8bc>
    a5b0:	100490ba 	slli	r2,r2,2
    a5b4:	02c00074 	movhi	r11,1
    a5b8:	5ae97204 	addi	r11,r11,-23096
    a5bc:	12c5883a 	add	r2,r2,r11
    a5c0:	10800017 	ldw	r2,0(r2)
    a5c4:	1000683a 	jmp	r2
    a5c8:	0000a7c4 	movi	zero,671
    a5cc:	0000ad24 	muli	zero,zero,692
    a5d0:	0000ad24 	muli	zero,zero,692
    a5d4:	0000a7b8 	rdprs	zero,zero,670
    a5d8:	0000ad24 	muli	zero,zero,692
    a5dc:	0000ad24 	muli	zero,zero,692
    a5e0:	0000ad24 	muli	zero,zero,692
    a5e4:	0000ad24 	muli	zero,zero,692
    a5e8:	0000ad24 	muli	zero,zero,692
    a5ec:	0000ad24 	muli	zero,zero,692
    a5f0:	0000a72c 	andhi	zero,zero,668
    a5f4:	0000a908 	cmpgei	zero,zero,676
    a5f8:	0000ad24 	muli	zero,zero,692
    a5fc:	0000a758 	cmpnei	zero,zero,669
    a600:	0000ad58 	cmpnei	zero,zero,693
    a604:	0000ad24 	muli	zero,zero,692
    a608:	0000ad4c 	andi	zero,zero,693
    a60c:	0000acec 	andhi	zero,zero,691
    a610:	0000acec 	andhi	zero,zero,691
    a614:	0000acec 	andhi	zero,zero,691
    a618:	0000acec 	andhi	zero,zero,691
    a61c:	0000acec 	andhi	zero,zero,691
    a620:	0000acec 	andhi	zero,zero,691
    a624:	0000acec 	andhi	zero,zero,691
    a628:	0000acec 	andhi	zero,zero,691
    a62c:	0000acec 	andhi	zero,zero,691
    a630:	0000ad24 	muli	zero,zero,692
    a634:	0000ad24 	muli	zero,zero,692
    a638:	0000ad24 	muli	zero,zero,692
    a63c:	0000ad24 	muli	zero,zero,692
    a640:	0000ad24 	muli	zero,zero,692
    a644:	0000ad24 	muli	zero,zero,692
    a648:	0000ad24 	muli	zero,zero,692
    a64c:	0000ad24 	muli	zero,zero,692
    a650:	0000ad24 	muli	zero,zero,692
    a654:	0000ad24 	muli	zero,zero,692
    a658:	0000ac88 	cmpgei	zero,zero,690
    a65c:	0000ad24 	muli	zero,zero,692
    a660:	0000ad24 	muli	zero,zero,692
    a664:	0000ad24 	muli	zero,zero,692
    a668:	0000ad24 	muli	zero,zero,692
    a66c:	0000ad24 	muli	zero,zero,692
    a670:	0000ad24 	muli	zero,zero,692
    a674:	0000ad24 	muli	zero,zero,692
    a678:	0000ad24 	muli	zero,zero,692
    a67c:	0000ad24 	muli	zero,zero,692
    a680:	0000ad24 	muli	zero,zero,692
    a684:	0000ae00 	call	ae0 <sprintf+0x24>
    a688:	0000ad24 	muli	zero,zero,692
    a68c:	0000ad24 	muli	zero,zero,692
    a690:	0000ad24 	muli	zero,zero,692
    a694:	0000ad24 	muli	zero,zero,692
    a698:	0000ad24 	muli	zero,zero,692
    a69c:	0000ad98 	cmpnei	zero,zero,694
    a6a0:	0000ad24 	muli	zero,zero,692
    a6a4:	0000ad24 	muli	zero,zero,692
    a6a8:	0000aacc 	andi	zero,zero,683
    a6ac:	0000ad24 	muli	zero,zero,692
    a6b0:	0000ad24 	muli	zero,zero,692
    a6b4:	0000ad24 	muli	zero,zero,692
    a6b8:	0000ad24 	muli	zero,zero,692
    a6bc:	0000ad24 	muli	zero,zero,692
    a6c0:	0000ad24 	muli	zero,zero,692
    a6c4:	0000ad24 	muli	zero,zero,692
    a6c8:	0000ad24 	muli	zero,zero,692
    a6cc:	0000ad24 	muli	zero,zero,692
    a6d0:	0000ad24 	muli	zero,zero,692
    a6d4:	0000a9bc 	xorhi	zero,zero,678
    a6d8:	0000ab68 	cmpgeui	zero,zero,685
    a6dc:	0000ad24 	muli	zero,zero,692
    a6e0:	0000ad24 	muli	zero,zero,692
    a6e4:	0000ad24 	muli	zero,zero,692
    a6e8:	0000ab5c 	xori	zero,zero,685
    a6ec:	0000ab68 	cmpgeui	zero,zero,685
    a6f0:	0000ad24 	muli	zero,zero,692
    a6f4:	0000ad24 	muli	zero,zero,692
    a6f8:	0000ab4c 	andi	zero,zero,685
    a6fc:	0000ad24 	muli	zero,zero,692
    a700:	0000ab10 	cmplti	zero,zero,684
    a704:	0000a918 	cmpnei	zero,zero,676
    a708:	0000a764 	muli	zero,zero,669
    a70c:	0000ac7c 	xorhi	zero,zero,689
    a710:	0000ad24 	muli	zero,zero,692
    a714:	0000ac30 	cmpltui	zero,zero,688
    a718:	0000ad24 	muli	zero,zero,692
    a71c:	0000a888 	cmpgei	zero,zero,674
    a720:	0000ad24 	muli	zero,zero,692
    a724:	0000ad24 	muli	zero,zero,692
    a728:	0000a7e4 	muli	zero,zero,671
    a72c:	dac02317 	ldw	r11,140(sp)
    a730:	5ac00017 	ldw	r11,0(r11)
    a734:	dac02415 	stw	r11,144(sp)
    a738:	dac02317 	ldw	r11,140(sp)
    a73c:	58800104 	addi	r2,r11,4
    a740:	dac02417 	ldw	r11,144(sp)
    a744:	5802e90e 	bge	r11,zero,b2ec <___svfiprintf_internal_r+0xe84>
    a748:	dac02417 	ldw	r11,144(sp)
    a74c:	d8802315 	stw	r2,140(sp)
    a750:	02d7c83a 	sub	r11,zero,r11
    a754:	dac02415 	stw	r11,144(sp)
    a758:	94800114 	ori	r18,r18,4
    a75c:	98c00007 	ldb	r3,0(r19)
    a760:	003f9006 	br	a5a4 <___svfiprintf_internal_r+0x13c>
    a764:	00800c04 	movi	r2,48
    a768:	dac02317 	ldw	r11,140(sp)
    a76c:	d8801d05 	stb	r2,116(sp)
    a770:	00801e04 	movi	r2,120
    a774:	d8801d45 	stb	r2,117(sp)
    a778:	d8001d85 	stb	zero,118(sp)
    a77c:	58c00104 	addi	r3,r11,4
    a780:	5f000017 	ldw	fp,0(r11)
    a784:	0013883a 	mov	r9,zero
    a788:	90800094 	ori	r2,r18,2
    a78c:	80032b16 	blt	r16,zero,b43c <___svfiprintf_internal_r+0xfd4>
    a790:	00bfdfc4 	movi	r2,-129
    a794:	90a4703a 	and	r18,r18,r2
    a798:	d8c02315 	stw	r3,140(sp)
    a79c:	94800094 	ori	r18,r18,2
    a7a0:	e002dc26 	beq	fp,zero,b314 <___svfiprintf_internal_r+0xeac>
    a7a4:	010000b4 	movhi	r4,2
    a7a8:	2136b004 	addi	r4,r4,-9536
    a7ac:	0015883a 	mov	r10,zero
    a7b0:	d9002915 	stw	r4,164(sp)
    a7b4:	00002306 	br	a844 <___svfiprintf_internal_r+0x3dc>
    a7b8:	94800054 	ori	r18,r18,1
    a7bc:	98c00007 	ldb	r3,0(r19)
    a7c0:	003f7806 	br	a5a4 <___svfiprintf_internal_r+0x13c>
    a7c4:	38803fcc 	andi	r2,r7,255
    a7c8:	1080201c 	xori	r2,r2,128
    a7cc:	10bfe004 	addi	r2,r2,-128
    a7d0:	1002f31e 	bne	r2,zero,b3a0 <___svfiprintf_internal_r+0xf38>
    a7d4:	01000044 	movi	r4,1
    a7d8:	01c00804 	movi	r7,32
    a7dc:	98c00007 	ldb	r3,0(r19)
    a7e0:	003f7006 	br	a5a4 <___svfiprintf_internal_r+0x13c>
    a7e4:	21003fcc 	andi	r4,r4,255
    a7e8:	2003aa1e 	bne	r4,zero,b694 <___svfiprintf_internal_r+0x122c>
    a7ec:	008000b4 	movhi	r2,2
    a7f0:	10b6b004 	addi	r2,r2,-9536
    a7f4:	d8802915 	stw	r2,164(sp)
    a7f8:	9080080c 	andi	r2,r18,32
    a7fc:	1000ba26 	beq	r2,zero,aae8 <___svfiprintf_internal_r+0x680>
    a800:	dac02317 	ldw	r11,140(sp)
    a804:	5f000017 	ldw	fp,0(r11)
    a808:	5a400117 	ldw	r9,4(r11)
    a80c:	5ac00204 	addi	r11,r11,8
    a810:	dac02315 	stw	r11,140(sp)
    a814:	9080004c 	andi	r2,r18,1
    a818:	10029026 	beq	r2,zero,b25c <___svfiprintf_internal_r+0xdf4>
    a81c:	e244b03a 	or	r2,fp,r9
    a820:	1002d41e 	bne	r2,zero,b374 <___svfiprintf_internal_r+0xf0c>
    a824:	d8001d85 	stb	zero,118(sp)
    a828:	80030b16 	blt	r16,zero,b458 <___svfiprintf_internal_r+0xff0>
    a82c:	00bfdfc4 	movi	r2,-129
    a830:	90a4703a 	and	r18,r18,r2
    a834:	0015883a 	mov	r10,zero
    a838:	80002426 	beq	r16,zero,a8cc <___svfiprintf_internal_r+0x464>
    a83c:	0039883a 	mov	fp,zero
    a840:	0013883a 	mov	r9,zero
    a844:	d9002917 	ldw	r4,164(sp)
    a848:	dc401a04 	addi	r17,sp,104
    a84c:	e08003cc 	andi	r2,fp,15
    a850:	4806973a 	slli	r3,r9,28
    a854:	2085883a 	add	r2,r4,r2
    a858:	e038d13a 	srli	fp,fp,4
    a85c:	10800003 	ldbu	r2,0(r2)
    a860:	4812d13a 	srli	r9,r9,4
    a864:	8c7fffc4 	addi	r17,r17,-1
    a868:	1f38b03a 	or	fp,r3,fp
    a86c:	88800005 	stb	r2,0(r17)
    a870:	e244b03a 	or	r2,fp,r9
    a874:	103ff51e 	bne	r2,zero,a84c <___svfiprintf_internal_r+0x3e4>
    a878:	dac01e17 	ldw	r11,120(sp)
    a87c:	5c57c83a 	sub	r11,r11,r17
    a880:	dac02115 	stw	r11,132(sp)
    a884:	00001406 	br	a8d8 <___svfiprintf_internal_r+0x470>
    a888:	21003fcc 	andi	r4,r4,255
    a88c:	2003741e 	bne	r4,zero,b660 <___svfiprintf_internal_r+0x11f8>
    a890:	9080080c 	andi	r2,r18,32
    a894:	10014526 	beq	r2,zero,adac <___svfiprintf_internal_r+0x944>
    a898:	dac02317 	ldw	r11,140(sp)
    a89c:	d8001d85 	stb	zero,118(sp)
    a8a0:	58c00204 	addi	r3,r11,8
    a8a4:	5f000017 	ldw	fp,0(r11)
    a8a8:	5a400117 	ldw	r9,4(r11)
    a8ac:	8002d916 	blt	r16,zero,b414 <___svfiprintf_internal_r+0xfac>
    a8b0:	013fdfc4 	movi	r4,-129
    a8b4:	e244b03a 	or	r2,fp,r9
    a8b8:	d8c02315 	stw	r3,140(sp)
    a8bc:	9124703a 	and	r18,r18,r4
    a8c0:	0015883a 	mov	r10,zero
    a8c4:	1000b91e 	bne	r2,zero,abac <___svfiprintf_internal_r+0x744>
    a8c8:	8002e61e 	bne	r16,zero,b464 <___svfiprintf_internal_r+0xffc>
    a8cc:	0021883a 	mov	r16,zero
    a8d0:	d8002115 	stw	zero,132(sp)
    a8d4:	dc401a04 	addi	r17,sp,104
    a8d8:	d8c02117 	ldw	r3,132(sp)
    a8dc:	dc002015 	stw	r16,128(sp)
    a8e0:	80c0010e 	bge	r16,r3,a8e8 <___svfiprintf_internal_r+0x480>
    a8e4:	d8c02015 	stw	r3,128(sp)
    a8e8:	52803fcc 	andi	r10,r10,255
    a8ec:	5280201c 	xori	r10,r10,128
    a8f0:	52bfe004 	addi	r10,r10,-128
    a8f4:	50003c26 	beq	r10,zero,a9e8 <___svfiprintf_internal_r+0x580>
    a8f8:	dac02017 	ldw	r11,128(sp)
    a8fc:	5ac00044 	addi	r11,r11,1
    a900:	dac02015 	stw	r11,128(sp)
    a904:	00003806 	br	a9e8 <___svfiprintf_internal_r+0x580>
    a908:	01000044 	movi	r4,1
    a90c:	01c00ac4 	movi	r7,43
    a910:	98c00007 	ldb	r3,0(r19)
    a914:	003f2306 	br	a5a4 <___svfiprintf_internal_r+0x13c>
    a918:	21003fcc 	andi	r4,r4,255
    a91c:	2003481e 	bne	r4,zero,b640 <___svfiprintf_internal_r+0x11d8>
    a920:	9080080c 	andi	r2,r18,32
    a924:	10013b26 	beq	r2,zero,ae14 <___svfiprintf_internal_r+0x9ac>
    a928:	dac02317 	ldw	r11,140(sp)
    a92c:	d8001d85 	stb	zero,118(sp)
    a930:	58800204 	addi	r2,r11,8
    a934:	5f000017 	ldw	fp,0(r11)
    a938:	5a400117 	ldw	r9,4(r11)
    a93c:	8002a816 	blt	r16,zero,b3e0 <___svfiprintf_internal_r+0xf78>
    a940:	013fdfc4 	movi	r4,-129
    a944:	e246b03a 	or	r3,fp,r9
    a948:	d8802315 	stw	r2,140(sp)
    a94c:	9124703a 	and	r18,r18,r4
    a950:	18013c26 	beq	r3,zero,ae44 <___svfiprintf_internal_r+0x9dc>
    a954:	0015883a 	mov	r10,zero
    a958:	dc401a04 	addi	r17,sp,104
    a95c:	e006d0fa 	srli	r3,fp,3
    a960:	4808977a 	slli	r4,r9,29
    a964:	4812d0fa 	srli	r9,r9,3
    a968:	e70001cc 	andi	fp,fp,7
    a96c:	e0800c04 	addi	r2,fp,48
    a970:	8c7fffc4 	addi	r17,r17,-1
    a974:	20f8b03a 	or	fp,r4,r3
    a978:	88800005 	stb	r2,0(r17)
    a97c:	e246b03a 	or	r3,fp,r9
    a980:	183ff61e 	bne	r3,zero,a95c <___svfiprintf_internal_r+0x4f4>
    a984:	90c0004c 	andi	r3,r18,1
    a988:	1800a526 	beq	r3,zero,ac20 <___svfiprintf_internal_r+0x7b8>
    a98c:	10803fcc 	andi	r2,r2,255
    a990:	1080201c 	xori	r2,r2,128
    a994:	10bfe004 	addi	r2,r2,-128
    a998:	00c00c04 	movi	r3,48
    a99c:	10ffb626 	beq	r2,r3,a878 <___svfiprintf_internal_r+0x410>
    a9a0:	88ffffc5 	stb	r3,-1(r17)
    a9a4:	d8c01e17 	ldw	r3,120(sp)
    a9a8:	88bfffc4 	addi	r2,r17,-1
    a9ac:	1023883a 	mov	r17,r2
    a9b0:	1887c83a 	sub	r3,r3,r2
    a9b4:	d8c02115 	stw	r3,132(sp)
    a9b8:	003fc706 	br	a8d8 <___svfiprintf_internal_r+0x470>
    a9bc:	dac02317 	ldw	r11,140(sp)
    a9c0:	00c00044 	movi	r3,1
    a9c4:	d8c02015 	stw	r3,128(sp)
    a9c8:	58800017 	ldw	r2,0(r11)
    a9cc:	5ac00104 	addi	r11,r11,4
    a9d0:	d8001d85 	stb	zero,118(sp)
    a9d4:	d8801005 	stb	r2,64(sp)
    a9d8:	dac02315 	stw	r11,140(sp)
    a9dc:	d8c02115 	stw	r3,132(sp)
    a9e0:	dc401004 	addi	r17,sp,64
    a9e4:	0021883a 	mov	r16,zero
    a9e8:	90c0008c 	andi	r3,r18,2
    a9ec:	d8c02215 	stw	r3,136(sp)
    a9f0:	18000326 	beq	r3,zero,aa00 <___svfiprintf_internal_r+0x598>
    a9f4:	dac02017 	ldw	r11,128(sp)
    a9f8:	5ac00084 	addi	r11,r11,2
    a9fc:	dac02015 	stw	r11,128(sp)
    aa00:	90c0210c 	andi	r3,r18,132
    aa04:	d8c02615 	stw	r3,152(sp)
    aa08:	1801131e 	bne	r3,zero,ae58 <___svfiprintf_internal_r+0x9f0>
    aa0c:	dac02417 	ldw	r11,144(sp)
    aa10:	d8c02017 	ldw	r3,128(sp)
    aa14:	58f9c83a 	sub	fp,r11,r3
    aa18:	07010f0e 	bge	zero,fp,ae58 <___svfiprintf_internal_r+0x9f0>
    aa1c:	02400404 	movi	r9,16
    aa20:	d8c01c17 	ldw	r3,112(sp)
    aa24:	d8801b17 	ldw	r2,108(sp)
    aa28:	4f02d60e 	bge	r9,fp,b584 <___svfiprintf_internal_r+0x111c>
    aa2c:	014000b4 	movhi	r5,2
    aa30:	29771d04 	addi	r5,r5,-9100
    aa34:	d9402815 	stw	r5,160(sp)
    aa38:	028001c4 	movi	r10,7
    aa3c:	00000306 	br	aa4c <___svfiprintf_internal_r+0x5e4>
    aa40:	e73ffc04 	addi	fp,fp,-16
    aa44:	42000204 	addi	r8,r8,8
    aa48:	4f00150e 	bge	r9,fp,aaa0 <___svfiprintf_internal_r+0x638>
    aa4c:	18c00404 	addi	r3,r3,16
    aa50:	10800044 	addi	r2,r2,1
    aa54:	45800015 	stw	r22,0(r8)
    aa58:	42400115 	stw	r9,4(r8)
    aa5c:	d8c01c15 	stw	r3,112(sp)
    aa60:	d8801b15 	stw	r2,108(sp)
    aa64:	50bff60e 	bge	r10,r2,aa40 <___svfiprintf_internal_r+0x5d8>
    aa68:	d9801a04 	addi	r6,sp,104
    aa6c:	b80b883a 	mov	r5,r23
    aa70:	a809883a 	mov	r4,r21
    aa74:	da402c15 	stw	r9,176(sp)
    aa78:	da802d15 	stw	r10,180(sp)
    aa7c:	000a2980 	call	a298 <__ssprint_r>
    aa80:	da402c17 	ldw	r9,176(sp)
    aa84:	da802d17 	ldw	r10,180(sp)
    aa88:	1001851e 	bne	r2,zero,b0a0 <___svfiprintf_internal_r+0xc38>
    aa8c:	e73ffc04 	addi	fp,fp,-16
    aa90:	d8c01c17 	ldw	r3,112(sp)
    aa94:	d8801b17 	ldw	r2,108(sp)
    aa98:	d811883a 	mov	r8,sp
    aa9c:	4f3feb16 	blt	r9,fp,aa4c <___svfiprintf_internal_r+0x5e4>
    aaa0:	dac02817 	ldw	r11,160(sp)
    aaa4:	e0c7883a 	add	r3,fp,r3
    aaa8:	10800044 	addi	r2,r2,1
    aaac:	42c00015 	stw	r11,0(r8)
    aab0:	47000115 	stw	fp,4(r8)
    aab4:	d8c01c15 	stw	r3,112(sp)
    aab8:	d8801b15 	stw	r2,108(sp)
    aabc:	010001c4 	movi	r4,7
    aac0:	2081ee16 	blt	r4,r2,b27c <___svfiprintf_internal_r+0xe14>
    aac4:	42000204 	addi	r8,r8,8
    aac8:	0000e506 	br	ae60 <___svfiprintf_internal_r+0x9f8>
    aacc:	21003fcc 	andi	r4,r4,255
    aad0:	2002dd1e 	bne	r4,zero,b648 <___svfiprintf_internal_r+0x11e0>
    aad4:	008000b4 	movhi	r2,2
    aad8:	10b6ab04 	addi	r2,r2,-9556
    aadc:	d8802915 	stw	r2,164(sp)
    aae0:	9080080c 	andi	r2,r18,32
    aae4:	103f461e 	bne	r2,zero,a800 <___svfiprintf_internal_r+0x398>
    aae8:	9080040c 	andi	r2,r18,16
    aaec:	10022e1e 	bne	r2,zero,b3a8 <___svfiprintf_internal_r+0xf40>
    aaf0:	9080100c 	andi	r2,r18,64
    aaf4:	dac02317 	ldw	r11,140(sp)
    aaf8:	10027326 	beq	r2,zero,b4c8 <___svfiprintf_internal_r+0x1060>
    aafc:	5f00000b 	ldhu	fp,0(r11)
    ab00:	5ac00104 	addi	r11,r11,4
    ab04:	0013883a 	mov	r9,zero
    ab08:	dac02315 	stw	r11,140(sp)
    ab0c:	003f4106 	br	a814 <___svfiprintf_internal_r+0x3ac>
    ab10:	21003fcc 	andi	r4,r4,255
    ab14:	2002e11e 	bne	r4,zero,b69c <___svfiprintf_internal_r+0x1234>
    ab18:	9080080c 	andi	r2,r18,32
    ab1c:	1002011e 	bne	r2,zero,b324 <___svfiprintf_internal_r+0xebc>
    ab20:	9080040c 	andi	r2,r18,16
    ab24:	10023e1e 	bne	r2,zero,b420 <___svfiprintf_internal_r+0xfb8>
    ab28:	9480100c 	andi	r18,r18,64
    ab2c:	90023c26 	beq	r18,zero,b420 <___svfiprintf_internal_r+0xfb8>
    ab30:	dac02317 	ldw	r11,140(sp)
    ab34:	58800017 	ldw	r2,0(r11)
    ab38:	5ac00104 	addi	r11,r11,4
    ab3c:	dac02315 	stw	r11,140(sp)
    ab40:	dac02517 	ldw	r11,148(sp)
    ab44:	12c0000d 	sth	r11,0(r2)
    ab48:	003e6e06 	br	a504 <___svfiprintf_internal_r+0x9c>
    ab4c:	98c00007 	ldb	r3,0(r19)
    ab50:	1a422926 	beq	r3,r9,b3f8 <___svfiprintf_internal_r+0xf90>
    ab54:	94800414 	ori	r18,r18,16
    ab58:	003e9206 	br	a5a4 <___svfiprintf_internal_r+0x13c>
    ab5c:	94801014 	ori	r18,r18,64
    ab60:	98c00007 	ldb	r3,0(r19)
    ab64:	003e8f06 	br	a5a4 <___svfiprintf_internal_r+0x13c>
    ab68:	21003fcc 	andi	r4,r4,255
    ab6c:	2002c71e 	bne	r4,zero,b68c <___svfiprintf_internal_r+0x1224>
    ab70:	9080080c 	andi	r2,r18,32
    ab74:	10004926 	beq	r2,zero,ac9c <___svfiprintf_internal_r+0x834>
    ab78:	dac02317 	ldw	r11,140(sp)
    ab7c:	58800117 	ldw	r2,4(r11)
    ab80:	5f000017 	ldw	fp,0(r11)
    ab84:	5ac00204 	addi	r11,r11,8
    ab88:	dac02315 	stw	r11,140(sp)
    ab8c:	1013883a 	mov	r9,r2
    ab90:	10004b16 	blt	r2,zero,acc0 <___svfiprintf_internal_r+0x858>
    ab94:	da801d83 	ldbu	r10,118(sp)
    ab98:	8001cb16 	blt	r16,zero,b2c8 <___svfiprintf_internal_r+0xe60>
    ab9c:	00ffdfc4 	movi	r3,-129
    aba0:	e244b03a 	or	r2,fp,r9
    aba4:	90e4703a 	and	r18,r18,r3
    aba8:	103f4726 	beq	r2,zero,a8c8 <___svfiprintf_internal_r+0x460>
    abac:	48008c26 	beq	r9,zero,ade0 <___svfiprintf_internal_r+0x978>
    abb0:	dc802015 	stw	r18,128(sp)
    abb4:	dc002115 	stw	r16,132(sp)
    abb8:	dc401a04 	addi	r17,sp,104
    abbc:	e021883a 	mov	r16,fp
    abc0:	da002215 	stw	r8,136(sp)
    abc4:	5039883a 	mov	fp,r10
    abc8:	4825883a 	mov	r18,r9
    abcc:	8009883a 	mov	r4,r16
    abd0:	900b883a 	mov	r5,r18
    abd4:	01800284 	movi	r6,10
    abd8:	000f883a 	mov	r7,zero
    abdc:	000db980 	call	db98 <__umoddi3>
    abe0:	10800c04 	addi	r2,r2,48
    abe4:	8c7fffc4 	addi	r17,r17,-1
    abe8:	8009883a 	mov	r4,r16
    abec:	900b883a 	mov	r5,r18
    abf0:	88800005 	stb	r2,0(r17)
    abf4:	01800284 	movi	r6,10
    abf8:	000f883a 	mov	r7,zero
    abfc:	000d6200 	call	d620 <__udivdi3>
    ac00:	1021883a 	mov	r16,r2
    ac04:	10c4b03a 	or	r2,r2,r3
    ac08:	1825883a 	mov	r18,r3
    ac0c:	103fef1e 	bne	r2,zero,abcc <___svfiprintf_internal_r+0x764>
    ac10:	dc802017 	ldw	r18,128(sp)
    ac14:	dc002117 	ldw	r16,132(sp)
    ac18:	da002217 	ldw	r8,136(sp)
    ac1c:	e015883a 	mov	r10,fp
    ac20:	d8c01e17 	ldw	r3,120(sp)
    ac24:	1c47c83a 	sub	r3,r3,r17
    ac28:	d8c02115 	stw	r3,132(sp)
    ac2c:	003f2a06 	br	a8d8 <___svfiprintf_internal_r+0x470>
    ac30:	dac02317 	ldw	r11,140(sp)
    ac34:	d8001d85 	stb	zero,118(sp)
    ac38:	5c400017 	ldw	r17,0(r11)
    ac3c:	5f000104 	addi	fp,r11,4
    ac40:	88022f26 	beq	r17,zero,b500 <___svfiprintf_internal_r+0x1098>
    ac44:	80022516 	blt	r16,zero,b4dc <___svfiprintf_internal_r+0x1074>
    ac48:	800d883a 	mov	r6,r16
    ac4c:	000b883a 	mov	r5,zero
    ac50:	8809883a 	mov	r4,r17
    ac54:	da002c15 	stw	r8,176(sp)
    ac58:	00085a80 	call	85a8 <memchr>
    ac5c:	da002c17 	ldw	r8,176(sp)
    ac60:	10026426 	beq	r2,zero,b5f4 <___svfiprintf_internal_r+0x118c>
    ac64:	1445c83a 	sub	r2,r2,r17
    ac68:	d8802115 	stw	r2,132(sp)
    ac6c:	da801d83 	ldbu	r10,118(sp)
    ac70:	df002315 	stw	fp,140(sp)
    ac74:	0021883a 	mov	r16,zero
    ac78:	003f1706 	br	a8d8 <___svfiprintf_internal_r+0x470>
    ac7c:	94800814 	ori	r18,r18,32
    ac80:	98c00007 	ldb	r3,0(r19)
    ac84:	003e4706 	br	a5a4 <___svfiprintf_internal_r+0x13c>
    ac88:	21003fcc 	andi	r4,r4,255
    ac8c:	2002701e 	bne	r4,zero,b650 <___svfiprintf_internal_r+0x11e8>
    ac90:	94800414 	ori	r18,r18,16
    ac94:	9080080c 	andi	r2,r18,32
    ac98:	103fb71e 	bne	r2,zero,ab78 <___svfiprintf_internal_r+0x710>
    ac9c:	9080040c 	andi	r2,r18,16
    aca0:	1001ab26 	beq	r2,zero,b350 <___svfiprintf_internal_r+0xee8>
    aca4:	dac02317 	ldw	r11,140(sp)
    aca8:	5f000017 	ldw	fp,0(r11)
    acac:	5ac00104 	addi	r11,r11,4
    acb0:	dac02315 	stw	r11,140(sp)
    acb4:	e013d7fa 	srai	r9,fp,31
    acb8:	4805883a 	mov	r2,r9
    acbc:	103fb50e 	bge	r2,zero,ab94 <___svfiprintf_internal_r+0x72c>
    acc0:	0739c83a 	sub	fp,zero,fp
    acc4:	02800b44 	movi	r10,45
    acc8:	e004c03a 	cmpne	r2,fp,zero
    accc:	0253c83a 	sub	r9,zero,r9
    acd0:	da801d85 	stb	r10,118(sp)
    acd4:	4893c83a 	sub	r9,r9,r2
    acd8:	80023016 	blt	r16,zero,b59c <___svfiprintf_internal_r+0x1134>
    acdc:	00bfdfc4 	movi	r2,-129
    ace0:	90a4703a 	and	r18,r18,r2
    ace4:	483fb21e 	bne	r9,zero,abb0 <___svfiprintf_internal_r+0x748>
    ace8:	00003d06 	br	ade0 <___svfiprintf_internal_r+0x978>
    acec:	9817883a 	mov	r11,r19
    acf0:	d8002415 	stw	zero,144(sp)
    acf4:	18bff404 	addi	r2,r3,-48
    acf8:	0019883a 	mov	r12,zero
    acfc:	58c00007 	ldb	r3,0(r11)
    ad00:	630002a4 	muli	r12,r12,10
    ad04:	9cc00044 	addi	r19,r19,1
    ad08:	9817883a 	mov	r11,r19
    ad0c:	1319883a 	add	r12,r2,r12
    ad10:	18bff404 	addi	r2,r3,-48
    ad14:	30bff92e 	bgeu	r6,r2,acfc <___svfiprintf_internal_r+0x894>
    ad18:	db002415 	stw	r12,144(sp)
    ad1c:	18bff804 	addi	r2,r3,-32
    ad20:	28be232e 	bgeu	r5,r2,a5b0 <___svfiprintf_internal_r+0x148>
    ad24:	21003fcc 	andi	r4,r4,255
    ad28:	20024b1e 	bne	r4,zero,b658 <___svfiprintf_internal_r+0x11f0>
    ad2c:	1800d626 	beq	r3,zero,b088 <___svfiprintf_internal_r+0xc20>
    ad30:	02c00044 	movi	r11,1
    ad34:	dac02015 	stw	r11,128(sp)
    ad38:	d8c01005 	stb	r3,64(sp)
    ad3c:	d8001d85 	stb	zero,118(sp)
    ad40:	dac02115 	stw	r11,132(sp)
    ad44:	dc401004 	addi	r17,sp,64
    ad48:	003f2606 	br	a9e4 <___svfiprintf_internal_r+0x57c>
    ad4c:	94802014 	ori	r18,r18,128
    ad50:	98c00007 	ldb	r3,0(r19)
    ad54:	003e1306 	br	a5a4 <___svfiprintf_internal_r+0x13c>
    ad58:	98c00007 	ldb	r3,0(r19)
    ad5c:	9ac00044 	addi	r11,r19,1
    ad60:	1a822b26 	beq	r3,r10,b610 <___svfiprintf_internal_r+0x11a8>
    ad64:	18bff404 	addi	r2,r3,-48
    ad68:	0021883a 	mov	r16,zero
    ad6c:	30821e36 	bltu	r6,r2,b5e8 <___svfiprintf_internal_r+0x1180>
    ad70:	58c00007 	ldb	r3,0(r11)
    ad74:	840002a4 	muli	r16,r16,10
    ad78:	5cc00044 	addi	r19,r11,1
    ad7c:	9817883a 	mov	r11,r19
    ad80:	80a1883a 	add	r16,r16,r2
    ad84:	18bff404 	addi	r2,r3,-48
    ad88:	30bff92e 	bgeu	r6,r2,ad70 <___svfiprintf_internal_r+0x908>
    ad8c:	803e060e 	bge	r16,zero,a5a8 <___svfiprintf_internal_r+0x140>
    ad90:	043fffc4 	movi	r16,-1
    ad94:	003e0406 	br	a5a8 <___svfiprintf_internal_r+0x140>
    ad98:	21003fcc 	andi	r4,r4,255
    ad9c:	2002371e 	bne	r4,zero,b67c <___svfiprintf_internal_r+0x1214>
    ada0:	94800414 	ori	r18,r18,16
    ada4:	9080080c 	andi	r2,r18,32
    ada8:	103ebb1e 	bne	r2,zero,a898 <___svfiprintf_internal_r+0x430>
    adac:	9080040c 	andi	r2,r18,16
    adb0:	10013b26 	beq	r2,zero,b2a0 <___svfiprintf_internal_r+0xe38>
    adb4:	dac02317 	ldw	r11,140(sp)
    adb8:	d8001d85 	stb	zero,118(sp)
    adbc:	0013883a 	mov	r9,zero
    adc0:	58800104 	addi	r2,r11,4
    adc4:	5f000017 	ldw	fp,0(r11)
    adc8:	80013d16 	blt	r16,zero,b2c0 <___svfiprintf_internal_r+0xe58>
    adcc:	00ffdfc4 	movi	r3,-129
    add0:	d8802315 	stw	r2,140(sp)
    add4:	90e4703a 	and	r18,r18,r3
    add8:	0015883a 	mov	r10,zero
    addc:	e03eba26 	beq	fp,zero,a8c8 <___svfiprintf_internal_r+0x460>
    ade0:	00800244 	movi	r2,9
    ade4:	173f7236 	bltu	r2,fp,abb0 <___svfiprintf_internal_r+0x748>
    ade8:	dac02b17 	ldw	r11,172(sp)
    adec:	e7000c04 	addi	fp,fp,48
    adf0:	df0019c5 	stb	fp,103(sp)
    adf4:	dac02115 	stw	r11,132(sp)
    adf8:	dc4019c4 	addi	r17,sp,103
    adfc:	003eb606 	br	a8d8 <___svfiprintf_internal_r+0x470>
    ae00:	21003fcc 	andi	r4,r4,255
    ae04:	20021f1e 	bne	r4,zero,b684 <___svfiprintf_internal_r+0x121c>
    ae08:	94800414 	ori	r18,r18,16
    ae0c:	9080080c 	andi	r2,r18,32
    ae10:	103ec51e 	bne	r2,zero,a928 <___svfiprintf_internal_r+0x4c0>
    ae14:	9080040c 	andi	r2,r18,16
    ae18:	10016926 	beq	r2,zero,b3c0 <___svfiprintf_internal_r+0xf58>
    ae1c:	dac02317 	ldw	r11,140(sp)
    ae20:	d8001d85 	stb	zero,118(sp)
    ae24:	0013883a 	mov	r9,zero
    ae28:	58800104 	addi	r2,r11,4
    ae2c:	5f000017 	ldw	fp,0(r11)
    ae30:	80016b16 	blt	r16,zero,b3e0 <___svfiprintf_internal_r+0xf78>
    ae34:	00ffdfc4 	movi	r3,-129
    ae38:	d8802315 	stw	r2,140(sp)
    ae3c:	90e4703a 	and	r18,r18,r3
    ae40:	e03ec41e 	bne	fp,zero,a954 <___svfiprintf_internal_r+0x4ec>
    ae44:	0015883a 	mov	r10,zero
    ae48:	8001c226 	beq	r16,zero,b554 <___svfiprintf_internal_r+0x10ec>
    ae4c:	0039883a 	mov	fp,zero
    ae50:	0013883a 	mov	r9,zero
    ae54:	003ec006 	br	a958 <___svfiprintf_internal_r+0x4f0>
    ae58:	d8c01c17 	ldw	r3,112(sp)
    ae5c:	d8801b17 	ldw	r2,108(sp)
    ae60:	d9001d87 	ldb	r4,118(sp)
    ae64:	20000b26 	beq	r4,zero,ae94 <___svfiprintf_internal_r+0xa2c>
    ae68:	d9001d84 	addi	r4,sp,118
    ae6c:	18c00044 	addi	r3,r3,1
    ae70:	10800044 	addi	r2,r2,1
    ae74:	41000015 	stw	r4,0(r8)
    ae78:	01000044 	movi	r4,1
    ae7c:	41000115 	stw	r4,4(r8)
    ae80:	d8c01c15 	stw	r3,112(sp)
    ae84:	d8801b15 	stw	r2,108(sp)
    ae88:	010001c4 	movi	r4,7
    ae8c:	2080e116 	blt	r4,r2,b214 <___svfiprintf_internal_r+0xdac>
    ae90:	42000204 	addi	r8,r8,8
    ae94:	dac02217 	ldw	r11,136(sp)
    ae98:	58000b26 	beq	r11,zero,aec8 <___svfiprintf_internal_r+0xa60>
    ae9c:	d9001d04 	addi	r4,sp,116
    aea0:	18c00084 	addi	r3,r3,2
    aea4:	10800044 	addi	r2,r2,1
    aea8:	41000015 	stw	r4,0(r8)
    aeac:	01000084 	movi	r4,2
    aeb0:	41000115 	stw	r4,4(r8)
    aeb4:	d8c01c15 	stw	r3,112(sp)
    aeb8:	d8801b15 	stw	r2,108(sp)
    aebc:	010001c4 	movi	r4,7
    aec0:	2080dd16 	blt	r4,r2,b238 <___svfiprintf_internal_r+0xdd0>
    aec4:	42000204 	addi	r8,r8,8
    aec8:	dac02617 	ldw	r11,152(sp)
    aecc:	01002004 	movi	r4,128
    aed0:	59008426 	beq	r11,r4,b0e4 <___svfiprintf_internal_r+0xc7c>
    aed4:	dac02117 	ldw	r11,132(sp)
    aed8:	82e1c83a 	sub	r16,r16,r11
    aedc:	0400270e 	bge	zero,r16,af7c <___svfiprintf_internal_r+0xb14>
    aee0:	01c00404 	movi	r7,16
    aee4:	3c016a0e 	bge	r7,r16,b490 <___svfiprintf_internal_r+0x1028>
    aee8:	014000b4 	movhi	r5,2
    aeec:	29771904 	addi	r5,r5,-9116
    aef0:	d9402215 	stw	r5,136(sp)
    aef4:	070001c4 	movi	fp,7
    aef8:	00000306 	br	af08 <___svfiprintf_internal_r+0xaa0>
    aefc:	843ffc04 	addi	r16,r16,-16
    af00:	42000204 	addi	r8,r8,8
    af04:	3c00130e 	bge	r7,r16,af54 <___svfiprintf_internal_r+0xaec>
    af08:	18c00404 	addi	r3,r3,16
    af0c:	10800044 	addi	r2,r2,1
    af10:	45000015 	stw	r20,0(r8)
    af14:	41c00115 	stw	r7,4(r8)
    af18:	d8c01c15 	stw	r3,112(sp)
    af1c:	d8801b15 	stw	r2,108(sp)
    af20:	e0bff60e 	bge	fp,r2,aefc <___svfiprintf_internal_r+0xa94>
    af24:	d9801a04 	addi	r6,sp,104
    af28:	b80b883a 	mov	r5,r23
    af2c:	a809883a 	mov	r4,r21
    af30:	d9c02c15 	stw	r7,176(sp)
    af34:	000a2980 	call	a298 <__ssprint_r>
    af38:	d9c02c17 	ldw	r7,176(sp)
    af3c:	1000581e 	bne	r2,zero,b0a0 <___svfiprintf_internal_r+0xc38>
    af40:	843ffc04 	addi	r16,r16,-16
    af44:	d8c01c17 	ldw	r3,112(sp)
    af48:	d8801b17 	ldw	r2,108(sp)
    af4c:	d811883a 	mov	r8,sp
    af50:	3c3fed16 	blt	r7,r16,af08 <___svfiprintf_internal_r+0xaa0>
    af54:	dac02217 	ldw	r11,136(sp)
    af58:	1c07883a 	add	r3,r3,r16
    af5c:	10800044 	addi	r2,r2,1
    af60:	42c00015 	stw	r11,0(r8)
    af64:	44000115 	stw	r16,4(r8)
    af68:	d8c01c15 	stw	r3,112(sp)
    af6c:	d8801b15 	stw	r2,108(sp)
    af70:	010001c4 	movi	r4,7
    af74:	20809e16 	blt	r4,r2,b1f0 <___svfiprintf_internal_r+0xd88>
    af78:	42000204 	addi	r8,r8,8
    af7c:	dac02117 	ldw	r11,132(sp)
    af80:	10800044 	addi	r2,r2,1
    af84:	44400015 	stw	r17,0(r8)
    af88:	58c7883a 	add	r3,r11,r3
    af8c:	42c00115 	stw	r11,4(r8)
    af90:	d8c01c15 	stw	r3,112(sp)
    af94:	d8801b15 	stw	r2,108(sp)
    af98:	010001c4 	movi	r4,7
    af9c:	20807f16 	blt	r4,r2,b19c <___svfiprintf_internal_r+0xd34>
    afa0:	42000204 	addi	r8,r8,8
    afa4:	9480010c 	andi	r18,r18,4
    afa8:	90002926 	beq	r18,zero,b050 <___svfiprintf_internal_r+0xbe8>
    afac:	dac02417 	ldw	r11,144(sp)
    afb0:	d8802017 	ldw	r2,128(sp)
    afb4:	58a1c83a 	sub	r16,r11,r2
    afb8:	0400250e 	bge	zero,r16,b050 <___svfiprintf_internal_r+0xbe8>
    afbc:	04400404 	movi	r17,16
    afc0:	d8801b17 	ldw	r2,108(sp)
    afc4:	8c017c0e 	bge	r17,r16,b5b8 <___svfiprintf_internal_r+0x1150>
    afc8:	014000b4 	movhi	r5,2
    afcc:	29771d04 	addi	r5,r5,-9100
    afd0:	d9402815 	stw	r5,160(sp)
    afd4:	048001c4 	movi	r18,7
    afd8:	00000306 	br	afe8 <___svfiprintf_internal_r+0xb80>
    afdc:	843ffc04 	addi	r16,r16,-16
    afe0:	42000204 	addi	r8,r8,8
    afe4:	8c00110e 	bge	r17,r16,b02c <___svfiprintf_internal_r+0xbc4>
    afe8:	18c00404 	addi	r3,r3,16
    afec:	10800044 	addi	r2,r2,1
    aff0:	45800015 	stw	r22,0(r8)
    aff4:	44400115 	stw	r17,4(r8)
    aff8:	d8c01c15 	stw	r3,112(sp)
    affc:	d8801b15 	stw	r2,108(sp)
    b000:	90bff60e 	bge	r18,r2,afdc <___svfiprintf_internal_r+0xb74>
    b004:	d9801a04 	addi	r6,sp,104
    b008:	b80b883a 	mov	r5,r23
    b00c:	a809883a 	mov	r4,r21
    b010:	000a2980 	call	a298 <__ssprint_r>
    b014:	1000221e 	bne	r2,zero,b0a0 <___svfiprintf_internal_r+0xc38>
    b018:	843ffc04 	addi	r16,r16,-16
    b01c:	d8c01c17 	ldw	r3,112(sp)
    b020:	d8801b17 	ldw	r2,108(sp)
    b024:	d811883a 	mov	r8,sp
    b028:	8c3fef16 	blt	r17,r16,afe8 <___svfiprintf_internal_r+0xb80>
    b02c:	dac02817 	ldw	r11,160(sp)
    b030:	1c07883a 	add	r3,r3,r16
    b034:	10800044 	addi	r2,r2,1
    b038:	42c00015 	stw	r11,0(r8)
    b03c:	44000115 	stw	r16,4(r8)
    b040:	d8c01c15 	stw	r3,112(sp)
    b044:	d8801b15 	stw	r2,108(sp)
    b048:	010001c4 	movi	r4,7
    b04c:	2080aa16 	blt	r4,r2,b2f8 <___svfiprintf_internal_r+0xe90>
    b050:	d8802417 	ldw	r2,144(sp)
    b054:	dac02017 	ldw	r11,128(sp)
    b058:	12c0010e 	bge	r2,r11,b060 <___svfiprintf_internal_r+0xbf8>
    b05c:	5805883a 	mov	r2,r11
    b060:	dac02517 	ldw	r11,148(sp)
    b064:	5897883a 	add	r11,r11,r2
    b068:	dac02515 	stw	r11,148(sp)
    b06c:	1800531e 	bne	r3,zero,b1bc <___svfiprintf_internal_r+0xd54>
    b070:	98800007 	ldb	r2,0(r19)
    b074:	d8001b15 	stw	zero,108(sp)
    b078:	d811883a 	mov	r8,sp
    b07c:	103d231e 	bne	r2,zero,a50c <___svfiprintf_internal_r+0xa4>
    b080:	9823883a 	mov	r17,r19
    b084:	003d3906 	br	a56c <___svfiprintf_internal_r+0x104>
    b088:	d8801c17 	ldw	r2,112(sp)
    b08c:	10000426 	beq	r2,zero,b0a0 <___svfiprintf_internal_r+0xc38>
    b090:	d9402717 	ldw	r5,156(sp)
    b094:	d9002a17 	ldw	r4,168(sp)
    b098:	d9801a04 	addi	r6,sp,104
    b09c:	000a2980 	call	a298 <__ssprint_r>
    b0a0:	dac02717 	ldw	r11,156(sp)
    b0a4:	d8802517 	ldw	r2,148(sp)
    b0a8:	58c0030b 	ldhu	r3,12(r11)
    b0ac:	18c0100c 	andi	r3,r3,64
    b0b0:	1801381e 	bne	r3,zero,b594 <___svfiprintf_internal_r+0x112c>
    b0b4:	dfc03717 	ldw	ra,220(sp)
    b0b8:	df003617 	ldw	fp,216(sp)
    b0bc:	ddc03517 	ldw	r23,212(sp)
    b0c0:	dd803417 	ldw	r22,208(sp)
    b0c4:	dd403317 	ldw	r21,204(sp)
    b0c8:	dd003217 	ldw	r20,200(sp)
    b0cc:	dcc03117 	ldw	r19,196(sp)
    b0d0:	dc803017 	ldw	r18,192(sp)
    b0d4:	dc402f17 	ldw	r17,188(sp)
    b0d8:	dc002e17 	ldw	r16,184(sp)
    b0dc:	dec03804 	addi	sp,sp,224
    b0e0:	f800283a 	ret
    b0e4:	dac02417 	ldw	r11,144(sp)
    b0e8:	d9002017 	ldw	r4,128(sp)
    b0ec:	5939c83a 	sub	fp,r11,r4
    b0f0:	073f780e 	bge	zero,fp,aed4 <___svfiprintf_internal_r+0xa6c>
    b0f4:	02400404 	movi	r9,16
    b0f8:	4f01370e 	bge	r9,fp,b5d8 <___svfiprintf_internal_r+0x1170>
    b0fc:	02c000b4 	movhi	r11,2
    b100:	5af71904 	addi	r11,r11,-9116
    b104:	dac02215 	stw	r11,136(sp)
    b108:	028001c4 	movi	r10,7
    b10c:	00000306 	br	b11c <___svfiprintf_internal_r+0xcb4>
    b110:	e73ffc04 	addi	fp,fp,-16
    b114:	42000204 	addi	r8,r8,8
    b118:	4f00150e 	bge	r9,fp,b170 <___svfiprintf_internal_r+0xd08>
    b11c:	18c00404 	addi	r3,r3,16
    b120:	10800044 	addi	r2,r2,1
    b124:	45000015 	stw	r20,0(r8)
    b128:	42400115 	stw	r9,4(r8)
    b12c:	d8c01c15 	stw	r3,112(sp)
    b130:	d8801b15 	stw	r2,108(sp)
    b134:	50bff60e 	bge	r10,r2,b110 <___svfiprintf_internal_r+0xca8>
    b138:	d9801a04 	addi	r6,sp,104
    b13c:	b80b883a 	mov	r5,r23
    b140:	a809883a 	mov	r4,r21
    b144:	da402c15 	stw	r9,176(sp)
    b148:	da802d15 	stw	r10,180(sp)
    b14c:	000a2980 	call	a298 <__ssprint_r>
    b150:	da402c17 	ldw	r9,176(sp)
    b154:	da802d17 	ldw	r10,180(sp)
    b158:	103fd11e 	bne	r2,zero,b0a0 <___svfiprintf_internal_r+0xc38>
    b15c:	e73ffc04 	addi	fp,fp,-16
    b160:	d8c01c17 	ldw	r3,112(sp)
    b164:	d8801b17 	ldw	r2,108(sp)
    b168:	d811883a 	mov	r8,sp
    b16c:	4f3feb16 	blt	r9,fp,b11c <___svfiprintf_internal_r+0xcb4>
    b170:	dac02217 	ldw	r11,136(sp)
    b174:	1f07883a 	add	r3,r3,fp
    b178:	10800044 	addi	r2,r2,1
    b17c:	42c00015 	stw	r11,0(r8)
    b180:	47000115 	stw	fp,4(r8)
    b184:	d8c01c15 	stw	r3,112(sp)
    b188:	d8801b15 	stw	r2,108(sp)
    b18c:	010001c4 	movi	r4,7
    b190:	2080b616 	blt	r4,r2,b46c <___svfiprintf_internal_r+0x1004>
    b194:	42000204 	addi	r8,r8,8
    b198:	003f4e06 	br	aed4 <___svfiprintf_internal_r+0xa6c>
    b19c:	d9801a04 	addi	r6,sp,104
    b1a0:	b80b883a 	mov	r5,r23
    b1a4:	a809883a 	mov	r4,r21
    b1a8:	000a2980 	call	a298 <__ssprint_r>
    b1ac:	103fbc1e 	bne	r2,zero,b0a0 <___svfiprintf_internal_r+0xc38>
    b1b0:	d8c01c17 	ldw	r3,112(sp)
    b1b4:	d811883a 	mov	r8,sp
    b1b8:	003f7a06 	br	afa4 <___svfiprintf_internal_r+0xb3c>
    b1bc:	d9801a04 	addi	r6,sp,104
    b1c0:	b80b883a 	mov	r5,r23
    b1c4:	a809883a 	mov	r4,r21
    b1c8:	000a2980 	call	a298 <__ssprint_r>
    b1cc:	103fa826 	beq	r2,zero,b070 <___svfiprintf_internal_r+0xc08>
    b1d0:	003fb306 	br	b0a0 <___svfiprintf_internal_r+0xc38>
    b1d4:	d9801a04 	addi	r6,sp,104
    b1d8:	b80b883a 	mov	r5,r23
    b1dc:	a809883a 	mov	r4,r21
    b1e0:	000a2980 	call	a298 <__ssprint_r>
    b1e4:	103fae1e 	bne	r2,zero,b0a0 <___svfiprintf_internal_r+0xc38>
    b1e8:	d811883a 	mov	r8,sp
    b1ec:	003cdc06 	br	a560 <___svfiprintf_internal_r+0xf8>
    b1f0:	d9801a04 	addi	r6,sp,104
    b1f4:	b80b883a 	mov	r5,r23
    b1f8:	a809883a 	mov	r4,r21
    b1fc:	000a2980 	call	a298 <__ssprint_r>
    b200:	103fa71e 	bne	r2,zero,b0a0 <___svfiprintf_internal_r+0xc38>
    b204:	d8c01c17 	ldw	r3,112(sp)
    b208:	d8801b17 	ldw	r2,108(sp)
    b20c:	d811883a 	mov	r8,sp
    b210:	003f5a06 	br	af7c <___svfiprintf_internal_r+0xb14>
    b214:	d9801a04 	addi	r6,sp,104
    b218:	b80b883a 	mov	r5,r23
    b21c:	a809883a 	mov	r4,r21
    b220:	000a2980 	call	a298 <__ssprint_r>
    b224:	103f9e1e 	bne	r2,zero,b0a0 <___svfiprintf_internal_r+0xc38>
    b228:	d8c01c17 	ldw	r3,112(sp)
    b22c:	d8801b17 	ldw	r2,108(sp)
    b230:	d811883a 	mov	r8,sp
    b234:	003f1706 	br	ae94 <___svfiprintf_internal_r+0xa2c>
    b238:	d9801a04 	addi	r6,sp,104
    b23c:	b80b883a 	mov	r5,r23
    b240:	a809883a 	mov	r4,r21
    b244:	000a2980 	call	a298 <__ssprint_r>
    b248:	103f951e 	bne	r2,zero,b0a0 <___svfiprintf_internal_r+0xc38>
    b24c:	d8c01c17 	ldw	r3,112(sp)
    b250:	d8801b17 	ldw	r2,108(sp)
    b254:	d811883a 	mov	r8,sp
    b258:	003f1b06 	br	aec8 <___svfiprintf_internal_r+0xa60>
    b25c:	d8001d85 	stb	zero,118(sp)
    b260:	80007b16 	blt	r16,zero,b450 <___svfiprintf_internal_r+0xfe8>
    b264:	00ffdfc4 	movi	r3,-129
    b268:	e244b03a 	or	r2,fp,r9
    b26c:	90e4703a 	and	r18,r18,r3
    b270:	103d7026 	beq	r2,zero,a834 <___svfiprintf_internal_r+0x3cc>
    b274:	0015883a 	mov	r10,zero
    b278:	003d7206 	br	a844 <___svfiprintf_internal_r+0x3dc>
    b27c:	d9801a04 	addi	r6,sp,104
    b280:	b80b883a 	mov	r5,r23
    b284:	a809883a 	mov	r4,r21
    b288:	000a2980 	call	a298 <__ssprint_r>
    b28c:	103f841e 	bne	r2,zero,b0a0 <___svfiprintf_internal_r+0xc38>
    b290:	d8c01c17 	ldw	r3,112(sp)
    b294:	d8801b17 	ldw	r2,108(sp)
    b298:	d811883a 	mov	r8,sp
    b29c:	003ef006 	br	ae60 <___svfiprintf_internal_r+0x9f8>
    b2a0:	9080100c 	andi	r2,r18,64
    b2a4:	d8001d85 	stb	zero,118(sp)
    b2a8:	dac02317 	ldw	r11,140(sp)
    b2ac:	10008126 	beq	r2,zero,b4b4 <___svfiprintf_internal_r+0x104c>
    b2b0:	58800104 	addi	r2,r11,4
    b2b4:	5f00000b 	ldhu	fp,0(r11)
    b2b8:	0013883a 	mov	r9,zero
    b2bc:	803ec30e 	bge	r16,zero,adcc <___svfiprintf_internal_r+0x964>
    b2c0:	d8802315 	stw	r2,140(sp)
    b2c4:	0015883a 	mov	r10,zero
    b2c8:	e244b03a 	or	r2,fp,r9
    b2cc:	103e371e 	bne	r2,zero,abac <___svfiprintf_internal_r+0x744>
    b2d0:	00800044 	movi	r2,1
    b2d4:	10803fcc 	andi	r2,r2,255
    b2d8:	00c00044 	movi	r3,1
    b2dc:	10c06126 	beq	r2,r3,b464 <___svfiprintf_internal_r+0xffc>
    b2e0:	00c00084 	movi	r3,2
    b2e4:	10fd5526 	beq	r2,r3,a83c <___svfiprintf_internal_r+0x3d4>
    b2e8:	003ed806 	br	ae4c <___svfiprintf_internal_r+0x9e4>
    b2ec:	d8802315 	stw	r2,140(sp)
    b2f0:	98c00007 	ldb	r3,0(r19)
    b2f4:	003cab06 	br	a5a4 <___svfiprintf_internal_r+0x13c>
    b2f8:	d9801a04 	addi	r6,sp,104
    b2fc:	b80b883a 	mov	r5,r23
    b300:	a809883a 	mov	r4,r21
    b304:	000a2980 	call	a298 <__ssprint_r>
    b308:	103f651e 	bne	r2,zero,b0a0 <___svfiprintf_internal_r+0xc38>
    b30c:	d8c01c17 	ldw	r3,112(sp)
    b310:	003f4f06 	br	b050 <___svfiprintf_internal_r+0xbe8>
    b314:	008000b4 	movhi	r2,2
    b318:	10b6b004 	addi	r2,r2,-9536
    b31c:	d8802915 	stw	r2,164(sp)
    b320:	003d4406 	br	a834 <___svfiprintf_internal_r+0x3cc>
    b324:	dac02317 	ldw	r11,140(sp)
    b328:	58800017 	ldw	r2,0(r11)
    b32c:	dac02517 	ldw	r11,148(sp)
    b330:	5807d7fa 	srai	r3,r11,31
    b334:	dac02317 	ldw	r11,140(sp)
    b338:	10c00115 	stw	r3,4(r2)
    b33c:	5ac00104 	addi	r11,r11,4
    b340:	dac02315 	stw	r11,140(sp)
    b344:	dac02517 	ldw	r11,148(sp)
    b348:	12c00015 	stw	r11,0(r2)
    b34c:	003c6d06 	br	a504 <___svfiprintf_internal_r+0x9c>
    b350:	9080100c 	andi	r2,r18,64
    b354:	dac02317 	ldw	r11,140(sp)
    b358:	103e5326 	beq	r2,zero,aca8 <___svfiprintf_internal_r+0x840>
    b35c:	5f00000f 	ldh	fp,0(r11)
    b360:	5ac00104 	addi	r11,r11,4
    b364:	dac02315 	stw	r11,140(sp)
    b368:	e013d7fa 	srai	r9,fp,31
    b36c:	4805883a 	mov	r2,r9
    b370:	003e0706 	br	ab90 <___svfiprintf_internal_r+0x728>
    b374:	00800c04 	movi	r2,48
    b378:	d8801d05 	stb	r2,116(sp)
    b37c:	d8c01d45 	stb	r3,117(sp)
    b380:	d8001d85 	stb	zero,118(sp)
    b384:	90800094 	ori	r2,r18,2
    b388:	80008f16 	blt	r16,zero,b5c8 <___svfiprintf_internal_r+0x1160>
    b38c:	00bfdfc4 	movi	r2,-129
    b390:	90a4703a 	and	r18,r18,r2
    b394:	94800094 	ori	r18,r18,2
    b398:	0015883a 	mov	r10,zero
    b39c:	003d2906 	br	a844 <___svfiprintf_internal_r+0x3dc>
    b3a0:	98c00007 	ldb	r3,0(r19)
    b3a4:	003c7f06 	br	a5a4 <___svfiprintf_internal_r+0x13c>
    b3a8:	dac02317 	ldw	r11,140(sp)
    b3ac:	0013883a 	mov	r9,zero
    b3b0:	5f000017 	ldw	fp,0(r11)
    b3b4:	5ac00104 	addi	r11,r11,4
    b3b8:	dac02315 	stw	r11,140(sp)
    b3bc:	003d1506 	br	a814 <___svfiprintf_internal_r+0x3ac>
    b3c0:	9080100c 	andi	r2,r18,64
    b3c4:	d8001d85 	stb	zero,118(sp)
    b3c8:	dac02317 	ldw	r11,140(sp)
    b3cc:	10003426 	beq	r2,zero,b4a0 <___svfiprintf_internal_r+0x1038>
    b3d0:	58800104 	addi	r2,r11,4
    b3d4:	5f00000b 	ldhu	fp,0(r11)
    b3d8:	0013883a 	mov	r9,zero
    b3dc:	803e950e 	bge	r16,zero,ae34 <___svfiprintf_internal_r+0x9cc>
    b3e0:	e246b03a 	or	r3,fp,r9
    b3e4:	d8802315 	stw	r2,140(sp)
    b3e8:	183d5a1e 	bne	r3,zero,a954 <___svfiprintf_internal_r+0x4ec>
    b3ec:	0015883a 	mov	r10,zero
    b3f0:	0005883a 	mov	r2,zero
    b3f4:	003fb706 	br	b2d4 <___svfiprintf_internal_r+0xe6c>
    b3f8:	98c00043 	ldbu	r3,1(r19)
    b3fc:	94800814 	ori	r18,r18,32
    b400:	9cc00044 	addi	r19,r19,1
    b404:	18c03fcc 	andi	r3,r3,255
    b408:	18c0201c 	xori	r3,r3,128
    b40c:	18ffe004 	addi	r3,r3,-128
    b410:	003c6406 	br	a5a4 <___svfiprintf_internal_r+0x13c>
    b414:	d8c02315 	stw	r3,140(sp)
    b418:	0015883a 	mov	r10,zero
    b41c:	003faa06 	br	b2c8 <___svfiprintf_internal_r+0xe60>
    b420:	dac02317 	ldw	r11,140(sp)
    b424:	58800017 	ldw	r2,0(r11)
    b428:	5ac00104 	addi	r11,r11,4
    b42c:	dac02315 	stw	r11,140(sp)
    b430:	dac02517 	ldw	r11,148(sp)
    b434:	12c00015 	stw	r11,0(r2)
    b438:	003c3206 	br	a504 <___svfiprintf_internal_r+0x9c>
    b43c:	010000b4 	movhi	r4,2
    b440:	2136b004 	addi	r4,r4,-9536
    b444:	d9002915 	stw	r4,164(sp)
    b448:	d8c02315 	stw	r3,140(sp)
    b44c:	1025883a 	mov	r18,r2
    b450:	e244b03a 	or	r2,fp,r9
    b454:	103f871e 	bne	r2,zero,b274 <___svfiprintf_internal_r+0xe0c>
    b458:	0015883a 	mov	r10,zero
    b45c:	00800084 	movi	r2,2
    b460:	003f9c06 	br	b2d4 <___svfiprintf_internal_r+0xe6c>
    b464:	0039883a 	mov	fp,zero
    b468:	003e5f06 	br	ade8 <___svfiprintf_internal_r+0x980>
    b46c:	d9801a04 	addi	r6,sp,104
    b470:	b80b883a 	mov	r5,r23
    b474:	a809883a 	mov	r4,r21
    b478:	000a2980 	call	a298 <__ssprint_r>
    b47c:	103f081e 	bne	r2,zero,b0a0 <___svfiprintf_internal_r+0xc38>
    b480:	d8c01c17 	ldw	r3,112(sp)
    b484:	d8801b17 	ldw	r2,108(sp)
    b488:	d811883a 	mov	r8,sp
    b48c:	003e9106 	br	aed4 <___svfiprintf_internal_r+0xa6c>
    b490:	010000b4 	movhi	r4,2
    b494:	21371904 	addi	r4,r4,-9116
    b498:	d9002215 	stw	r4,136(sp)
    b49c:	003ead06 	br	af54 <___svfiprintf_internal_r+0xaec>
    b4a0:	58800104 	addi	r2,r11,4
    b4a4:	5f000017 	ldw	fp,0(r11)
    b4a8:	0013883a 	mov	r9,zero
    b4ac:	803e610e 	bge	r16,zero,ae34 <___svfiprintf_internal_r+0x9cc>
    b4b0:	003fcb06 	br	b3e0 <___svfiprintf_internal_r+0xf78>
    b4b4:	58800104 	addi	r2,r11,4
    b4b8:	5f000017 	ldw	fp,0(r11)
    b4bc:	0013883a 	mov	r9,zero
    b4c0:	803e420e 	bge	r16,zero,adcc <___svfiprintf_internal_r+0x964>
    b4c4:	003f7e06 	br	b2c0 <___svfiprintf_internal_r+0xe58>
    b4c8:	5f000017 	ldw	fp,0(r11)
    b4cc:	5ac00104 	addi	r11,r11,4
    b4d0:	0013883a 	mov	r9,zero
    b4d4:	dac02315 	stw	r11,140(sp)
    b4d8:	003cce06 	br	a814 <___svfiprintf_internal_r+0x3ac>
    b4dc:	8809883a 	mov	r4,r17
    b4e0:	da002c15 	stw	r8,176(sp)
    b4e4:	0000b280 	call	b28 <strlen>
    b4e8:	d8802115 	stw	r2,132(sp)
    b4ec:	da801d83 	ldbu	r10,118(sp)
    b4f0:	df002315 	stw	fp,140(sp)
    b4f4:	0021883a 	mov	r16,zero
    b4f8:	da002c17 	ldw	r8,176(sp)
    b4fc:	003cf606 	br	a8d8 <___svfiprintf_internal_r+0x470>
    b500:	00800184 	movi	r2,6
    b504:	1400012e 	bgeu	r2,r16,b50c <___svfiprintf_internal_r+0x10a4>
    b508:	1021883a 	mov	r16,r2
    b50c:	dc002115 	stw	r16,132(sp)
    b510:	8005883a 	mov	r2,r16
    b514:	80003c16 	blt	r16,zero,b608 <___svfiprintf_internal_r+0x11a0>
    b518:	044000b4 	movhi	r17,2
    b51c:	d8802015 	stw	r2,128(sp)
    b520:	df002315 	stw	fp,140(sp)
    b524:	8c76b504 	addi	r17,r17,-9516
    b528:	003d2e06 	br	a9e4 <___svfiprintf_internal_r+0x57c>
    b52c:	04001004 	movi	r16,64
    b530:	800b883a 	mov	r5,r16
    b534:	0007d9c0 	call	7d9c <_malloc_r>
    b538:	dac02717 	ldw	r11,156(sp)
    b53c:	58800015 	stw	r2,0(r11)
    b540:	58800415 	stw	r2,16(r11)
    b544:	10004826 	beq	r2,zero,b668 <___svfiprintf_internal_r+0x1200>
    b548:	dac02717 	ldw	r11,156(sp)
    b54c:	5c000515 	stw	r16,20(r11)
    b550:	003bd906 	br	a4b8 <___svfiprintf_internal_r+0x50>
    b554:	9080004c 	andi	r2,r18,1
    b558:	0015883a 	mov	r10,zero
    b55c:	10000626 	beq	r2,zero,b578 <___svfiprintf_internal_r+0x1110>
    b560:	dac02b17 	ldw	r11,172(sp)
    b564:	00800c04 	movi	r2,48
    b568:	d88019c5 	stb	r2,103(sp)
    b56c:	dac02115 	stw	r11,132(sp)
    b570:	dc4019c4 	addi	r17,sp,103
    b574:	003cd806 	br	a8d8 <___svfiprintf_internal_r+0x470>
    b578:	d8002115 	stw	zero,132(sp)
    b57c:	dc401a04 	addi	r17,sp,104
    b580:	003cd506 	br	a8d8 <___svfiprintf_internal_r+0x470>
    b584:	010000b4 	movhi	r4,2
    b588:	21371d04 	addi	r4,r4,-9100
    b58c:	d9002815 	stw	r4,160(sp)
    b590:	003d4306 	br	aaa0 <___svfiprintf_internal_r+0x638>
    b594:	00bfffc4 	movi	r2,-1
    b598:	003ec606 	br	b0b4 <___svfiprintf_internal_r+0xc4c>
    b59c:	00800044 	movi	r2,1
    b5a0:	10803fcc 	andi	r2,r2,255
    b5a4:	00c00044 	movi	r3,1
    b5a8:	10fd8026 	beq	r2,r3,abac <___svfiprintf_internal_r+0x744>
    b5ac:	00c00084 	movi	r3,2
    b5b0:	10fca426 	beq	r2,r3,a844 <___svfiprintf_internal_r+0x3dc>
    b5b4:	003ce806 	br	a958 <___svfiprintf_internal_r+0x4f0>
    b5b8:	010000b4 	movhi	r4,2
    b5bc:	21371d04 	addi	r4,r4,-9100
    b5c0:	d9002815 	stw	r4,160(sp)
    b5c4:	003e9906 	br	b02c <___svfiprintf_internal_r+0xbc4>
    b5c8:	1025883a 	mov	r18,r2
    b5cc:	0015883a 	mov	r10,zero
    b5d0:	00800084 	movi	r2,2
    b5d4:	003ff206 	br	b5a0 <___svfiprintf_internal_r+0x1138>
    b5d8:	014000b4 	movhi	r5,2
    b5dc:	29771904 	addi	r5,r5,-9116
    b5e0:	d9402215 	stw	r5,136(sp)
    b5e4:	003ee206 	br	b170 <___svfiprintf_internal_r+0xd08>
    b5e8:	5827883a 	mov	r19,r11
    b5ec:	0021883a 	mov	r16,zero
    b5f0:	003bed06 	br	a5a8 <___svfiprintf_internal_r+0x140>
    b5f4:	dc002115 	stw	r16,132(sp)
    b5f8:	da801d83 	ldbu	r10,118(sp)
    b5fc:	df002315 	stw	fp,140(sp)
    b600:	0021883a 	mov	r16,zero
    b604:	003cb406 	br	a8d8 <___svfiprintf_internal_r+0x470>
    b608:	0005883a 	mov	r2,zero
    b60c:	003fc206 	br	b518 <___svfiprintf_internal_r+0x10b0>
    b610:	d8802317 	ldw	r2,140(sp)
    b614:	98c00043 	ldbu	r3,1(r19)
    b618:	5827883a 	mov	r19,r11
    b61c:	14000017 	ldw	r16,0(r2)
    b620:	10800104 	addi	r2,r2,4
    b624:	d8802315 	stw	r2,140(sp)
    b628:	803f760e 	bge	r16,zero,b404 <___svfiprintf_internal_r+0xf9c>
    b62c:	18c03fcc 	andi	r3,r3,255
    b630:	18c0201c 	xori	r3,r3,128
    b634:	043fffc4 	movi	r16,-1
    b638:	18ffe004 	addi	r3,r3,-128
    b63c:	003bd906 	br	a5a4 <___svfiprintf_internal_r+0x13c>
    b640:	d9c01d85 	stb	r7,118(sp)
    b644:	003cb606 	br	a920 <___svfiprintf_internal_r+0x4b8>
    b648:	d9c01d85 	stb	r7,118(sp)
    b64c:	003d2106 	br	aad4 <___svfiprintf_internal_r+0x66c>
    b650:	d9c01d85 	stb	r7,118(sp)
    b654:	003d8e06 	br	ac90 <___svfiprintf_internal_r+0x828>
    b658:	d9c01d85 	stb	r7,118(sp)
    b65c:	003db306 	br	ad2c <___svfiprintf_internal_r+0x8c4>
    b660:	d9c01d85 	stb	r7,118(sp)
    b664:	003c8a06 	br	a890 <___svfiprintf_internal_r+0x428>
    b668:	dac02a17 	ldw	r11,168(sp)
    b66c:	00800304 	movi	r2,12
    b670:	58800015 	stw	r2,0(r11)
    b674:	00bfffc4 	movi	r2,-1
    b678:	003e8e06 	br	b0b4 <___svfiprintf_internal_r+0xc4c>
    b67c:	d9c01d85 	stb	r7,118(sp)
    b680:	003dc706 	br	ada0 <___svfiprintf_internal_r+0x938>
    b684:	d9c01d85 	stb	r7,118(sp)
    b688:	003ddf06 	br	ae08 <___svfiprintf_internal_r+0x9a0>
    b68c:	d9c01d85 	stb	r7,118(sp)
    b690:	003d3706 	br	ab70 <___svfiprintf_internal_r+0x708>
    b694:	d9c01d85 	stb	r7,118(sp)
    b698:	003c5406 	br	a7ec <___svfiprintf_internal_r+0x384>
    b69c:	d9c01d85 	stb	r7,118(sp)
    b6a0:	003d1d06 	br	ab18 <___svfiprintf_internal_r+0x6b0>

0000b6a4 <__sprint_r.part.0>:
    b6a4:	28801917 	ldw	r2,100(r5)
    b6a8:	defff604 	addi	sp,sp,-40
    b6ac:	dd400515 	stw	r21,20(sp)
    b6b0:	dfc00915 	stw	ra,36(sp)
    b6b4:	df000815 	stw	fp,32(sp)
    b6b8:	ddc00715 	stw	r23,28(sp)
    b6bc:	dd800615 	stw	r22,24(sp)
    b6c0:	dd000415 	stw	r20,16(sp)
    b6c4:	dcc00315 	stw	r19,12(sp)
    b6c8:	dc800215 	stw	r18,8(sp)
    b6cc:	dc400115 	stw	r17,4(sp)
    b6d0:	dc000015 	stw	r16,0(sp)
    b6d4:	1088000c 	andi	r2,r2,8192
    b6d8:	302b883a 	mov	r21,r6
    b6dc:	10002e26 	beq	r2,zero,b798 <__sprint_r.part.0+0xf4>
    b6e0:	30800217 	ldw	r2,8(r6)
    b6e4:	35800017 	ldw	r22,0(r6)
    b6e8:	10002926 	beq	r2,zero,b790 <__sprint_r.part.0+0xec>
    b6ec:	2827883a 	mov	r19,r5
    b6f0:	2029883a 	mov	r20,r4
    b6f4:	b5c00104 	addi	r23,r22,4
    b6f8:	04bfffc4 	movi	r18,-1
    b6fc:	bc400017 	ldw	r17,0(r23)
    b700:	b4000017 	ldw	r16,0(r22)
    b704:	0039883a 	mov	fp,zero
    b708:	8822d0ba 	srli	r17,r17,2
    b70c:	8800031e 	bne	r17,zero,b71c <__sprint_r.part.0+0x78>
    b710:	00001806 	br	b774 <__sprint_r.part.0+0xd0>
    b714:	84000104 	addi	r16,r16,4
    b718:	8f001526 	beq	r17,fp,b770 <__sprint_r.part.0+0xcc>
    b71c:	81400017 	ldw	r5,0(r16)
    b720:	980d883a 	mov	r6,r19
    b724:	a009883a 	mov	r4,r20
    b728:	000d0cc0 	call	d0cc <_fputwc_r>
    b72c:	e7000044 	addi	fp,fp,1
    b730:	14bff81e 	bne	r2,r18,b714 <__sprint_r.part.0+0x70>
    b734:	9005883a 	mov	r2,r18
    b738:	a8000215 	stw	zero,8(r21)
    b73c:	a8000115 	stw	zero,4(r21)
    b740:	dfc00917 	ldw	ra,36(sp)
    b744:	df000817 	ldw	fp,32(sp)
    b748:	ddc00717 	ldw	r23,28(sp)
    b74c:	dd800617 	ldw	r22,24(sp)
    b750:	dd400517 	ldw	r21,20(sp)
    b754:	dd000417 	ldw	r20,16(sp)
    b758:	dcc00317 	ldw	r19,12(sp)
    b75c:	dc800217 	ldw	r18,8(sp)
    b760:	dc400117 	ldw	r17,4(sp)
    b764:	dc000017 	ldw	r16,0(sp)
    b768:	dec00a04 	addi	sp,sp,40
    b76c:	f800283a 	ret
    b770:	a8800217 	ldw	r2,8(r21)
    b774:	8c63883a 	add	r17,r17,r17
    b778:	8c63883a 	add	r17,r17,r17
    b77c:	1445c83a 	sub	r2,r2,r17
    b780:	a8800215 	stw	r2,8(r21)
    b784:	b5800204 	addi	r22,r22,8
    b788:	bdc00204 	addi	r23,r23,8
    b78c:	103fdb1e 	bne	r2,zero,b6fc <__sprint_r.part.0+0x58>
    b790:	0005883a 	mov	r2,zero
    b794:	003fe806 	br	b738 <__sprint_r.part.0+0x94>
    b798:	00074c00 	call	74c0 <__sfvwrite_r>
    b79c:	003fe606 	br	b738 <__sprint_r.part.0+0x94>

0000b7a0 <__sprint_r>:
    b7a0:	30c00217 	ldw	r3,8(r6)
    b7a4:	18000126 	beq	r3,zero,b7ac <__sprint_r+0xc>
    b7a8:	000b6a41 	jmpi	b6a4 <__sprint_r.part.0>
    b7ac:	30000115 	stw	zero,4(r6)
    b7b0:	0005883a 	mov	r2,zero
    b7b4:	f800283a 	ret

0000b7b8 <___vfiprintf_internal_r>:
    b7b8:	deffc904 	addi	sp,sp,-220
    b7bc:	df003515 	stw	fp,212(sp)
    b7c0:	dd003115 	stw	r20,196(sp)
    b7c4:	dfc03615 	stw	ra,216(sp)
    b7c8:	ddc03415 	stw	r23,208(sp)
    b7cc:	dd803315 	stw	r22,204(sp)
    b7d0:	dd403215 	stw	r21,200(sp)
    b7d4:	dcc03015 	stw	r19,192(sp)
    b7d8:	dc802f15 	stw	r18,188(sp)
    b7dc:	dc402e15 	stw	r17,184(sp)
    b7e0:	dc002d15 	stw	r16,180(sp)
    b7e4:	d9002015 	stw	r4,128(sp)
    b7e8:	d9c02215 	stw	r7,136(sp)
    b7ec:	2829883a 	mov	r20,r5
    b7f0:	3039883a 	mov	fp,r6
    b7f4:	20000226 	beq	r4,zero,b800 <___vfiprintf_internal_r+0x48>
    b7f8:	20800e17 	ldw	r2,56(r4)
    b7fc:	1000cf26 	beq	r2,zero,bb3c <___vfiprintf_internal_r+0x384>
    b800:	a080030b 	ldhu	r2,12(r20)
    b804:	10c8000c 	andi	r3,r2,8192
    b808:	1800061e 	bne	r3,zero,b824 <___vfiprintf_internal_r+0x6c>
    b80c:	a1001917 	ldw	r4,100(r20)
    b810:	00f7ffc4 	movi	r3,-8193
    b814:	10880014 	ori	r2,r2,8192
    b818:	20c6703a 	and	r3,r4,r3
    b81c:	a080030d 	sth	r2,12(r20)
    b820:	a0c01915 	stw	r3,100(r20)
    b824:	10c0020c 	andi	r3,r2,8
    b828:	1800a926 	beq	r3,zero,bad0 <___vfiprintf_internal_r+0x318>
    b82c:	a0c00417 	ldw	r3,16(r20)
    b830:	1800a726 	beq	r3,zero,bad0 <___vfiprintf_internal_r+0x318>
    b834:	1080068c 	andi	r2,r2,26
    b838:	00c00284 	movi	r3,10
    b83c:	10c0ac26 	beq	r2,r3,baf0 <___vfiprintf_internal_r+0x338>
    b840:	da801a04 	addi	r10,sp,104
    b844:	da801e15 	stw	r10,120(sp)
    b848:	d8801e17 	ldw	r2,120(sp)
    b84c:	da8019c4 	addi	r10,sp,103
    b850:	058000b4 	movhi	r22,2
    b854:	05c000b4 	movhi	r23,2
    b858:	da801f15 	stw	r10,124(sp)
    b85c:	1295c83a 	sub	r10,r2,r10
    b860:	b5b72504 	addi	r22,r22,-9068
    b864:	bdf72104 	addi	r23,r23,-9084
    b868:	dec01a15 	stw	sp,104(sp)
    b86c:	d8001c15 	stw	zero,112(sp)
    b870:	d8001b15 	stw	zero,108(sp)
    b874:	d8002615 	stw	zero,152(sp)
    b878:	d8002315 	stw	zero,140(sp)
    b87c:	da802715 	stw	r10,156(sp)
    b880:	d811883a 	mov	r8,sp
    b884:	dd002115 	stw	r20,132(sp)
    b888:	e021883a 	mov	r16,fp
    b88c:	80800007 	ldb	r2,0(r16)
    b890:	1003ea26 	beq	r2,zero,c83c <___vfiprintf_internal_r+0x1084>
    b894:	00c00944 	movi	r3,37
    b898:	8025883a 	mov	r18,r16
    b89c:	10c0021e 	bne	r2,r3,b8a8 <___vfiprintf_internal_r+0xf0>
    b8a0:	00001606 	br	b8fc <___vfiprintf_internal_r+0x144>
    b8a4:	10c00326 	beq	r2,r3,b8b4 <___vfiprintf_internal_r+0xfc>
    b8a8:	94800044 	addi	r18,r18,1
    b8ac:	90800007 	ldb	r2,0(r18)
    b8b0:	103ffc1e 	bne	r2,zero,b8a4 <___vfiprintf_internal_r+0xec>
    b8b4:	9423c83a 	sub	r17,r18,r16
    b8b8:	88001026 	beq	r17,zero,b8fc <___vfiprintf_internal_r+0x144>
    b8bc:	d8c01c17 	ldw	r3,112(sp)
    b8c0:	d8801b17 	ldw	r2,108(sp)
    b8c4:	44000015 	stw	r16,0(r8)
    b8c8:	88c7883a 	add	r3,r17,r3
    b8cc:	10800044 	addi	r2,r2,1
    b8d0:	44400115 	stw	r17,4(r8)
    b8d4:	d8c01c15 	stw	r3,112(sp)
    b8d8:	d8801b15 	stw	r2,108(sp)
    b8dc:	010001c4 	movi	r4,7
    b8e0:	2080760e 	bge	r4,r2,babc <___vfiprintf_internal_r+0x304>
    b8e4:	1803821e 	bne	r3,zero,c6f0 <___vfiprintf_internal_r+0xf38>
    b8e8:	da802317 	ldw	r10,140(sp)
    b8ec:	d8001b15 	stw	zero,108(sp)
    b8f0:	d811883a 	mov	r8,sp
    b8f4:	5455883a 	add	r10,r10,r17
    b8f8:	da802315 	stw	r10,140(sp)
    b8fc:	90800007 	ldb	r2,0(r18)
    b900:	10044626 	beq	r2,zero,ca1c <___vfiprintf_internal_r+0x1264>
    b904:	90c00047 	ldb	r3,1(r18)
    b908:	94000044 	addi	r16,r18,1
    b90c:	d8001d85 	stb	zero,118(sp)
    b910:	0009883a 	mov	r4,zero
    b914:	000f883a 	mov	r7,zero
    b918:	027fffc4 	movi	r9,-1
    b91c:	0023883a 	mov	r17,zero
    b920:	0029883a 	mov	r20,zero
    b924:	01401604 	movi	r5,88
    b928:	01800244 	movi	r6,9
    b92c:	03400a84 	movi	r13,42
    b930:	03001b04 	movi	r12,108
    b934:	84000044 	addi	r16,r16,1
    b938:	18bff804 	addi	r2,r3,-32
    b93c:	28827336 	bltu	r5,r2,c30c <___vfiprintf_internal_r+0xb54>
    b940:	100490ba 	slli	r2,r2,2
    b944:	02800074 	movhi	r10,1
    b948:	52ae5604 	addi	r10,r10,-18088
    b94c:	1285883a 	add	r2,r2,r10
    b950:	10800017 	ldw	r2,0(r2)
    b954:	1000683a 	jmp	r2
    b958:	0000c040 	call	c04 <___svfprintf_internal_r+0x44>
    b95c:	0000c30c 	andi	zero,zero,780
    b960:	0000c30c 	andi	zero,zero,780
    b964:	0000c060 	cmpeqi	zero,zero,769
    b968:	0000c30c 	andi	zero,zero,780
    b96c:	0000c30c 	andi	zero,zero,780
    b970:	0000c30c 	andi	zero,zero,780
    b974:	0000c30c 	andi	zero,zero,780
    b978:	0000c30c 	andi	zero,zero,780
    b97c:	0000c30c 	andi	zero,zero,780
    b980:	0000c248 	cmpgei	zero,zero,777
    b984:	0000c264 	muli	zero,zero,777
    b988:	0000c30c 	andi	zero,zero,780
    b98c:	0000bb4c 	andi	zero,zero,749
    b990:	0000c274 	movhi	zero,777
    b994:	0000c30c 	andi	zero,zero,780
    b998:	0000c06c 	andhi	zero,zero,769
    b99c:	0000c078 	rdprs	zero,zero,769
    b9a0:	0000c078 	rdprs	zero,zero,769
    b9a4:	0000c078 	rdprs	zero,zero,769
    b9a8:	0000c078 	rdprs	zero,zero,769
    b9ac:	0000c078 	rdprs	zero,zero,769
    b9b0:	0000c078 	rdprs	zero,zero,769
    b9b4:	0000c078 	rdprs	zero,zero,769
    b9b8:	0000c078 	rdprs	zero,zero,769
    b9bc:	0000c078 	rdprs	zero,zero,769
    b9c0:	0000c30c 	andi	zero,zero,780
    b9c4:	0000c30c 	andi	zero,zero,780
    b9c8:	0000c30c 	andi	zero,zero,780
    b9cc:	0000c30c 	andi	zero,zero,780
    b9d0:	0000c30c 	andi	zero,zero,780
    b9d4:	0000c30c 	andi	zero,zero,780
    b9d8:	0000c30c 	andi	zero,zero,780
    b9dc:	0000c30c 	andi	zero,zero,780
    b9e0:	0000c30c 	andi	zero,zero,780
    b9e4:	0000c30c 	andi	zero,zero,780
    b9e8:	0000c0a4 	muli	zero,zero,770
    b9ec:	0000c30c 	andi	zero,zero,780
    b9f0:	0000c30c 	andi	zero,zero,780
    b9f4:	0000c30c 	andi	zero,zero,780
    b9f8:	0000c30c 	andi	zero,zero,780
    b9fc:	0000c30c 	andi	zero,zero,780
    ba00:	0000c30c 	andi	zero,zero,780
    ba04:	0000c30c 	andi	zero,zero,780
    ba08:	0000c30c 	andi	zero,zero,780
    ba0c:	0000c30c 	andi	zero,zero,780
    ba10:	0000c30c 	andi	zero,zero,780
    ba14:	0000c0dc 	xori	zero,zero,771
    ba18:	0000c30c 	andi	zero,zero,780
    ba1c:	0000c30c 	andi	zero,zero,780
    ba20:	0000c30c 	andi	zero,zero,780
    ba24:	0000c30c 	andi	zero,zero,780
    ba28:	0000c30c 	andi	zero,zero,780
    ba2c:	0000c134 	movhi	zero,772
    ba30:	0000c30c 	andi	zero,zero,780
    ba34:	0000c30c 	andi	zero,zero,780
    ba38:	0000c1a4 	muli	zero,zero,774
    ba3c:	0000c30c 	andi	zero,zero,780
    ba40:	0000c30c 	andi	zero,zero,780
    ba44:	0000c30c 	andi	zero,zero,780
    ba48:	0000c30c 	andi	zero,zero,780
    ba4c:	0000c30c 	andi	zero,zero,780
    ba50:	0000c30c 	andi	zero,zero,780
    ba54:	0000c30c 	andi	zero,zero,780
    ba58:	0000c30c 	andi	zero,zero,780
    ba5c:	0000c30c 	andi	zero,zero,780
    ba60:	0000c30c 	andi	zero,zero,780
    ba64:	0000bf50 	cmplti	zero,zero,765
    ba68:	0000bf7c 	xorhi	zero,zero,765
    ba6c:	0000c30c 	andi	zero,zero,780
    ba70:	0000c30c 	andi	zero,zero,780
    ba74:	0000c30c 	andi	zero,zero,780
    ba78:	0000c2b4 	movhi	zero,778
    ba7c:	0000bf7c 	xorhi	zero,zero,765
    ba80:	0000c30c 	andi	zero,zero,780
    ba84:	0000c30c 	andi	zero,zero,780
    ba88:	0000be10 	cmplti	zero,zero,760
    ba8c:	0000c30c 	andi	zero,zero,780
    ba90:	0000be20 	cmpeqi	zero,zero,760
    ba94:	0000be5c 	xori	zero,zero,761
    ba98:	0000bb58 	cmpnei	zero,zero,749
    ba9c:	0000be04 	movi	zero,760
    baa0:	0000c30c 	andi	zero,zero,780
    baa4:	0000c1e0 	cmpeqi	zero,zero,775
    baa8:	0000c30c 	andi	zero,zero,780
    baac:	0000c238 	rdprs	zero,zero,776
    bab0:	0000c30c 	andi	zero,zero,780
    bab4:	0000c30c 	andi	zero,zero,780
    bab8:	0000befc 	xorhi	zero,zero,763
    babc:	42000204 	addi	r8,r8,8
    bac0:	da802317 	ldw	r10,140(sp)
    bac4:	5455883a 	add	r10,r10,r17
    bac8:	da802315 	stw	r10,140(sp)
    bacc:	003f8b06 	br	b8fc <___vfiprintf_internal_r+0x144>
    bad0:	d9002017 	ldw	r4,128(sp)
    bad4:	a00b883a 	mov	r5,r20
    bad8:	00050680 	call	5068 <__swsetup_r>
    badc:	1003b11e 	bne	r2,zero,c9a4 <___vfiprintf_internal_r+0x11ec>
    bae0:	a080030b 	ldhu	r2,12(r20)
    bae4:	00c00284 	movi	r3,10
    bae8:	1080068c 	andi	r2,r2,26
    baec:	10ff541e 	bne	r2,r3,b840 <___vfiprintf_internal_r+0x88>
    baf0:	a080038f 	ldh	r2,14(r20)
    baf4:	103f5216 	blt	r2,zero,b840 <___vfiprintf_internal_r+0x88>
    baf8:	d9c02217 	ldw	r7,136(sp)
    bafc:	d9002017 	ldw	r4,128(sp)
    bb00:	e00d883a 	mov	r6,fp
    bb04:	a00b883a 	mov	r5,r20
    bb08:	000cc300 	call	cc30 <__sbprintf>
    bb0c:	dfc03617 	ldw	ra,216(sp)
    bb10:	df003517 	ldw	fp,212(sp)
    bb14:	ddc03417 	ldw	r23,208(sp)
    bb18:	dd803317 	ldw	r22,204(sp)
    bb1c:	dd403217 	ldw	r21,200(sp)
    bb20:	dd003117 	ldw	r20,196(sp)
    bb24:	dcc03017 	ldw	r19,192(sp)
    bb28:	dc802f17 	ldw	r18,188(sp)
    bb2c:	dc402e17 	ldw	r17,184(sp)
    bb30:	dc002d17 	ldw	r16,180(sp)
    bb34:	dec03704 	addi	sp,sp,220
    bb38:	f800283a 	ret
    bb3c:	000703c0 	call	703c <__sinit>
    bb40:	003f2f06 	br	b800 <___vfiprintf_internal_r+0x48>
    bb44:	0463c83a 	sub	r17,zero,r17
    bb48:	d8802215 	stw	r2,136(sp)
    bb4c:	a5000114 	ori	r20,r20,4
    bb50:	80c00007 	ldb	r3,0(r16)
    bb54:	003f7706 	br	b934 <___vfiprintf_internal_r+0x17c>
    bb58:	00800c04 	movi	r2,48
    bb5c:	da802217 	ldw	r10,136(sp)
    bb60:	d8801d05 	stb	r2,116(sp)
    bb64:	00801e04 	movi	r2,120
    bb68:	d8801d45 	stb	r2,117(sp)
    bb6c:	d8001d85 	stb	zero,118(sp)
    bb70:	50c00104 	addi	r3,r10,4
    bb74:	54800017 	ldw	r18,0(r10)
    bb78:	0027883a 	mov	r19,zero
    bb7c:	a0800094 	ori	r2,r20,2
    bb80:	48030b16 	blt	r9,zero,c7b0 <___vfiprintf_internal_r+0xff8>
    bb84:	00bfdfc4 	movi	r2,-129
    bb88:	a096703a 	and	r11,r20,r2
    bb8c:	d8c02215 	stw	r3,136(sp)
    bb90:	5d000094 	ori	r20,r11,2
    bb94:	90032b1e 	bne	r18,zero,c844 <___vfiprintf_internal_r+0x108c>
    bb98:	008000b4 	movhi	r2,2
    bb9c:	10b6b004 	addi	r2,r2,-9536
    bba0:	d8802615 	stw	r2,152(sp)
    bba4:	0039883a 	mov	fp,zero
    bba8:	48017b1e 	bne	r9,zero,c198 <___vfiprintf_internal_r+0x9e0>
    bbac:	0013883a 	mov	r9,zero
    bbb0:	0027883a 	mov	r19,zero
    bbb4:	dd401a04 	addi	r21,sp,104
    bbb8:	4825883a 	mov	r18,r9
    bbbc:	4cc0010e 	bge	r9,r19,bbc4 <___vfiprintf_internal_r+0x40c>
    bbc0:	9825883a 	mov	r18,r19
    bbc4:	e7003fcc 	andi	fp,fp,255
    bbc8:	e700201c 	xori	fp,fp,128
    bbcc:	e73fe004 	addi	fp,fp,-128
    bbd0:	e0000126 	beq	fp,zero,bbd8 <___vfiprintf_internal_r+0x420>
    bbd4:	94800044 	addi	r18,r18,1
    bbd8:	a380008c 	andi	r14,r20,2
    bbdc:	70000126 	beq	r14,zero,bbe4 <___vfiprintf_internal_r+0x42c>
    bbe0:	94800084 	addi	r18,r18,2
    bbe4:	a700210c 	andi	fp,r20,132
    bbe8:	e001df1e 	bne	fp,zero,c368 <___vfiprintf_internal_r+0xbb0>
    bbec:	8c87c83a 	sub	r3,r17,r18
    bbf0:	00c1dd0e 	bge	zero,r3,c368 <___vfiprintf_internal_r+0xbb0>
    bbf4:	01c00404 	movi	r7,16
    bbf8:	d8801c17 	ldw	r2,112(sp)
    bbfc:	38c3ad0e 	bge	r7,r3,cab4 <___vfiprintf_internal_r+0x12fc>
    bc00:	028000b4 	movhi	r10,2
    bc04:	52b72504 	addi	r10,r10,-9068
    bc08:	dc002915 	stw	r16,164(sp)
    bc0c:	d9801b17 	ldw	r6,108(sp)
    bc10:	da802415 	stw	r10,144(sp)
    bc14:	03c001c4 	movi	r15,7
    bc18:	da402515 	stw	r9,148(sp)
    bc1c:	db802815 	stw	r14,160(sp)
    bc20:	1821883a 	mov	r16,r3
    bc24:	00000506 	br	bc3c <___vfiprintf_internal_r+0x484>
    bc28:	31400084 	addi	r5,r6,2
    bc2c:	42000204 	addi	r8,r8,8
    bc30:	200d883a 	mov	r6,r4
    bc34:	843ffc04 	addi	r16,r16,-16
    bc38:	3c000d0e 	bge	r7,r16,bc70 <___vfiprintf_internal_r+0x4b8>
    bc3c:	10800404 	addi	r2,r2,16
    bc40:	31000044 	addi	r4,r6,1
    bc44:	45800015 	stw	r22,0(r8)
    bc48:	41c00115 	stw	r7,4(r8)
    bc4c:	d8801c15 	stw	r2,112(sp)
    bc50:	d9001b15 	stw	r4,108(sp)
    bc54:	793ff40e 	bge	r15,r4,bc28 <___vfiprintf_internal_r+0x470>
    bc58:	1001b51e 	bne	r2,zero,c330 <___vfiprintf_internal_r+0xb78>
    bc5c:	843ffc04 	addi	r16,r16,-16
    bc60:	000d883a 	mov	r6,zero
    bc64:	01400044 	movi	r5,1
    bc68:	d811883a 	mov	r8,sp
    bc6c:	3c3ff316 	blt	r7,r16,bc3c <___vfiprintf_internal_r+0x484>
    bc70:	8007883a 	mov	r3,r16
    bc74:	da402517 	ldw	r9,148(sp)
    bc78:	db802817 	ldw	r14,160(sp)
    bc7c:	dc002917 	ldw	r16,164(sp)
    bc80:	da802417 	ldw	r10,144(sp)
    bc84:	1885883a 	add	r2,r3,r2
    bc88:	40c00115 	stw	r3,4(r8)
    bc8c:	42800015 	stw	r10,0(r8)
    bc90:	d8801c15 	stw	r2,112(sp)
    bc94:	d9401b15 	stw	r5,108(sp)
    bc98:	00c001c4 	movi	r3,7
    bc9c:	19426016 	blt	r3,r5,c620 <___vfiprintf_internal_r+0xe68>
    bca0:	d8c01d87 	ldb	r3,118(sp)
    bca4:	42000204 	addi	r8,r8,8
    bca8:	29000044 	addi	r4,r5,1
    bcac:	1801b31e 	bne	r3,zero,c37c <___vfiprintf_internal_r+0xbc4>
    bcb0:	7001c026 	beq	r14,zero,c3b4 <___vfiprintf_internal_r+0xbfc>
    bcb4:	d8c01d04 	addi	r3,sp,116
    bcb8:	10800084 	addi	r2,r2,2
    bcbc:	40c00015 	stw	r3,0(r8)
    bcc0:	00c00084 	movi	r3,2
    bcc4:	40c00115 	stw	r3,4(r8)
    bcc8:	d8801c15 	stw	r2,112(sp)
    bccc:	d9001b15 	stw	r4,108(sp)
    bcd0:	00c001c4 	movi	r3,7
    bcd4:	1902650e 	bge	r3,r4,c66c <___vfiprintf_internal_r+0xeb4>
    bcd8:	10029a1e 	bne	r2,zero,c744 <___vfiprintf_internal_r+0xf8c>
    bcdc:	00c02004 	movi	r3,128
    bce0:	01000044 	movi	r4,1
    bce4:	000b883a 	mov	r5,zero
    bce8:	d811883a 	mov	r8,sp
    bcec:	e0c1b31e 	bne	fp,r3,c3bc <___vfiprintf_internal_r+0xc04>
    bcf0:	8cb9c83a 	sub	fp,r17,r18
    bcf4:	0701b10e 	bge	zero,fp,c3bc <___vfiprintf_internal_r+0xc04>
    bcf8:	01c00404 	movi	r7,16
    bcfc:	3f03890e 	bge	r7,fp,cb24 <___vfiprintf_internal_r+0x136c>
    bd00:	00c000b4 	movhi	r3,2
    bd04:	18f72104 	addi	r3,r3,-9084
    bd08:	d8c02415 	stw	r3,144(sp)
    bd0c:	8007883a 	mov	r3,r16
    bd10:	034001c4 	movi	r13,7
    bd14:	e021883a 	mov	r16,fp
    bd18:	da402515 	stw	r9,148(sp)
    bd1c:	1839883a 	mov	fp,r3
    bd20:	00000506 	br	bd38 <___vfiprintf_internal_r+0x580>
    bd24:	29800084 	addi	r6,r5,2
    bd28:	42000204 	addi	r8,r8,8
    bd2c:	180b883a 	mov	r5,r3
    bd30:	843ffc04 	addi	r16,r16,-16
    bd34:	3c000d0e 	bge	r7,r16,bd6c <___vfiprintf_internal_r+0x5b4>
    bd38:	10800404 	addi	r2,r2,16
    bd3c:	28c00044 	addi	r3,r5,1
    bd40:	45c00015 	stw	r23,0(r8)
    bd44:	41c00115 	stw	r7,4(r8)
    bd48:	d8801c15 	stw	r2,112(sp)
    bd4c:	d8c01b15 	stw	r3,108(sp)
    bd50:	68fff40e 	bge	r13,r3,bd24 <___vfiprintf_internal_r+0x56c>
    bd54:	1002241e 	bne	r2,zero,c5e8 <___vfiprintf_internal_r+0xe30>
    bd58:	843ffc04 	addi	r16,r16,-16
    bd5c:	01800044 	movi	r6,1
    bd60:	000b883a 	mov	r5,zero
    bd64:	d811883a 	mov	r8,sp
    bd68:	3c3ff316 	blt	r7,r16,bd38 <___vfiprintf_internal_r+0x580>
    bd6c:	da402517 	ldw	r9,148(sp)
    bd70:	e007883a 	mov	r3,fp
    bd74:	8039883a 	mov	fp,r16
    bd78:	1821883a 	mov	r16,r3
    bd7c:	d8c02417 	ldw	r3,144(sp)
    bd80:	1705883a 	add	r2,r2,fp
    bd84:	47000115 	stw	fp,4(r8)
    bd88:	40c00015 	stw	r3,0(r8)
    bd8c:	d8801c15 	stw	r2,112(sp)
    bd90:	d9801b15 	stw	r6,108(sp)
    bd94:	00c001c4 	movi	r3,7
    bd98:	19827616 	blt	r3,r6,c774 <___vfiprintf_internal_r+0xfbc>
    bd9c:	4cf9c83a 	sub	fp,r9,r19
    bda0:	42000204 	addi	r8,r8,8
    bda4:	31000044 	addi	r4,r6,1
    bda8:	300b883a 	mov	r5,r6
    bdac:	07018516 	blt	zero,fp,c3c4 <___vfiprintf_internal_r+0xc0c>
    bdb0:	9885883a 	add	r2,r19,r2
    bdb4:	45400015 	stw	r21,0(r8)
    bdb8:	44c00115 	stw	r19,4(r8)
    bdbc:	d8801c15 	stw	r2,112(sp)
    bdc0:	d9001b15 	stw	r4,108(sp)
    bdc4:	00c001c4 	movi	r3,7
    bdc8:	1901dd0e 	bge	r3,r4,c540 <___vfiprintf_internal_r+0xd88>
    bdcc:	1002401e 	bne	r2,zero,c6d0 <___vfiprintf_internal_r+0xf18>
    bdd0:	d8001b15 	stw	zero,108(sp)
    bdd4:	a2c0010c 	andi	r11,r20,4
    bdd8:	58000226 	beq	r11,zero,bde4 <___vfiprintf_internal_r+0x62c>
    bddc:	8ca7c83a 	sub	r19,r17,r18
    bde0:	04c2f216 	blt	zero,r19,c9ac <___vfiprintf_internal_r+0x11f4>
    bde4:	8c80010e 	bge	r17,r18,bdec <___vfiprintf_internal_r+0x634>
    bde8:	9023883a 	mov	r17,r18
    bdec:	da802317 	ldw	r10,140(sp)
    bdf0:	5455883a 	add	r10,r10,r17
    bdf4:	da802315 	stw	r10,140(sp)
    bdf8:	d8001b15 	stw	zero,108(sp)
    bdfc:	d811883a 	mov	r8,sp
    be00:	003ea206 	br	b88c <___vfiprintf_internal_r+0xd4>
    be04:	a5000814 	ori	r20,r20,32
    be08:	80c00007 	ldb	r3,0(r16)
    be0c:	003ec906 	br	b934 <___vfiprintf_internal_r+0x17c>
    be10:	80c00007 	ldb	r3,0(r16)
    be14:	1b030926 	beq	r3,r12,ca3c <___vfiprintf_internal_r+0x1284>
    be18:	a5000414 	ori	r20,r20,16
    be1c:	003ec506 	br	b934 <___vfiprintf_internal_r+0x17c>
    be20:	21003fcc 	andi	r4,r4,255
    be24:	20035e1e 	bne	r4,zero,cba0 <___vfiprintf_internal_r+0x13e8>
    be28:	a080080c 	andi	r2,r20,32
    be2c:	1002a526 	beq	r2,zero,c8c4 <___vfiprintf_internal_r+0x110c>
    be30:	da802217 	ldw	r10,136(sp)
    be34:	50800017 	ldw	r2,0(r10)
    be38:	da802317 	ldw	r10,140(sp)
    be3c:	5007d7fa 	srai	r3,r10,31
    be40:	da802217 	ldw	r10,136(sp)
    be44:	10c00115 	stw	r3,4(r2)
    be48:	52800104 	addi	r10,r10,4
    be4c:	da802215 	stw	r10,136(sp)
    be50:	da802317 	ldw	r10,140(sp)
    be54:	12800015 	stw	r10,0(r2)
    be58:	003e8c06 	br	b88c <___vfiprintf_internal_r+0xd4>
    be5c:	21003fcc 	andi	r4,r4,255
    be60:	2003511e 	bne	r4,zero,cba8 <___vfiprintf_internal_r+0x13f0>
    be64:	a080080c 	andi	r2,r20,32
    be68:	1000a126 	beq	r2,zero,c0f0 <___vfiprintf_internal_r+0x938>
    be6c:	da802217 	ldw	r10,136(sp)
    be70:	d8001d85 	stb	zero,118(sp)
    be74:	50800204 	addi	r2,r10,8
    be78:	54800017 	ldw	r18,0(r10)
    be7c:	54c00117 	ldw	r19,4(r10)
    be80:	4802b416 	blt	r9,zero,c954 <___vfiprintf_internal_r+0x119c>
    be84:	013fdfc4 	movi	r4,-129
    be88:	94c6b03a 	or	r3,r18,r19
    be8c:	d8802215 	stw	r2,136(sp)
    be90:	a128703a 	and	r20,r20,r4
    be94:	1800a226 	beq	r3,zero,c120 <___vfiprintf_internal_r+0x968>
    be98:	0039883a 	mov	fp,zero
    be9c:	dd401a04 	addi	r21,sp,104
    bea0:	9006d0fa 	srli	r3,r18,3
    bea4:	9808977a 	slli	r4,r19,29
    bea8:	9826d0fa 	srli	r19,r19,3
    beac:	948001cc 	andi	r18,r18,7
    beb0:	90800c04 	addi	r2,r18,48
    beb4:	ad7fffc4 	addi	r21,r21,-1
    beb8:	20e4b03a 	or	r18,r4,r3
    bebc:	a8800005 	stb	r2,0(r21)
    bec0:	94c6b03a 	or	r3,r18,r19
    bec4:	183ff61e 	bne	r3,zero,bea0 <___vfiprintf_internal_r+0x6e8>
    bec8:	a0c0004c 	andi	r3,r20,1
    becc:	18005926 	beq	r3,zero,c034 <___vfiprintf_internal_r+0x87c>
    bed0:	10803fcc 	andi	r2,r2,255
    bed4:	1080201c 	xori	r2,r2,128
    bed8:	10bfe004 	addi	r2,r2,-128
    bedc:	00c00c04 	movi	r3,48
    bee0:	10c05426 	beq	r2,r3,c034 <___vfiprintf_internal_r+0x87c>
    bee4:	da801e17 	ldw	r10,120(sp)
    bee8:	a8bfffc4 	addi	r2,r21,-1
    beec:	a8ffffc5 	stb	r3,-1(r21)
    bef0:	50a7c83a 	sub	r19,r10,r2
    bef4:	102b883a 	mov	r21,r2
    bef8:	003f2f06 	br	bbb8 <___vfiprintf_internal_r+0x400>
    befc:	21003fcc 	andi	r4,r4,255
    bf00:	2003421e 	bne	r4,zero,cc0c <___vfiprintf_internal_r+0x1454>
    bf04:	008000b4 	movhi	r2,2
    bf08:	10b6b004 	addi	r2,r2,-9536
    bf0c:	d8802615 	stw	r2,152(sp)
    bf10:	a080080c 	andi	r2,r20,32
    bf14:	1000aa26 	beq	r2,zero,c1c0 <___vfiprintf_internal_r+0xa08>
    bf18:	da802217 	ldw	r10,136(sp)
    bf1c:	54800017 	ldw	r18,0(r10)
    bf20:	54c00117 	ldw	r19,4(r10)
    bf24:	52800204 	addi	r10,r10,8
    bf28:	da802215 	stw	r10,136(sp)
    bf2c:	a080004c 	andi	r2,r20,1
    bf30:	1001d226 	beq	r2,zero,c67c <___vfiprintf_internal_r+0xec4>
    bf34:	94c4b03a 	or	r2,r18,r19
    bf38:	1002351e 	bne	r2,zero,c810 <___vfiprintf_internal_r+0x1058>
    bf3c:	d8001d85 	stb	zero,118(sp)
    bf40:	48022216 	blt	r9,zero,c7cc <___vfiprintf_internal_r+0x1014>
    bf44:	00bfdfc4 	movi	r2,-129
    bf48:	a0a8703a 	and	r20,r20,r2
    bf4c:	003f1506 	br	bba4 <___vfiprintf_internal_r+0x3ec>
    bf50:	da802217 	ldw	r10,136(sp)
    bf54:	04800044 	movi	r18,1
    bf58:	d8001d85 	stb	zero,118(sp)
    bf5c:	50800017 	ldw	r2,0(r10)
    bf60:	52800104 	addi	r10,r10,4
    bf64:	da802215 	stw	r10,136(sp)
    bf68:	d8801005 	stb	r2,64(sp)
    bf6c:	9027883a 	mov	r19,r18
    bf70:	dd401004 	addi	r21,sp,64
    bf74:	0013883a 	mov	r9,zero
    bf78:	003f1706 	br	bbd8 <___vfiprintf_internal_r+0x420>
    bf7c:	21003fcc 	andi	r4,r4,255
    bf80:	2003201e 	bne	r4,zero,cc04 <___vfiprintf_internal_r+0x144c>
    bf84:	a080080c 	andi	r2,r20,32
    bf88:	10004b26 	beq	r2,zero,c0b8 <___vfiprintf_internal_r+0x900>
    bf8c:	da802217 	ldw	r10,136(sp)
    bf90:	50800117 	ldw	r2,4(r10)
    bf94:	54800017 	ldw	r18,0(r10)
    bf98:	52800204 	addi	r10,r10,8
    bf9c:	da802215 	stw	r10,136(sp)
    bfa0:	1027883a 	mov	r19,r2
    bfa4:	10022c16 	blt	r2,zero,c858 <___vfiprintf_internal_r+0x10a0>
    bfa8:	df001d83 	ldbu	fp,118(sp)
    bfac:	48007216 	blt	r9,zero,c178 <___vfiprintf_internal_r+0x9c0>
    bfb0:	00ffdfc4 	movi	r3,-129
    bfb4:	94c4b03a 	or	r2,r18,r19
    bfb8:	a0e8703a 	and	r20,r20,r3
    bfbc:	1000cc26 	beq	r2,zero,c2f0 <___vfiprintf_internal_r+0xb38>
    bfc0:	98021026 	beq	r19,zero,c804 <___vfiprintf_internal_r+0x104c>
    bfc4:	dc402415 	stw	r17,144(sp)
    bfc8:	dc002515 	stw	r16,148(sp)
    bfcc:	9823883a 	mov	r17,r19
    bfd0:	9021883a 	mov	r16,r18
    bfd4:	dd401a04 	addi	r21,sp,104
    bfd8:	4825883a 	mov	r18,r9
    bfdc:	4027883a 	mov	r19,r8
    bfe0:	8009883a 	mov	r4,r16
    bfe4:	880b883a 	mov	r5,r17
    bfe8:	01800284 	movi	r6,10
    bfec:	000f883a 	mov	r7,zero
    bff0:	000db980 	call	db98 <__umoddi3>
    bff4:	10800c04 	addi	r2,r2,48
    bff8:	ad7fffc4 	addi	r21,r21,-1
    bffc:	8009883a 	mov	r4,r16
    c000:	880b883a 	mov	r5,r17
    c004:	a8800005 	stb	r2,0(r21)
    c008:	01800284 	movi	r6,10
    c00c:	000f883a 	mov	r7,zero
    c010:	000d6200 	call	d620 <__udivdi3>
    c014:	1021883a 	mov	r16,r2
    c018:	10c4b03a 	or	r2,r2,r3
    c01c:	1823883a 	mov	r17,r3
    c020:	103fef1e 	bne	r2,zero,bfe0 <___vfiprintf_internal_r+0x828>
    c024:	dc402417 	ldw	r17,144(sp)
    c028:	dc002517 	ldw	r16,148(sp)
    c02c:	9013883a 	mov	r9,r18
    c030:	9811883a 	mov	r8,r19
    c034:	da801e17 	ldw	r10,120(sp)
    c038:	5567c83a 	sub	r19,r10,r21
    c03c:	003ede06 	br	bbb8 <___vfiprintf_internal_r+0x400>
    c040:	38803fcc 	andi	r2,r7,255
    c044:	1080201c 	xori	r2,r2,128
    c048:	10bfe004 	addi	r2,r2,-128
    c04c:	1002371e 	bne	r2,zero,c92c <___vfiprintf_internal_r+0x1174>
    c050:	01000044 	movi	r4,1
    c054:	01c00804 	movi	r7,32
    c058:	80c00007 	ldb	r3,0(r16)
    c05c:	003e3506 	br	b934 <___vfiprintf_internal_r+0x17c>
    c060:	a5000054 	ori	r20,r20,1
    c064:	80c00007 	ldb	r3,0(r16)
    c068:	003e3206 	br	b934 <___vfiprintf_internal_r+0x17c>
    c06c:	a5002014 	ori	r20,r20,128
    c070:	80c00007 	ldb	r3,0(r16)
    c074:	003e2f06 	br	b934 <___vfiprintf_internal_r+0x17c>
    c078:	8015883a 	mov	r10,r16
    c07c:	0023883a 	mov	r17,zero
    c080:	18bff404 	addi	r2,r3,-48
    c084:	50c00007 	ldb	r3,0(r10)
    c088:	8c4002a4 	muli	r17,r17,10
    c08c:	84000044 	addi	r16,r16,1
    c090:	8015883a 	mov	r10,r16
    c094:	1463883a 	add	r17,r2,r17
    c098:	18bff404 	addi	r2,r3,-48
    c09c:	30bff92e 	bgeu	r6,r2,c084 <___vfiprintf_internal_r+0x8cc>
    c0a0:	003e2506 	br	b938 <___vfiprintf_internal_r+0x180>
    c0a4:	21003fcc 	andi	r4,r4,255
    c0a8:	2002d41e 	bne	r4,zero,cbfc <___vfiprintf_internal_r+0x1444>
    c0ac:	a5000414 	ori	r20,r20,16
    c0b0:	a080080c 	andi	r2,r20,32
    c0b4:	103fb51e 	bne	r2,zero,bf8c <___vfiprintf_internal_r+0x7d4>
    c0b8:	a080040c 	andi	r2,r20,16
    c0bc:	1001f826 	beq	r2,zero,c8a0 <___vfiprintf_internal_r+0x10e8>
    c0c0:	da802217 	ldw	r10,136(sp)
    c0c4:	54800017 	ldw	r18,0(r10)
    c0c8:	52800104 	addi	r10,r10,4
    c0cc:	da802215 	stw	r10,136(sp)
    c0d0:	9027d7fa 	srai	r19,r18,31
    c0d4:	9805883a 	mov	r2,r19
    c0d8:	003fb206 	br	bfa4 <___vfiprintf_internal_r+0x7ec>
    c0dc:	21003fcc 	andi	r4,r4,255
    c0e0:	2002c41e 	bne	r4,zero,cbf4 <___vfiprintf_internal_r+0x143c>
    c0e4:	a5000414 	ori	r20,r20,16
    c0e8:	a080080c 	andi	r2,r20,32
    c0ec:	103f5f1e 	bne	r2,zero,be6c <___vfiprintf_internal_r+0x6b4>
    c0f0:	a080040c 	andi	r2,r20,16
    c0f4:	10020f26 	beq	r2,zero,c934 <___vfiprintf_internal_r+0x117c>
    c0f8:	da802217 	ldw	r10,136(sp)
    c0fc:	d8001d85 	stb	zero,118(sp)
    c100:	0027883a 	mov	r19,zero
    c104:	50800104 	addi	r2,r10,4
    c108:	54800017 	ldw	r18,0(r10)
    c10c:	48021116 	blt	r9,zero,c954 <___vfiprintf_internal_r+0x119c>
    c110:	00ffdfc4 	movi	r3,-129
    c114:	d8802215 	stw	r2,136(sp)
    c118:	a0e8703a 	and	r20,r20,r3
    c11c:	903f5e1e 	bne	r18,zero,be98 <___vfiprintf_internal_r+0x6e0>
    c120:	0039883a 	mov	fp,zero
    c124:	4802a626 	beq	r9,zero,cbc0 <___vfiprintf_internal_r+0x1408>
    c128:	0025883a 	mov	r18,zero
    c12c:	0027883a 	mov	r19,zero
    c130:	003f5a06 	br	be9c <___vfiprintf_internal_r+0x6e4>
    c134:	21003fcc 	andi	r4,r4,255
    c138:	20029f1e 	bne	r4,zero,cbb8 <___vfiprintf_internal_r+0x1400>
    c13c:	a5000414 	ori	r20,r20,16
    c140:	a080080c 	andi	r2,r20,32
    c144:	10005e1e 	bne	r2,zero,c2c0 <___vfiprintf_internal_r+0xb08>
    c148:	a080040c 	andi	r2,r20,16
    c14c:	1001a21e 	bne	r2,zero,c7d8 <___vfiprintf_internal_r+0x1020>
    c150:	a080100c 	andi	r2,r20,64
    c154:	d8001d85 	stb	zero,118(sp)
    c158:	da802217 	ldw	r10,136(sp)
    c15c:	1002231e 	bne	r2,zero,c9ec <___vfiprintf_internal_r+0x1234>
    c160:	50800104 	addi	r2,r10,4
    c164:	54800017 	ldw	r18,0(r10)
    c168:	0027883a 	mov	r19,zero
    c16c:	4801a00e 	bge	r9,zero,c7f0 <___vfiprintf_internal_r+0x1038>
    c170:	d8802215 	stw	r2,136(sp)
    c174:	0039883a 	mov	fp,zero
    c178:	94c4b03a 	or	r2,r18,r19
    c17c:	103f901e 	bne	r2,zero,bfc0 <___vfiprintf_internal_r+0x808>
    c180:	00800044 	movi	r2,1
    c184:	10803fcc 	andi	r2,r2,255
    c188:	00c00044 	movi	r3,1
    c18c:	10c05926 	beq	r2,r3,c2f4 <___vfiprintf_internal_r+0xb3c>
    c190:	00c00084 	movi	r3,2
    c194:	10ffe41e 	bne	r2,r3,c128 <___vfiprintf_internal_r+0x970>
    c198:	0025883a 	mov	r18,zero
    c19c:	0027883a 	mov	r19,zero
    c1a0:	00013d06 	br	c698 <___vfiprintf_internal_r+0xee0>
    c1a4:	21003fcc 	andi	r4,r4,255
    c1a8:	2002811e 	bne	r4,zero,cbb0 <___vfiprintf_internal_r+0x13f8>
    c1ac:	008000b4 	movhi	r2,2
    c1b0:	10b6ab04 	addi	r2,r2,-9556
    c1b4:	d8802615 	stw	r2,152(sp)
    c1b8:	a080080c 	andi	r2,r20,32
    c1bc:	103f561e 	bne	r2,zero,bf18 <___vfiprintf_internal_r+0x760>
    c1c0:	a080040c 	andi	r2,r20,16
    c1c4:	1001d126 	beq	r2,zero,c90c <___vfiprintf_internal_r+0x1154>
    c1c8:	da802217 	ldw	r10,136(sp)
    c1cc:	0027883a 	mov	r19,zero
    c1d0:	54800017 	ldw	r18,0(r10)
    c1d4:	52800104 	addi	r10,r10,4
    c1d8:	da802215 	stw	r10,136(sp)
    c1dc:	003f5306 	br	bf2c <___vfiprintf_internal_r+0x774>
    c1e0:	da802217 	ldw	r10,136(sp)
    c1e4:	d8001d85 	stb	zero,118(sp)
    c1e8:	55400017 	ldw	r21,0(r10)
    c1ec:	50c00104 	addi	r3,r10,4
    c1f0:	a8024226 	beq	r21,zero,cafc <___vfiprintf_internal_r+0x1344>
    c1f4:	48021816 	blt	r9,zero,ca58 <___vfiprintf_internal_r+0x12a0>
    c1f8:	480d883a 	mov	r6,r9
    c1fc:	000b883a 	mov	r5,zero
    c200:	a809883a 	mov	r4,r21
    c204:	d8c02a15 	stw	r3,168(sp)
    c208:	da002b15 	stw	r8,172(sp)
    c20c:	da402c15 	stw	r9,176(sp)
    c210:	00085a80 	call	85a8 <memchr>
    c214:	d8c02a17 	ldw	r3,168(sp)
    c218:	da002b17 	ldw	r8,172(sp)
    c21c:	da402c17 	ldw	r9,176(sp)
    c220:	10024826 	beq	r2,zero,cb44 <___vfiprintf_internal_r+0x138c>
    c224:	1567c83a 	sub	r19,r2,r21
    c228:	df001d83 	ldbu	fp,118(sp)
    c22c:	d8c02215 	stw	r3,136(sp)
    c230:	0013883a 	mov	r9,zero
    c234:	003e6006 	br	bbb8 <___vfiprintf_internal_r+0x400>
    c238:	21003fcc 	andi	r4,r4,255
    c23c:	203fc026 	beq	r4,zero,c140 <___vfiprintf_internal_r+0x988>
    c240:	d9c01d85 	stb	r7,118(sp)
    c244:	003fbe06 	br	c140 <___vfiprintf_internal_r+0x988>
    c248:	da802217 	ldw	r10,136(sp)
    c24c:	54400017 	ldw	r17,0(r10)
    c250:	50800104 	addi	r2,r10,4
    c254:	883e3b16 	blt	r17,zero,bb44 <___vfiprintf_internal_r+0x38c>
    c258:	d8802215 	stw	r2,136(sp)
    c25c:	80c00007 	ldb	r3,0(r16)
    c260:	003db406 	br	b934 <___vfiprintf_internal_r+0x17c>
    c264:	01000044 	movi	r4,1
    c268:	01c00ac4 	movi	r7,43
    c26c:	80c00007 	ldb	r3,0(r16)
    c270:	003db006 	br	b934 <___vfiprintf_internal_r+0x17c>
    c274:	80c00007 	ldb	r3,0(r16)
    c278:	82800044 	addi	r10,r16,1
    c27c:	1b423c26 	beq	r3,r13,cb70 <___vfiprintf_internal_r+0x13b8>
    c280:	18bff404 	addi	r2,r3,-48
    c284:	0013883a 	mov	r9,zero
    c288:	30822b36 	bltu	r6,r2,cb38 <___vfiprintf_internal_r+0x1380>
    c28c:	50c00007 	ldb	r3,0(r10)
    c290:	4a4002a4 	muli	r9,r9,10
    c294:	54000044 	addi	r16,r10,1
    c298:	8015883a 	mov	r10,r16
    c29c:	4893883a 	add	r9,r9,r2
    c2a0:	18bff404 	addi	r2,r3,-48
    c2a4:	30bff92e 	bgeu	r6,r2,c28c <___vfiprintf_internal_r+0xad4>
    c2a8:	483da30e 	bge	r9,zero,b938 <___vfiprintf_internal_r+0x180>
    c2ac:	027fffc4 	movi	r9,-1
    c2b0:	003da106 	br	b938 <___vfiprintf_internal_r+0x180>
    c2b4:	a5001014 	ori	r20,r20,64
    c2b8:	80c00007 	ldb	r3,0(r16)
    c2bc:	003d9d06 	br	b934 <___vfiprintf_internal_r+0x17c>
    c2c0:	da802217 	ldw	r10,136(sp)
    c2c4:	d8001d85 	stb	zero,118(sp)
    c2c8:	50c00204 	addi	r3,r10,8
    c2cc:	54800017 	ldw	r18,0(r10)
    c2d0:	54c00117 	ldw	r19,4(r10)
    c2d4:	4801ca16 	blt	r9,zero,ca00 <___vfiprintf_internal_r+0x1248>
    c2d8:	013fdfc4 	movi	r4,-129
    c2dc:	94c4b03a 	or	r2,r18,r19
    c2e0:	d8c02215 	stw	r3,136(sp)
    c2e4:	a128703a 	and	r20,r20,r4
    c2e8:	0039883a 	mov	fp,zero
    c2ec:	103f341e 	bne	r2,zero,bfc0 <___vfiprintf_internal_r+0x808>
    c2f0:	483e2e26 	beq	r9,zero,bbac <___vfiprintf_internal_r+0x3f4>
    c2f4:	0025883a 	mov	r18,zero
    c2f8:	94800c04 	addi	r18,r18,48
    c2fc:	dc8019c5 	stb	r18,103(sp)
    c300:	dcc02717 	ldw	r19,156(sp)
    c304:	dd4019c4 	addi	r21,sp,103
    c308:	003e2b06 	br	bbb8 <___vfiprintf_internal_r+0x400>
    c30c:	21003fcc 	andi	r4,r4,255
    c310:	2002361e 	bne	r4,zero,cbec <___vfiprintf_internal_r+0x1434>
    c314:	1801c126 	beq	r3,zero,ca1c <___vfiprintf_internal_r+0x1264>
    c318:	04800044 	movi	r18,1
    c31c:	d8c01005 	stb	r3,64(sp)
    c320:	d8001d85 	stb	zero,118(sp)
    c324:	9027883a 	mov	r19,r18
    c328:	dd401004 	addi	r21,sp,64
    c32c:	003f1106 	br	bf74 <___vfiprintf_internal_r+0x7bc>
    c330:	d9402117 	ldw	r5,132(sp)
    c334:	d9002017 	ldw	r4,128(sp)
    c338:	d9801a04 	addi	r6,sp,104
    c33c:	d9c02b15 	stw	r7,172(sp)
    c340:	dbc02a15 	stw	r15,168(sp)
    c344:	000b6a40 	call	b6a4 <__sprint_r.part.0>
    c348:	d9c02b17 	ldw	r7,172(sp)
    c34c:	dbc02a17 	ldw	r15,168(sp)
    c350:	10006d1e 	bne	r2,zero,c508 <___vfiprintf_internal_r+0xd50>
    c354:	d9801b17 	ldw	r6,108(sp)
    c358:	d8801c17 	ldw	r2,112(sp)
    c35c:	d811883a 	mov	r8,sp
    c360:	31400044 	addi	r5,r6,1
    c364:	003e3306 	br	bc34 <___vfiprintf_internal_r+0x47c>
    c368:	d9401b17 	ldw	r5,108(sp)
    c36c:	d8801c17 	ldw	r2,112(sp)
    c370:	29000044 	addi	r4,r5,1
    c374:	d8c01d87 	ldb	r3,118(sp)
    c378:	183e4d26 	beq	r3,zero,bcb0 <___vfiprintf_internal_r+0x4f8>
    c37c:	00c00044 	movi	r3,1
    c380:	d9401d84 	addi	r5,sp,118
    c384:	10c5883a 	add	r2,r2,r3
    c388:	41400015 	stw	r5,0(r8)
    c38c:	40c00115 	stw	r3,4(r8)
    c390:	d8801c15 	stw	r2,112(sp)
    c394:	d9001b15 	stw	r4,108(sp)
    c398:	014001c4 	movi	r5,7
    c39c:	2900a90e 	bge	r5,r4,c644 <___vfiprintf_internal_r+0xe8c>
    c3a0:	1000da1e 	bne	r2,zero,c70c <___vfiprintf_internal_r+0xf54>
    c3a4:	7000ab1e 	bne	r14,zero,c654 <___vfiprintf_internal_r+0xe9c>
    c3a8:	000b883a 	mov	r5,zero
    c3ac:	1809883a 	mov	r4,r3
    c3b0:	d811883a 	mov	r8,sp
    c3b4:	00c02004 	movi	r3,128
    c3b8:	e0fe4d26 	beq	fp,r3,bcf0 <___vfiprintf_internal_r+0x538>
    c3bc:	4cf9c83a 	sub	fp,r9,r19
    c3c0:	073e7b0e 	bge	zero,fp,bdb0 <___vfiprintf_internal_r+0x5f8>
    c3c4:	01c00404 	movi	r7,16
    c3c8:	3f01900e 	bge	r7,fp,ca0c <___vfiprintf_internal_r+0x1254>
    c3cc:	00c000b4 	movhi	r3,2
    c3d0:	18f72104 	addi	r3,r3,-9084
    c3d4:	d8c02415 	stw	r3,144(sp)
    c3d8:	034001c4 	movi	r13,7
    c3dc:	00000506 	br	c3f4 <___vfiprintf_internal_r+0xc3c>
    c3e0:	29000084 	addi	r4,r5,2
    c3e4:	42000204 	addi	r8,r8,8
    c3e8:	180b883a 	mov	r5,r3
    c3ec:	e73ffc04 	addi	fp,fp,-16
    c3f0:	3f000d0e 	bge	r7,fp,c428 <___vfiprintf_internal_r+0xc70>
    c3f4:	10800404 	addi	r2,r2,16
    c3f8:	28c00044 	addi	r3,r5,1
    c3fc:	45c00015 	stw	r23,0(r8)
    c400:	41c00115 	stw	r7,4(r8)
    c404:	d8801c15 	stw	r2,112(sp)
    c408:	d8c01b15 	stw	r3,108(sp)
    c40c:	68fff40e 	bge	r13,r3,c3e0 <___vfiprintf_internal_r+0xc28>
    c410:	1000101e 	bne	r2,zero,c454 <___vfiprintf_internal_r+0xc9c>
    c414:	e73ffc04 	addi	fp,fp,-16
    c418:	01000044 	movi	r4,1
    c41c:	000b883a 	mov	r5,zero
    c420:	d811883a 	mov	r8,sp
    c424:	3f3ff316 	blt	r7,fp,c3f4 <___vfiprintf_internal_r+0xc3c>
    c428:	da802417 	ldw	r10,144(sp)
    c42c:	1705883a 	add	r2,r2,fp
    c430:	47000115 	stw	fp,4(r8)
    c434:	42800015 	stw	r10,0(r8)
    c438:	d8801c15 	stw	r2,112(sp)
    c43c:	d9001b15 	stw	r4,108(sp)
    c440:	00c001c4 	movi	r3,7
    c444:	19003616 	blt	r3,r4,c520 <___vfiprintf_internal_r+0xd68>
    c448:	42000204 	addi	r8,r8,8
    c44c:	21000044 	addi	r4,r4,1
    c450:	003e5706 	br	bdb0 <___vfiprintf_internal_r+0x5f8>
    c454:	d9402117 	ldw	r5,132(sp)
    c458:	d9002017 	ldw	r4,128(sp)
    c45c:	d9801a04 	addi	r6,sp,104
    c460:	d9c02b15 	stw	r7,172(sp)
    c464:	db402a15 	stw	r13,168(sp)
    c468:	000b6a40 	call	b6a4 <__sprint_r.part.0>
    c46c:	d9c02b17 	ldw	r7,172(sp)
    c470:	db402a17 	ldw	r13,168(sp)
    c474:	1000241e 	bne	r2,zero,c508 <___vfiprintf_internal_r+0xd50>
    c478:	d9401b17 	ldw	r5,108(sp)
    c47c:	d8801c17 	ldw	r2,112(sp)
    c480:	d811883a 	mov	r8,sp
    c484:	29000044 	addi	r4,r5,1
    c488:	003fd806 	br	c3ec <___vfiprintf_internal_r+0xc34>
    c48c:	d9401b17 	ldw	r5,108(sp)
    c490:	00c000b4 	movhi	r3,2
    c494:	18f72504 	addi	r3,r3,-9068
    c498:	d8c02415 	stw	r3,144(sp)
    c49c:	29400044 	addi	r5,r5,1
    c4a0:	d8c02417 	ldw	r3,144(sp)
    c4a4:	14c5883a 	add	r2,r2,r19
    c4a8:	44c00115 	stw	r19,4(r8)
    c4ac:	40c00015 	stw	r3,0(r8)
    c4b0:	d8801c15 	stw	r2,112(sp)
    c4b4:	d9401b15 	stw	r5,108(sp)
    c4b8:	00c001c4 	movi	r3,7
    c4bc:	1940070e 	bge	r3,r5,c4dc <___vfiprintf_internal_r+0xd24>
    c4c0:	103e4826 	beq	r2,zero,bde4 <___vfiprintf_internal_r+0x62c>
    c4c4:	d9402117 	ldw	r5,132(sp)
    c4c8:	d9002017 	ldw	r4,128(sp)
    c4cc:	d9801a04 	addi	r6,sp,104
    c4d0:	000b6a40 	call	b6a4 <__sprint_r.part.0>
    c4d4:	10000c1e 	bne	r2,zero,c508 <___vfiprintf_internal_r+0xd50>
    c4d8:	d8801c17 	ldw	r2,112(sp)
    c4dc:	8c80010e 	bge	r17,r18,c4e4 <___vfiprintf_internal_r+0xd2c>
    c4e0:	9023883a 	mov	r17,r18
    c4e4:	da802317 	ldw	r10,140(sp)
    c4e8:	5455883a 	add	r10,r10,r17
    c4ec:	da802315 	stw	r10,140(sp)
    c4f0:	103e4126 	beq	r2,zero,bdf8 <___vfiprintf_internal_r+0x640>
    c4f4:	d9402117 	ldw	r5,132(sp)
    c4f8:	d9002017 	ldw	r4,128(sp)
    c4fc:	d9801a04 	addi	r6,sp,104
    c500:	000b6a40 	call	b6a4 <__sprint_r.part.0>
    c504:	103e3c26 	beq	r2,zero,bdf8 <___vfiprintf_internal_r+0x640>
    c508:	dd002117 	ldw	r20,132(sp)
    c50c:	a080030b 	ldhu	r2,12(r20)
    c510:	1080100c 	andi	r2,r2,64
    c514:	1001231e 	bne	r2,zero,c9a4 <___vfiprintf_internal_r+0x11ec>
    c518:	d8802317 	ldw	r2,140(sp)
    c51c:	003d7b06 	br	bb0c <___vfiprintf_internal_r+0x354>
    c520:	1000991e 	bne	r2,zero,c788 <___vfiprintf_internal_r+0xfd0>
    c524:	00c00044 	movi	r3,1
    c528:	9805883a 	mov	r2,r19
    c52c:	dd400015 	stw	r21,0(sp)
    c530:	dcc00115 	stw	r19,4(sp)
    c534:	dcc01c15 	stw	r19,112(sp)
    c538:	d8c01b15 	stw	r3,108(sp)
    c53c:	d811883a 	mov	r8,sp
    c540:	42000204 	addi	r8,r8,8
    c544:	a2c0010c 	andi	r11,r20,4
    c548:	583fe426 	beq	r11,zero,c4dc <___vfiprintf_internal_r+0xd24>
    c54c:	8ca7c83a 	sub	r19,r17,r18
    c550:	04ffe20e 	bge	zero,r19,c4dc <___vfiprintf_internal_r+0xd24>
    c554:	01c00404 	movi	r7,16
    c558:	3cffcc0e 	bge	r7,r19,c48c <___vfiprintf_internal_r+0xcd4>
    c55c:	028000b4 	movhi	r10,2
    c560:	52b72504 	addi	r10,r10,-9068
    c564:	d9001b17 	ldw	r4,108(sp)
    c568:	da802415 	stw	r10,144(sp)
    c56c:	382b883a 	mov	r21,r7
    c570:	050001c4 	movi	r20,7
    c574:	df002017 	ldw	fp,128(sp)
    c578:	00000506 	br	c590 <___vfiprintf_internal_r+0xdd8>
    c57c:	21400084 	addi	r5,r4,2
    c580:	42000204 	addi	r8,r8,8
    c584:	1809883a 	mov	r4,r3
    c588:	9cfffc04 	addi	r19,r19,-16
    c58c:	acffc40e 	bge	r21,r19,c4a0 <___vfiprintf_internal_r+0xce8>
    c590:	10800404 	addi	r2,r2,16
    c594:	20c00044 	addi	r3,r4,1
    c598:	45800015 	stw	r22,0(r8)
    c59c:	45400115 	stw	r21,4(r8)
    c5a0:	d8801c15 	stw	r2,112(sp)
    c5a4:	d8c01b15 	stw	r3,108(sp)
    c5a8:	a0fff40e 	bge	r20,r3,c57c <___vfiprintf_internal_r+0xdc4>
    c5ac:	1000041e 	bne	r2,zero,c5c0 <___vfiprintf_internal_r+0xe08>
    c5b0:	01400044 	movi	r5,1
    c5b4:	0009883a 	mov	r4,zero
    c5b8:	d811883a 	mov	r8,sp
    c5bc:	003ff206 	br	c588 <___vfiprintf_internal_r+0xdd0>
    c5c0:	d9402117 	ldw	r5,132(sp)
    c5c4:	d9801a04 	addi	r6,sp,104
    c5c8:	e009883a 	mov	r4,fp
    c5cc:	000b6a40 	call	b6a4 <__sprint_r.part.0>
    c5d0:	103fcd1e 	bne	r2,zero,c508 <___vfiprintf_internal_r+0xd50>
    c5d4:	d9001b17 	ldw	r4,108(sp)
    c5d8:	d8801c17 	ldw	r2,112(sp)
    c5dc:	d811883a 	mov	r8,sp
    c5e0:	21400044 	addi	r5,r4,1
    c5e4:	003fe806 	br	c588 <___vfiprintf_internal_r+0xdd0>
    c5e8:	d9402117 	ldw	r5,132(sp)
    c5ec:	d9002017 	ldw	r4,128(sp)
    c5f0:	d9801a04 	addi	r6,sp,104
    c5f4:	d9c02b15 	stw	r7,172(sp)
    c5f8:	db402a15 	stw	r13,168(sp)
    c5fc:	000b6a40 	call	b6a4 <__sprint_r.part.0>
    c600:	d9c02b17 	ldw	r7,172(sp)
    c604:	db402a17 	ldw	r13,168(sp)
    c608:	103fbf1e 	bne	r2,zero,c508 <___vfiprintf_internal_r+0xd50>
    c60c:	d9401b17 	ldw	r5,108(sp)
    c610:	d8801c17 	ldw	r2,112(sp)
    c614:	d811883a 	mov	r8,sp
    c618:	29800044 	addi	r6,r5,1
    c61c:	003dc406 	br	bd30 <___vfiprintf_internal_r+0x578>
    c620:	1000d21e 	bne	r2,zero,c96c <___vfiprintf_internal_r+0x11b4>
    c624:	d8c01d87 	ldb	r3,118(sp)
    c628:	18009526 	beq	r3,zero,c880 <___vfiprintf_internal_r+0x10c8>
    c62c:	00800044 	movi	r2,1
    c630:	d8c01d84 	addi	r3,sp,118
    c634:	1009883a 	mov	r4,r2
    c638:	d8c00015 	stw	r3,0(sp)
    c63c:	d8800115 	stw	r2,4(sp)
    c640:	d811883a 	mov	r8,sp
    c644:	200b883a 	mov	r5,r4
    c648:	42000204 	addi	r8,r8,8
    c64c:	21000044 	addi	r4,r4,1
    c650:	003d9706 	br	bcb0 <___vfiprintf_internal_r+0x4f8>
    c654:	d9001d04 	addi	r4,sp,116
    c658:	00800084 	movi	r2,2
    c65c:	d9000015 	stw	r4,0(sp)
    c660:	d8800115 	stw	r2,4(sp)
    c664:	1809883a 	mov	r4,r3
    c668:	d811883a 	mov	r8,sp
    c66c:	200b883a 	mov	r5,r4
    c670:	42000204 	addi	r8,r8,8
    c674:	21000044 	addi	r4,r4,1
    c678:	003f4e06 	br	c3b4 <___vfiprintf_internal_r+0xbfc>
    c67c:	d8001d85 	stb	zero,118(sp)
    c680:	48005016 	blt	r9,zero,c7c4 <___vfiprintf_internal_r+0x100c>
    c684:	00ffdfc4 	movi	r3,-129
    c688:	94c4b03a 	or	r2,r18,r19
    c68c:	a0e8703a 	and	r20,r20,r3
    c690:	103d4426 	beq	r2,zero,bba4 <___vfiprintf_internal_r+0x3ec>
    c694:	0039883a 	mov	fp,zero
    c698:	d9002617 	ldw	r4,152(sp)
    c69c:	dd401a04 	addi	r21,sp,104
    c6a0:	908003cc 	andi	r2,r18,15
    c6a4:	9806973a 	slli	r3,r19,28
    c6a8:	2085883a 	add	r2,r4,r2
    c6ac:	9024d13a 	srli	r18,r18,4
    c6b0:	10800003 	ldbu	r2,0(r2)
    c6b4:	9826d13a 	srli	r19,r19,4
    c6b8:	ad7fffc4 	addi	r21,r21,-1
    c6bc:	1ca4b03a 	or	r18,r3,r18
    c6c0:	a8800005 	stb	r2,0(r21)
    c6c4:	94c4b03a 	or	r2,r18,r19
    c6c8:	103ff51e 	bne	r2,zero,c6a0 <___vfiprintf_internal_r+0xee8>
    c6cc:	003e5906 	br	c034 <___vfiprintf_internal_r+0x87c>
    c6d0:	d9402117 	ldw	r5,132(sp)
    c6d4:	d9002017 	ldw	r4,128(sp)
    c6d8:	d9801a04 	addi	r6,sp,104
    c6dc:	000b6a40 	call	b6a4 <__sprint_r.part.0>
    c6e0:	103f891e 	bne	r2,zero,c508 <___vfiprintf_internal_r+0xd50>
    c6e4:	d8801c17 	ldw	r2,112(sp)
    c6e8:	d811883a 	mov	r8,sp
    c6ec:	003f9506 	br	c544 <___vfiprintf_internal_r+0xd8c>
    c6f0:	d9402117 	ldw	r5,132(sp)
    c6f4:	d9002017 	ldw	r4,128(sp)
    c6f8:	d9801a04 	addi	r6,sp,104
    c6fc:	000b6a40 	call	b6a4 <__sprint_r.part.0>
    c700:	103f811e 	bne	r2,zero,c508 <___vfiprintf_internal_r+0xd50>
    c704:	d811883a 	mov	r8,sp
    c708:	003ced06 	br	bac0 <___vfiprintf_internal_r+0x308>
    c70c:	d9402117 	ldw	r5,132(sp)
    c710:	d9002017 	ldw	r4,128(sp)
    c714:	d9801a04 	addi	r6,sp,104
    c718:	da402c15 	stw	r9,176(sp)
    c71c:	db802a15 	stw	r14,168(sp)
    c720:	000b6a40 	call	b6a4 <__sprint_r.part.0>
    c724:	da402c17 	ldw	r9,176(sp)
    c728:	db802a17 	ldw	r14,168(sp)
    c72c:	103f761e 	bne	r2,zero,c508 <___vfiprintf_internal_r+0xd50>
    c730:	d9401b17 	ldw	r5,108(sp)
    c734:	d8801c17 	ldw	r2,112(sp)
    c738:	d811883a 	mov	r8,sp
    c73c:	29000044 	addi	r4,r5,1
    c740:	003d5b06 	br	bcb0 <___vfiprintf_internal_r+0x4f8>
    c744:	d9402117 	ldw	r5,132(sp)
    c748:	d9002017 	ldw	r4,128(sp)
    c74c:	d9801a04 	addi	r6,sp,104
    c750:	da402c15 	stw	r9,176(sp)
    c754:	000b6a40 	call	b6a4 <__sprint_r.part.0>
    c758:	da402c17 	ldw	r9,176(sp)
    c75c:	103f6a1e 	bne	r2,zero,c508 <___vfiprintf_internal_r+0xd50>
    c760:	d9401b17 	ldw	r5,108(sp)
    c764:	d8801c17 	ldw	r2,112(sp)
    c768:	d811883a 	mov	r8,sp
    c76c:	29000044 	addi	r4,r5,1
    c770:	003f1006 	br	c3b4 <___vfiprintf_internal_r+0xbfc>
    c774:	1000c31e 	bne	r2,zero,ca84 <___vfiprintf_internal_r+0x12cc>
    c778:	01000044 	movi	r4,1
    c77c:	000b883a 	mov	r5,zero
    c780:	d811883a 	mov	r8,sp
    c784:	003f0d06 	br	c3bc <___vfiprintf_internal_r+0xc04>
    c788:	d9402117 	ldw	r5,132(sp)
    c78c:	d9002017 	ldw	r4,128(sp)
    c790:	d9801a04 	addi	r6,sp,104
    c794:	000b6a40 	call	b6a4 <__sprint_r.part.0>
    c798:	103f5b1e 	bne	r2,zero,c508 <___vfiprintf_internal_r+0xd50>
    c79c:	d9001b17 	ldw	r4,108(sp)
    c7a0:	d8801c17 	ldw	r2,112(sp)
    c7a4:	d811883a 	mov	r8,sp
    c7a8:	21000044 	addi	r4,r4,1
    c7ac:	003d8006 	br	bdb0 <___vfiprintf_internal_r+0x5f8>
    c7b0:	010000b4 	movhi	r4,2
    c7b4:	2136b004 	addi	r4,r4,-9536
    c7b8:	d9002615 	stw	r4,152(sp)
    c7bc:	d8c02215 	stw	r3,136(sp)
    c7c0:	1029883a 	mov	r20,r2
    c7c4:	94c4b03a 	or	r2,r18,r19
    c7c8:	103fb21e 	bne	r2,zero,c694 <___vfiprintf_internal_r+0xedc>
    c7cc:	0039883a 	mov	fp,zero
    c7d0:	00800084 	movi	r2,2
    c7d4:	003e6b06 	br	c184 <___vfiprintf_internal_r+0x9cc>
    c7d8:	da802217 	ldw	r10,136(sp)
    c7dc:	d8001d85 	stb	zero,118(sp)
    c7e0:	0027883a 	mov	r19,zero
    c7e4:	50800104 	addi	r2,r10,4
    c7e8:	54800017 	ldw	r18,0(r10)
    c7ec:	483e6016 	blt	r9,zero,c170 <___vfiprintf_internal_r+0x9b8>
    c7f0:	00ffdfc4 	movi	r3,-129
    c7f4:	d8802215 	stw	r2,136(sp)
    c7f8:	a0e8703a 	and	r20,r20,r3
    c7fc:	0039883a 	mov	fp,zero
    c800:	903ebb26 	beq	r18,zero,c2f0 <___vfiprintf_internal_r+0xb38>
    c804:	00800244 	movi	r2,9
    c808:	14bdee36 	bltu	r2,r18,bfc4 <___vfiprintf_internal_r+0x80c>
    c80c:	003eba06 	br	c2f8 <___vfiprintf_internal_r+0xb40>
    c810:	00800c04 	movi	r2,48
    c814:	d8c01d45 	stb	r3,117(sp)
    c818:	d8801d05 	stb	r2,116(sp)
    c81c:	d8001d85 	stb	zero,118(sp)
    c820:	a0c00094 	ori	r3,r20,2
    c824:	4800a916 	blt	r9,zero,cacc <___vfiprintf_internal_r+0x1314>
    c828:	00bfdfc4 	movi	r2,-129
    c82c:	a096703a 	and	r11,r20,r2
    c830:	5d000094 	ori	r20,r11,2
    c834:	0039883a 	mov	fp,zero
    c838:	003f9706 	br	c698 <___vfiprintf_internal_r+0xee0>
    c83c:	8025883a 	mov	r18,r16
    c840:	003c2e06 	br	b8fc <___vfiprintf_internal_r+0x144>
    c844:	008000b4 	movhi	r2,2
    c848:	10b6b004 	addi	r2,r2,-9536
    c84c:	0039883a 	mov	fp,zero
    c850:	d8802615 	stw	r2,152(sp)
    c854:	003f9006 	br	c698 <___vfiprintf_internal_r+0xee0>
    c858:	04a5c83a 	sub	r18,zero,r18
    c85c:	07000b44 	movi	fp,45
    c860:	9004c03a 	cmpne	r2,r18,zero
    c864:	04e7c83a 	sub	r19,zero,r19
    c868:	df001d85 	stb	fp,118(sp)
    c86c:	98a7c83a 	sub	r19,r19,r2
    c870:	48009f16 	blt	r9,zero,caf0 <___vfiprintf_internal_r+0x1338>
    c874:	00bfdfc4 	movi	r2,-129
    c878:	a0a8703a 	and	r20,r20,r2
    c87c:	003dd006 	br	bfc0 <___vfiprintf_internal_r+0x808>
    c880:	70004c26 	beq	r14,zero,c9b4 <___vfiprintf_internal_r+0x11fc>
    c884:	00800084 	movi	r2,2
    c888:	d8c01d04 	addi	r3,sp,116
    c88c:	d8c00015 	stw	r3,0(sp)
    c890:	d8800115 	stw	r2,4(sp)
    c894:	01000044 	movi	r4,1
    c898:	d811883a 	mov	r8,sp
    c89c:	003f7306 	br	c66c <___vfiprintf_internal_r+0xeb4>
    c8a0:	a080100c 	andi	r2,r20,64
    c8a4:	da802217 	ldw	r10,136(sp)
    c8a8:	103e0626 	beq	r2,zero,c0c4 <___vfiprintf_internal_r+0x90c>
    c8ac:	5480000f 	ldh	r18,0(r10)
    c8b0:	52800104 	addi	r10,r10,4
    c8b4:	da802215 	stw	r10,136(sp)
    c8b8:	9027d7fa 	srai	r19,r18,31
    c8bc:	9805883a 	mov	r2,r19
    c8c0:	003db806 	br	bfa4 <___vfiprintf_internal_r+0x7ec>
    c8c4:	a080040c 	andi	r2,r20,16
    c8c8:	1000091e 	bne	r2,zero,c8f0 <___vfiprintf_internal_r+0x1138>
    c8cc:	a2c0100c 	andi	r11,r20,64
    c8d0:	58000726 	beq	r11,zero,c8f0 <___vfiprintf_internal_r+0x1138>
    c8d4:	da802217 	ldw	r10,136(sp)
    c8d8:	50800017 	ldw	r2,0(r10)
    c8dc:	52800104 	addi	r10,r10,4
    c8e0:	da802215 	stw	r10,136(sp)
    c8e4:	da802317 	ldw	r10,140(sp)
    c8e8:	1280000d 	sth	r10,0(r2)
    c8ec:	003be706 	br	b88c <___vfiprintf_internal_r+0xd4>
    c8f0:	da802217 	ldw	r10,136(sp)
    c8f4:	50800017 	ldw	r2,0(r10)
    c8f8:	52800104 	addi	r10,r10,4
    c8fc:	da802215 	stw	r10,136(sp)
    c900:	da802317 	ldw	r10,140(sp)
    c904:	12800015 	stw	r10,0(r2)
    c908:	003be006 	br	b88c <___vfiprintf_internal_r+0xd4>
    c90c:	a080100c 	andi	r2,r20,64
    c910:	da802217 	ldw	r10,136(sp)
    c914:	10003026 	beq	r2,zero,c9d8 <___vfiprintf_internal_r+0x1220>
    c918:	5480000b 	ldhu	r18,0(r10)
    c91c:	52800104 	addi	r10,r10,4
    c920:	0027883a 	mov	r19,zero
    c924:	da802215 	stw	r10,136(sp)
    c928:	003d8006 	br	bf2c <___vfiprintf_internal_r+0x774>
    c92c:	80c00007 	ldb	r3,0(r16)
    c930:	003c0006 	br	b934 <___vfiprintf_internal_r+0x17c>
    c934:	a080100c 	andi	r2,r20,64
    c938:	d8001d85 	stb	zero,118(sp)
    c93c:	da802217 	ldw	r10,136(sp)
    c940:	1000201e 	bne	r2,zero,c9c4 <___vfiprintf_internal_r+0x120c>
    c944:	50800104 	addi	r2,r10,4
    c948:	54800017 	ldw	r18,0(r10)
    c94c:	0027883a 	mov	r19,zero
    c950:	483def0e 	bge	r9,zero,c110 <___vfiprintf_internal_r+0x958>
    c954:	94c6b03a 	or	r3,r18,r19
    c958:	d8802215 	stw	r2,136(sp)
    c95c:	183d4e1e 	bne	r3,zero,be98 <___vfiprintf_internal_r+0x6e0>
    c960:	0039883a 	mov	fp,zero
    c964:	0005883a 	mov	r2,zero
    c968:	003e0606 	br	c184 <___vfiprintf_internal_r+0x9cc>
    c96c:	d9402117 	ldw	r5,132(sp)
    c970:	d9002017 	ldw	r4,128(sp)
    c974:	d9801a04 	addi	r6,sp,104
    c978:	da402c15 	stw	r9,176(sp)
    c97c:	db802a15 	stw	r14,168(sp)
    c980:	000b6a40 	call	b6a4 <__sprint_r.part.0>
    c984:	da402c17 	ldw	r9,176(sp)
    c988:	db802a17 	ldw	r14,168(sp)
    c98c:	103ede1e 	bne	r2,zero,c508 <___vfiprintf_internal_r+0xd50>
    c990:	d9401b17 	ldw	r5,108(sp)
    c994:	d8801c17 	ldw	r2,112(sp)
    c998:	d811883a 	mov	r8,sp
    c99c:	29000044 	addi	r4,r5,1
    c9a0:	003e7406 	br	c374 <___vfiprintf_internal_r+0xbbc>
    c9a4:	00bfffc4 	movi	r2,-1
    c9a8:	003c5806 	br	bb0c <___vfiprintf_internal_r+0x354>
    c9ac:	d811883a 	mov	r8,sp
    c9b0:	003ee806 	br	c554 <___vfiprintf_internal_r+0xd9c>
    c9b4:	000b883a 	mov	r5,zero
    c9b8:	01000044 	movi	r4,1
    c9bc:	d811883a 	mov	r8,sp
    c9c0:	003e7c06 	br	c3b4 <___vfiprintf_internal_r+0xbfc>
    c9c4:	50800104 	addi	r2,r10,4
    c9c8:	5480000b 	ldhu	r18,0(r10)
    c9cc:	0027883a 	mov	r19,zero
    c9d0:	483dcf0e 	bge	r9,zero,c110 <___vfiprintf_internal_r+0x958>
    c9d4:	003fdf06 	br	c954 <___vfiprintf_internal_r+0x119c>
    c9d8:	54800017 	ldw	r18,0(r10)
    c9dc:	52800104 	addi	r10,r10,4
    c9e0:	0027883a 	mov	r19,zero
    c9e4:	da802215 	stw	r10,136(sp)
    c9e8:	003d5006 	br	bf2c <___vfiprintf_internal_r+0x774>
    c9ec:	50800104 	addi	r2,r10,4
    c9f0:	5480000b 	ldhu	r18,0(r10)
    c9f4:	0027883a 	mov	r19,zero
    c9f8:	483f7d0e 	bge	r9,zero,c7f0 <___vfiprintf_internal_r+0x1038>
    c9fc:	003ddc06 	br	c170 <___vfiprintf_internal_r+0x9b8>
    ca00:	d8c02215 	stw	r3,136(sp)
    ca04:	0039883a 	mov	fp,zero
    ca08:	003ddb06 	br	c178 <___vfiprintf_internal_r+0x9c0>
    ca0c:	028000b4 	movhi	r10,2
    ca10:	52b72104 	addi	r10,r10,-9084
    ca14:	da802415 	stw	r10,144(sp)
    ca18:	003e8306 	br	c428 <___vfiprintf_internal_r+0xc70>
    ca1c:	d8801c17 	ldw	r2,112(sp)
    ca20:	dd002117 	ldw	r20,132(sp)
    ca24:	103eb926 	beq	r2,zero,c50c <___vfiprintf_internal_r+0xd54>
    ca28:	d9002017 	ldw	r4,128(sp)
    ca2c:	d9801a04 	addi	r6,sp,104
    ca30:	a00b883a 	mov	r5,r20
    ca34:	000b6a40 	call	b6a4 <__sprint_r.part.0>
    ca38:	003eb406 	br	c50c <___vfiprintf_internal_r+0xd54>
    ca3c:	80c00043 	ldbu	r3,1(r16)
    ca40:	a5000814 	ori	r20,r20,32
    ca44:	84000044 	addi	r16,r16,1
    ca48:	18c03fcc 	andi	r3,r3,255
    ca4c:	18c0201c 	xori	r3,r3,128
    ca50:	18ffe004 	addi	r3,r3,-128
    ca54:	003bb706 	br	b934 <___vfiprintf_internal_r+0x17c>
    ca58:	a809883a 	mov	r4,r21
    ca5c:	d8c02a15 	stw	r3,168(sp)
    ca60:	da002b15 	stw	r8,172(sp)
    ca64:	0000b280 	call	b28 <strlen>
    ca68:	d8c02a17 	ldw	r3,168(sp)
    ca6c:	1027883a 	mov	r19,r2
    ca70:	df001d83 	ldbu	fp,118(sp)
    ca74:	d8c02215 	stw	r3,136(sp)
    ca78:	0013883a 	mov	r9,zero
    ca7c:	da002b17 	ldw	r8,172(sp)
    ca80:	003c4d06 	br	bbb8 <___vfiprintf_internal_r+0x400>
    ca84:	d9402117 	ldw	r5,132(sp)
    ca88:	d9002017 	ldw	r4,128(sp)
    ca8c:	d9801a04 	addi	r6,sp,104
    ca90:	da402c15 	stw	r9,176(sp)
    ca94:	000b6a40 	call	b6a4 <__sprint_r.part.0>
    ca98:	da402c17 	ldw	r9,176(sp)
    ca9c:	103e9a1e 	bne	r2,zero,c508 <___vfiprintf_internal_r+0xd50>
    caa0:	d9401b17 	ldw	r5,108(sp)
    caa4:	d8801c17 	ldw	r2,112(sp)
    caa8:	d811883a 	mov	r8,sp
    caac:	29000044 	addi	r4,r5,1
    cab0:	003e4206 	br	c3bc <___vfiprintf_internal_r+0xc04>
    cab4:	d9401b17 	ldw	r5,108(sp)
    cab8:	010000b4 	movhi	r4,2
    cabc:	21372504 	addi	r4,r4,-9068
    cac0:	d9002415 	stw	r4,144(sp)
    cac4:	29400044 	addi	r5,r5,1
    cac8:	003c6d06 	br	bc80 <___vfiprintf_internal_r+0x4c8>
    cacc:	0039883a 	mov	fp,zero
    cad0:	00800084 	movi	r2,2
    cad4:	10803fcc 	andi	r2,r2,255
    cad8:	01000044 	movi	r4,1
    cadc:	11001e26 	beq	r2,r4,cb58 <___vfiprintf_internal_r+0x13a0>
    cae0:	01000084 	movi	r4,2
    cae4:	11001e1e 	bne	r2,r4,cb60 <___vfiprintf_internal_r+0x13a8>
    cae8:	1829883a 	mov	r20,r3
    caec:	003eea06 	br	c698 <___vfiprintf_internal_r+0xee0>
    caf0:	a007883a 	mov	r3,r20
    caf4:	00800044 	movi	r2,1
    caf8:	003ff606 	br	cad4 <___vfiprintf_internal_r+0x131c>
    cafc:	00800184 	movi	r2,6
    cb00:	1240012e 	bgeu	r2,r9,cb08 <___vfiprintf_internal_r+0x1350>
    cb04:	1013883a 	mov	r9,r2
    cb08:	4827883a 	mov	r19,r9
    cb0c:	4825883a 	mov	r18,r9
    cb10:	48001516 	blt	r9,zero,cb68 <___vfiprintf_internal_r+0x13b0>
    cb14:	054000b4 	movhi	r21,2
    cb18:	d8c02215 	stw	r3,136(sp)
    cb1c:	ad76b504 	addi	r21,r21,-9516
    cb20:	003d1406 	br	bf74 <___vfiprintf_internal_r+0x7bc>
    cb24:	028000b4 	movhi	r10,2
    cb28:	52b72104 	addi	r10,r10,-9084
    cb2c:	da802415 	stw	r10,144(sp)
    cb30:	200d883a 	mov	r6,r4
    cb34:	003c9106 	br	bd7c <___vfiprintf_internal_r+0x5c4>
    cb38:	5021883a 	mov	r16,r10
    cb3c:	0013883a 	mov	r9,zero
    cb40:	003b7d06 	br	b938 <___vfiprintf_internal_r+0x180>
    cb44:	4827883a 	mov	r19,r9
    cb48:	df001d83 	ldbu	fp,118(sp)
    cb4c:	d8c02215 	stw	r3,136(sp)
    cb50:	0013883a 	mov	r9,zero
    cb54:	003c1806 	br	bbb8 <___vfiprintf_internal_r+0x400>
    cb58:	1829883a 	mov	r20,r3
    cb5c:	003d1806 	br	bfc0 <___vfiprintf_internal_r+0x808>
    cb60:	1829883a 	mov	r20,r3
    cb64:	003ccd06 	br	be9c <___vfiprintf_internal_r+0x6e4>
    cb68:	0025883a 	mov	r18,zero
    cb6c:	003fe906 	br	cb14 <___vfiprintf_internal_r+0x135c>
    cb70:	d8802217 	ldw	r2,136(sp)
    cb74:	80c00043 	ldbu	r3,1(r16)
    cb78:	5021883a 	mov	r16,r10
    cb7c:	12400017 	ldw	r9,0(r2)
    cb80:	10800104 	addi	r2,r2,4
    cb84:	d8802215 	stw	r2,136(sp)
    cb88:	483faf0e 	bge	r9,zero,ca48 <___vfiprintf_internal_r+0x1290>
    cb8c:	18c03fcc 	andi	r3,r3,255
    cb90:	18c0201c 	xori	r3,r3,128
    cb94:	027fffc4 	movi	r9,-1
    cb98:	18ffe004 	addi	r3,r3,-128
    cb9c:	003b6506 	br	b934 <___vfiprintf_internal_r+0x17c>
    cba0:	d9c01d85 	stb	r7,118(sp)
    cba4:	003ca006 	br	be28 <___vfiprintf_internal_r+0x670>
    cba8:	d9c01d85 	stb	r7,118(sp)
    cbac:	003cad06 	br	be64 <___vfiprintf_internal_r+0x6ac>
    cbb0:	d9c01d85 	stb	r7,118(sp)
    cbb4:	003d7d06 	br	c1ac <___vfiprintf_internal_r+0x9f4>
    cbb8:	d9c01d85 	stb	r7,118(sp)
    cbbc:	003d5f06 	br	c13c <___vfiprintf_internal_r+0x984>
    cbc0:	a080004c 	andi	r2,r20,1
    cbc4:	0039883a 	mov	fp,zero
    cbc8:	10000526 	beq	r2,zero,cbe0 <___vfiprintf_internal_r+0x1428>
    cbcc:	00800c04 	movi	r2,48
    cbd0:	d88019c5 	stb	r2,103(sp)
    cbd4:	dcc02717 	ldw	r19,156(sp)
    cbd8:	dd4019c4 	addi	r21,sp,103
    cbdc:	003bf606 	br	bbb8 <___vfiprintf_internal_r+0x400>
    cbe0:	0027883a 	mov	r19,zero
    cbe4:	dd401a04 	addi	r21,sp,104
    cbe8:	003bf306 	br	bbb8 <___vfiprintf_internal_r+0x400>
    cbec:	d9c01d85 	stb	r7,118(sp)
    cbf0:	003dc806 	br	c314 <___vfiprintf_internal_r+0xb5c>
    cbf4:	d9c01d85 	stb	r7,118(sp)
    cbf8:	003d3a06 	br	c0e4 <___vfiprintf_internal_r+0x92c>
    cbfc:	d9c01d85 	stb	r7,118(sp)
    cc00:	003d2a06 	br	c0ac <___vfiprintf_internal_r+0x8f4>
    cc04:	d9c01d85 	stb	r7,118(sp)
    cc08:	003cde06 	br	bf84 <___vfiprintf_internal_r+0x7cc>
    cc0c:	d9c01d85 	stb	r7,118(sp)
    cc10:	003cbc06 	br	bf04 <___vfiprintf_internal_r+0x74c>

0000cc14 <__vfiprintf_internal>:
    cc14:	008000b4 	movhi	r2,2
    cc18:	10bf8204 	addi	r2,r2,-504
    cc1c:	300f883a 	mov	r7,r6
    cc20:	280d883a 	mov	r6,r5
    cc24:	200b883a 	mov	r5,r4
    cc28:	11000017 	ldw	r4,0(r2)
    cc2c:	000b7b81 	jmpi	b7b8 <___vfiprintf_internal_r>

0000cc30 <__sbprintf>:
    cc30:	2880030b 	ldhu	r2,12(r5)
    cc34:	2ac01917 	ldw	r11,100(r5)
    cc38:	2a80038b 	ldhu	r10,14(r5)
    cc3c:	2a400717 	ldw	r9,28(r5)
    cc40:	2a000917 	ldw	r8,36(r5)
    cc44:	defee204 	addi	sp,sp,-1144
    cc48:	00c10004 	movi	r3,1024
    cc4c:	dc011a15 	stw	r16,1128(sp)
    cc50:	10bfff4c 	andi	r2,r2,65533
    cc54:	2821883a 	mov	r16,r5
    cc58:	d8cb883a 	add	r5,sp,r3
    cc5c:	dc811c15 	stw	r18,1136(sp)
    cc60:	dc411b15 	stw	r17,1132(sp)
    cc64:	dfc11d15 	stw	ra,1140(sp)
    cc68:	2025883a 	mov	r18,r4
    cc6c:	d881030d 	sth	r2,1036(sp)
    cc70:	dac11915 	stw	r11,1124(sp)
    cc74:	da81038d 	sth	r10,1038(sp)
    cc78:	da410715 	stw	r9,1052(sp)
    cc7c:	da010915 	stw	r8,1060(sp)
    cc80:	dec10015 	stw	sp,1024(sp)
    cc84:	dec10415 	stw	sp,1040(sp)
    cc88:	d8c10215 	stw	r3,1032(sp)
    cc8c:	d8c10515 	stw	r3,1044(sp)
    cc90:	d8010615 	stw	zero,1048(sp)
    cc94:	000b7b80 	call	b7b8 <___vfiprintf_internal_r>
    cc98:	1023883a 	mov	r17,r2
    cc9c:	10000416 	blt	r2,zero,ccb0 <__sbprintf+0x80>
    cca0:	d9410004 	addi	r5,sp,1024
    cca4:	9009883a 	mov	r4,r18
    cca8:	0006c600 	call	6c60 <_fflush_r>
    ccac:	10000d1e 	bne	r2,zero,cce4 <__sbprintf+0xb4>
    ccb0:	d881030b 	ldhu	r2,1036(sp)
    ccb4:	1080100c 	andi	r2,r2,64
    ccb8:	10000326 	beq	r2,zero,ccc8 <__sbprintf+0x98>
    ccbc:	8080030b 	ldhu	r2,12(r16)
    ccc0:	10801014 	ori	r2,r2,64
    ccc4:	8080030d 	sth	r2,12(r16)
    ccc8:	8805883a 	mov	r2,r17
    cccc:	dfc11d17 	ldw	ra,1140(sp)
    ccd0:	dc811c17 	ldw	r18,1136(sp)
    ccd4:	dc411b17 	ldw	r17,1132(sp)
    ccd8:	dc011a17 	ldw	r16,1128(sp)
    ccdc:	dec11e04 	addi	sp,sp,1144
    cce0:	f800283a 	ret
    cce4:	047fffc4 	movi	r17,-1
    cce8:	003ff106 	br	ccb0 <__sbprintf+0x80>

0000ccec <_write_r>:
    ccec:	defffd04 	addi	sp,sp,-12
    ccf0:	2805883a 	mov	r2,r5
    ccf4:	dc000015 	stw	r16,0(sp)
    ccf8:	040000b4 	movhi	r16,2
    ccfc:	dc400115 	stw	r17,4(sp)
    cd00:	300b883a 	mov	r5,r6
    cd04:	84076204 	addi	r16,r16,7560
    cd08:	2023883a 	mov	r17,r4
    cd0c:	380d883a 	mov	r6,r7
    cd10:	1009883a 	mov	r4,r2
    cd14:	dfc00215 	stw	ra,8(sp)
    cd18:	80000015 	stw	zero,0(r16)
    cd1c:	00111300 	call	11130 <write>
    cd20:	00ffffc4 	movi	r3,-1
    cd24:	10c00526 	beq	r2,r3,cd3c <_write_r+0x50>
    cd28:	dfc00217 	ldw	ra,8(sp)
    cd2c:	dc400117 	ldw	r17,4(sp)
    cd30:	dc000017 	ldw	r16,0(sp)
    cd34:	dec00304 	addi	sp,sp,12
    cd38:	f800283a 	ret
    cd3c:	80c00017 	ldw	r3,0(r16)
    cd40:	183ff926 	beq	r3,zero,cd28 <_write_r+0x3c>
    cd44:	88c00015 	stw	r3,0(r17)
    cd48:	003ff706 	br	cd28 <_write_r+0x3c>

0000cd4c <_close_r>:
    cd4c:	defffd04 	addi	sp,sp,-12
    cd50:	dc000015 	stw	r16,0(sp)
    cd54:	040000b4 	movhi	r16,2
    cd58:	dc400115 	stw	r17,4(sp)
    cd5c:	84076204 	addi	r16,r16,7560
    cd60:	2023883a 	mov	r17,r4
    cd64:	2809883a 	mov	r4,r5
    cd68:	dfc00215 	stw	ra,8(sp)
    cd6c:	80000015 	stw	zero,0(r16)
    cd70:	00109280 	call	10928 <close>
    cd74:	00ffffc4 	movi	r3,-1
    cd78:	10c00526 	beq	r2,r3,cd90 <_close_r+0x44>
    cd7c:	dfc00217 	ldw	ra,8(sp)
    cd80:	dc400117 	ldw	r17,4(sp)
    cd84:	dc000017 	ldw	r16,0(sp)
    cd88:	dec00304 	addi	sp,sp,12
    cd8c:	f800283a 	ret
    cd90:	80c00017 	ldw	r3,0(r16)
    cd94:	183ff926 	beq	r3,zero,cd7c <_close_r+0x30>
    cd98:	88c00015 	stw	r3,0(r17)
    cd9c:	003ff706 	br	cd7c <_close_r+0x30>

0000cda0 <_calloc_r>:
    cda0:	298b383a 	mul	r5,r5,r6
    cda4:	defffe04 	addi	sp,sp,-8
    cda8:	dfc00115 	stw	ra,4(sp)
    cdac:	dc000015 	stw	r16,0(sp)
    cdb0:	0007d9c0 	call	7d9c <_malloc_r>
    cdb4:	10002926 	beq	r2,zero,ce5c <_calloc_r+0xbc>
    cdb8:	11bfff17 	ldw	r6,-4(r2)
    cdbc:	1021883a 	mov	r16,r2
    cdc0:	00bfff04 	movi	r2,-4
    cdc4:	308c703a 	and	r6,r6,r2
    cdc8:	00c00904 	movi	r3,36
    cdcc:	308d883a 	add	r6,r6,r2
    cdd0:	19801636 	bltu	r3,r6,ce2c <_calloc_r+0x8c>
    cdd4:	008004c4 	movi	r2,19
    cdd8:	11800b2e 	bgeu	r2,r6,ce08 <_calloc_r+0x68>
    cddc:	80000015 	stw	zero,0(r16)
    cde0:	80000115 	stw	zero,4(r16)
    cde4:	008006c4 	movi	r2,27
    cde8:	11801a2e 	bgeu	r2,r6,ce54 <_calloc_r+0xb4>
    cdec:	80000215 	stw	zero,8(r16)
    cdf0:	80000315 	stw	zero,12(r16)
    cdf4:	30c0151e 	bne	r6,r3,ce4c <_calloc_r+0xac>
    cdf8:	80000415 	stw	zero,16(r16)
    cdfc:	80800604 	addi	r2,r16,24
    ce00:	80000515 	stw	zero,20(r16)
    ce04:	00000106 	br	ce0c <_calloc_r+0x6c>
    ce08:	8005883a 	mov	r2,r16
    ce0c:	10000015 	stw	zero,0(r2)
    ce10:	10000115 	stw	zero,4(r2)
    ce14:	10000215 	stw	zero,8(r2)
    ce18:	8005883a 	mov	r2,r16
    ce1c:	dfc00117 	ldw	ra,4(sp)
    ce20:	dc000017 	ldw	r16,0(sp)
    ce24:	dec00204 	addi	sp,sp,8
    ce28:	f800283a 	ret
    ce2c:	000b883a 	mov	r5,zero
    ce30:	8009883a 	mov	r4,r16
    ce34:	00089300 	call	8930 <memset>
    ce38:	8005883a 	mov	r2,r16
    ce3c:	dfc00117 	ldw	ra,4(sp)
    ce40:	dc000017 	ldw	r16,0(sp)
    ce44:	dec00204 	addi	sp,sp,8
    ce48:	f800283a 	ret
    ce4c:	80800404 	addi	r2,r16,16
    ce50:	003fee06 	br	ce0c <_calloc_r+0x6c>
    ce54:	80800204 	addi	r2,r16,8
    ce58:	003fec06 	br	ce0c <_calloc_r+0x6c>
    ce5c:	0005883a 	mov	r2,zero
    ce60:	003fee06 	br	ce1c <_calloc_r+0x7c>

0000ce64 <_fclose_r>:
    ce64:	28003926 	beq	r5,zero,cf4c <_fclose_r+0xe8>
    ce68:	defffc04 	addi	sp,sp,-16
    ce6c:	dc400115 	stw	r17,4(sp)
    ce70:	dc000015 	stw	r16,0(sp)
    ce74:	dfc00315 	stw	ra,12(sp)
    ce78:	dc800215 	stw	r18,8(sp)
    ce7c:	2023883a 	mov	r17,r4
    ce80:	2821883a 	mov	r16,r5
    ce84:	20000226 	beq	r4,zero,ce90 <_fclose_r+0x2c>
    ce88:	20800e17 	ldw	r2,56(r4)
    ce8c:	10002726 	beq	r2,zero,cf2c <_fclose_r+0xc8>
    ce90:	8080030f 	ldh	r2,12(r16)
    ce94:	1000071e 	bne	r2,zero,ceb4 <_fclose_r+0x50>
    ce98:	0005883a 	mov	r2,zero
    ce9c:	dfc00317 	ldw	ra,12(sp)
    cea0:	dc800217 	ldw	r18,8(sp)
    cea4:	dc400117 	ldw	r17,4(sp)
    cea8:	dc000017 	ldw	r16,0(sp)
    ceac:	dec00404 	addi	sp,sp,16
    ceb0:	f800283a 	ret
    ceb4:	800b883a 	mov	r5,r16
    ceb8:	8809883a 	mov	r4,r17
    cebc:	0006a440 	call	6a44 <__sflush_r>
    cec0:	1025883a 	mov	r18,r2
    cec4:	80800b17 	ldw	r2,44(r16)
    cec8:	10000426 	beq	r2,zero,cedc <_fclose_r+0x78>
    cecc:	81400717 	ldw	r5,28(r16)
    ced0:	8809883a 	mov	r4,r17
    ced4:	103ee83a 	callr	r2
    ced8:	10001616 	blt	r2,zero,cf34 <_fclose_r+0xd0>
    cedc:	8080030b 	ldhu	r2,12(r16)
    cee0:	1080200c 	andi	r2,r2,128
    cee4:	1000151e 	bne	r2,zero,cf3c <_fclose_r+0xd8>
    cee8:	81400c17 	ldw	r5,48(r16)
    ceec:	28000526 	beq	r5,zero,cf04 <_fclose_r+0xa0>
    cef0:	80801004 	addi	r2,r16,64
    cef4:	28800226 	beq	r5,r2,cf00 <_fclose_r+0x9c>
    cef8:	8809883a 	mov	r4,r17
    cefc:	00071b00 	call	71b0 <_free_r>
    cf00:	80000c15 	stw	zero,48(r16)
    cf04:	81401117 	ldw	r5,68(r16)
    cf08:	28000326 	beq	r5,zero,cf18 <_fclose_r+0xb4>
    cf0c:	8809883a 	mov	r4,r17
    cf10:	00071b00 	call	71b0 <_free_r>
    cf14:	80001115 	stw	zero,68(r16)
    cf18:	000704c0 	call	704c <__sfp_lock_acquire>
    cf1c:	8000030d 	sth	zero,12(r16)
    cf20:	00070500 	call	7050 <__sfp_lock_release>
    cf24:	9005883a 	mov	r2,r18
    cf28:	003fdc06 	br	ce9c <_fclose_r+0x38>
    cf2c:	000703c0 	call	703c <__sinit>
    cf30:	003fd706 	br	ce90 <_fclose_r+0x2c>
    cf34:	04bfffc4 	movi	r18,-1
    cf38:	003fe806 	br	cedc <_fclose_r+0x78>
    cf3c:	81400417 	ldw	r5,16(r16)
    cf40:	8809883a 	mov	r4,r17
    cf44:	00071b00 	call	71b0 <_free_r>
    cf48:	003fe706 	br	cee8 <_fclose_r+0x84>
    cf4c:	0005883a 	mov	r2,zero
    cf50:	f800283a 	ret

0000cf54 <fclose>:
    cf54:	008000b4 	movhi	r2,2
    cf58:	10bf8204 	addi	r2,r2,-504
    cf5c:	200b883a 	mov	r5,r4
    cf60:	11000017 	ldw	r4,0(r2)
    cf64:	000ce641 	jmpi	ce64 <_fclose_r>

0000cf68 <__fputwc>:
    cf68:	defff804 	addi	sp,sp,-32
    cf6c:	dcc00415 	stw	r19,16(sp)
    cf70:	dc800315 	stw	r18,12(sp)
    cf74:	dc000115 	stw	r16,4(sp)
    cf78:	dfc00715 	stw	ra,28(sp)
    cf7c:	dd400615 	stw	r21,24(sp)
    cf80:	dd000515 	stw	r20,20(sp)
    cf84:	dc400215 	stw	r17,8(sp)
    cf88:	2027883a 	mov	r19,r4
    cf8c:	2825883a 	mov	r18,r5
    cf90:	3021883a 	mov	r16,r6
    cf94:	0007b8c0 	call	7b8c <__locale_mb_cur_max>
    cf98:	00c00044 	movi	r3,1
    cf9c:	10c03e26 	beq	r2,r3,d098 <__fputwc+0x130>
    cfa0:	81c01704 	addi	r7,r16,92
    cfa4:	900d883a 	mov	r6,r18
    cfa8:	d80b883a 	mov	r5,sp
    cfac:	9809883a 	mov	r4,r19
    cfb0:	000d4380 	call	d438 <_wcrtomb_r>
    cfb4:	1029883a 	mov	r20,r2
    cfb8:	00bfffc4 	movi	r2,-1
    cfbc:	a0802026 	beq	r20,r2,d040 <__fputwc+0xd8>
    cfc0:	d9400003 	ldbu	r5,0(sp)
    cfc4:	a0001c26 	beq	r20,zero,d038 <__fputwc+0xd0>
    cfc8:	0023883a 	mov	r17,zero
    cfcc:	05400284 	movi	r21,10
    cfd0:	00000906 	br	cff8 <__fputwc+0x90>
    cfd4:	80800017 	ldw	r2,0(r16)
    cfd8:	11400005 	stb	r5,0(r2)
    cfdc:	80c00017 	ldw	r3,0(r16)
    cfe0:	18c00044 	addi	r3,r3,1
    cfe4:	80c00015 	stw	r3,0(r16)
    cfe8:	8c400044 	addi	r17,r17,1
    cfec:	dc45883a 	add	r2,sp,r17
    cff0:	8d00112e 	bgeu	r17,r20,d038 <__fputwc+0xd0>
    cff4:	11400003 	ldbu	r5,0(r2)
    cff8:	80c00217 	ldw	r3,8(r16)
    cffc:	18ffffc4 	addi	r3,r3,-1
    d000:	80c00215 	stw	r3,8(r16)
    d004:	183ff30e 	bge	r3,zero,cfd4 <__fputwc+0x6c>
    d008:	80800617 	ldw	r2,24(r16)
    d00c:	18801916 	blt	r3,r2,d074 <__fputwc+0x10c>
    d010:	80800017 	ldw	r2,0(r16)
    d014:	11400005 	stb	r5,0(r2)
    d018:	80800017 	ldw	r2,0(r16)
    d01c:	10c00003 	ldbu	r3,0(r2)
    d020:	10800044 	addi	r2,r2,1
    d024:	1d402326 	beq	r3,r21,d0b4 <__fputwc+0x14c>
    d028:	80800015 	stw	r2,0(r16)
    d02c:	8c400044 	addi	r17,r17,1
    d030:	dc45883a 	add	r2,sp,r17
    d034:	8d3fef36 	bltu	r17,r20,cff4 <__fputwc+0x8c>
    d038:	9005883a 	mov	r2,r18
    d03c:	00000406 	br	d050 <__fputwc+0xe8>
    d040:	80c0030b 	ldhu	r3,12(r16)
    d044:	a005883a 	mov	r2,r20
    d048:	18c01014 	ori	r3,r3,64
    d04c:	80c0030d 	sth	r3,12(r16)
    d050:	dfc00717 	ldw	ra,28(sp)
    d054:	dd400617 	ldw	r21,24(sp)
    d058:	dd000517 	ldw	r20,20(sp)
    d05c:	dcc00417 	ldw	r19,16(sp)
    d060:	dc800317 	ldw	r18,12(sp)
    d064:	dc400217 	ldw	r17,8(sp)
    d068:	dc000117 	ldw	r16,4(sp)
    d06c:	dec00804 	addi	sp,sp,32
    d070:	f800283a 	ret
    d074:	800d883a 	mov	r6,r16
    d078:	29403fcc 	andi	r5,r5,255
    d07c:	9809883a 	mov	r4,r19
    d080:	000d2e00 	call	d2e0 <__swbuf_r>
    d084:	10bfffe0 	cmpeqi	r2,r2,-1
    d088:	10803fcc 	andi	r2,r2,255
    d08c:	103fd626 	beq	r2,zero,cfe8 <__fputwc+0x80>
    d090:	00bfffc4 	movi	r2,-1
    d094:	003fee06 	br	d050 <__fputwc+0xe8>
    d098:	90ffffc4 	addi	r3,r18,-1
    d09c:	01003f84 	movi	r4,254
    d0a0:	20ffbf36 	bltu	r4,r3,cfa0 <__fputwc+0x38>
    d0a4:	900b883a 	mov	r5,r18
    d0a8:	dc800005 	stb	r18,0(sp)
    d0ac:	1029883a 	mov	r20,r2
    d0b0:	003fc506 	br	cfc8 <__fputwc+0x60>
    d0b4:	800d883a 	mov	r6,r16
    d0b8:	a80b883a 	mov	r5,r21
    d0bc:	9809883a 	mov	r4,r19
    d0c0:	000d2e00 	call	d2e0 <__swbuf_r>
    d0c4:	10bfffe0 	cmpeqi	r2,r2,-1
    d0c8:	003fef06 	br	d088 <__fputwc+0x120>

0000d0cc <_fputwc_r>:
    d0cc:	3080030b 	ldhu	r2,12(r6)
    d0d0:	10c8000c 	andi	r3,r2,8192
    d0d4:	1800051e 	bne	r3,zero,d0ec <_fputwc_r+0x20>
    d0d8:	30c01917 	ldw	r3,100(r6)
    d0dc:	10880014 	ori	r2,r2,8192
    d0e0:	3080030d 	sth	r2,12(r6)
    d0e4:	18880014 	ori	r2,r3,8192
    d0e8:	30801915 	stw	r2,100(r6)
    d0ec:	000cf681 	jmpi	cf68 <__fputwc>

0000d0f0 <fputwc>:
    d0f0:	008000b4 	movhi	r2,2
    d0f4:	defffc04 	addi	sp,sp,-16
    d0f8:	10bf8204 	addi	r2,r2,-504
    d0fc:	dc000115 	stw	r16,4(sp)
    d100:	14000017 	ldw	r16,0(r2)
    d104:	dc400215 	stw	r17,8(sp)
    d108:	dfc00315 	stw	ra,12(sp)
    d10c:	2023883a 	mov	r17,r4
    d110:	80000226 	beq	r16,zero,d11c <fputwc+0x2c>
    d114:	80800e17 	ldw	r2,56(r16)
    d118:	10001026 	beq	r2,zero,d15c <fputwc+0x6c>
    d11c:	2880030b 	ldhu	r2,12(r5)
    d120:	10c8000c 	andi	r3,r2,8192
    d124:	1800051e 	bne	r3,zero,d13c <fputwc+0x4c>
    d128:	28c01917 	ldw	r3,100(r5)
    d12c:	10880014 	ori	r2,r2,8192
    d130:	2880030d 	sth	r2,12(r5)
    d134:	18880014 	ori	r2,r3,8192
    d138:	28801915 	stw	r2,100(r5)
    d13c:	280d883a 	mov	r6,r5
    d140:	8009883a 	mov	r4,r16
    d144:	880b883a 	mov	r5,r17
    d148:	dfc00317 	ldw	ra,12(sp)
    d14c:	dc400217 	ldw	r17,8(sp)
    d150:	dc000117 	ldw	r16,4(sp)
    d154:	dec00404 	addi	sp,sp,16
    d158:	000cf681 	jmpi	cf68 <__fputwc>
    d15c:	8009883a 	mov	r4,r16
    d160:	d9400015 	stw	r5,0(sp)
    d164:	000703c0 	call	703c <__sinit>
    d168:	d9400017 	ldw	r5,0(sp)
    d16c:	003feb06 	br	d11c <fputwc+0x2c>

0000d170 <_fstat_r>:
    d170:	defffd04 	addi	sp,sp,-12
    d174:	2805883a 	mov	r2,r5
    d178:	dc000015 	stw	r16,0(sp)
    d17c:	040000b4 	movhi	r16,2
    d180:	dc400115 	stw	r17,4(sp)
    d184:	84076204 	addi	r16,r16,7560
    d188:	2023883a 	mov	r17,r4
    d18c:	300b883a 	mov	r5,r6
    d190:	1009883a 	mov	r4,r2
    d194:	dfc00215 	stw	ra,8(sp)
    d198:	80000015 	stw	zero,0(r16)
    d19c:	0010a600 	call	10a60 <fstat>
    d1a0:	00ffffc4 	movi	r3,-1
    d1a4:	10c00526 	beq	r2,r3,d1bc <_fstat_r+0x4c>
    d1a8:	dfc00217 	ldw	ra,8(sp)
    d1ac:	dc400117 	ldw	r17,4(sp)
    d1b0:	dc000017 	ldw	r16,0(sp)
    d1b4:	dec00304 	addi	sp,sp,12
    d1b8:	f800283a 	ret
    d1bc:	80c00017 	ldw	r3,0(r16)
    d1c0:	183ff926 	beq	r3,zero,d1a8 <_fstat_r+0x38>
    d1c4:	88c00015 	stw	r3,0(r17)
    d1c8:	003ff706 	br	d1a8 <_fstat_r+0x38>

0000d1cc <_isatty_r>:
    d1cc:	defffd04 	addi	sp,sp,-12
    d1d0:	dc000015 	stw	r16,0(sp)
    d1d4:	040000b4 	movhi	r16,2
    d1d8:	dc400115 	stw	r17,4(sp)
    d1dc:	84076204 	addi	r16,r16,7560
    d1e0:	2023883a 	mov	r17,r4
    d1e4:	2809883a 	mov	r4,r5
    d1e8:	dfc00215 	stw	ra,8(sp)
    d1ec:	80000015 	stw	zero,0(r16)
    d1f0:	0010b4c0 	call	10b4c <isatty>
    d1f4:	00ffffc4 	movi	r3,-1
    d1f8:	10c00526 	beq	r2,r3,d210 <_isatty_r+0x44>
    d1fc:	dfc00217 	ldw	ra,8(sp)
    d200:	dc400117 	ldw	r17,4(sp)
    d204:	dc000017 	ldw	r16,0(sp)
    d208:	dec00304 	addi	sp,sp,12
    d20c:	f800283a 	ret
    d210:	80c00017 	ldw	r3,0(r16)
    d214:	183ff926 	beq	r3,zero,d1fc <_isatty_r+0x30>
    d218:	88c00015 	stw	r3,0(r17)
    d21c:	003ff706 	br	d1fc <_isatty_r+0x30>

0000d220 <_lseek_r>:
    d220:	defffd04 	addi	sp,sp,-12
    d224:	2805883a 	mov	r2,r5
    d228:	dc000015 	stw	r16,0(sp)
    d22c:	040000b4 	movhi	r16,2
    d230:	dc400115 	stw	r17,4(sp)
    d234:	300b883a 	mov	r5,r6
    d238:	84076204 	addi	r16,r16,7560
    d23c:	2023883a 	mov	r17,r4
    d240:	380d883a 	mov	r6,r7
    d244:	1009883a 	mov	r4,r2
    d248:	dfc00215 	stw	ra,8(sp)
    d24c:	80000015 	stw	zero,0(r16)
    d250:	0010d180 	call	10d18 <lseek>
    d254:	00ffffc4 	movi	r3,-1
    d258:	10c00526 	beq	r2,r3,d270 <_lseek_r+0x50>
    d25c:	dfc00217 	ldw	ra,8(sp)
    d260:	dc400117 	ldw	r17,4(sp)
    d264:	dc000017 	ldw	r16,0(sp)
    d268:	dec00304 	addi	sp,sp,12
    d26c:	f800283a 	ret
    d270:	80c00017 	ldw	r3,0(r16)
    d274:	183ff926 	beq	r3,zero,d25c <_lseek_r+0x3c>
    d278:	88c00015 	stw	r3,0(r17)
    d27c:	003ff706 	br	d25c <_lseek_r+0x3c>

0000d280 <_read_r>:
    d280:	defffd04 	addi	sp,sp,-12
    d284:	2805883a 	mov	r2,r5
    d288:	dc000015 	stw	r16,0(sp)
    d28c:	040000b4 	movhi	r16,2
    d290:	dc400115 	stw	r17,4(sp)
    d294:	300b883a 	mov	r5,r6
    d298:	84076204 	addi	r16,r16,7560
    d29c:	2023883a 	mov	r17,r4
    d2a0:	380d883a 	mov	r6,r7
    d2a4:	1009883a 	mov	r4,r2
    d2a8:	dfc00215 	stw	ra,8(sp)
    d2ac:	80000015 	stw	zero,0(r16)
    d2b0:	0010ee40 	call	10ee4 <read>
    d2b4:	00ffffc4 	movi	r3,-1
    d2b8:	10c00526 	beq	r2,r3,d2d0 <_read_r+0x50>
    d2bc:	dfc00217 	ldw	ra,8(sp)
    d2c0:	dc400117 	ldw	r17,4(sp)
    d2c4:	dc000017 	ldw	r16,0(sp)
    d2c8:	dec00304 	addi	sp,sp,12
    d2cc:	f800283a 	ret
    d2d0:	80c00017 	ldw	r3,0(r16)
    d2d4:	183ff926 	beq	r3,zero,d2bc <_read_r+0x3c>
    d2d8:	88c00015 	stw	r3,0(r17)
    d2dc:	003ff706 	br	d2bc <_read_r+0x3c>

0000d2e0 <__swbuf_r>:
    d2e0:	defffb04 	addi	sp,sp,-20
    d2e4:	dcc00315 	stw	r19,12(sp)
    d2e8:	dc800215 	stw	r18,8(sp)
    d2ec:	dc000015 	stw	r16,0(sp)
    d2f0:	dfc00415 	stw	ra,16(sp)
    d2f4:	dc400115 	stw	r17,4(sp)
    d2f8:	2025883a 	mov	r18,r4
    d2fc:	2827883a 	mov	r19,r5
    d300:	3021883a 	mov	r16,r6
    d304:	20000226 	beq	r4,zero,d310 <__swbuf_r+0x30>
    d308:	20800e17 	ldw	r2,56(r4)
    d30c:	10004226 	beq	r2,zero,d418 <__swbuf_r+0x138>
    d310:	80800617 	ldw	r2,24(r16)
    d314:	8100030b 	ldhu	r4,12(r16)
    d318:	80800215 	stw	r2,8(r16)
    d31c:	2080020c 	andi	r2,r4,8
    d320:	10003626 	beq	r2,zero,d3fc <__swbuf_r+0x11c>
    d324:	80c00417 	ldw	r3,16(r16)
    d328:	18003426 	beq	r3,zero,d3fc <__swbuf_r+0x11c>
    d32c:	2088000c 	andi	r2,r4,8192
    d330:	9c403fcc 	andi	r17,r19,255
    d334:	10001a26 	beq	r2,zero,d3a0 <__swbuf_r+0xc0>
    d338:	80800017 	ldw	r2,0(r16)
    d33c:	81000517 	ldw	r4,20(r16)
    d340:	10c7c83a 	sub	r3,r2,r3
    d344:	1900200e 	bge	r3,r4,d3c8 <__swbuf_r+0xe8>
    d348:	18c00044 	addi	r3,r3,1
    d34c:	81000217 	ldw	r4,8(r16)
    d350:	11400044 	addi	r5,r2,1
    d354:	81400015 	stw	r5,0(r16)
    d358:	213fffc4 	addi	r4,r4,-1
    d35c:	81000215 	stw	r4,8(r16)
    d360:	14c00005 	stb	r19,0(r2)
    d364:	80800517 	ldw	r2,20(r16)
    d368:	10c01e26 	beq	r2,r3,d3e4 <__swbuf_r+0x104>
    d36c:	8080030b 	ldhu	r2,12(r16)
    d370:	1080004c 	andi	r2,r2,1
    d374:	10000226 	beq	r2,zero,d380 <__swbuf_r+0xa0>
    d378:	00800284 	movi	r2,10
    d37c:	88801926 	beq	r17,r2,d3e4 <__swbuf_r+0x104>
    d380:	8805883a 	mov	r2,r17
    d384:	dfc00417 	ldw	ra,16(sp)
    d388:	dcc00317 	ldw	r19,12(sp)
    d38c:	dc800217 	ldw	r18,8(sp)
    d390:	dc400117 	ldw	r17,4(sp)
    d394:	dc000017 	ldw	r16,0(sp)
    d398:	dec00504 	addi	sp,sp,20
    d39c:	f800283a 	ret
    d3a0:	81401917 	ldw	r5,100(r16)
    d3a4:	00b7ffc4 	movi	r2,-8193
    d3a8:	21080014 	ori	r4,r4,8192
    d3ac:	2884703a 	and	r2,r5,r2
    d3b0:	80801915 	stw	r2,100(r16)
    d3b4:	80800017 	ldw	r2,0(r16)
    d3b8:	8100030d 	sth	r4,12(r16)
    d3bc:	81000517 	ldw	r4,20(r16)
    d3c0:	10c7c83a 	sub	r3,r2,r3
    d3c4:	193fe016 	blt	r3,r4,d348 <__swbuf_r+0x68>
    d3c8:	800b883a 	mov	r5,r16
    d3cc:	9009883a 	mov	r4,r18
    d3d0:	0006c600 	call	6c60 <_fflush_r>
    d3d4:	1000071e 	bne	r2,zero,d3f4 <__swbuf_r+0x114>
    d3d8:	80800017 	ldw	r2,0(r16)
    d3dc:	00c00044 	movi	r3,1
    d3e0:	003fda06 	br	d34c <__swbuf_r+0x6c>
    d3e4:	800b883a 	mov	r5,r16
    d3e8:	9009883a 	mov	r4,r18
    d3ec:	0006c600 	call	6c60 <_fflush_r>
    d3f0:	103fe326 	beq	r2,zero,d380 <__swbuf_r+0xa0>
    d3f4:	00bfffc4 	movi	r2,-1
    d3f8:	003fe206 	br	d384 <__swbuf_r+0xa4>
    d3fc:	800b883a 	mov	r5,r16
    d400:	9009883a 	mov	r4,r18
    d404:	00050680 	call	5068 <__swsetup_r>
    d408:	103ffa1e 	bne	r2,zero,d3f4 <__swbuf_r+0x114>
    d40c:	8100030b 	ldhu	r4,12(r16)
    d410:	80c00417 	ldw	r3,16(r16)
    d414:	003fc506 	br	d32c <__swbuf_r+0x4c>
    d418:	000703c0 	call	703c <__sinit>
    d41c:	003fbc06 	br	d310 <__swbuf_r+0x30>

0000d420 <__swbuf>:
    d420:	008000b4 	movhi	r2,2
    d424:	10bf8204 	addi	r2,r2,-504
    d428:	280d883a 	mov	r6,r5
    d42c:	200b883a 	mov	r5,r4
    d430:	11000017 	ldw	r4,0(r2)
    d434:	000d2e01 	jmpi	d2e0 <__swbuf_r>

0000d438 <_wcrtomb_r>:
    d438:	defff604 	addi	sp,sp,-40
    d43c:	008000b4 	movhi	r2,2
    d440:	dc800815 	stw	r18,32(sp)
    d444:	dc400715 	stw	r17,28(sp)
    d448:	dc000615 	stw	r16,24(sp)
    d44c:	10bf8604 	addi	r2,r2,-488
    d450:	dfc00915 	stw	ra,36(sp)
    d454:	2021883a 	mov	r16,r4
    d458:	3823883a 	mov	r17,r7
    d45c:	14800017 	ldw	r18,0(r2)
    d460:	28001426 	beq	r5,zero,d4b4 <_wcrtomb_r+0x7c>
    d464:	d9400415 	stw	r5,16(sp)
    d468:	d9800515 	stw	r6,20(sp)
    d46c:	0007b800 	call	7b80 <__locale_charset>
    d470:	d9800517 	ldw	r6,20(sp)
    d474:	d9400417 	ldw	r5,16(sp)
    d478:	100f883a 	mov	r7,r2
    d47c:	dc400015 	stw	r17,0(sp)
    d480:	8009883a 	mov	r4,r16
    d484:	903ee83a 	callr	r18
    d488:	00ffffc4 	movi	r3,-1
    d48c:	10c0031e 	bne	r2,r3,d49c <_wcrtomb_r+0x64>
    d490:	88000015 	stw	zero,0(r17)
    d494:	00c02284 	movi	r3,138
    d498:	80c00015 	stw	r3,0(r16)
    d49c:	dfc00917 	ldw	ra,36(sp)
    d4a0:	dc800817 	ldw	r18,32(sp)
    d4a4:	dc400717 	ldw	r17,28(sp)
    d4a8:	dc000617 	ldw	r16,24(sp)
    d4ac:	dec00a04 	addi	sp,sp,40
    d4b0:	f800283a 	ret
    d4b4:	0007b800 	call	7b80 <__locale_charset>
    d4b8:	100f883a 	mov	r7,r2
    d4bc:	dc400015 	stw	r17,0(sp)
    d4c0:	000d883a 	mov	r6,zero
    d4c4:	d9400104 	addi	r5,sp,4
    d4c8:	8009883a 	mov	r4,r16
    d4cc:	903ee83a 	callr	r18
    d4d0:	003fed06 	br	d488 <_wcrtomb_r+0x50>

0000d4d4 <wcrtomb>:
    d4d4:	defff604 	addi	sp,sp,-40
    d4d8:	008000b4 	movhi	r2,2
    d4dc:	dc800615 	stw	r18,24(sp)
    d4e0:	dc400515 	stw	r17,20(sp)
    d4e4:	10bf8204 	addi	r2,r2,-504
    d4e8:	dfc00915 	stw	ra,36(sp)
    d4ec:	dd000815 	stw	r20,32(sp)
    d4f0:	dcc00715 	stw	r19,28(sp)
    d4f4:	dc000415 	stw	r16,16(sp)
    d4f8:	3025883a 	mov	r18,r6
    d4fc:	14400017 	ldw	r17,0(r2)
    d500:	20001926 	beq	r4,zero,d568 <wcrtomb+0x94>
    d504:	008000b4 	movhi	r2,2
    d508:	10bf8604 	addi	r2,r2,-488
    d50c:	15000017 	ldw	r20,0(r2)
    d510:	2021883a 	mov	r16,r4
    d514:	2827883a 	mov	r19,r5
    d518:	0007b800 	call	7b80 <__locale_charset>
    d51c:	100f883a 	mov	r7,r2
    d520:	dc800015 	stw	r18,0(sp)
    d524:	980d883a 	mov	r6,r19
    d528:	800b883a 	mov	r5,r16
    d52c:	8809883a 	mov	r4,r17
    d530:	a03ee83a 	callr	r20
    d534:	00ffffc4 	movi	r3,-1
    d538:	10c0031e 	bne	r2,r3,d548 <wcrtomb+0x74>
    d53c:	90000015 	stw	zero,0(r18)
    d540:	00c02284 	movi	r3,138
    d544:	88c00015 	stw	r3,0(r17)
    d548:	dfc00917 	ldw	ra,36(sp)
    d54c:	dd000817 	ldw	r20,32(sp)
    d550:	dcc00717 	ldw	r19,28(sp)
    d554:	dc800617 	ldw	r18,24(sp)
    d558:	dc400517 	ldw	r17,20(sp)
    d55c:	dc000417 	ldw	r16,16(sp)
    d560:	dec00a04 	addi	sp,sp,40
    d564:	f800283a 	ret
    d568:	008000b4 	movhi	r2,2
    d56c:	10bf8604 	addi	r2,r2,-488
    d570:	14000017 	ldw	r16,0(r2)
    d574:	0007b800 	call	7b80 <__locale_charset>
    d578:	100f883a 	mov	r7,r2
    d57c:	dc800015 	stw	r18,0(sp)
    d580:	000d883a 	mov	r6,zero
    d584:	d9400104 	addi	r5,sp,4
    d588:	8809883a 	mov	r4,r17
    d58c:	803ee83a 	callr	r16
    d590:	003fe806 	br	d534 <wcrtomb+0x60>

0000d594 <__ascii_wctomb>:
    d594:	28000526 	beq	r5,zero,d5ac <__ascii_wctomb+0x18>
    d598:	00803fc4 	movi	r2,255
    d59c:	11800536 	bltu	r2,r6,d5b4 <__ascii_wctomb+0x20>
    d5a0:	29800005 	stb	r6,0(r5)
    d5a4:	00800044 	movi	r2,1
    d5a8:	f800283a 	ret
    d5ac:	0005883a 	mov	r2,zero
    d5b0:	f800283a 	ret
    d5b4:	00802284 	movi	r2,138
    d5b8:	20800015 	stw	r2,0(r4)
    d5bc:	00bfffc4 	movi	r2,-1
    d5c0:	f800283a 	ret

0000d5c4 <_wctomb_r>:
    d5c4:	008000b4 	movhi	r2,2
    d5c8:	defff904 	addi	sp,sp,-28
    d5cc:	10bf8604 	addi	r2,r2,-488
    d5d0:	dfc00615 	stw	ra,24(sp)
    d5d4:	dc400515 	stw	r17,20(sp)
    d5d8:	dc000415 	stw	r16,16(sp)
    d5dc:	3823883a 	mov	r17,r7
    d5e0:	14000017 	ldw	r16,0(r2)
    d5e4:	d9000115 	stw	r4,4(sp)
    d5e8:	d9400215 	stw	r5,8(sp)
    d5ec:	d9800315 	stw	r6,12(sp)
    d5f0:	0007b800 	call	7b80 <__locale_charset>
    d5f4:	d9800317 	ldw	r6,12(sp)
    d5f8:	d9400217 	ldw	r5,8(sp)
    d5fc:	d9000117 	ldw	r4,4(sp)
    d600:	100f883a 	mov	r7,r2
    d604:	dc400015 	stw	r17,0(sp)
    d608:	803ee83a 	callr	r16
    d60c:	dfc00617 	ldw	ra,24(sp)
    d610:	dc400517 	ldw	r17,20(sp)
    d614:	dc000417 	ldw	r16,16(sp)
    d618:	dec00704 	addi	sp,sp,28
    d61c:	f800283a 	ret

0000d620 <__udivdi3>:
    d620:	defff504 	addi	sp,sp,-44
    d624:	dcc00415 	stw	r19,16(sp)
    d628:	dc000115 	stw	r16,4(sp)
    d62c:	dfc00a15 	stw	ra,40(sp)
    d630:	df000915 	stw	fp,36(sp)
    d634:	ddc00815 	stw	r23,32(sp)
    d638:	dd800715 	stw	r22,28(sp)
    d63c:	dd400615 	stw	r21,24(sp)
    d640:	dd000515 	stw	r20,20(sp)
    d644:	dc800315 	stw	r18,12(sp)
    d648:	dc400215 	stw	r17,8(sp)
    d64c:	2027883a 	mov	r19,r4
    d650:	2821883a 	mov	r16,r5
    d654:	3800411e 	bne	r7,zero,d75c <__udivdi3+0x13c>
    d658:	3023883a 	mov	r17,r6
    d65c:	2025883a 	mov	r18,r4
    d660:	2980522e 	bgeu	r5,r6,d7ac <__udivdi3+0x18c>
    d664:	00bfffd4 	movui	r2,65535
    d668:	282d883a 	mov	r22,r5
    d66c:	1180a836 	bltu	r2,r6,d910 <__udivdi3+0x2f0>
    d670:	00803fc4 	movi	r2,255
    d674:	1185803a 	cmpltu	r2,r2,r6
    d678:	100490fa 	slli	r2,r2,3
    d67c:	3086d83a 	srl	r3,r6,r2
    d680:	010000b4 	movhi	r4,2
    d684:	21372904 	addi	r4,r4,-9052
    d688:	20c7883a 	add	r3,r4,r3
    d68c:	18c00003 	ldbu	r3,0(r3)
    d690:	1885883a 	add	r2,r3,r2
    d694:	00c00804 	movi	r3,32
    d698:	1887c83a 	sub	r3,r3,r2
    d69c:	18000526 	beq	r3,zero,d6b4 <__udivdi3+0x94>
    d6a0:	80e0983a 	sll	r16,r16,r3
    d6a4:	9884d83a 	srl	r2,r19,r2
    d6a8:	30e2983a 	sll	r17,r6,r3
    d6ac:	98e4983a 	sll	r18,r19,r3
    d6b0:	142cb03a 	or	r22,r2,r16
    d6b4:	882ad43a 	srli	r21,r17,16
    d6b8:	b009883a 	mov	r4,r22
    d6bc:	8d3fffcc 	andi	r20,r17,65535
    d6c0:	a80b883a 	mov	r5,r21
    d6c4:	000e22c0 	call	e22c <__umodsi3>
    d6c8:	b009883a 	mov	r4,r22
    d6cc:	a80b883a 	mov	r5,r21
    d6d0:	1027883a 	mov	r19,r2
    d6d4:	000e1c80 	call	e1c8 <__udivsi3>
    d6d8:	102d883a 	mov	r22,r2
    d6dc:	9826943a 	slli	r19,r19,16
    d6e0:	9004d43a 	srli	r2,r18,16
    d6e4:	a5a1383a 	mul	r16,r20,r22
    d6e8:	14c4b03a 	or	r2,r2,r19
    d6ec:	1400052e 	bgeu	r2,r16,d704 <__udivdi3+0xe4>
    d6f0:	1445883a 	add	r2,r2,r17
    d6f4:	b0ffffc4 	addi	r3,r22,-1
    d6f8:	14400136 	bltu	r2,r17,d700 <__udivdi3+0xe0>
    d6fc:	14012336 	bltu	r2,r16,db8c <__udivdi3+0x56c>
    d700:	182d883a 	mov	r22,r3
    d704:	1421c83a 	sub	r16,r2,r16
    d708:	a80b883a 	mov	r5,r21
    d70c:	8009883a 	mov	r4,r16
    d710:	000e22c0 	call	e22c <__umodsi3>
    d714:	1027883a 	mov	r19,r2
    d718:	a80b883a 	mov	r5,r21
    d71c:	8009883a 	mov	r4,r16
    d720:	000e1c80 	call	e1c8 <__udivsi3>
    d724:	9826943a 	slli	r19,r19,16
    d728:	a0a9383a 	mul	r20,r20,r2
    d72c:	94bfffcc 	andi	r18,r18,65535
    d730:	94e4b03a 	or	r18,r18,r19
    d734:	9500052e 	bgeu	r18,r20,d74c <__udivdi3+0x12c>
    d738:	8ca5883a 	add	r18,r17,r18
    d73c:	10ffffc4 	addi	r3,r2,-1
    d740:	9440f136 	bltu	r18,r17,db08 <__udivdi3+0x4e8>
    d744:	9500f02e 	bgeu	r18,r20,db08 <__udivdi3+0x4e8>
    d748:	10bfff84 	addi	r2,r2,-2
    d74c:	b00c943a 	slli	r6,r22,16
    d750:	0007883a 	mov	r3,zero
    d754:	3084b03a 	or	r2,r6,r2
    d758:	00005906 	br	d8c0 <__udivdi3+0x2a0>
    d75c:	29c05636 	bltu	r5,r7,d8b8 <__udivdi3+0x298>
    d760:	00bfffd4 	movui	r2,65535
    d764:	11c0622e 	bgeu	r2,r7,d8f0 <__udivdi3+0x2d0>
    d768:	00804034 	movhi	r2,256
    d76c:	10bfffc4 	addi	r2,r2,-1
    d770:	11c0ee36 	bltu	r2,r7,db2c <__udivdi3+0x50c>
    d774:	00800404 	movi	r2,16
    d778:	3886d83a 	srl	r3,r7,r2
    d77c:	010000b4 	movhi	r4,2
    d780:	21372904 	addi	r4,r4,-9052
    d784:	20c7883a 	add	r3,r4,r3
    d788:	18c00003 	ldbu	r3,0(r3)
    d78c:	05400804 	movi	r21,32
    d790:	1885883a 	add	r2,r3,r2
    d794:	a8abc83a 	sub	r21,r21,r2
    d798:	a800621e 	bne	r21,zero,d924 <__udivdi3+0x304>
    d79c:	3c00e936 	bltu	r7,r16,db44 <__udivdi3+0x524>
    d7a0:	9985403a 	cmpgeu	r2,r19,r6
    d7a4:	0007883a 	mov	r3,zero
    d7a8:	00004506 	br	d8c0 <__udivdi3+0x2a0>
    d7ac:	3000041e 	bne	r6,zero,d7c0 <__udivdi3+0x1a0>
    d7b0:	000b883a 	mov	r5,zero
    d7b4:	01000044 	movi	r4,1
    d7b8:	000e1c80 	call	e1c8 <__udivsi3>
    d7bc:	1023883a 	mov	r17,r2
    d7c0:	00bfffd4 	movui	r2,65535
    d7c4:	14404e2e 	bgeu	r2,r17,d900 <__udivdi3+0x2e0>
    d7c8:	00804034 	movhi	r2,256
    d7cc:	10bfffc4 	addi	r2,r2,-1
    d7d0:	1440d836 	bltu	r2,r17,db34 <__udivdi3+0x514>
    d7d4:	00800404 	movi	r2,16
    d7d8:	8886d83a 	srl	r3,r17,r2
    d7dc:	010000b4 	movhi	r4,2
    d7e0:	21372904 	addi	r4,r4,-9052
    d7e4:	20c7883a 	add	r3,r4,r3
    d7e8:	18c00003 	ldbu	r3,0(r3)
    d7ec:	1885883a 	add	r2,r3,r2
    d7f0:	00c00804 	movi	r3,32
    d7f4:	1887c83a 	sub	r3,r3,r2
    d7f8:	18008f1e 	bne	r3,zero,da38 <__udivdi3+0x418>
    d7fc:	882ad43a 	srli	r21,r17,16
    d800:	8461c83a 	sub	r16,r16,r17
    d804:	8d3fffcc 	andi	r20,r17,65535
    d808:	00c00044 	movi	r3,1
    d80c:	8009883a 	mov	r4,r16
    d810:	a80b883a 	mov	r5,r21
    d814:	d8c00015 	stw	r3,0(sp)
    d818:	000e22c0 	call	e22c <__umodsi3>
    d81c:	8009883a 	mov	r4,r16
    d820:	a80b883a 	mov	r5,r21
    d824:	1027883a 	mov	r19,r2
    d828:	000e1c80 	call	e1c8 <__udivsi3>
    d82c:	9826943a 	slli	r19,r19,16
    d830:	9008d43a 	srli	r4,r18,16
    d834:	1521383a 	mul	r16,r2,r20
    d838:	102d883a 	mov	r22,r2
    d83c:	24c8b03a 	or	r4,r4,r19
    d840:	d8c00017 	ldw	r3,0(sp)
    d844:	2400052e 	bgeu	r4,r16,d85c <__udivdi3+0x23c>
    d848:	2449883a 	add	r4,r4,r17
    d84c:	b0bfffc4 	addi	r2,r22,-1
    d850:	24400136 	bltu	r4,r17,d858 <__udivdi3+0x238>
    d854:	2400ca36 	bltu	r4,r16,db80 <__udivdi3+0x560>
    d858:	102d883a 	mov	r22,r2
    d85c:	2421c83a 	sub	r16,r4,r16
    d860:	a80b883a 	mov	r5,r21
    d864:	8009883a 	mov	r4,r16
    d868:	d8c00015 	stw	r3,0(sp)
    d86c:	000e22c0 	call	e22c <__umodsi3>
    d870:	1027883a 	mov	r19,r2
    d874:	a80b883a 	mov	r5,r21
    d878:	8009883a 	mov	r4,r16
    d87c:	000e1c80 	call	e1c8 <__udivsi3>
    d880:	9826943a 	slli	r19,r19,16
    d884:	1529383a 	mul	r20,r2,r20
    d888:	94bfffcc 	andi	r18,r18,65535
    d88c:	94e4b03a 	or	r18,r18,r19
    d890:	d8c00017 	ldw	r3,0(sp)
    d894:	9500052e 	bgeu	r18,r20,d8ac <__udivdi3+0x28c>
    d898:	8ca5883a 	add	r18,r17,r18
    d89c:	113fffc4 	addi	r4,r2,-1
    d8a0:	94409736 	bltu	r18,r17,db00 <__udivdi3+0x4e0>
    d8a4:	9500962e 	bgeu	r18,r20,db00 <__udivdi3+0x4e0>
    d8a8:	10bfff84 	addi	r2,r2,-2
    d8ac:	b00c943a 	slli	r6,r22,16
    d8b0:	3084b03a 	or	r2,r6,r2
    d8b4:	00000206 	br	d8c0 <__udivdi3+0x2a0>
    d8b8:	0007883a 	mov	r3,zero
    d8bc:	0005883a 	mov	r2,zero
    d8c0:	dfc00a17 	ldw	ra,40(sp)
    d8c4:	df000917 	ldw	fp,36(sp)
    d8c8:	ddc00817 	ldw	r23,32(sp)
    d8cc:	dd800717 	ldw	r22,28(sp)
    d8d0:	dd400617 	ldw	r21,24(sp)
    d8d4:	dd000517 	ldw	r20,20(sp)
    d8d8:	dcc00417 	ldw	r19,16(sp)
    d8dc:	dc800317 	ldw	r18,12(sp)
    d8e0:	dc400217 	ldw	r17,8(sp)
    d8e4:	dc000117 	ldw	r16,4(sp)
    d8e8:	dec00b04 	addi	sp,sp,44
    d8ec:	f800283a 	ret
    d8f0:	00803fc4 	movi	r2,255
    d8f4:	11c5803a 	cmpltu	r2,r2,r7
    d8f8:	100490fa 	slli	r2,r2,3
    d8fc:	003f9e06 	br	d778 <__udivdi3+0x158>
    d900:	00803fc4 	movi	r2,255
    d904:	1445803a 	cmpltu	r2,r2,r17
    d908:	100490fa 	slli	r2,r2,3
    d90c:	003fb206 	br	d7d8 <__udivdi3+0x1b8>
    d910:	00804034 	movhi	r2,256
    d914:	10bfffc4 	addi	r2,r2,-1
    d918:	11808836 	bltu	r2,r6,db3c <__udivdi3+0x51c>
    d91c:	00800404 	movi	r2,16
    d920:	003f5606 	br	d67c <__udivdi3+0x5c>
    d924:	30aed83a 	srl	r23,r6,r2
    d928:	3d4e983a 	sll	r7,r7,r21
    d92c:	80acd83a 	srl	r22,r16,r2
    d930:	9884d83a 	srl	r2,r19,r2
    d934:	3deeb03a 	or	r23,r7,r23
    d938:	b824d43a 	srli	r18,r23,16
    d93c:	8560983a 	sll	r16,r16,r21
    d940:	b009883a 	mov	r4,r22
    d944:	900b883a 	mov	r5,r18
    d948:	3568983a 	sll	r20,r6,r21
    d94c:	1420b03a 	or	r16,r2,r16
    d950:	000e22c0 	call	e22c <__umodsi3>
    d954:	b009883a 	mov	r4,r22
    d958:	900b883a 	mov	r5,r18
    d95c:	1023883a 	mov	r17,r2
    d960:	000e1c80 	call	e1c8 <__udivsi3>
    d964:	8808943a 	slli	r4,r17,16
    d968:	bf3fffcc 	andi	fp,r23,65535
    d96c:	8006d43a 	srli	r3,r16,16
    d970:	e0a3383a 	mul	r17,fp,r2
    d974:	100d883a 	mov	r6,r2
    d978:	1906b03a 	or	r3,r3,r4
    d97c:	1c40042e 	bgeu	r3,r17,d990 <__udivdi3+0x370>
    d980:	1dc7883a 	add	r3,r3,r23
    d984:	10bfffc4 	addi	r2,r2,-1
    d988:	1dc0752e 	bgeu	r3,r23,db60 <__udivdi3+0x540>
    d98c:	100d883a 	mov	r6,r2
    d990:	1c63c83a 	sub	r17,r3,r17
    d994:	900b883a 	mov	r5,r18
    d998:	8809883a 	mov	r4,r17
    d99c:	d9800015 	stw	r6,0(sp)
    d9a0:	000e22c0 	call	e22c <__umodsi3>
    d9a4:	102d883a 	mov	r22,r2
    d9a8:	8809883a 	mov	r4,r17
    d9ac:	900b883a 	mov	r5,r18
    d9b0:	000e1c80 	call	e1c8 <__udivsi3>
    d9b4:	b02c943a 	slli	r22,r22,16
    d9b8:	e089383a 	mul	r4,fp,r2
    d9bc:	843fffcc 	andi	r16,r16,65535
    d9c0:	85a0b03a 	or	r16,r16,r22
    d9c4:	d9800017 	ldw	r6,0(sp)
    d9c8:	8100042e 	bgeu	r16,r4,d9dc <__udivdi3+0x3bc>
    d9cc:	85e1883a 	add	r16,r16,r23
    d9d0:	10ffffc4 	addi	r3,r2,-1
    d9d4:	85c05e2e 	bgeu	r16,r23,db50 <__udivdi3+0x530>
    d9d8:	1805883a 	mov	r2,r3
    d9dc:	300c943a 	slli	r6,r6,16
    d9e0:	a17fffcc 	andi	r5,r20,65535
    d9e4:	a028d43a 	srli	r20,r20,16
    d9e8:	3084b03a 	or	r2,r6,r2
    d9ec:	10ffffcc 	andi	r3,r2,65535
    d9f0:	100cd43a 	srli	r6,r2,16
    d9f4:	194f383a 	mul	r7,r3,r5
    d9f8:	1d07383a 	mul	r3,r3,r20
    d9fc:	314b383a 	mul	r5,r6,r5
    da00:	3810d43a 	srli	r8,r7,16
    da04:	8121c83a 	sub	r16,r16,r4
    da08:	1947883a 	add	r3,r3,r5
    da0c:	40c7883a 	add	r3,r8,r3
    da10:	350d383a 	mul	r6,r6,r20
    da14:	1940022e 	bgeu	r3,r5,da20 <__udivdi3+0x400>
    da18:	01000074 	movhi	r4,1
    da1c:	310d883a 	add	r6,r6,r4
    da20:	1828d43a 	srli	r20,r3,16
    da24:	a18d883a 	add	r6,r20,r6
    da28:	81803e36 	bltu	r16,r6,db24 <__udivdi3+0x504>
    da2c:	81803826 	beq	r16,r6,db10 <__udivdi3+0x4f0>
    da30:	0007883a 	mov	r3,zero
    da34:	003fa206 	br	d8c0 <__udivdi3+0x2a0>
    da38:	88e2983a 	sll	r17,r17,r3
    da3c:	80a8d83a 	srl	r20,r16,r2
    da40:	80e0983a 	sll	r16,r16,r3
    da44:	882ad43a 	srli	r21,r17,16
    da48:	9884d83a 	srl	r2,r19,r2
    da4c:	a009883a 	mov	r4,r20
    da50:	a80b883a 	mov	r5,r21
    da54:	142eb03a 	or	r23,r2,r16
    da58:	98e4983a 	sll	r18,r19,r3
    da5c:	000e22c0 	call	e22c <__umodsi3>
    da60:	a009883a 	mov	r4,r20
    da64:	a80b883a 	mov	r5,r21
    da68:	1021883a 	mov	r16,r2
    da6c:	000e1c80 	call	e1c8 <__udivsi3>
    da70:	1039883a 	mov	fp,r2
    da74:	8d3fffcc 	andi	r20,r17,65535
    da78:	8020943a 	slli	r16,r16,16
    da7c:	b804d43a 	srli	r2,r23,16
    da80:	a72d383a 	mul	r22,r20,fp
    da84:	1404b03a 	or	r2,r2,r16
    da88:	1580062e 	bgeu	r2,r22,daa4 <__udivdi3+0x484>
    da8c:	1445883a 	add	r2,r2,r17
    da90:	e0ffffc4 	addi	r3,fp,-1
    da94:	14403836 	bltu	r2,r17,db78 <__udivdi3+0x558>
    da98:	1580372e 	bgeu	r2,r22,db78 <__udivdi3+0x558>
    da9c:	e73fff84 	addi	fp,fp,-2
    daa0:	1445883a 	add	r2,r2,r17
    daa4:	15adc83a 	sub	r22,r2,r22
    daa8:	a80b883a 	mov	r5,r21
    daac:	b009883a 	mov	r4,r22
    dab0:	000e22c0 	call	e22c <__umodsi3>
    dab4:	1027883a 	mov	r19,r2
    dab8:	b009883a 	mov	r4,r22
    dabc:	a80b883a 	mov	r5,r21
    dac0:	000e1c80 	call	e1c8 <__udivsi3>
    dac4:	9826943a 	slli	r19,r19,16
    dac8:	a0a1383a 	mul	r16,r20,r2
    dacc:	b93fffcc 	andi	r4,r23,65535
    dad0:	24c8b03a 	or	r4,r4,r19
    dad4:	2400062e 	bgeu	r4,r16,daf0 <__udivdi3+0x4d0>
    dad8:	2449883a 	add	r4,r4,r17
    dadc:	10ffffc4 	addi	r3,r2,-1
    dae0:	24402336 	bltu	r4,r17,db70 <__udivdi3+0x550>
    dae4:	2400222e 	bgeu	r4,r16,db70 <__udivdi3+0x550>
    dae8:	10bfff84 	addi	r2,r2,-2
    daec:	2449883a 	add	r4,r4,r17
    daf0:	e038943a 	slli	fp,fp,16
    daf4:	2421c83a 	sub	r16,r4,r16
    daf8:	e086b03a 	or	r3,fp,r2
    dafc:	003f4306 	br	d80c <__udivdi3+0x1ec>
    db00:	2005883a 	mov	r2,r4
    db04:	003f6906 	br	d8ac <__udivdi3+0x28c>
    db08:	1805883a 	mov	r2,r3
    db0c:	003f0f06 	br	d74c <__udivdi3+0x12c>
    db10:	1806943a 	slli	r3,r3,16
    db14:	9d66983a 	sll	r19,r19,r21
    db18:	39ffffcc 	andi	r7,r7,65535
    db1c:	19c7883a 	add	r3,r3,r7
    db20:	98ffc32e 	bgeu	r19,r3,da30 <__udivdi3+0x410>
    db24:	10bfffc4 	addi	r2,r2,-1
    db28:	003fc106 	br	da30 <__udivdi3+0x410>
    db2c:	00800604 	movi	r2,24
    db30:	003f1106 	br	d778 <__udivdi3+0x158>
    db34:	00800604 	movi	r2,24
    db38:	003f2706 	br	d7d8 <__udivdi3+0x1b8>
    db3c:	00800604 	movi	r2,24
    db40:	003ece06 	br	d67c <__udivdi3+0x5c>
    db44:	0007883a 	mov	r3,zero
    db48:	00800044 	movi	r2,1
    db4c:	003f5c06 	br	d8c0 <__udivdi3+0x2a0>
    db50:	813fa12e 	bgeu	r16,r4,d9d8 <__udivdi3+0x3b8>
    db54:	10bfff84 	addi	r2,r2,-2
    db58:	85e1883a 	add	r16,r16,r23
    db5c:	003f9f06 	br	d9dc <__udivdi3+0x3bc>
    db60:	1c7f8a2e 	bgeu	r3,r17,d98c <__udivdi3+0x36c>
    db64:	31bfff84 	addi	r6,r6,-2
    db68:	1dc7883a 	add	r3,r3,r23
    db6c:	003f8806 	br	d990 <__udivdi3+0x370>
    db70:	1805883a 	mov	r2,r3
    db74:	003fde06 	br	daf0 <__udivdi3+0x4d0>
    db78:	1839883a 	mov	fp,r3
    db7c:	003fc906 	br	daa4 <__udivdi3+0x484>
    db80:	b5bfff84 	addi	r22,r22,-2
    db84:	2449883a 	add	r4,r4,r17
    db88:	003f3406 	br	d85c <__udivdi3+0x23c>
    db8c:	b5bfff84 	addi	r22,r22,-2
    db90:	1445883a 	add	r2,r2,r17
    db94:	003edb06 	br	d704 <__udivdi3+0xe4>

0000db98 <__umoddi3>:
    db98:	defff404 	addi	sp,sp,-48
    db9c:	df000a15 	stw	fp,40(sp)
    dba0:	dc400315 	stw	r17,12(sp)
    dba4:	dc000215 	stw	r16,8(sp)
    dba8:	dfc00b15 	stw	ra,44(sp)
    dbac:	ddc00915 	stw	r23,36(sp)
    dbb0:	dd800815 	stw	r22,32(sp)
    dbb4:	dd400715 	stw	r21,28(sp)
    dbb8:	dd000615 	stw	r20,24(sp)
    dbbc:	dcc00515 	stw	r19,20(sp)
    dbc0:	dc800415 	stw	r18,16(sp)
    dbc4:	2021883a 	mov	r16,r4
    dbc8:	2823883a 	mov	r17,r5
    dbcc:	2839883a 	mov	fp,r5
    dbd0:	38003c1e 	bne	r7,zero,dcc4 <__umoddi3+0x12c>
    dbd4:	3027883a 	mov	r19,r6
    dbd8:	2029883a 	mov	r20,r4
    dbdc:	2980512e 	bgeu	r5,r6,dd24 <__umoddi3+0x18c>
    dbe0:	00bfffd4 	movui	r2,65535
    dbe4:	11809a36 	bltu	r2,r6,de50 <__umoddi3+0x2b8>
    dbe8:	01003fc4 	movi	r4,255
    dbec:	2189803a 	cmpltu	r4,r4,r6
    dbf0:	200890fa 	slli	r4,r4,3
    dbf4:	3104d83a 	srl	r2,r6,r4
    dbf8:	00c000b4 	movhi	r3,2
    dbfc:	18f72904 	addi	r3,r3,-9052
    dc00:	1885883a 	add	r2,r3,r2
    dc04:	10c00003 	ldbu	r3,0(r2)
    dc08:	00800804 	movi	r2,32
    dc0c:	1909883a 	add	r4,r3,r4
    dc10:	1125c83a 	sub	r18,r2,r4
    dc14:	90000526 	beq	r18,zero,dc2c <__umoddi3+0x94>
    dc18:	8ca2983a 	sll	r17,r17,r18
    dc1c:	8108d83a 	srl	r4,r16,r4
    dc20:	34a6983a 	sll	r19,r6,r18
    dc24:	84a8983a 	sll	r20,r16,r18
    dc28:	2478b03a 	or	fp,r4,r17
    dc2c:	982ed43a 	srli	r23,r19,16
    dc30:	e009883a 	mov	r4,fp
    dc34:	9dbfffcc 	andi	r22,r19,65535
    dc38:	b80b883a 	mov	r5,r23
    dc3c:	000e22c0 	call	e22c <__umodsi3>
    dc40:	e009883a 	mov	r4,fp
    dc44:	b80b883a 	mov	r5,r23
    dc48:	102b883a 	mov	r21,r2
    dc4c:	000e1c80 	call	e1c8 <__udivsi3>
    dc50:	a806943a 	slli	r3,r21,16
    dc54:	a008d43a 	srli	r4,r20,16
    dc58:	b085383a 	mul	r2,r22,r2
    dc5c:	20c8b03a 	or	r4,r4,r3
    dc60:	2080032e 	bgeu	r4,r2,dc70 <__umoddi3+0xd8>
    dc64:	24c9883a 	add	r4,r4,r19
    dc68:	24c00136 	bltu	r4,r19,dc70 <__umoddi3+0xd8>
    dc6c:	20811036 	bltu	r4,r2,e0b0 <__umoddi3+0x518>
    dc70:	20abc83a 	sub	r21,r4,r2
    dc74:	b80b883a 	mov	r5,r23
    dc78:	a809883a 	mov	r4,r21
    dc7c:	000e22c0 	call	e22c <__umodsi3>
    dc80:	1023883a 	mov	r17,r2
    dc84:	b80b883a 	mov	r5,r23
    dc88:	a809883a 	mov	r4,r21
    dc8c:	000e1c80 	call	e1c8 <__udivsi3>
    dc90:	8822943a 	slli	r17,r17,16
    dc94:	b085383a 	mul	r2,r22,r2
    dc98:	a0ffffcc 	andi	r3,r20,65535
    dc9c:	1c46b03a 	or	r3,r3,r17
    dca0:	1880042e 	bgeu	r3,r2,dcb4 <__umoddi3+0x11c>
    dca4:	1cc7883a 	add	r3,r3,r19
    dca8:	1cc00236 	bltu	r3,r19,dcb4 <__umoddi3+0x11c>
    dcac:	1880012e 	bgeu	r3,r2,dcb4 <__umoddi3+0x11c>
    dcb0:	1cc7883a 	add	r3,r3,r19
    dcb4:	1885c83a 	sub	r2,r3,r2
    dcb8:	1484d83a 	srl	r2,r2,r18
    dcbc:	0007883a 	mov	r3,zero
    dcc0:	00004f06 	br	de00 <__umoddi3+0x268>
    dcc4:	29c04c36 	bltu	r5,r7,ddf8 <__umoddi3+0x260>
    dcc8:	00bfffd4 	movui	r2,65535
    dccc:	11c0582e 	bgeu	r2,r7,de30 <__umoddi3+0x298>
    dcd0:	00804034 	movhi	r2,256
    dcd4:	10bfffc4 	addi	r2,r2,-1
    dcd8:	11c0e736 	bltu	r2,r7,e078 <__umoddi3+0x4e0>
    dcdc:	01000404 	movi	r4,16
    dce0:	3904d83a 	srl	r2,r7,r4
    dce4:	00c000b4 	movhi	r3,2
    dce8:	18f72904 	addi	r3,r3,-9052
    dcec:	1885883a 	add	r2,r3,r2
    dcf0:	14c00003 	ldbu	r19,0(r2)
    dcf4:	00c00804 	movi	r3,32
    dcf8:	9927883a 	add	r19,r19,r4
    dcfc:	1ce9c83a 	sub	r20,r3,r19
    dd00:	a000581e 	bne	r20,zero,de64 <__umoddi3+0x2cc>
    dd04:	3c400136 	bltu	r7,r17,dd0c <__umoddi3+0x174>
    dd08:	8180eb36 	bltu	r16,r6,e0b8 <__umoddi3+0x520>
    dd0c:	8185c83a 	sub	r2,r16,r6
    dd10:	89e3c83a 	sub	r17,r17,r7
    dd14:	8089803a 	cmpltu	r4,r16,r2
    dd18:	8939c83a 	sub	fp,r17,r4
    dd1c:	e007883a 	mov	r3,fp
    dd20:	00003706 	br	de00 <__umoddi3+0x268>
    dd24:	3000041e 	bne	r6,zero,dd38 <__umoddi3+0x1a0>
    dd28:	000b883a 	mov	r5,zero
    dd2c:	01000044 	movi	r4,1
    dd30:	000e1c80 	call	e1c8 <__udivsi3>
    dd34:	1027883a 	mov	r19,r2
    dd38:	00bfffd4 	movui	r2,65535
    dd3c:	14c0402e 	bgeu	r2,r19,de40 <__umoddi3+0x2a8>
    dd40:	00804034 	movhi	r2,256
    dd44:	10bfffc4 	addi	r2,r2,-1
    dd48:	14c0cd36 	bltu	r2,r19,e080 <__umoddi3+0x4e8>
    dd4c:	00800404 	movi	r2,16
    dd50:	9886d83a 	srl	r3,r19,r2
    dd54:	010000b4 	movhi	r4,2
    dd58:	21372904 	addi	r4,r4,-9052
    dd5c:	20c7883a 	add	r3,r4,r3
    dd60:	18c00003 	ldbu	r3,0(r3)
    dd64:	1887883a 	add	r3,r3,r2
    dd68:	00800804 	movi	r2,32
    dd6c:	10e5c83a 	sub	r18,r2,r3
    dd70:	9000901e 	bne	r18,zero,dfb4 <__umoddi3+0x41c>
    dd74:	982cd43a 	srli	r22,r19,16
    dd78:	8ce3c83a 	sub	r17,r17,r19
    dd7c:	9d7fffcc 	andi	r21,r19,65535
    dd80:	b00b883a 	mov	r5,r22
    dd84:	8809883a 	mov	r4,r17
    dd88:	000e22c0 	call	e22c <__umodsi3>
    dd8c:	8809883a 	mov	r4,r17
    dd90:	b00b883a 	mov	r5,r22
    dd94:	1021883a 	mov	r16,r2
    dd98:	000e1c80 	call	e1c8 <__udivsi3>
    dd9c:	8006943a 	slli	r3,r16,16
    dda0:	a008d43a 	srli	r4,r20,16
    dda4:	1545383a 	mul	r2,r2,r21
    dda8:	20c8b03a 	or	r4,r4,r3
    ddac:	2080042e 	bgeu	r4,r2,ddc0 <__umoddi3+0x228>
    ddb0:	24c9883a 	add	r4,r4,r19
    ddb4:	24c00236 	bltu	r4,r19,ddc0 <__umoddi3+0x228>
    ddb8:	2080012e 	bgeu	r4,r2,ddc0 <__umoddi3+0x228>
    ddbc:	24c9883a 	add	r4,r4,r19
    ddc0:	20a1c83a 	sub	r16,r4,r2
    ddc4:	b00b883a 	mov	r5,r22
    ddc8:	8009883a 	mov	r4,r16
    ddcc:	000e22c0 	call	e22c <__umodsi3>
    ddd0:	1023883a 	mov	r17,r2
    ddd4:	b00b883a 	mov	r5,r22
    ddd8:	8009883a 	mov	r4,r16
    dddc:	000e1c80 	call	e1c8 <__udivsi3>
    dde0:	8822943a 	slli	r17,r17,16
    dde4:	1545383a 	mul	r2,r2,r21
    dde8:	a53fffcc 	andi	r20,r20,65535
    ddec:	a446b03a 	or	r3,r20,r17
    ddf0:	18bfb02e 	bgeu	r3,r2,dcb4 <__umoddi3+0x11c>
    ddf4:	003fab06 	br	dca4 <__umoddi3+0x10c>
    ddf8:	2005883a 	mov	r2,r4
    ddfc:	2807883a 	mov	r3,r5
    de00:	dfc00b17 	ldw	ra,44(sp)
    de04:	df000a17 	ldw	fp,40(sp)
    de08:	ddc00917 	ldw	r23,36(sp)
    de0c:	dd800817 	ldw	r22,32(sp)
    de10:	dd400717 	ldw	r21,28(sp)
    de14:	dd000617 	ldw	r20,24(sp)
    de18:	dcc00517 	ldw	r19,20(sp)
    de1c:	dc800417 	ldw	r18,16(sp)
    de20:	dc400317 	ldw	r17,12(sp)
    de24:	dc000217 	ldw	r16,8(sp)
    de28:	dec00c04 	addi	sp,sp,48
    de2c:	f800283a 	ret
    de30:	04c03fc4 	movi	r19,255
    de34:	99c9803a 	cmpltu	r4,r19,r7
    de38:	200890fa 	slli	r4,r4,3
    de3c:	003fa806 	br	dce0 <__umoddi3+0x148>
    de40:	00803fc4 	movi	r2,255
    de44:	14c5803a 	cmpltu	r2,r2,r19
    de48:	100490fa 	slli	r2,r2,3
    de4c:	003fc006 	br	dd50 <__umoddi3+0x1b8>
    de50:	00804034 	movhi	r2,256
    de54:	10bfffc4 	addi	r2,r2,-1
    de58:	11808b36 	bltu	r2,r6,e088 <__umoddi3+0x4f0>
    de5c:	01000404 	movi	r4,16
    de60:	003f6406 	br	dbf4 <__umoddi3+0x5c>
    de64:	34c4d83a 	srl	r2,r6,r19
    de68:	3d0e983a 	sll	r7,r7,r20
    de6c:	8cf8d83a 	srl	fp,r17,r19
    de70:	8d10983a 	sll	r8,r17,r20
    de74:	38aab03a 	or	r21,r7,r2
    de78:	a82cd43a 	srli	r22,r21,16
    de7c:	84e2d83a 	srl	r17,r16,r19
    de80:	e009883a 	mov	r4,fp
    de84:	b00b883a 	mov	r5,r22
    de88:	8a22b03a 	or	r17,r17,r8
    de8c:	3524983a 	sll	r18,r6,r20
    de90:	000e22c0 	call	e22c <__umodsi3>
    de94:	e009883a 	mov	r4,fp
    de98:	b00b883a 	mov	r5,r22
    de9c:	102f883a 	mov	r23,r2
    dea0:	000e1c80 	call	e1c8 <__udivsi3>
    dea4:	100d883a 	mov	r6,r2
    dea8:	b808943a 	slli	r4,r23,16
    deac:	aa3fffcc 	andi	r8,r21,65535
    deb0:	8804d43a 	srli	r2,r17,16
    deb4:	41af383a 	mul	r23,r8,r6
    deb8:	8520983a 	sll	r16,r16,r20
    debc:	1104b03a 	or	r2,r2,r4
    dec0:	15c0042e 	bgeu	r2,r23,ded4 <__umoddi3+0x33c>
    dec4:	1545883a 	add	r2,r2,r21
    dec8:	30ffffc4 	addi	r3,r6,-1
    decc:	1540742e 	bgeu	r2,r21,e0a0 <__umoddi3+0x508>
    ded0:	180d883a 	mov	r6,r3
    ded4:	15efc83a 	sub	r23,r2,r23
    ded8:	b00b883a 	mov	r5,r22
    dedc:	b809883a 	mov	r4,r23
    dee0:	d9800115 	stw	r6,4(sp)
    dee4:	da000015 	stw	r8,0(sp)
    dee8:	000e22c0 	call	e22c <__umodsi3>
    deec:	b00b883a 	mov	r5,r22
    def0:	b809883a 	mov	r4,r23
    def4:	1039883a 	mov	fp,r2
    def8:	000e1c80 	call	e1c8 <__udivsi3>
    defc:	da000017 	ldw	r8,0(sp)
    df00:	e038943a 	slli	fp,fp,16
    df04:	100b883a 	mov	r5,r2
    df08:	4089383a 	mul	r4,r8,r2
    df0c:	8a3fffcc 	andi	r8,r17,65535
    df10:	4710b03a 	or	r8,r8,fp
    df14:	d9800117 	ldw	r6,4(sp)
    df18:	4100042e 	bgeu	r8,r4,df2c <__umoddi3+0x394>
    df1c:	4551883a 	add	r8,r8,r21
    df20:	10bfffc4 	addi	r2,r2,-1
    df24:	45405a2e 	bgeu	r8,r21,e090 <__umoddi3+0x4f8>
    df28:	100b883a 	mov	r5,r2
    df2c:	300c943a 	slli	r6,r6,16
    df30:	91ffffcc 	andi	r7,r18,65535
    df34:	9004d43a 	srli	r2,r18,16
    df38:	314cb03a 	or	r6,r6,r5
    df3c:	317fffcc 	andi	r5,r6,65535
    df40:	300cd43a 	srli	r6,r6,16
    df44:	29d3383a 	mul	r9,r5,r7
    df48:	288b383a 	mul	r5,r5,r2
    df4c:	31cf383a 	mul	r7,r6,r7
    df50:	4806d43a 	srli	r3,r9,16
    df54:	4111c83a 	sub	r8,r8,r4
    df58:	29cb883a 	add	r5,r5,r7
    df5c:	194b883a 	add	r5,r3,r5
    df60:	3085383a 	mul	r2,r6,r2
    df64:	29c0022e 	bgeu	r5,r7,df70 <__umoddi3+0x3d8>
    df68:	00c00074 	movhi	r3,1
    df6c:	10c5883a 	add	r2,r2,r3
    df70:	2808d43a 	srli	r4,r5,16
    df74:	280a943a 	slli	r5,r5,16
    df78:	4a7fffcc 	andi	r9,r9,65535
    df7c:	2085883a 	add	r2,r4,r2
    df80:	2a4b883a 	add	r5,r5,r9
    df84:	40803636 	bltu	r8,r2,e060 <__umoddi3+0x4c8>
    df88:	40804d26 	beq	r8,r2,e0c0 <__umoddi3+0x528>
    df8c:	4089c83a 	sub	r4,r8,r2
    df90:	280f883a 	mov	r7,r5
    df94:	81cfc83a 	sub	r7,r16,r7
    df98:	81c7803a 	cmpltu	r3,r16,r7
    df9c:	20c7c83a 	sub	r3,r4,r3
    dfa0:	1cc4983a 	sll	r2,r3,r19
    dfa4:	3d0ed83a 	srl	r7,r7,r20
    dfa8:	1d06d83a 	srl	r3,r3,r20
    dfac:	11c4b03a 	or	r2,r2,r7
    dfb0:	003f9306 	br	de00 <__umoddi3+0x268>
    dfb4:	9ca6983a 	sll	r19,r19,r18
    dfb8:	88e8d83a 	srl	r20,r17,r3
    dfbc:	80c4d83a 	srl	r2,r16,r3
    dfc0:	982cd43a 	srli	r22,r19,16
    dfc4:	8ca2983a 	sll	r17,r17,r18
    dfc8:	a009883a 	mov	r4,r20
    dfcc:	b00b883a 	mov	r5,r22
    dfd0:	1478b03a 	or	fp,r2,r17
    dfd4:	000e22c0 	call	e22c <__umodsi3>
    dfd8:	a009883a 	mov	r4,r20
    dfdc:	b00b883a 	mov	r5,r22
    dfe0:	1023883a 	mov	r17,r2
    dfe4:	000e1c80 	call	e1c8 <__udivsi3>
    dfe8:	9d7fffcc 	andi	r21,r19,65535
    dfec:	880a943a 	slli	r5,r17,16
    dff0:	e008d43a 	srli	r4,fp,16
    dff4:	a885383a 	mul	r2,r21,r2
    dff8:	84a8983a 	sll	r20,r16,r18
    dffc:	2148b03a 	or	r4,r4,r5
    e000:	2080042e 	bgeu	r4,r2,e014 <__umoddi3+0x47c>
    e004:	24c9883a 	add	r4,r4,r19
    e008:	24c00236 	bltu	r4,r19,e014 <__umoddi3+0x47c>
    e00c:	2080012e 	bgeu	r4,r2,e014 <__umoddi3+0x47c>
    e010:	24c9883a 	add	r4,r4,r19
    e014:	20a3c83a 	sub	r17,r4,r2
    e018:	b00b883a 	mov	r5,r22
    e01c:	8809883a 	mov	r4,r17
    e020:	000e22c0 	call	e22c <__umodsi3>
    e024:	102f883a 	mov	r23,r2
    e028:	8809883a 	mov	r4,r17
    e02c:	b00b883a 	mov	r5,r22
    e030:	000e1c80 	call	e1c8 <__udivsi3>
    e034:	b82e943a 	slli	r23,r23,16
    e038:	a885383a 	mul	r2,r21,r2
    e03c:	e13fffcc 	andi	r4,fp,65535
    e040:	25c8b03a 	or	r4,r4,r23
    e044:	2080042e 	bgeu	r4,r2,e058 <__umoddi3+0x4c0>
    e048:	24c9883a 	add	r4,r4,r19
    e04c:	24c00236 	bltu	r4,r19,e058 <__umoddi3+0x4c0>
    e050:	2080012e 	bgeu	r4,r2,e058 <__umoddi3+0x4c0>
    e054:	24c9883a 	add	r4,r4,r19
    e058:	20a3c83a 	sub	r17,r4,r2
    e05c:	003f4806 	br	dd80 <__umoddi3+0x1e8>
    e060:	2c8fc83a 	sub	r7,r5,r18
    e064:	1545c83a 	sub	r2,r2,r21
    e068:	29cb803a 	cmpltu	r5,r5,r7
    e06c:	1145c83a 	sub	r2,r2,r5
    e070:	4089c83a 	sub	r4,r8,r2
    e074:	003fc706 	br	df94 <__umoddi3+0x3fc>
    e078:	01000604 	movi	r4,24
    e07c:	003f1806 	br	dce0 <__umoddi3+0x148>
    e080:	00800604 	movi	r2,24
    e084:	003f3206 	br	dd50 <__umoddi3+0x1b8>
    e088:	01000604 	movi	r4,24
    e08c:	003ed906 	br	dbf4 <__umoddi3+0x5c>
    e090:	413fa52e 	bgeu	r8,r4,df28 <__umoddi3+0x390>
    e094:	297fff84 	addi	r5,r5,-2
    e098:	4551883a 	add	r8,r8,r21
    e09c:	003fa306 	br	df2c <__umoddi3+0x394>
    e0a0:	15ff8b2e 	bgeu	r2,r23,ded0 <__umoddi3+0x338>
    e0a4:	31bfff84 	addi	r6,r6,-2
    e0a8:	1545883a 	add	r2,r2,r21
    e0ac:	003f8906 	br	ded4 <__umoddi3+0x33c>
    e0b0:	24c9883a 	add	r4,r4,r19
    e0b4:	003eee06 	br	dc70 <__umoddi3+0xd8>
    e0b8:	8005883a 	mov	r2,r16
    e0bc:	003f1706 	br	dd1c <__umoddi3+0x184>
    e0c0:	817fe736 	bltu	r16,r5,e060 <__umoddi3+0x4c8>
    e0c4:	280f883a 	mov	r7,r5
    e0c8:	0009883a 	mov	r4,zero
    e0cc:	003fb106 	br	df94 <__umoddi3+0x3fc>

0000e0d0 <__divsi3>:
    e0d0:	20001b16 	blt	r4,zero,e140 <__divsi3+0x70>
    e0d4:	000f883a 	mov	r7,zero
    e0d8:	28001616 	blt	r5,zero,e134 <__divsi3+0x64>
    e0dc:	200d883a 	mov	r6,r4
    e0e0:	29001a2e 	bgeu	r5,r4,e14c <__divsi3+0x7c>
    e0e4:	00800804 	movi	r2,32
    e0e8:	00c00044 	movi	r3,1
    e0ec:	00000106 	br	e0f4 <__divsi3+0x24>
    e0f0:	10000d26 	beq	r2,zero,e128 <__divsi3+0x58>
    e0f4:	294b883a 	add	r5,r5,r5
    e0f8:	10bfffc4 	addi	r2,r2,-1
    e0fc:	18c7883a 	add	r3,r3,r3
    e100:	293ffb36 	bltu	r5,r4,e0f0 <__divsi3+0x20>
    e104:	0005883a 	mov	r2,zero
    e108:	18000726 	beq	r3,zero,e128 <__divsi3+0x58>
    e10c:	0005883a 	mov	r2,zero
    e110:	31400236 	bltu	r6,r5,e11c <__divsi3+0x4c>
    e114:	314dc83a 	sub	r6,r6,r5
    e118:	10c4b03a 	or	r2,r2,r3
    e11c:	1806d07a 	srli	r3,r3,1
    e120:	280ad07a 	srli	r5,r5,1
    e124:	183ffa1e 	bne	r3,zero,e110 <__divsi3+0x40>
    e128:	38000126 	beq	r7,zero,e130 <__divsi3+0x60>
    e12c:	0085c83a 	sub	r2,zero,r2
    e130:	f800283a 	ret
    e134:	014bc83a 	sub	r5,zero,r5
    e138:	39c0005c 	xori	r7,r7,1
    e13c:	003fe706 	br	e0dc <__divsi3+0xc>
    e140:	0109c83a 	sub	r4,zero,r4
    e144:	01c00044 	movi	r7,1
    e148:	003fe306 	br	e0d8 <__divsi3+0x8>
    e14c:	00c00044 	movi	r3,1
    e150:	003fee06 	br	e10c <__divsi3+0x3c>

0000e154 <__modsi3>:
    e154:	20001716 	blt	r4,zero,e1b4 <__modsi3+0x60>
    e158:	000f883a 	mov	r7,zero
    e15c:	2005883a 	mov	r2,r4
    e160:	28001216 	blt	r5,zero,e1ac <__modsi3+0x58>
    e164:	2900162e 	bgeu	r5,r4,e1c0 <__modsi3+0x6c>
    e168:	01800804 	movi	r6,32
    e16c:	00c00044 	movi	r3,1
    e170:	00000106 	br	e178 <__modsi3+0x24>
    e174:	30000a26 	beq	r6,zero,e1a0 <__modsi3+0x4c>
    e178:	294b883a 	add	r5,r5,r5
    e17c:	31bfffc4 	addi	r6,r6,-1
    e180:	18c7883a 	add	r3,r3,r3
    e184:	293ffb36 	bltu	r5,r4,e174 <__modsi3+0x20>
    e188:	18000526 	beq	r3,zero,e1a0 <__modsi3+0x4c>
    e18c:	1806d07a 	srli	r3,r3,1
    e190:	11400136 	bltu	r2,r5,e198 <__modsi3+0x44>
    e194:	1145c83a 	sub	r2,r2,r5
    e198:	280ad07a 	srli	r5,r5,1
    e19c:	183ffb1e 	bne	r3,zero,e18c <__modsi3+0x38>
    e1a0:	38000126 	beq	r7,zero,e1a8 <__modsi3+0x54>
    e1a4:	0085c83a 	sub	r2,zero,r2
    e1a8:	f800283a 	ret
    e1ac:	014bc83a 	sub	r5,zero,r5
    e1b0:	003fec06 	br	e164 <__modsi3+0x10>
    e1b4:	0109c83a 	sub	r4,zero,r4
    e1b8:	01c00044 	movi	r7,1
    e1bc:	003fe706 	br	e15c <__modsi3+0x8>
    e1c0:	00c00044 	movi	r3,1
    e1c4:	003ff106 	br	e18c <__modsi3+0x38>

0000e1c8 <__udivsi3>:
    e1c8:	200d883a 	mov	r6,r4
    e1cc:	2900152e 	bgeu	r5,r4,e224 <__udivsi3+0x5c>
    e1d0:	28001416 	blt	r5,zero,e224 <__udivsi3+0x5c>
    e1d4:	00800804 	movi	r2,32
    e1d8:	00c00044 	movi	r3,1
    e1dc:	00000206 	br	e1e8 <__udivsi3+0x20>
    e1e0:	10000e26 	beq	r2,zero,e21c <__udivsi3+0x54>
    e1e4:	28000516 	blt	r5,zero,e1fc <__udivsi3+0x34>
    e1e8:	294b883a 	add	r5,r5,r5
    e1ec:	10bfffc4 	addi	r2,r2,-1
    e1f0:	18c7883a 	add	r3,r3,r3
    e1f4:	293ffa36 	bltu	r5,r4,e1e0 <__udivsi3+0x18>
    e1f8:	18000826 	beq	r3,zero,e21c <__udivsi3+0x54>
    e1fc:	0005883a 	mov	r2,zero
    e200:	31400236 	bltu	r6,r5,e20c <__udivsi3+0x44>
    e204:	314dc83a 	sub	r6,r6,r5
    e208:	10c4b03a 	or	r2,r2,r3
    e20c:	1806d07a 	srli	r3,r3,1
    e210:	280ad07a 	srli	r5,r5,1
    e214:	183ffa1e 	bne	r3,zero,e200 <__udivsi3+0x38>
    e218:	f800283a 	ret
    e21c:	0005883a 	mov	r2,zero
    e220:	f800283a 	ret
    e224:	00c00044 	movi	r3,1
    e228:	003ff406 	br	e1fc <__udivsi3+0x34>

0000e22c <__umodsi3>:
    e22c:	2005883a 	mov	r2,r4
    e230:	2900122e 	bgeu	r5,r4,e27c <__umodsi3+0x50>
    e234:	28001116 	blt	r5,zero,e27c <__umodsi3+0x50>
    e238:	01800804 	movi	r6,32
    e23c:	00c00044 	movi	r3,1
    e240:	00000206 	br	e24c <__umodsi3+0x20>
    e244:	30000c26 	beq	r6,zero,e278 <__umodsi3+0x4c>
    e248:	28000516 	blt	r5,zero,e260 <__umodsi3+0x34>
    e24c:	294b883a 	add	r5,r5,r5
    e250:	31bfffc4 	addi	r6,r6,-1
    e254:	18c7883a 	add	r3,r3,r3
    e258:	293ffa36 	bltu	r5,r4,e244 <__umodsi3+0x18>
    e25c:	18000626 	beq	r3,zero,e278 <__umodsi3+0x4c>
    e260:	1806d07a 	srli	r3,r3,1
    e264:	11400136 	bltu	r2,r5,e26c <__umodsi3+0x40>
    e268:	1145c83a 	sub	r2,r2,r5
    e26c:	280ad07a 	srli	r5,r5,1
    e270:	183ffb1e 	bne	r3,zero,e260 <__umodsi3+0x34>
    e274:	f800283a 	ret
    e278:	f800283a 	ret
    e27c:	00c00044 	movi	r3,1
    e280:	003ff706 	br	e260 <__umodsi3+0x34>

0000e284 <__adddf3>:
    e284:	02c00434 	movhi	r11,16
    e288:	5affffc4 	addi	r11,r11,-1
    e28c:	2806d7fa 	srli	r3,r5,31
    e290:	2ad4703a 	and	r10,r5,r11
    e294:	3ad2703a 	and	r9,r7,r11
    e298:	3804d53a 	srli	r2,r7,20
    e29c:	3018d77a 	srli	r12,r6,29
    e2a0:	280ad53a 	srli	r5,r5,20
    e2a4:	501490fa 	slli	r10,r10,3
    e2a8:	2010d77a 	srli	r8,r4,29
    e2ac:	481290fa 	slli	r9,r9,3
    e2b0:	380ed7fa 	srli	r7,r7,31
    e2b4:	defffb04 	addi	sp,sp,-20
    e2b8:	dc800215 	stw	r18,8(sp)
    e2bc:	dc400115 	stw	r17,4(sp)
    e2c0:	dc000015 	stw	r16,0(sp)
    e2c4:	dfc00415 	stw	ra,16(sp)
    e2c8:	dcc00315 	stw	r19,12(sp)
    e2cc:	1c803fcc 	andi	r18,r3,255
    e2d0:	2c01ffcc 	andi	r16,r5,2047
    e2d4:	5210b03a 	or	r8,r10,r8
    e2d8:	202290fa 	slli	r17,r4,3
    e2dc:	1081ffcc 	andi	r2,r2,2047
    e2e0:	4b12b03a 	or	r9,r9,r12
    e2e4:	300c90fa 	slli	r6,r6,3
    e2e8:	91c07526 	beq	r18,r7,e4c0 <__adddf3+0x23c>
    e2ec:	8087c83a 	sub	r3,r16,r2
    e2f0:	00c0ab0e 	bge	zero,r3,e5a0 <__adddf3+0x31c>
    e2f4:	10002a1e 	bne	r2,zero,e3a0 <__adddf3+0x11c>
    e2f8:	4984b03a 	or	r2,r9,r6
    e2fc:	1000961e 	bne	r2,zero,e558 <__adddf3+0x2d4>
    e300:	888001cc 	andi	r2,r17,7
    e304:	10000726 	beq	r2,zero,e324 <__adddf3+0xa0>
    e308:	888003cc 	andi	r2,r17,15
    e30c:	00c00104 	movi	r3,4
    e310:	10c00426 	beq	r2,r3,e324 <__adddf3+0xa0>
    e314:	88c7883a 	add	r3,r17,r3
    e318:	1c63803a 	cmpltu	r17,r3,r17
    e31c:	4451883a 	add	r8,r8,r17
    e320:	1823883a 	mov	r17,r3
    e324:	4080202c 	andhi	r2,r8,128
    e328:	10005926 	beq	r2,zero,e490 <__adddf3+0x20c>
    e32c:	84000044 	addi	r16,r16,1
    e330:	0081ffc4 	movi	r2,2047
    e334:	8080ba26 	beq	r16,r2,e620 <__adddf3+0x39c>
    e338:	00bfe034 	movhi	r2,65408
    e33c:	10bfffc4 	addi	r2,r2,-1
    e340:	4090703a 	and	r8,r8,r2
    e344:	4004977a 	slli	r2,r8,29
    e348:	4010927a 	slli	r8,r8,9
    e34c:	8822d0fa 	srli	r17,r17,3
    e350:	8401ffcc 	andi	r16,r16,2047
    e354:	4010d33a 	srli	r8,r8,12
    e358:	9007883a 	mov	r3,r18
    e35c:	1444b03a 	or	r2,r2,r17
    e360:	8401ffcc 	andi	r16,r16,2047
    e364:	8020953a 	slli	r16,r16,20
    e368:	18c03fcc 	andi	r3,r3,255
    e36c:	01000434 	movhi	r4,16
    e370:	213fffc4 	addi	r4,r4,-1
    e374:	180697fa 	slli	r3,r3,31
    e378:	4110703a 	and	r8,r8,r4
    e37c:	4410b03a 	or	r8,r8,r16
    e380:	40c6b03a 	or	r3,r8,r3
    e384:	dfc00417 	ldw	ra,16(sp)
    e388:	dcc00317 	ldw	r19,12(sp)
    e38c:	dc800217 	ldw	r18,8(sp)
    e390:	dc400117 	ldw	r17,4(sp)
    e394:	dc000017 	ldw	r16,0(sp)
    e398:	dec00504 	addi	sp,sp,20
    e39c:	f800283a 	ret
    e3a0:	0081ffc4 	movi	r2,2047
    e3a4:	80bfd626 	beq	r16,r2,e300 <__adddf3+0x7c>
    e3a8:	4a402034 	orhi	r9,r9,128
    e3ac:	00800e04 	movi	r2,56
    e3b0:	10c09f16 	blt	r2,r3,e630 <__adddf3+0x3ac>
    e3b4:	008007c4 	movi	r2,31
    e3b8:	10c0c216 	blt	r2,r3,e6c4 <__adddf3+0x440>
    e3bc:	00800804 	movi	r2,32
    e3c0:	10c5c83a 	sub	r2,r2,r3
    e3c4:	488a983a 	sll	r5,r9,r2
    e3c8:	30c8d83a 	srl	r4,r6,r3
    e3cc:	3084983a 	sll	r2,r6,r2
    e3d0:	48c6d83a 	srl	r3,r9,r3
    e3d4:	290cb03a 	or	r6,r5,r4
    e3d8:	1004c03a 	cmpne	r2,r2,zero
    e3dc:	308cb03a 	or	r6,r6,r2
    e3e0:	898dc83a 	sub	r6,r17,r6
    e3e4:	89a3803a 	cmpltu	r17,r17,r6
    e3e8:	40d1c83a 	sub	r8,r8,r3
    e3ec:	4451c83a 	sub	r8,r8,r17
    e3f0:	3023883a 	mov	r17,r6
    e3f4:	4080202c 	andhi	r2,r8,128
    e3f8:	10002326 	beq	r2,zero,e488 <__adddf3+0x204>
    e3fc:	04c02034 	movhi	r19,128
    e400:	9cffffc4 	addi	r19,r19,-1
    e404:	44e6703a 	and	r19,r8,r19
    e408:	98007626 	beq	r19,zero,e5e4 <__adddf3+0x360>
    e40c:	9809883a 	mov	r4,r19
    e410:	00108880 	call	10888 <__clzsi2>
    e414:	10fffe04 	addi	r3,r2,-8
    e418:	010007c4 	movi	r4,31
    e41c:	20c07716 	blt	r4,r3,e5fc <__adddf3+0x378>
    e420:	00800804 	movi	r2,32
    e424:	10c5c83a 	sub	r2,r2,r3
    e428:	8884d83a 	srl	r2,r17,r2
    e42c:	98d0983a 	sll	r8,r19,r3
    e430:	88e2983a 	sll	r17,r17,r3
    e434:	1204b03a 	or	r2,r2,r8
    e438:	1c007416 	blt	r3,r16,e60c <__adddf3+0x388>
    e43c:	1c21c83a 	sub	r16,r3,r16
    e440:	82000044 	addi	r8,r16,1
    e444:	00c007c4 	movi	r3,31
    e448:	1a009116 	blt	r3,r8,e690 <__adddf3+0x40c>
    e44c:	00c00804 	movi	r3,32
    e450:	1a07c83a 	sub	r3,r3,r8
    e454:	8a08d83a 	srl	r4,r17,r8
    e458:	88e2983a 	sll	r17,r17,r3
    e45c:	10c6983a 	sll	r3,r2,r3
    e460:	1210d83a 	srl	r8,r2,r8
    e464:	8804c03a 	cmpne	r2,r17,zero
    e468:	1906b03a 	or	r3,r3,r4
    e46c:	18a2b03a 	or	r17,r3,r2
    e470:	0021883a 	mov	r16,zero
    e474:	003fa206 	br	e300 <__adddf3+0x7c>
    e478:	1890b03a 	or	r8,r3,r2
    e47c:	40017d26 	beq	r8,zero,ea74 <__adddf3+0x7f0>
    e480:	1011883a 	mov	r8,r2
    e484:	1823883a 	mov	r17,r3
    e488:	888001cc 	andi	r2,r17,7
    e48c:	103f9e1e 	bne	r2,zero,e308 <__adddf3+0x84>
    e490:	4004977a 	slli	r2,r8,29
    e494:	8822d0fa 	srli	r17,r17,3
    e498:	4010d0fa 	srli	r8,r8,3
    e49c:	9007883a 	mov	r3,r18
    e4a0:	1444b03a 	or	r2,r2,r17
    e4a4:	0101ffc4 	movi	r4,2047
    e4a8:	81002426 	beq	r16,r4,e53c <__adddf3+0x2b8>
    e4ac:	8120703a 	and	r16,r16,r4
    e4b0:	01000434 	movhi	r4,16
    e4b4:	213fffc4 	addi	r4,r4,-1
    e4b8:	4110703a 	and	r8,r8,r4
    e4bc:	003fa806 	br	e360 <__adddf3+0xdc>
    e4c0:	8089c83a 	sub	r4,r16,r2
    e4c4:	01005e0e 	bge	zero,r4,e640 <__adddf3+0x3bc>
    e4c8:	10002b26 	beq	r2,zero,e578 <__adddf3+0x2f4>
    e4cc:	0081ffc4 	movi	r2,2047
    e4d0:	80bf8b26 	beq	r16,r2,e300 <__adddf3+0x7c>
    e4d4:	4a402034 	orhi	r9,r9,128
    e4d8:	00800e04 	movi	r2,56
    e4dc:	1100a40e 	bge	r2,r4,e770 <__adddf3+0x4ec>
    e4e0:	498cb03a 	or	r6,r9,r6
    e4e4:	300ac03a 	cmpne	r5,r6,zero
    e4e8:	0013883a 	mov	r9,zero
    e4ec:	2c4b883a 	add	r5,r5,r17
    e4f0:	2c63803a 	cmpltu	r17,r5,r17
    e4f4:	4a11883a 	add	r8,r9,r8
    e4f8:	8a11883a 	add	r8,r17,r8
    e4fc:	2823883a 	mov	r17,r5
    e500:	4080202c 	andhi	r2,r8,128
    e504:	103fe026 	beq	r2,zero,e488 <__adddf3+0x204>
    e508:	84000044 	addi	r16,r16,1
    e50c:	0081ffc4 	movi	r2,2047
    e510:	8080d226 	beq	r16,r2,e85c <__adddf3+0x5d8>
    e514:	00bfe034 	movhi	r2,65408
    e518:	10bfffc4 	addi	r2,r2,-1
    e51c:	4090703a 	and	r8,r8,r2
    e520:	880ad07a 	srli	r5,r17,1
    e524:	400897fa 	slli	r4,r8,31
    e528:	88c0004c 	andi	r3,r17,1
    e52c:	28e2b03a 	or	r17,r5,r3
    e530:	4010d07a 	srli	r8,r8,1
    e534:	2462b03a 	or	r17,r4,r17
    e538:	003f7106 	br	e300 <__adddf3+0x7c>
    e53c:	4088b03a 	or	r4,r8,r2
    e540:	20014526 	beq	r4,zero,ea58 <__adddf3+0x7d4>
    e544:	01000434 	movhi	r4,16
    e548:	42000234 	orhi	r8,r8,8
    e54c:	213fffc4 	addi	r4,r4,-1
    e550:	4110703a 	and	r8,r8,r4
    e554:	003f8206 	br	e360 <__adddf3+0xdc>
    e558:	18ffffc4 	addi	r3,r3,-1
    e55c:	1800491e 	bne	r3,zero,e684 <__adddf3+0x400>
    e560:	898bc83a 	sub	r5,r17,r6
    e564:	8963803a 	cmpltu	r17,r17,r5
    e568:	4251c83a 	sub	r8,r8,r9
    e56c:	4451c83a 	sub	r8,r8,r17
    e570:	2823883a 	mov	r17,r5
    e574:	003f9f06 	br	e3f4 <__adddf3+0x170>
    e578:	4984b03a 	or	r2,r9,r6
    e57c:	103f6026 	beq	r2,zero,e300 <__adddf3+0x7c>
    e580:	213fffc4 	addi	r4,r4,-1
    e584:	2000931e 	bne	r4,zero,e7d4 <__adddf3+0x550>
    e588:	898d883a 	add	r6,r17,r6
    e58c:	3463803a 	cmpltu	r17,r6,r17
    e590:	4251883a 	add	r8,r8,r9
    e594:	8a11883a 	add	r8,r17,r8
    e598:	3023883a 	mov	r17,r6
    e59c:	003fd806 	br	e500 <__adddf3+0x27c>
    e5a0:	1800541e 	bne	r3,zero,e6f4 <__adddf3+0x470>
    e5a4:	80800044 	addi	r2,r16,1
    e5a8:	1081ffcc 	andi	r2,r2,2047
    e5ac:	00c00044 	movi	r3,1
    e5b0:	1880a00e 	bge	r3,r2,e834 <__adddf3+0x5b0>
    e5b4:	8989c83a 	sub	r4,r17,r6
    e5b8:	8905803a 	cmpltu	r2,r17,r4
    e5bc:	4267c83a 	sub	r19,r8,r9
    e5c0:	98a7c83a 	sub	r19,r19,r2
    e5c4:	9880202c 	andhi	r2,r19,128
    e5c8:	10006326 	beq	r2,zero,e758 <__adddf3+0x4d4>
    e5cc:	3463c83a 	sub	r17,r6,r17
    e5d0:	4a07c83a 	sub	r3,r9,r8
    e5d4:	344d803a 	cmpltu	r6,r6,r17
    e5d8:	19a7c83a 	sub	r19,r3,r6
    e5dc:	3825883a 	mov	r18,r7
    e5e0:	983f8a1e 	bne	r19,zero,e40c <__adddf3+0x188>
    e5e4:	8809883a 	mov	r4,r17
    e5e8:	00108880 	call	10888 <__clzsi2>
    e5ec:	10800804 	addi	r2,r2,32
    e5f0:	10fffe04 	addi	r3,r2,-8
    e5f4:	010007c4 	movi	r4,31
    e5f8:	20ff890e 	bge	r4,r3,e420 <__adddf3+0x19c>
    e5fc:	10bff604 	addi	r2,r2,-40
    e600:	8884983a 	sll	r2,r17,r2
    e604:	0023883a 	mov	r17,zero
    e608:	1c3f8c0e 	bge	r3,r16,e43c <__adddf3+0x1b8>
    e60c:	023fe034 	movhi	r8,65408
    e610:	423fffc4 	addi	r8,r8,-1
    e614:	80e1c83a 	sub	r16,r16,r3
    e618:	1210703a 	and	r8,r2,r8
    e61c:	003f3806 	br	e300 <__adddf3+0x7c>
    e620:	9007883a 	mov	r3,r18
    e624:	0011883a 	mov	r8,zero
    e628:	0005883a 	mov	r2,zero
    e62c:	003f4c06 	br	e360 <__adddf3+0xdc>
    e630:	498cb03a 	or	r6,r9,r6
    e634:	300cc03a 	cmpne	r6,r6,zero
    e638:	0007883a 	mov	r3,zero
    e63c:	003f6806 	br	e3e0 <__adddf3+0x15c>
    e640:	20009c1e 	bne	r4,zero,e8b4 <__adddf3+0x630>
    e644:	80800044 	addi	r2,r16,1
    e648:	1141ffcc 	andi	r5,r2,2047
    e64c:	01000044 	movi	r4,1
    e650:	2140670e 	bge	r4,r5,e7f0 <__adddf3+0x56c>
    e654:	0101ffc4 	movi	r4,2047
    e658:	11007f26 	beq	r2,r4,e858 <__adddf3+0x5d4>
    e65c:	898d883a 	add	r6,r17,r6
    e660:	4247883a 	add	r3,r8,r9
    e664:	3451803a 	cmpltu	r8,r6,r17
    e668:	40d1883a 	add	r8,r8,r3
    e66c:	402297fa 	slli	r17,r8,31
    e670:	300cd07a 	srli	r6,r6,1
    e674:	4010d07a 	srli	r8,r8,1
    e678:	1021883a 	mov	r16,r2
    e67c:	89a2b03a 	or	r17,r17,r6
    e680:	003f1f06 	br	e300 <__adddf3+0x7c>
    e684:	0081ffc4 	movi	r2,2047
    e688:	80bf481e 	bne	r16,r2,e3ac <__adddf3+0x128>
    e68c:	003f1c06 	br	e300 <__adddf3+0x7c>
    e690:	843ff844 	addi	r16,r16,-31
    e694:	01000804 	movi	r4,32
    e698:	1406d83a 	srl	r3,r2,r16
    e69c:	41005026 	beq	r8,r4,e7e0 <__adddf3+0x55c>
    e6a0:	01001004 	movi	r4,64
    e6a4:	2211c83a 	sub	r8,r4,r8
    e6a8:	1204983a 	sll	r2,r2,r8
    e6ac:	88a2b03a 	or	r17,r17,r2
    e6b0:	8822c03a 	cmpne	r17,r17,zero
    e6b4:	1c62b03a 	or	r17,r3,r17
    e6b8:	0011883a 	mov	r8,zero
    e6bc:	0021883a 	mov	r16,zero
    e6c0:	003f7106 	br	e488 <__adddf3+0x204>
    e6c4:	193ff804 	addi	r4,r3,-32
    e6c8:	00800804 	movi	r2,32
    e6cc:	4908d83a 	srl	r4,r9,r4
    e6d0:	18804526 	beq	r3,r2,e7e8 <__adddf3+0x564>
    e6d4:	00801004 	movi	r2,64
    e6d8:	10c5c83a 	sub	r2,r2,r3
    e6dc:	4886983a 	sll	r3,r9,r2
    e6e0:	198cb03a 	or	r6,r3,r6
    e6e4:	300cc03a 	cmpne	r6,r6,zero
    e6e8:	218cb03a 	or	r6,r4,r6
    e6ec:	0007883a 	mov	r3,zero
    e6f0:	003f3b06 	br	e3e0 <__adddf3+0x15c>
    e6f4:	80002a26 	beq	r16,zero,e7a0 <__adddf3+0x51c>
    e6f8:	0101ffc4 	movi	r4,2047
    e6fc:	11006826 	beq	r2,r4,e8a0 <__adddf3+0x61c>
    e700:	00c7c83a 	sub	r3,zero,r3
    e704:	42002034 	orhi	r8,r8,128
    e708:	01000e04 	movi	r4,56
    e70c:	20c07c16 	blt	r4,r3,e900 <__adddf3+0x67c>
    e710:	010007c4 	movi	r4,31
    e714:	20c0da16 	blt	r4,r3,ea80 <__adddf3+0x7fc>
    e718:	01000804 	movi	r4,32
    e71c:	20c9c83a 	sub	r4,r4,r3
    e720:	4114983a 	sll	r10,r8,r4
    e724:	88cad83a 	srl	r5,r17,r3
    e728:	8908983a 	sll	r4,r17,r4
    e72c:	40c6d83a 	srl	r3,r8,r3
    e730:	5162b03a 	or	r17,r10,r5
    e734:	2008c03a 	cmpne	r4,r4,zero
    e738:	8922b03a 	or	r17,r17,r4
    e73c:	3463c83a 	sub	r17,r6,r17
    e740:	48c7c83a 	sub	r3,r9,r3
    e744:	344d803a 	cmpltu	r6,r6,r17
    e748:	1991c83a 	sub	r8,r3,r6
    e74c:	1021883a 	mov	r16,r2
    e750:	3825883a 	mov	r18,r7
    e754:	003f2706 	br	e3f4 <__adddf3+0x170>
    e758:	24d0b03a 	or	r8,r4,r19
    e75c:	40001b1e 	bne	r8,zero,e7cc <__adddf3+0x548>
    e760:	0005883a 	mov	r2,zero
    e764:	0007883a 	mov	r3,zero
    e768:	0021883a 	mov	r16,zero
    e76c:	003f4d06 	br	e4a4 <__adddf3+0x220>
    e770:	008007c4 	movi	r2,31
    e774:	11003c16 	blt	r2,r4,e868 <__adddf3+0x5e4>
    e778:	00800804 	movi	r2,32
    e77c:	1105c83a 	sub	r2,r2,r4
    e780:	488e983a 	sll	r7,r9,r2
    e784:	310ad83a 	srl	r5,r6,r4
    e788:	3084983a 	sll	r2,r6,r2
    e78c:	4912d83a 	srl	r9,r9,r4
    e790:	394ab03a 	or	r5,r7,r5
    e794:	1004c03a 	cmpne	r2,r2,zero
    e798:	288ab03a 	or	r5,r5,r2
    e79c:	003f5306 	br	e4ec <__adddf3+0x268>
    e7a0:	4448b03a 	or	r4,r8,r17
    e7a4:	20003e26 	beq	r4,zero,e8a0 <__adddf3+0x61c>
    e7a8:	00c6303a 	nor	r3,zero,r3
    e7ac:	18003a1e 	bne	r3,zero,e898 <__adddf3+0x614>
    e7b0:	3463c83a 	sub	r17,r6,r17
    e7b4:	4a07c83a 	sub	r3,r9,r8
    e7b8:	344d803a 	cmpltu	r6,r6,r17
    e7bc:	1991c83a 	sub	r8,r3,r6
    e7c0:	1021883a 	mov	r16,r2
    e7c4:	3825883a 	mov	r18,r7
    e7c8:	003f0a06 	br	e3f4 <__adddf3+0x170>
    e7cc:	2023883a 	mov	r17,r4
    e7d0:	003f0d06 	br	e408 <__adddf3+0x184>
    e7d4:	0081ffc4 	movi	r2,2047
    e7d8:	80bf3f1e 	bne	r16,r2,e4d8 <__adddf3+0x254>
    e7dc:	003ec806 	br	e300 <__adddf3+0x7c>
    e7e0:	0005883a 	mov	r2,zero
    e7e4:	003fb106 	br	e6ac <__adddf3+0x428>
    e7e8:	0007883a 	mov	r3,zero
    e7ec:	003fbc06 	br	e6e0 <__adddf3+0x45c>
    e7f0:	4444b03a 	or	r2,r8,r17
    e7f4:	8000871e 	bne	r16,zero,ea14 <__adddf3+0x790>
    e7f8:	1000ba26 	beq	r2,zero,eae4 <__adddf3+0x860>
    e7fc:	4984b03a 	or	r2,r9,r6
    e800:	103ebf26 	beq	r2,zero,e300 <__adddf3+0x7c>
    e804:	8985883a 	add	r2,r17,r6
    e808:	4247883a 	add	r3,r8,r9
    e80c:	1451803a 	cmpltu	r8,r2,r17
    e810:	40d1883a 	add	r8,r8,r3
    e814:	40c0202c 	andhi	r3,r8,128
    e818:	1023883a 	mov	r17,r2
    e81c:	183f1a26 	beq	r3,zero,e488 <__adddf3+0x204>
    e820:	00bfe034 	movhi	r2,65408
    e824:	10bfffc4 	addi	r2,r2,-1
    e828:	2021883a 	mov	r16,r4
    e82c:	4090703a 	and	r8,r8,r2
    e830:	003eb306 	br	e300 <__adddf3+0x7c>
    e834:	4444b03a 	or	r2,r8,r17
    e838:	8000291e 	bne	r16,zero,e8e0 <__adddf3+0x65c>
    e83c:	10004b1e 	bne	r2,zero,e96c <__adddf3+0x6e8>
    e840:	4990b03a 	or	r8,r9,r6
    e844:	40008b26 	beq	r8,zero,ea74 <__adddf3+0x7f0>
    e848:	4811883a 	mov	r8,r9
    e84c:	3023883a 	mov	r17,r6
    e850:	3825883a 	mov	r18,r7
    e854:	003eaa06 	br	e300 <__adddf3+0x7c>
    e858:	1021883a 	mov	r16,r2
    e85c:	0011883a 	mov	r8,zero
    e860:	0005883a 	mov	r2,zero
    e864:	003f0f06 	br	e4a4 <__adddf3+0x220>
    e868:	217ff804 	addi	r5,r4,-32
    e86c:	00800804 	movi	r2,32
    e870:	494ad83a 	srl	r5,r9,r5
    e874:	20807d26 	beq	r4,r2,ea6c <__adddf3+0x7e8>
    e878:	00801004 	movi	r2,64
    e87c:	1109c83a 	sub	r4,r2,r4
    e880:	4912983a 	sll	r9,r9,r4
    e884:	498cb03a 	or	r6,r9,r6
    e888:	300cc03a 	cmpne	r6,r6,zero
    e88c:	298ab03a 	or	r5,r5,r6
    e890:	0013883a 	mov	r9,zero
    e894:	003f1506 	br	e4ec <__adddf3+0x268>
    e898:	0101ffc4 	movi	r4,2047
    e89c:	113f9a1e 	bne	r2,r4,e708 <__adddf3+0x484>
    e8a0:	4811883a 	mov	r8,r9
    e8a4:	3023883a 	mov	r17,r6
    e8a8:	1021883a 	mov	r16,r2
    e8ac:	3825883a 	mov	r18,r7
    e8b0:	003e9306 	br	e300 <__adddf3+0x7c>
    e8b4:	8000161e 	bne	r16,zero,e910 <__adddf3+0x68c>
    e8b8:	444ab03a 	or	r5,r8,r17
    e8bc:	28005126 	beq	r5,zero,ea04 <__adddf3+0x780>
    e8c0:	0108303a 	nor	r4,zero,r4
    e8c4:	20004d1e 	bne	r4,zero,e9fc <__adddf3+0x778>
    e8c8:	89a3883a 	add	r17,r17,r6
    e8cc:	4253883a 	add	r9,r8,r9
    e8d0:	898d803a 	cmpltu	r6,r17,r6
    e8d4:	3251883a 	add	r8,r6,r9
    e8d8:	1021883a 	mov	r16,r2
    e8dc:	003f0806 	br	e500 <__adddf3+0x27c>
    e8e0:	1000301e 	bne	r2,zero,e9a4 <__adddf3+0x720>
    e8e4:	4984b03a 	or	r2,r9,r6
    e8e8:	10007126 	beq	r2,zero,eab0 <__adddf3+0x82c>
    e8ec:	4811883a 	mov	r8,r9
    e8f0:	3023883a 	mov	r17,r6
    e8f4:	3825883a 	mov	r18,r7
    e8f8:	0401ffc4 	movi	r16,2047
    e8fc:	003e8006 	br	e300 <__adddf3+0x7c>
    e900:	4462b03a 	or	r17,r8,r17
    e904:	8822c03a 	cmpne	r17,r17,zero
    e908:	0007883a 	mov	r3,zero
    e90c:	003f8b06 	br	e73c <__adddf3+0x4b8>
    e910:	0141ffc4 	movi	r5,2047
    e914:	11403b26 	beq	r2,r5,ea04 <__adddf3+0x780>
    e918:	0109c83a 	sub	r4,zero,r4
    e91c:	42002034 	orhi	r8,r8,128
    e920:	01400e04 	movi	r5,56
    e924:	29006716 	blt	r5,r4,eac4 <__adddf3+0x840>
    e928:	014007c4 	movi	r5,31
    e92c:	29007016 	blt	r5,r4,eaf0 <__adddf3+0x86c>
    e930:	01400804 	movi	r5,32
    e934:	290bc83a 	sub	r5,r5,r4
    e938:	4154983a 	sll	r10,r8,r5
    e93c:	890ed83a 	srl	r7,r17,r4
    e940:	894a983a 	sll	r5,r17,r5
    e944:	4108d83a 	srl	r4,r8,r4
    e948:	51e2b03a 	or	r17,r10,r7
    e94c:	280ac03a 	cmpne	r5,r5,zero
    e950:	8962b03a 	or	r17,r17,r5
    e954:	89a3883a 	add	r17,r17,r6
    e958:	2253883a 	add	r9,r4,r9
    e95c:	898d803a 	cmpltu	r6,r17,r6
    e960:	3251883a 	add	r8,r6,r9
    e964:	1021883a 	mov	r16,r2
    e968:	003ee506 	br	e500 <__adddf3+0x27c>
    e96c:	4984b03a 	or	r2,r9,r6
    e970:	103e6326 	beq	r2,zero,e300 <__adddf3+0x7c>
    e974:	8987c83a 	sub	r3,r17,r6
    e978:	88c9803a 	cmpltu	r4,r17,r3
    e97c:	4245c83a 	sub	r2,r8,r9
    e980:	1105c83a 	sub	r2,r2,r4
    e984:	1100202c 	andhi	r4,r2,128
    e988:	203ebb26 	beq	r4,zero,e478 <__adddf3+0x1f4>
    e98c:	3463c83a 	sub	r17,r6,r17
    e990:	4a07c83a 	sub	r3,r9,r8
    e994:	344d803a 	cmpltu	r6,r6,r17
    e998:	1991c83a 	sub	r8,r3,r6
    e99c:	3825883a 	mov	r18,r7
    e9a0:	003e5706 	br	e300 <__adddf3+0x7c>
    e9a4:	4984b03a 	or	r2,r9,r6
    e9a8:	10002e26 	beq	r2,zero,ea64 <__adddf3+0x7e0>
    e9ac:	4004d0fa 	srli	r2,r8,3
    e9b0:	8822d0fa 	srli	r17,r17,3
    e9b4:	4010977a 	slli	r8,r8,29
    e9b8:	10c0022c 	andhi	r3,r2,8
    e9bc:	4462b03a 	or	r17,r8,r17
    e9c0:	18000826 	beq	r3,zero,e9e4 <__adddf3+0x760>
    e9c4:	4808d0fa 	srli	r4,r9,3
    e9c8:	20c0022c 	andhi	r3,r4,8
    e9cc:	1800051e 	bne	r3,zero,e9e4 <__adddf3+0x760>
    e9d0:	300cd0fa 	srli	r6,r6,3
    e9d4:	4806977a 	slli	r3,r9,29
    e9d8:	2005883a 	mov	r2,r4
    e9dc:	3825883a 	mov	r18,r7
    e9e0:	19a2b03a 	or	r17,r3,r6
    e9e4:	8810d77a 	srli	r8,r17,29
    e9e8:	100490fa 	slli	r2,r2,3
    e9ec:	882290fa 	slli	r17,r17,3
    e9f0:	0401ffc4 	movi	r16,2047
    e9f4:	4090b03a 	or	r8,r8,r2
    e9f8:	003e4106 	br	e300 <__adddf3+0x7c>
    e9fc:	0141ffc4 	movi	r5,2047
    ea00:	117fc71e 	bne	r2,r5,e920 <__adddf3+0x69c>
    ea04:	4811883a 	mov	r8,r9
    ea08:	3023883a 	mov	r17,r6
    ea0c:	1021883a 	mov	r16,r2
    ea10:	003e3b06 	br	e300 <__adddf3+0x7c>
    ea14:	10002f26 	beq	r2,zero,ead4 <__adddf3+0x850>
    ea18:	4984b03a 	or	r2,r9,r6
    ea1c:	10001126 	beq	r2,zero,ea64 <__adddf3+0x7e0>
    ea20:	4004d0fa 	srli	r2,r8,3
    ea24:	8822d0fa 	srli	r17,r17,3
    ea28:	4010977a 	slli	r8,r8,29
    ea2c:	10c0022c 	andhi	r3,r2,8
    ea30:	4462b03a 	or	r17,r8,r17
    ea34:	183feb26 	beq	r3,zero,e9e4 <__adddf3+0x760>
    ea38:	4808d0fa 	srli	r4,r9,3
    ea3c:	20c0022c 	andhi	r3,r4,8
    ea40:	183fe81e 	bne	r3,zero,e9e4 <__adddf3+0x760>
    ea44:	300cd0fa 	srli	r6,r6,3
    ea48:	4806977a 	slli	r3,r9,29
    ea4c:	2005883a 	mov	r2,r4
    ea50:	19a2b03a 	or	r17,r3,r6
    ea54:	003fe306 	br	e9e4 <__adddf3+0x760>
    ea58:	0011883a 	mov	r8,zero
    ea5c:	0005883a 	mov	r2,zero
    ea60:	003e3f06 	br	e360 <__adddf3+0xdc>
    ea64:	0401ffc4 	movi	r16,2047
    ea68:	003e2506 	br	e300 <__adddf3+0x7c>
    ea6c:	0013883a 	mov	r9,zero
    ea70:	003f8406 	br	e884 <__adddf3+0x600>
    ea74:	0005883a 	mov	r2,zero
    ea78:	0007883a 	mov	r3,zero
    ea7c:	003e8906 	br	e4a4 <__adddf3+0x220>
    ea80:	197ff804 	addi	r5,r3,-32
    ea84:	01000804 	movi	r4,32
    ea88:	414ad83a 	srl	r5,r8,r5
    ea8c:	19002426 	beq	r3,r4,eb20 <__adddf3+0x89c>
    ea90:	01001004 	movi	r4,64
    ea94:	20c7c83a 	sub	r3,r4,r3
    ea98:	40c6983a 	sll	r3,r8,r3
    ea9c:	1c46b03a 	or	r3,r3,r17
    eaa0:	1806c03a 	cmpne	r3,r3,zero
    eaa4:	28e2b03a 	or	r17,r5,r3
    eaa8:	0007883a 	mov	r3,zero
    eaac:	003f2306 	br	e73c <__adddf3+0x4b8>
    eab0:	0007883a 	mov	r3,zero
    eab4:	5811883a 	mov	r8,r11
    eab8:	00bfffc4 	movi	r2,-1
    eabc:	0401ffc4 	movi	r16,2047
    eac0:	003e7806 	br	e4a4 <__adddf3+0x220>
    eac4:	4462b03a 	or	r17,r8,r17
    eac8:	8822c03a 	cmpne	r17,r17,zero
    eacc:	0009883a 	mov	r4,zero
    ead0:	003fa006 	br	e954 <__adddf3+0x6d0>
    ead4:	4811883a 	mov	r8,r9
    ead8:	3023883a 	mov	r17,r6
    eadc:	0401ffc4 	movi	r16,2047
    eae0:	003e0706 	br	e300 <__adddf3+0x7c>
    eae4:	4811883a 	mov	r8,r9
    eae8:	3023883a 	mov	r17,r6
    eaec:	003e0406 	br	e300 <__adddf3+0x7c>
    eaf0:	21fff804 	addi	r7,r4,-32
    eaf4:	01400804 	movi	r5,32
    eaf8:	41ced83a 	srl	r7,r8,r7
    eafc:	21400a26 	beq	r4,r5,eb28 <__adddf3+0x8a4>
    eb00:	01401004 	movi	r5,64
    eb04:	2909c83a 	sub	r4,r5,r4
    eb08:	4108983a 	sll	r4,r8,r4
    eb0c:	2448b03a 	or	r4,r4,r17
    eb10:	2008c03a 	cmpne	r4,r4,zero
    eb14:	3922b03a 	or	r17,r7,r4
    eb18:	0009883a 	mov	r4,zero
    eb1c:	003f8d06 	br	e954 <__adddf3+0x6d0>
    eb20:	0007883a 	mov	r3,zero
    eb24:	003fdd06 	br	ea9c <__adddf3+0x818>
    eb28:	0009883a 	mov	r4,zero
    eb2c:	003ff706 	br	eb0c <__adddf3+0x888>

0000eb30 <__divdf3>:
    eb30:	defff204 	addi	sp,sp,-56
    eb34:	dd400915 	stw	r21,36(sp)
    eb38:	282ad53a 	srli	r21,r5,20
    eb3c:	dd000815 	stw	r20,32(sp)
    eb40:	2828d7fa 	srli	r20,r5,31
    eb44:	dc000415 	stw	r16,16(sp)
    eb48:	04000434 	movhi	r16,16
    eb4c:	df000c15 	stw	fp,48(sp)
    eb50:	843fffc4 	addi	r16,r16,-1
    eb54:	dfc00d15 	stw	ra,52(sp)
    eb58:	ddc00b15 	stw	r23,44(sp)
    eb5c:	dd800a15 	stw	r22,40(sp)
    eb60:	dcc00715 	stw	r19,28(sp)
    eb64:	dc800615 	stw	r18,24(sp)
    eb68:	dc400515 	stw	r17,20(sp)
    eb6c:	ad41ffcc 	andi	r21,r21,2047
    eb70:	2c20703a 	and	r16,r5,r16
    eb74:	a7003fcc 	andi	fp,r20,255
    eb78:	a8006126 	beq	r21,zero,ed00 <__divdf3+0x1d0>
    eb7c:	0081ffc4 	movi	r2,2047
    eb80:	2025883a 	mov	r18,r4
    eb84:	a8803726 	beq	r21,r2,ec64 <__divdf3+0x134>
    eb88:	80800434 	orhi	r2,r16,16
    eb8c:	100490fa 	slli	r2,r2,3
    eb90:	2020d77a 	srli	r16,r4,29
    eb94:	202490fa 	slli	r18,r4,3
    eb98:	ad7f0044 	addi	r21,r21,-1023
    eb9c:	80a0b03a 	or	r16,r16,r2
    eba0:	0027883a 	mov	r19,zero
    eba4:	0013883a 	mov	r9,zero
    eba8:	3804d53a 	srli	r2,r7,20
    ebac:	382cd7fa 	srli	r22,r7,31
    ebb0:	04400434 	movhi	r17,16
    ebb4:	8c7fffc4 	addi	r17,r17,-1
    ebb8:	1081ffcc 	andi	r2,r2,2047
    ebbc:	3011883a 	mov	r8,r6
    ebc0:	3c62703a 	and	r17,r7,r17
    ebc4:	b5c03fcc 	andi	r23,r22,255
    ebc8:	10006c26 	beq	r2,zero,ed7c <__divdf3+0x24c>
    ebcc:	00c1ffc4 	movi	r3,2047
    ebd0:	10c06426 	beq	r2,r3,ed64 <__divdf3+0x234>
    ebd4:	88c00434 	orhi	r3,r17,16
    ebd8:	180690fa 	slli	r3,r3,3
    ebdc:	3022d77a 	srli	r17,r6,29
    ebe0:	301090fa 	slli	r8,r6,3
    ebe4:	10bf0044 	addi	r2,r2,-1023
    ebe8:	88e2b03a 	or	r17,r17,r3
    ebec:	000f883a 	mov	r7,zero
    ebf0:	a58cf03a 	xor	r6,r20,r22
    ebf4:	3cc8b03a 	or	r4,r7,r19
    ebf8:	a8abc83a 	sub	r21,r21,r2
    ebfc:	008003c4 	movi	r2,15
    ec00:	3007883a 	mov	r3,r6
    ec04:	34c03fcc 	andi	r19,r6,255
    ec08:	11009036 	bltu	r2,r4,ee4c <__divdf3+0x31c>
    ec0c:	200890ba 	slli	r4,r4,2
    ec10:	00800074 	movhi	r2,1
    ec14:	10bb0904 	addi	r2,r2,-5084
    ec18:	2089883a 	add	r4,r4,r2
    ec1c:	20800017 	ldw	r2,0(r4)
    ec20:	1000683a 	jmp	r2
    ec24:	0000ee4c 	andi	zero,zero,953
    ec28:	0000ec9c 	xori	zero,zero,946
    ec2c:	0000ee3c 	xorhi	zero,zero,952
    ec30:	0000ec90 	cmplti	zero,zero,946
    ec34:	0000ee3c 	xorhi	zero,zero,952
    ec38:	0000ee10 	cmplti	zero,zero,952
    ec3c:	0000ee3c 	xorhi	zero,zero,952
    ec40:	0000ec90 	cmplti	zero,zero,946
    ec44:	0000ec9c 	xori	zero,zero,946
    ec48:	0000ec9c 	xori	zero,zero,946
    ec4c:	0000ee10 	cmplti	zero,zero,952
    ec50:	0000ec90 	cmplti	zero,zero,946
    ec54:	0000ec80 	call	ec8 <___svfprintf_internal_r+0x308>
    ec58:	0000ec80 	call	ec8 <___svfprintf_internal_r+0x308>
    ec5c:	0000ec80 	call	ec8 <___svfprintf_internal_r+0x308>
    ec60:	0000f130 	cmpltui	zero,zero,964
    ec64:	2404b03a 	or	r2,r4,r16
    ec68:	1000661e 	bne	r2,zero,ee04 <__divdf3+0x2d4>
    ec6c:	04c00204 	movi	r19,8
    ec70:	0021883a 	mov	r16,zero
    ec74:	0025883a 	mov	r18,zero
    ec78:	02400084 	movi	r9,2
    ec7c:	003fca06 	br	eba8 <__divdf3+0x78>
    ec80:	8023883a 	mov	r17,r16
    ec84:	9011883a 	mov	r8,r18
    ec88:	e02f883a 	mov	r23,fp
    ec8c:	480f883a 	mov	r7,r9
    ec90:	00800084 	movi	r2,2
    ec94:	3881311e 	bne	r7,r2,f15c <__divdf3+0x62c>
    ec98:	b827883a 	mov	r19,r23
    ec9c:	98c0004c 	andi	r3,r19,1
    eca0:	0081ffc4 	movi	r2,2047
    eca4:	000b883a 	mov	r5,zero
    eca8:	0025883a 	mov	r18,zero
    ecac:	1004953a 	slli	r2,r2,20
    ecb0:	18c03fcc 	andi	r3,r3,255
    ecb4:	04400434 	movhi	r17,16
    ecb8:	8c7fffc4 	addi	r17,r17,-1
    ecbc:	180697fa 	slli	r3,r3,31
    ecc0:	2c4a703a 	and	r5,r5,r17
    ecc4:	288ab03a 	or	r5,r5,r2
    ecc8:	28c6b03a 	or	r3,r5,r3
    eccc:	9005883a 	mov	r2,r18
    ecd0:	dfc00d17 	ldw	ra,52(sp)
    ecd4:	df000c17 	ldw	fp,48(sp)
    ecd8:	ddc00b17 	ldw	r23,44(sp)
    ecdc:	dd800a17 	ldw	r22,40(sp)
    ece0:	dd400917 	ldw	r21,36(sp)
    ece4:	dd000817 	ldw	r20,32(sp)
    ece8:	dcc00717 	ldw	r19,28(sp)
    ecec:	dc800617 	ldw	r18,24(sp)
    ecf0:	dc400517 	ldw	r17,20(sp)
    ecf4:	dc000417 	ldw	r16,16(sp)
    ecf8:	dec00e04 	addi	sp,sp,56
    ecfc:	f800283a 	ret
    ed00:	2404b03a 	or	r2,r4,r16
    ed04:	2027883a 	mov	r19,r4
    ed08:	10003926 	beq	r2,zero,edf0 <__divdf3+0x2c0>
    ed0c:	80012e26 	beq	r16,zero,f1c8 <__divdf3+0x698>
    ed10:	8009883a 	mov	r4,r16
    ed14:	d9800315 	stw	r6,12(sp)
    ed18:	d9c00215 	stw	r7,8(sp)
    ed1c:	00108880 	call	10888 <__clzsi2>
    ed20:	d9800317 	ldw	r6,12(sp)
    ed24:	d9c00217 	ldw	r7,8(sp)
    ed28:	113ffd44 	addi	r4,r2,-11
    ed2c:	00c00704 	movi	r3,28
    ed30:	19012116 	blt	r3,r4,f1b8 <__divdf3+0x688>
    ed34:	00c00744 	movi	r3,29
    ed38:	147ffe04 	addi	r17,r2,-8
    ed3c:	1907c83a 	sub	r3,r3,r4
    ed40:	8460983a 	sll	r16,r16,r17
    ed44:	98c6d83a 	srl	r3,r19,r3
    ed48:	9c64983a 	sll	r18,r19,r17
    ed4c:	1c20b03a 	or	r16,r3,r16
    ed50:	1080fcc4 	addi	r2,r2,1011
    ed54:	00abc83a 	sub	r21,zero,r2
    ed58:	0027883a 	mov	r19,zero
    ed5c:	0013883a 	mov	r9,zero
    ed60:	003f9106 	br	eba8 <__divdf3+0x78>
    ed64:	3446b03a 	or	r3,r6,r17
    ed68:	18001f1e 	bne	r3,zero,ede8 <__divdf3+0x2b8>
    ed6c:	0023883a 	mov	r17,zero
    ed70:	0011883a 	mov	r8,zero
    ed74:	01c00084 	movi	r7,2
    ed78:	003f9d06 	br	ebf0 <__divdf3+0xc0>
    ed7c:	3446b03a 	or	r3,r6,r17
    ed80:	18001526 	beq	r3,zero,edd8 <__divdf3+0x2a8>
    ed84:	88011b26 	beq	r17,zero,f1f4 <__divdf3+0x6c4>
    ed88:	8809883a 	mov	r4,r17
    ed8c:	d9800315 	stw	r6,12(sp)
    ed90:	da400115 	stw	r9,4(sp)
    ed94:	00108880 	call	10888 <__clzsi2>
    ed98:	d9800317 	ldw	r6,12(sp)
    ed9c:	da400117 	ldw	r9,4(sp)
    eda0:	113ffd44 	addi	r4,r2,-11
    eda4:	00c00704 	movi	r3,28
    eda8:	19010e16 	blt	r3,r4,f1e4 <__divdf3+0x6b4>
    edac:	00c00744 	movi	r3,29
    edb0:	123ffe04 	addi	r8,r2,-8
    edb4:	1907c83a 	sub	r3,r3,r4
    edb8:	8a22983a 	sll	r17,r17,r8
    edbc:	30c6d83a 	srl	r3,r6,r3
    edc0:	3210983a 	sll	r8,r6,r8
    edc4:	1c62b03a 	or	r17,r3,r17
    edc8:	1080fcc4 	addi	r2,r2,1011
    edcc:	0085c83a 	sub	r2,zero,r2
    edd0:	000f883a 	mov	r7,zero
    edd4:	003f8606 	br	ebf0 <__divdf3+0xc0>
    edd8:	0023883a 	mov	r17,zero
    eddc:	0011883a 	mov	r8,zero
    ede0:	01c00044 	movi	r7,1
    ede4:	003f8206 	br	ebf0 <__divdf3+0xc0>
    ede8:	01c000c4 	movi	r7,3
    edec:	003f8006 	br	ebf0 <__divdf3+0xc0>
    edf0:	04c00104 	movi	r19,4
    edf4:	0021883a 	mov	r16,zero
    edf8:	0025883a 	mov	r18,zero
    edfc:	02400044 	movi	r9,1
    ee00:	003f6906 	br	eba8 <__divdf3+0x78>
    ee04:	04c00304 	movi	r19,12
    ee08:	024000c4 	movi	r9,3
    ee0c:	003f6606 	br	eba8 <__divdf3+0x78>
    ee10:	01400434 	movhi	r5,16
    ee14:	0007883a 	mov	r3,zero
    ee18:	297fffc4 	addi	r5,r5,-1
    ee1c:	04bfffc4 	movi	r18,-1
    ee20:	0081ffc4 	movi	r2,2047
    ee24:	003fa106 	br	ecac <__divdf3+0x17c>
    ee28:	00c00044 	movi	r3,1
    ee2c:	1887c83a 	sub	r3,r3,r2
    ee30:	01000e04 	movi	r4,56
    ee34:	20c1210e 	bge	r4,r3,f2bc <__divdf3+0x78c>
    ee38:	98c0004c 	andi	r3,r19,1
    ee3c:	0005883a 	mov	r2,zero
    ee40:	000b883a 	mov	r5,zero
    ee44:	0025883a 	mov	r18,zero
    ee48:	003f9806 	br	ecac <__divdf3+0x17c>
    ee4c:	8c00fd36 	bltu	r17,r16,f244 <__divdf3+0x714>
    ee50:	8440fb26 	beq	r16,r17,f240 <__divdf3+0x710>
    ee54:	8007883a 	mov	r3,r16
    ee58:	ad7fffc4 	addi	r21,r21,-1
    ee5c:	0021883a 	mov	r16,zero
    ee60:	4004d63a 	srli	r2,r8,24
    ee64:	8822923a 	slli	r17,r17,8
    ee68:	1809883a 	mov	r4,r3
    ee6c:	402c923a 	slli	r22,r8,8
    ee70:	88b8b03a 	or	fp,r17,r2
    ee74:	e028d43a 	srli	r20,fp,16
    ee78:	d8c00015 	stw	r3,0(sp)
    ee7c:	e5ffffcc 	andi	r23,fp,65535
    ee80:	a00b883a 	mov	r5,r20
    ee84:	000e1c80 	call	e1c8 <__udivsi3>
    ee88:	d8c00017 	ldw	r3,0(sp)
    ee8c:	a00b883a 	mov	r5,r20
    ee90:	d8800315 	stw	r2,12(sp)
    ee94:	1809883a 	mov	r4,r3
    ee98:	000e22c0 	call	e22c <__umodsi3>
    ee9c:	d9800317 	ldw	r6,12(sp)
    eea0:	1006943a 	slli	r3,r2,16
    eea4:	9004d43a 	srli	r2,r18,16
    eea8:	b9a3383a 	mul	r17,r23,r6
    eeac:	10c4b03a 	or	r2,r2,r3
    eeb0:	1440062e 	bgeu	r2,r17,eecc <__divdf3+0x39c>
    eeb4:	1705883a 	add	r2,r2,fp
    eeb8:	30ffffc4 	addi	r3,r6,-1
    eebc:	1700ee36 	bltu	r2,fp,f278 <__divdf3+0x748>
    eec0:	1440ed2e 	bgeu	r2,r17,f278 <__divdf3+0x748>
    eec4:	31bfff84 	addi	r6,r6,-2
    eec8:	1705883a 	add	r2,r2,fp
    eecc:	1463c83a 	sub	r17,r2,r17
    eed0:	a00b883a 	mov	r5,r20
    eed4:	8809883a 	mov	r4,r17
    eed8:	d9800315 	stw	r6,12(sp)
    eedc:	000e1c80 	call	e1c8 <__udivsi3>
    eee0:	a00b883a 	mov	r5,r20
    eee4:	8809883a 	mov	r4,r17
    eee8:	d8800215 	stw	r2,8(sp)
    eeec:	000e22c0 	call	e22c <__umodsi3>
    eef0:	d9c00217 	ldw	r7,8(sp)
    eef4:	1004943a 	slli	r2,r2,16
    eef8:	94bfffcc 	andi	r18,r18,65535
    eefc:	b9d1383a 	mul	r8,r23,r7
    ef00:	90a4b03a 	or	r18,r18,r2
    ef04:	d9800317 	ldw	r6,12(sp)
    ef08:	9200062e 	bgeu	r18,r8,ef24 <__divdf3+0x3f4>
    ef0c:	9725883a 	add	r18,r18,fp
    ef10:	38bfffc4 	addi	r2,r7,-1
    ef14:	9700d636 	bltu	r18,fp,f270 <__divdf3+0x740>
    ef18:	9200d52e 	bgeu	r18,r8,f270 <__divdf3+0x740>
    ef1c:	39ffff84 	addi	r7,r7,-2
    ef20:	9725883a 	add	r18,r18,fp
    ef24:	3004943a 	slli	r2,r6,16
    ef28:	b012d43a 	srli	r9,r22,16
    ef2c:	b1bfffcc 	andi	r6,r22,65535
    ef30:	11e2b03a 	or	r17,r2,r7
    ef34:	8806d43a 	srli	r3,r17,16
    ef38:	893fffcc 	andi	r4,r17,65535
    ef3c:	218b383a 	mul	r5,r4,r6
    ef40:	30c5383a 	mul	r2,r6,r3
    ef44:	2249383a 	mul	r4,r4,r9
    ef48:	280ed43a 	srli	r7,r5,16
    ef4c:	9225c83a 	sub	r18,r18,r8
    ef50:	2089883a 	add	r4,r4,r2
    ef54:	3909883a 	add	r4,r7,r4
    ef58:	1a47383a 	mul	r3,r3,r9
    ef5c:	2080022e 	bgeu	r4,r2,ef68 <__divdf3+0x438>
    ef60:	00800074 	movhi	r2,1
    ef64:	1887883a 	add	r3,r3,r2
    ef68:	2004d43a 	srli	r2,r4,16
    ef6c:	2008943a 	slli	r4,r4,16
    ef70:	297fffcc 	andi	r5,r5,65535
    ef74:	10c7883a 	add	r3,r2,r3
    ef78:	2149883a 	add	r4,r4,r5
    ef7c:	90c0a536 	bltu	r18,r3,f214 <__divdf3+0x6e4>
    ef80:	90c0bf26 	beq	r18,r3,f280 <__divdf3+0x750>
    ef84:	90c7c83a 	sub	r3,r18,r3
    ef88:	810fc83a 	sub	r7,r16,r4
    ef8c:	81e5803a 	cmpltu	r18,r16,r7
    ef90:	1ca5c83a 	sub	r18,r3,r18
    ef94:	e480c126 	beq	fp,r18,f29c <__divdf3+0x76c>
    ef98:	a00b883a 	mov	r5,r20
    ef9c:	9009883a 	mov	r4,r18
    efa0:	d9800315 	stw	r6,12(sp)
    efa4:	d9c00215 	stw	r7,8(sp)
    efa8:	da400115 	stw	r9,4(sp)
    efac:	000e1c80 	call	e1c8 <__udivsi3>
    efb0:	a00b883a 	mov	r5,r20
    efb4:	9009883a 	mov	r4,r18
    efb8:	d8800015 	stw	r2,0(sp)
    efbc:	000e22c0 	call	e22c <__umodsi3>
    efc0:	d9c00217 	ldw	r7,8(sp)
    efc4:	da000017 	ldw	r8,0(sp)
    efc8:	1006943a 	slli	r3,r2,16
    efcc:	3804d43a 	srli	r2,r7,16
    efd0:	ba21383a 	mul	r16,r23,r8
    efd4:	d9800317 	ldw	r6,12(sp)
    efd8:	10c4b03a 	or	r2,r2,r3
    efdc:	da400117 	ldw	r9,4(sp)
    efe0:	1400062e 	bgeu	r2,r16,effc <__divdf3+0x4cc>
    efe4:	1705883a 	add	r2,r2,fp
    efe8:	40ffffc4 	addi	r3,r8,-1
    efec:	1700ad36 	bltu	r2,fp,f2a4 <__divdf3+0x774>
    eff0:	1400ac2e 	bgeu	r2,r16,f2a4 <__divdf3+0x774>
    eff4:	423fff84 	addi	r8,r8,-2
    eff8:	1705883a 	add	r2,r2,fp
    effc:	1421c83a 	sub	r16,r2,r16
    f000:	a00b883a 	mov	r5,r20
    f004:	8009883a 	mov	r4,r16
    f008:	d9800315 	stw	r6,12(sp)
    f00c:	d9c00215 	stw	r7,8(sp)
    f010:	da000015 	stw	r8,0(sp)
    f014:	da400115 	stw	r9,4(sp)
    f018:	000e1c80 	call	e1c8 <__udivsi3>
    f01c:	8009883a 	mov	r4,r16
    f020:	a00b883a 	mov	r5,r20
    f024:	1025883a 	mov	r18,r2
    f028:	000e22c0 	call	e22c <__umodsi3>
    f02c:	d9c00217 	ldw	r7,8(sp)
    f030:	1004943a 	slli	r2,r2,16
    f034:	bcaf383a 	mul	r23,r23,r18
    f038:	393fffcc 	andi	r4,r7,65535
    f03c:	2088b03a 	or	r4,r4,r2
    f040:	d9800317 	ldw	r6,12(sp)
    f044:	da000017 	ldw	r8,0(sp)
    f048:	da400117 	ldw	r9,4(sp)
    f04c:	25c0062e 	bgeu	r4,r23,f068 <__divdf3+0x538>
    f050:	2709883a 	add	r4,r4,fp
    f054:	90bfffc4 	addi	r2,r18,-1
    f058:	27009436 	bltu	r4,fp,f2ac <__divdf3+0x77c>
    f05c:	25c0932e 	bgeu	r4,r23,f2ac <__divdf3+0x77c>
    f060:	94bfff84 	addi	r18,r18,-2
    f064:	2709883a 	add	r4,r4,fp
    f068:	4004943a 	slli	r2,r8,16
    f06c:	25efc83a 	sub	r23,r4,r23
    f070:	1490b03a 	or	r8,r2,r18
    f074:	4008d43a 	srli	r4,r8,16
    f078:	40ffffcc 	andi	r3,r8,65535
    f07c:	30c5383a 	mul	r2,r6,r3
    f080:	1a47383a 	mul	r3,r3,r9
    f084:	310d383a 	mul	r6,r6,r4
    f088:	100ad43a 	srli	r5,r2,16
    f08c:	4913383a 	mul	r9,r9,r4
    f090:	1987883a 	add	r3,r3,r6
    f094:	28c7883a 	add	r3,r5,r3
    f098:	1980022e 	bgeu	r3,r6,f0a4 <__divdf3+0x574>
    f09c:	01000074 	movhi	r4,1
    f0a0:	4913883a 	add	r9,r9,r4
    f0a4:	1808d43a 	srli	r4,r3,16
    f0a8:	1806943a 	slli	r3,r3,16
    f0ac:	10bfffcc 	andi	r2,r2,65535
    f0b0:	2253883a 	add	r9,r4,r9
    f0b4:	1887883a 	add	r3,r3,r2
    f0b8:	ba403836 	bltu	r23,r9,f19c <__divdf3+0x66c>
    f0bc:	ba403626 	beq	r23,r9,f198 <__divdf3+0x668>
    f0c0:	42000054 	ori	r8,r8,1
    f0c4:	a880ffc4 	addi	r2,r21,1023
    f0c8:	00bf570e 	bge	zero,r2,ee28 <__divdf3+0x2f8>
    f0cc:	40c001cc 	andi	r3,r8,7
    f0d0:	18000726 	beq	r3,zero,f0f0 <__divdf3+0x5c0>
    f0d4:	40c003cc 	andi	r3,r8,15
    f0d8:	01000104 	movi	r4,4
    f0dc:	19000426 	beq	r3,r4,f0f0 <__divdf3+0x5c0>
    f0e0:	4107883a 	add	r3,r8,r4
    f0e4:	1a11803a 	cmpltu	r8,r3,r8
    f0e8:	8a23883a 	add	r17,r17,r8
    f0ec:	1811883a 	mov	r8,r3
    f0f0:	88c0402c 	andhi	r3,r17,256
    f0f4:	18000426 	beq	r3,zero,f108 <__divdf3+0x5d8>
    f0f8:	00ffc034 	movhi	r3,65280
    f0fc:	18ffffc4 	addi	r3,r3,-1
    f100:	a8810004 	addi	r2,r21,1024
    f104:	88e2703a 	and	r17,r17,r3
    f108:	00c1ff84 	movi	r3,2046
    f10c:	18bee316 	blt	r3,r2,ec9c <__divdf3+0x16c>
    f110:	8824977a 	slli	r18,r17,29
    f114:	4010d0fa 	srli	r8,r8,3
    f118:	8822927a 	slli	r17,r17,9
    f11c:	1081ffcc 	andi	r2,r2,2047
    f120:	9224b03a 	or	r18,r18,r8
    f124:	880ad33a 	srli	r5,r17,12
    f128:	98c0004c 	andi	r3,r19,1
    f12c:	003edf06 	br	ecac <__divdf3+0x17c>
    f130:	8080022c 	andhi	r2,r16,8
    f134:	10001226 	beq	r2,zero,f180 <__divdf3+0x650>
    f138:	8880022c 	andhi	r2,r17,8
    f13c:	1000101e 	bne	r2,zero,f180 <__divdf3+0x650>
    f140:	00800434 	movhi	r2,16
    f144:	89400234 	orhi	r5,r17,8
    f148:	10bfffc4 	addi	r2,r2,-1
    f14c:	b007883a 	mov	r3,r22
    f150:	288a703a 	and	r5,r5,r2
    f154:	4025883a 	mov	r18,r8
    f158:	003f3106 	br	ee20 <__divdf3+0x2f0>
    f15c:	008000c4 	movi	r2,3
    f160:	3880a626 	beq	r7,r2,f3fc <__divdf3+0x8cc>
    f164:	00800044 	movi	r2,1
    f168:	3880521e 	bne	r7,r2,f2b4 <__divdf3+0x784>
    f16c:	b807883a 	mov	r3,r23
    f170:	0005883a 	mov	r2,zero
    f174:	000b883a 	mov	r5,zero
    f178:	0025883a 	mov	r18,zero
    f17c:	003ecb06 	br	ecac <__divdf3+0x17c>
    f180:	00800434 	movhi	r2,16
    f184:	81400234 	orhi	r5,r16,8
    f188:	10bfffc4 	addi	r2,r2,-1
    f18c:	a007883a 	mov	r3,r20
    f190:	288a703a 	and	r5,r5,r2
    f194:	003f2206 	br	ee20 <__divdf3+0x2f0>
    f198:	183fca26 	beq	r3,zero,f0c4 <__divdf3+0x594>
    f19c:	e5ef883a 	add	r23,fp,r23
    f1a0:	40bfffc4 	addi	r2,r8,-1
    f1a4:	bf00392e 	bgeu	r23,fp,f28c <__divdf3+0x75c>
    f1a8:	1011883a 	mov	r8,r2
    f1ac:	ba7fc41e 	bne	r23,r9,f0c0 <__divdf3+0x590>
    f1b0:	b0ffc31e 	bne	r22,r3,f0c0 <__divdf3+0x590>
    f1b4:	003fc306 	br	f0c4 <__divdf3+0x594>
    f1b8:	143ff604 	addi	r16,r2,-40
    f1bc:	9c20983a 	sll	r16,r19,r16
    f1c0:	0025883a 	mov	r18,zero
    f1c4:	003ee206 	br	ed50 <__divdf3+0x220>
    f1c8:	d9800315 	stw	r6,12(sp)
    f1cc:	d9c00215 	stw	r7,8(sp)
    f1d0:	00108880 	call	10888 <__clzsi2>
    f1d4:	10800804 	addi	r2,r2,32
    f1d8:	d9c00217 	ldw	r7,8(sp)
    f1dc:	d9800317 	ldw	r6,12(sp)
    f1e0:	003ed106 	br	ed28 <__divdf3+0x1f8>
    f1e4:	147ff604 	addi	r17,r2,-40
    f1e8:	3462983a 	sll	r17,r6,r17
    f1ec:	0011883a 	mov	r8,zero
    f1f0:	003ef506 	br	edc8 <__divdf3+0x298>
    f1f4:	3009883a 	mov	r4,r6
    f1f8:	d9800315 	stw	r6,12(sp)
    f1fc:	da400115 	stw	r9,4(sp)
    f200:	00108880 	call	10888 <__clzsi2>
    f204:	10800804 	addi	r2,r2,32
    f208:	da400117 	ldw	r9,4(sp)
    f20c:	d9800317 	ldw	r6,12(sp)
    f210:	003ee306 	br	eda0 <__divdf3+0x270>
    f214:	85a1883a 	add	r16,r16,r22
    f218:	8585803a 	cmpltu	r2,r16,r22
    f21c:	1705883a 	add	r2,r2,fp
    f220:	14a5883a 	add	r18,r2,r18
    f224:	88bfffc4 	addi	r2,r17,-1
    f228:	e4800c2e 	bgeu	fp,r18,f25c <__divdf3+0x72c>
    f22c:	90c03e36 	bltu	r18,r3,f328 <__divdf3+0x7f8>
    f230:	1c806926 	beq	r3,r18,f3d8 <__divdf3+0x8a8>
    f234:	90c7c83a 	sub	r3,r18,r3
    f238:	1023883a 	mov	r17,r2
    f23c:	003f5206 	br	ef88 <__divdf3+0x458>
    f240:	923f0436 	bltu	r18,r8,ee54 <__divdf3+0x324>
    f244:	800897fa 	slli	r4,r16,31
    f248:	9004d07a 	srli	r2,r18,1
    f24c:	8006d07a 	srli	r3,r16,1
    f250:	902097fa 	slli	r16,r18,31
    f254:	20a4b03a 	or	r18,r4,r2
    f258:	003f0106 	br	ee60 <__divdf3+0x330>
    f25c:	e4bff51e 	bne	fp,r18,f234 <__divdf3+0x704>
    f260:	85bff22e 	bgeu	r16,r22,f22c <__divdf3+0x6fc>
    f264:	e0c7c83a 	sub	r3,fp,r3
    f268:	1023883a 	mov	r17,r2
    f26c:	003f4606 	br	ef88 <__divdf3+0x458>
    f270:	100f883a 	mov	r7,r2
    f274:	003f2b06 	br	ef24 <__divdf3+0x3f4>
    f278:	180d883a 	mov	r6,r3
    f27c:	003f1306 	br	eecc <__divdf3+0x39c>
    f280:	813fe436 	bltu	r16,r4,f214 <__divdf3+0x6e4>
    f284:	0007883a 	mov	r3,zero
    f288:	003f3f06 	br	ef88 <__divdf3+0x458>
    f28c:	ba402c36 	bltu	r23,r9,f340 <__divdf3+0x810>
    f290:	4dc05426 	beq	r9,r23,f3e4 <__divdf3+0x8b4>
    f294:	1011883a 	mov	r8,r2
    f298:	003f8906 	br	f0c0 <__divdf3+0x590>
    f29c:	023fffc4 	movi	r8,-1
    f2a0:	003f8806 	br	f0c4 <__divdf3+0x594>
    f2a4:	1811883a 	mov	r8,r3
    f2a8:	003f5406 	br	effc <__divdf3+0x4cc>
    f2ac:	1025883a 	mov	r18,r2
    f2b0:	003f6d06 	br	f068 <__divdf3+0x538>
    f2b4:	b827883a 	mov	r19,r23
    f2b8:	003f8206 	br	f0c4 <__divdf3+0x594>
    f2bc:	010007c4 	movi	r4,31
    f2c0:	20c02616 	blt	r4,r3,f35c <__divdf3+0x82c>
    f2c4:	00800804 	movi	r2,32
    f2c8:	10c5c83a 	sub	r2,r2,r3
    f2cc:	888a983a 	sll	r5,r17,r2
    f2d0:	40c8d83a 	srl	r4,r8,r3
    f2d4:	4084983a 	sll	r2,r8,r2
    f2d8:	88e2d83a 	srl	r17,r17,r3
    f2dc:	2906b03a 	or	r3,r5,r4
    f2e0:	1004c03a 	cmpne	r2,r2,zero
    f2e4:	1886b03a 	or	r3,r3,r2
    f2e8:	188001cc 	andi	r2,r3,7
    f2ec:	10000726 	beq	r2,zero,f30c <__divdf3+0x7dc>
    f2f0:	188003cc 	andi	r2,r3,15
    f2f4:	01000104 	movi	r4,4
    f2f8:	11000426 	beq	r2,r4,f30c <__divdf3+0x7dc>
    f2fc:	1805883a 	mov	r2,r3
    f300:	10c00104 	addi	r3,r2,4
    f304:	1885803a 	cmpltu	r2,r3,r2
    f308:	88a3883a 	add	r17,r17,r2
    f30c:	8880202c 	andhi	r2,r17,128
    f310:	10002726 	beq	r2,zero,f3b0 <__divdf3+0x880>
    f314:	98c0004c 	andi	r3,r19,1
    f318:	00800044 	movi	r2,1
    f31c:	000b883a 	mov	r5,zero
    f320:	0025883a 	mov	r18,zero
    f324:	003e6106 	br	ecac <__divdf3+0x17c>
    f328:	85a1883a 	add	r16,r16,r22
    f32c:	8585803a 	cmpltu	r2,r16,r22
    f330:	1705883a 	add	r2,r2,fp
    f334:	14a5883a 	add	r18,r2,r18
    f338:	8c7fff84 	addi	r17,r17,-2
    f33c:	003f1106 	br	ef84 <__divdf3+0x454>
    f340:	b589883a 	add	r4,r22,r22
    f344:	25ad803a 	cmpltu	r22,r4,r22
    f348:	b739883a 	add	fp,r22,fp
    f34c:	40bfff84 	addi	r2,r8,-2
    f350:	bf2f883a 	add	r23,r23,fp
    f354:	202d883a 	mov	r22,r4
    f358:	003f9306 	br	f1a8 <__divdf3+0x678>
    f35c:	013ff844 	movi	r4,-31
    f360:	2085c83a 	sub	r2,r4,r2
    f364:	8888d83a 	srl	r4,r17,r2
    f368:	00800804 	movi	r2,32
    f36c:	18802126 	beq	r3,r2,f3f4 <__divdf3+0x8c4>
    f370:	00801004 	movi	r2,64
    f374:	10c5c83a 	sub	r2,r2,r3
    f378:	8884983a 	sll	r2,r17,r2
    f37c:	1204b03a 	or	r2,r2,r8
    f380:	1004c03a 	cmpne	r2,r2,zero
    f384:	2084b03a 	or	r2,r4,r2
    f388:	144001cc 	andi	r17,r2,7
    f38c:	88000d1e 	bne	r17,zero,f3c4 <__divdf3+0x894>
    f390:	000b883a 	mov	r5,zero
    f394:	1024d0fa 	srli	r18,r2,3
    f398:	98c0004c 	andi	r3,r19,1
    f39c:	0005883a 	mov	r2,zero
    f3a0:	9464b03a 	or	r18,r18,r17
    f3a4:	003e4106 	br	ecac <__divdf3+0x17c>
    f3a8:	1007883a 	mov	r3,r2
    f3ac:	0023883a 	mov	r17,zero
    f3b0:	880a927a 	slli	r5,r17,9
    f3b4:	1805883a 	mov	r2,r3
    f3b8:	8822977a 	slli	r17,r17,29
    f3bc:	280ad33a 	srli	r5,r5,12
    f3c0:	003ff406 	br	f394 <__divdf3+0x864>
    f3c4:	10c003cc 	andi	r3,r2,15
    f3c8:	01000104 	movi	r4,4
    f3cc:	193ff626 	beq	r3,r4,f3a8 <__divdf3+0x878>
    f3d0:	0023883a 	mov	r17,zero
    f3d4:	003fca06 	br	f300 <__divdf3+0x7d0>
    f3d8:	813fd336 	bltu	r16,r4,f328 <__divdf3+0x7f8>
    f3dc:	1023883a 	mov	r17,r2
    f3e0:	003fa806 	br	f284 <__divdf3+0x754>
    f3e4:	b0ffd636 	bltu	r22,r3,f340 <__divdf3+0x810>
    f3e8:	1011883a 	mov	r8,r2
    f3ec:	b0ff341e 	bne	r22,r3,f0c0 <__divdf3+0x590>
    f3f0:	003f3406 	br	f0c4 <__divdf3+0x594>
    f3f4:	0005883a 	mov	r2,zero
    f3f8:	003fe006 	br	f37c <__divdf3+0x84c>
    f3fc:	00800434 	movhi	r2,16
    f400:	89400234 	orhi	r5,r17,8
    f404:	10bfffc4 	addi	r2,r2,-1
    f408:	b807883a 	mov	r3,r23
    f40c:	288a703a 	and	r5,r5,r2
    f410:	4025883a 	mov	r18,r8
    f414:	003e8206 	br	ee20 <__divdf3+0x2f0>

0000f418 <__eqdf2>:
    f418:	2804d53a 	srli	r2,r5,20
    f41c:	3806d53a 	srli	r3,r7,20
    f420:	02000434 	movhi	r8,16
    f424:	423fffc4 	addi	r8,r8,-1
    f428:	1081ffcc 	andi	r2,r2,2047
    f42c:	0281ffc4 	movi	r10,2047
    f430:	2a12703a 	and	r9,r5,r8
    f434:	18c1ffcc 	andi	r3,r3,2047
    f438:	3a10703a 	and	r8,r7,r8
    f43c:	280ad7fa 	srli	r5,r5,31
    f440:	380ed7fa 	srli	r7,r7,31
    f444:	12801026 	beq	r2,r10,f488 <__eqdf2+0x70>
    f448:	0281ffc4 	movi	r10,2047
    f44c:	1a800a26 	beq	r3,r10,f478 <__eqdf2+0x60>
    f450:	10c00226 	beq	r2,r3,f45c <__eqdf2+0x44>
    f454:	00800044 	movi	r2,1
    f458:	f800283a 	ret
    f45c:	4a3ffd1e 	bne	r9,r8,f454 <__eqdf2+0x3c>
    f460:	21bffc1e 	bne	r4,r6,f454 <__eqdf2+0x3c>
    f464:	29c00c26 	beq	r5,r7,f498 <__eqdf2+0x80>
    f468:	103ffa1e 	bne	r2,zero,f454 <__eqdf2+0x3c>
    f46c:	2244b03a 	or	r2,r4,r9
    f470:	1004c03a 	cmpne	r2,r2,zero
    f474:	f800283a 	ret
    f478:	3214b03a 	or	r10,r6,r8
    f47c:	503ff426 	beq	r10,zero,f450 <__eqdf2+0x38>
    f480:	00800044 	movi	r2,1
    f484:	f800283a 	ret
    f488:	2254b03a 	or	r10,r4,r9
    f48c:	503fee26 	beq	r10,zero,f448 <__eqdf2+0x30>
    f490:	00800044 	movi	r2,1
    f494:	f800283a 	ret
    f498:	0005883a 	mov	r2,zero
    f49c:	f800283a 	ret

0000f4a0 <__gedf2>:
    f4a0:	2804d53a 	srli	r2,r5,20
    f4a4:	3806d53a 	srli	r3,r7,20
    f4a8:	02000434 	movhi	r8,16
    f4ac:	423fffc4 	addi	r8,r8,-1
    f4b0:	1081ffcc 	andi	r2,r2,2047
    f4b4:	0241ffc4 	movi	r9,2047
    f4b8:	2a14703a 	and	r10,r5,r8
    f4bc:	18c1ffcc 	andi	r3,r3,2047
    f4c0:	3a10703a 	and	r8,r7,r8
    f4c4:	280ad7fa 	srli	r5,r5,31
    f4c8:	380ed7fa 	srli	r7,r7,31
    f4cc:	12401d26 	beq	r2,r9,f544 <__gedf2+0xa4>
    f4d0:	0241ffc4 	movi	r9,2047
    f4d4:	1a401226 	beq	r3,r9,f520 <__gedf2+0x80>
    f4d8:	1000081e 	bne	r2,zero,f4fc <__gedf2+0x5c>
    f4dc:	2296b03a 	or	r11,r4,r10
    f4e0:	5813003a 	cmpeq	r9,r11,zero
    f4e4:	1800091e 	bne	r3,zero,f50c <__gedf2+0x6c>
    f4e8:	3218b03a 	or	r12,r6,r8
    f4ec:	6000071e 	bne	r12,zero,f50c <__gedf2+0x6c>
    f4f0:	0005883a 	mov	r2,zero
    f4f4:	5800101e 	bne	r11,zero,f538 <__gedf2+0x98>
    f4f8:	f800283a 	ret
    f4fc:	18000c1e 	bne	r3,zero,f530 <__gedf2+0x90>
    f500:	3212b03a 	or	r9,r6,r8
    f504:	48000c26 	beq	r9,zero,f538 <__gedf2+0x98>
    f508:	0013883a 	mov	r9,zero
    f50c:	39c03fcc 	andi	r7,r7,255
    f510:	48000826 	beq	r9,zero,f534 <__gedf2+0x94>
    f514:	38000926 	beq	r7,zero,f53c <__gedf2+0x9c>
    f518:	00800044 	movi	r2,1
    f51c:	f800283a 	ret
    f520:	3212b03a 	or	r9,r6,r8
    f524:	483fec26 	beq	r9,zero,f4d8 <__gedf2+0x38>
    f528:	00bfff84 	movi	r2,-2
    f52c:	f800283a 	ret
    f530:	39c03fcc 	andi	r7,r7,255
    f534:	29c00626 	beq	r5,r7,f550 <__gedf2+0xb0>
    f538:	283ff726 	beq	r5,zero,f518 <__gedf2+0x78>
    f53c:	00bfffc4 	movi	r2,-1
    f540:	f800283a 	ret
    f544:	2292b03a 	or	r9,r4,r10
    f548:	483fe126 	beq	r9,zero,f4d0 <__gedf2+0x30>
    f54c:	003ff606 	br	f528 <__gedf2+0x88>
    f550:	18bff916 	blt	r3,r2,f538 <__gedf2+0x98>
    f554:	10c00316 	blt	r2,r3,f564 <__gedf2+0xc4>
    f558:	42bff736 	bltu	r8,r10,f538 <__gedf2+0x98>
    f55c:	52000326 	beq	r10,r8,f56c <__gedf2+0xcc>
    f560:	5200042e 	bgeu	r10,r8,f574 <__gedf2+0xd4>
    f564:	283fec1e 	bne	r5,zero,f518 <__gedf2+0x78>
    f568:	003ff406 	br	f53c <__gedf2+0x9c>
    f56c:	313ff236 	bltu	r6,r4,f538 <__gedf2+0x98>
    f570:	21bffc36 	bltu	r4,r6,f564 <__gedf2+0xc4>
    f574:	0005883a 	mov	r2,zero
    f578:	f800283a 	ret

0000f57c <__ledf2>:
    f57c:	2804d53a 	srli	r2,r5,20
    f580:	3810d53a 	srli	r8,r7,20
    f584:	00c00434 	movhi	r3,16
    f588:	18ffffc4 	addi	r3,r3,-1
    f58c:	1081ffcc 	andi	r2,r2,2047
    f590:	0241ffc4 	movi	r9,2047
    f594:	28d4703a 	and	r10,r5,r3
    f598:	4201ffcc 	andi	r8,r8,2047
    f59c:	38c6703a 	and	r3,r7,r3
    f5a0:	280ad7fa 	srli	r5,r5,31
    f5a4:	380ed7fa 	srli	r7,r7,31
    f5a8:	12401f26 	beq	r2,r9,f628 <__ledf2+0xac>
    f5ac:	0241ffc4 	movi	r9,2047
    f5b0:	42401426 	beq	r8,r9,f604 <__ledf2+0x88>
    f5b4:	1000091e 	bne	r2,zero,f5dc <__ledf2+0x60>
    f5b8:	2296b03a 	or	r11,r4,r10
    f5bc:	5813003a 	cmpeq	r9,r11,zero
    f5c0:	29403fcc 	andi	r5,r5,255
    f5c4:	40000a1e 	bne	r8,zero,f5f0 <__ledf2+0x74>
    f5c8:	30d8b03a 	or	r12,r6,r3
    f5cc:	6000081e 	bne	r12,zero,f5f0 <__ledf2+0x74>
    f5d0:	0005883a 	mov	r2,zero
    f5d4:	5800111e 	bne	r11,zero,f61c <__ledf2+0xa0>
    f5d8:	f800283a 	ret
    f5dc:	29403fcc 	andi	r5,r5,255
    f5e0:	40000c1e 	bne	r8,zero,f614 <__ledf2+0x98>
    f5e4:	30d2b03a 	or	r9,r6,r3
    f5e8:	48000c26 	beq	r9,zero,f61c <__ledf2+0xa0>
    f5ec:	0013883a 	mov	r9,zero
    f5f0:	39c03fcc 	andi	r7,r7,255
    f5f4:	48000826 	beq	r9,zero,f618 <__ledf2+0x9c>
    f5f8:	38001126 	beq	r7,zero,f640 <__ledf2+0xc4>
    f5fc:	00800044 	movi	r2,1
    f600:	f800283a 	ret
    f604:	30d2b03a 	or	r9,r6,r3
    f608:	483fea26 	beq	r9,zero,f5b4 <__ledf2+0x38>
    f60c:	00800084 	movi	r2,2
    f610:	f800283a 	ret
    f614:	39c03fcc 	andi	r7,r7,255
    f618:	39400726 	beq	r7,r5,f638 <__ledf2+0xbc>
    f61c:	2800081e 	bne	r5,zero,f640 <__ledf2+0xc4>
    f620:	00800044 	movi	r2,1
    f624:	f800283a 	ret
    f628:	2292b03a 	or	r9,r4,r10
    f62c:	483fdf26 	beq	r9,zero,f5ac <__ledf2+0x30>
    f630:	00800084 	movi	r2,2
    f634:	f800283a 	ret
    f638:	4080030e 	bge	r8,r2,f648 <__ledf2+0xcc>
    f63c:	383fef26 	beq	r7,zero,f5fc <__ledf2+0x80>
    f640:	00bfffc4 	movi	r2,-1
    f644:	f800283a 	ret
    f648:	123feb16 	blt	r2,r8,f5f8 <__ledf2+0x7c>
    f64c:	1abff336 	bltu	r3,r10,f61c <__ledf2+0xa0>
    f650:	50c00326 	beq	r10,r3,f660 <__ledf2+0xe4>
    f654:	50c0042e 	bgeu	r10,r3,f668 <__ledf2+0xec>
    f658:	283fe81e 	bne	r5,zero,f5fc <__ledf2+0x80>
    f65c:	003ff806 	br	f640 <__ledf2+0xc4>
    f660:	313fee36 	bltu	r6,r4,f61c <__ledf2+0xa0>
    f664:	21bffc36 	bltu	r4,r6,f658 <__ledf2+0xdc>
    f668:	0005883a 	mov	r2,zero
    f66c:	f800283a 	ret

0000f670 <__muldf3>:
    f670:	defff304 	addi	sp,sp,-52
    f674:	2804d53a 	srli	r2,r5,20
    f678:	dd800915 	stw	r22,36(sp)
    f67c:	282cd7fa 	srli	r22,r5,31
    f680:	dc000315 	stw	r16,12(sp)
    f684:	04000434 	movhi	r16,16
    f688:	dd400815 	stw	r21,32(sp)
    f68c:	dc800515 	stw	r18,20(sp)
    f690:	843fffc4 	addi	r16,r16,-1
    f694:	dfc00c15 	stw	ra,48(sp)
    f698:	df000b15 	stw	fp,44(sp)
    f69c:	ddc00a15 	stw	r23,40(sp)
    f6a0:	dd000715 	stw	r20,28(sp)
    f6a4:	dcc00615 	stw	r19,24(sp)
    f6a8:	dc400415 	stw	r17,16(sp)
    f6ac:	1481ffcc 	andi	r18,r2,2047
    f6b0:	2c20703a 	and	r16,r5,r16
    f6b4:	b02b883a 	mov	r21,r22
    f6b8:	b2403fcc 	andi	r9,r22,255
    f6bc:	90006026 	beq	r18,zero,f840 <__muldf3+0x1d0>
    f6c0:	0081ffc4 	movi	r2,2047
    f6c4:	2029883a 	mov	r20,r4
    f6c8:	90803626 	beq	r18,r2,f7a4 <__muldf3+0x134>
    f6cc:	80800434 	orhi	r2,r16,16
    f6d0:	100490fa 	slli	r2,r2,3
    f6d4:	2020d77a 	srli	r16,r4,29
    f6d8:	202890fa 	slli	r20,r4,3
    f6dc:	94bf0044 	addi	r18,r18,-1023
    f6e0:	80a0b03a 	or	r16,r16,r2
    f6e4:	0027883a 	mov	r19,zero
    f6e8:	0039883a 	mov	fp,zero
    f6ec:	3804d53a 	srli	r2,r7,20
    f6f0:	382ed7fa 	srli	r23,r7,31
    f6f4:	04400434 	movhi	r17,16
    f6f8:	8c7fffc4 	addi	r17,r17,-1
    f6fc:	1081ffcc 	andi	r2,r2,2047
    f700:	3011883a 	mov	r8,r6
    f704:	3c62703a 	and	r17,r7,r17
    f708:	ba803fcc 	andi	r10,r23,255
    f70c:	10006d26 	beq	r2,zero,f8c4 <__muldf3+0x254>
    f710:	00c1ffc4 	movi	r3,2047
    f714:	10c06526 	beq	r2,r3,f8ac <__muldf3+0x23c>
    f718:	88c00434 	orhi	r3,r17,16
    f71c:	180690fa 	slli	r3,r3,3
    f720:	3022d77a 	srli	r17,r6,29
    f724:	301090fa 	slli	r8,r6,3
    f728:	10bf0044 	addi	r2,r2,-1023
    f72c:	88e2b03a 	or	r17,r17,r3
    f730:	000b883a 	mov	r5,zero
    f734:	9085883a 	add	r2,r18,r2
    f738:	2cc8b03a 	or	r4,r5,r19
    f73c:	00c003c4 	movi	r3,15
    f740:	bdacf03a 	xor	r22,r23,r22
    f744:	12c00044 	addi	r11,r2,1
    f748:	19009936 	bltu	r3,r4,f9b0 <__muldf3+0x340>
    f74c:	200890ba 	slli	r4,r4,2
    f750:	00c00074 	movhi	r3,1
    f754:	18fdd904 	addi	r3,r3,-2204
    f758:	20c9883a 	add	r4,r4,r3
    f75c:	20c00017 	ldw	r3,0(r4)
    f760:	1800683a 	jmp	r3
    f764:	0000f9b0 	cmpltui	zero,zero,998
    f768:	0000f7c4 	movi	zero,991
    f76c:	0000f7c4 	movi	zero,991
    f770:	0000f7c0 	call	f7c <___svfprintf_internal_r+0x3bc>
    f774:	0000f98c 	andi	zero,zero,998
    f778:	0000f98c 	andi	zero,zero,998
    f77c:	0000f974 	movhi	zero,997
    f780:	0000f7c0 	call	f7c <___svfprintf_internal_r+0x3bc>
    f784:	0000f98c 	andi	zero,zero,998
    f788:	0000f974 	movhi	zero,997
    f78c:	0000f98c 	andi	zero,zero,998
    f790:	0000f7c0 	call	f7c <___svfprintf_internal_r+0x3bc>
    f794:	0000f99c 	xori	zero,zero,998
    f798:	0000f99c 	xori	zero,zero,998
    f79c:	0000f99c 	xori	zero,zero,998
    f7a0:	0000fbb8 	rdprs	zero,zero,1006
    f7a4:	2404b03a 	or	r2,r4,r16
    f7a8:	10006f1e 	bne	r2,zero,f968 <__muldf3+0x2f8>
    f7ac:	04c00204 	movi	r19,8
    f7b0:	0021883a 	mov	r16,zero
    f7b4:	0029883a 	mov	r20,zero
    f7b8:	07000084 	movi	fp,2
    f7bc:	003fcb06 	br	f6ec <__muldf3+0x7c>
    f7c0:	502d883a 	mov	r22,r10
    f7c4:	00800084 	movi	r2,2
    f7c8:	28805726 	beq	r5,r2,f928 <__muldf3+0x2b8>
    f7cc:	008000c4 	movi	r2,3
    f7d0:	28816626 	beq	r5,r2,fd6c <__muldf3+0x6fc>
    f7d4:	00800044 	movi	r2,1
    f7d8:	2881411e 	bne	r5,r2,fce0 <__muldf3+0x670>
    f7dc:	b02b883a 	mov	r21,r22
    f7e0:	0005883a 	mov	r2,zero
    f7e4:	000b883a 	mov	r5,zero
    f7e8:	0029883a 	mov	r20,zero
    f7ec:	1004953a 	slli	r2,r2,20
    f7f0:	a8c03fcc 	andi	r3,r21,255
    f7f4:	04400434 	movhi	r17,16
    f7f8:	8c7fffc4 	addi	r17,r17,-1
    f7fc:	180697fa 	slli	r3,r3,31
    f800:	2c4a703a 	and	r5,r5,r17
    f804:	288ab03a 	or	r5,r5,r2
    f808:	28c6b03a 	or	r3,r5,r3
    f80c:	a005883a 	mov	r2,r20
    f810:	dfc00c17 	ldw	ra,48(sp)
    f814:	df000b17 	ldw	fp,44(sp)
    f818:	ddc00a17 	ldw	r23,40(sp)
    f81c:	dd800917 	ldw	r22,36(sp)
    f820:	dd400817 	ldw	r21,32(sp)
    f824:	dd000717 	ldw	r20,28(sp)
    f828:	dcc00617 	ldw	r19,24(sp)
    f82c:	dc800517 	ldw	r18,20(sp)
    f830:	dc400417 	ldw	r17,16(sp)
    f834:	dc000317 	ldw	r16,12(sp)
    f838:	dec00d04 	addi	sp,sp,52
    f83c:	f800283a 	ret
    f840:	2404b03a 	or	r2,r4,r16
    f844:	2027883a 	mov	r19,r4
    f848:	10004226 	beq	r2,zero,f954 <__muldf3+0x2e4>
    f84c:	8000fc26 	beq	r16,zero,fc40 <__muldf3+0x5d0>
    f850:	8009883a 	mov	r4,r16
    f854:	d9800215 	stw	r6,8(sp)
    f858:	d9c00015 	stw	r7,0(sp)
    f85c:	da400115 	stw	r9,4(sp)
    f860:	00108880 	call	10888 <__clzsi2>
    f864:	d9800217 	ldw	r6,8(sp)
    f868:	d9c00017 	ldw	r7,0(sp)
    f86c:	da400117 	ldw	r9,4(sp)
    f870:	113ffd44 	addi	r4,r2,-11
    f874:	00c00704 	movi	r3,28
    f878:	1900ed16 	blt	r3,r4,fc30 <__muldf3+0x5c0>
    f87c:	00c00744 	movi	r3,29
    f880:	147ffe04 	addi	r17,r2,-8
    f884:	1907c83a 	sub	r3,r3,r4
    f888:	8460983a 	sll	r16,r16,r17
    f88c:	98c6d83a 	srl	r3,r19,r3
    f890:	9c68983a 	sll	r20,r19,r17
    f894:	1c20b03a 	or	r16,r3,r16
    f898:	1080fcc4 	addi	r2,r2,1011
    f89c:	00a5c83a 	sub	r18,zero,r2
    f8a0:	0027883a 	mov	r19,zero
    f8a4:	0039883a 	mov	fp,zero
    f8a8:	003f9006 	br	f6ec <__muldf3+0x7c>
    f8ac:	3446b03a 	or	r3,r6,r17
    f8b0:	1800261e 	bne	r3,zero,f94c <__muldf3+0x2dc>
    f8b4:	0023883a 	mov	r17,zero
    f8b8:	0011883a 	mov	r8,zero
    f8bc:	01400084 	movi	r5,2
    f8c0:	003f9c06 	br	f734 <__muldf3+0xc4>
    f8c4:	3446b03a 	or	r3,r6,r17
    f8c8:	18001c26 	beq	r3,zero,f93c <__muldf3+0x2cc>
    f8cc:	8800ce26 	beq	r17,zero,fc08 <__muldf3+0x598>
    f8d0:	8809883a 	mov	r4,r17
    f8d4:	d9800215 	stw	r6,8(sp)
    f8d8:	da400115 	stw	r9,4(sp)
    f8dc:	da800015 	stw	r10,0(sp)
    f8e0:	00108880 	call	10888 <__clzsi2>
    f8e4:	d9800217 	ldw	r6,8(sp)
    f8e8:	da400117 	ldw	r9,4(sp)
    f8ec:	da800017 	ldw	r10,0(sp)
    f8f0:	113ffd44 	addi	r4,r2,-11
    f8f4:	00c00704 	movi	r3,28
    f8f8:	1900bf16 	blt	r3,r4,fbf8 <__muldf3+0x588>
    f8fc:	00c00744 	movi	r3,29
    f900:	123ffe04 	addi	r8,r2,-8
    f904:	1907c83a 	sub	r3,r3,r4
    f908:	8a22983a 	sll	r17,r17,r8
    f90c:	30c6d83a 	srl	r3,r6,r3
    f910:	3210983a 	sll	r8,r6,r8
    f914:	1c62b03a 	or	r17,r3,r17
    f918:	1080fcc4 	addi	r2,r2,1011
    f91c:	0085c83a 	sub	r2,zero,r2
    f920:	000b883a 	mov	r5,zero
    f924:	003f8306 	br	f734 <__muldf3+0xc4>
    f928:	b02b883a 	mov	r21,r22
    f92c:	0081ffc4 	movi	r2,2047
    f930:	000b883a 	mov	r5,zero
    f934:	0029883a 	mov	r20,zero
    f938:	003fac06 	br	f7ec <__muldf3+0x17c>
    f93c:	0023883a 	mov	r17,zero
    f940:	0011883a 	mov	r8,zero
    f944:	01400044 	movi	r5,1
    f948:	003f7a06 	br	f734 <__muldf3+0xc4>
    f94c:	014000c4 	movi	r5,3
    f950:	003f7806 	br	f734 <__muldf3+0xc4>
    f954:	04c00104 	movi	r19,4
    f958:	0021883a 	mov	r16,zero
    f95c:	0029883a 	mov	r20,zero
    f960:	07000044 	movi	fp,1
    f964:	003f6106 	br	f6ec <__muldf3+0x7c>
    f968:	04c00304 	movi	r19,12
    f96c:	070000c4 	movi	fp,3
    f970:	003f5e06 	br	f6ec <__muldf3+0x7c>
    f974:	01400434 	movhi	r5,16
    f978:	002b883a 	mov	r21,zero
    f97c:	297fffc4 	addi	r5,r5,-1
    f980:	053fffc4 	movi	r20,-1
    f984:	0081ffc4 	movi	r2,2047
    f988:	003f9806 	br	f7ec <__muldf3+0x17c>
    f98c:	8023883a 	mov	r17,r16
    f990:	a011883a 	mov	r8,r20
    f994:	e00b883a 	mov	r5,fp
    f998:	003f8a06 	br	f7c4 <__muldf3+0x154>
    f99c:	8023883a 	mov	r17,r16
    f9a0:	a011883a 	mov	r8,r20
    f9a4:	482d883a 	mov	r22,r9
    f9a8:	e00b883a 	mov	r5,fp
    f9ac:	003f8506 	br	f7c4 <__muldf3+0x154>
    f9b0:	a00ad43a 	srli	r5,r20,16
    f9b4:	401ad43a 	srli	r13,r8,16
    f9b8:	a53fffcc 	andi	r20,r20,65535
    f9bc:	423fffcc 	andi	r8,r8,65535
    f9c0:	4519383a 	mul	r12,r8,r20
    f9c4:	4147383a 	mul	r3,r8,r5
    f9c8:	6d09383a 	mul	r4,r13,r20
    f9cc:	600cd43a 	srli	r6,r12,16
    f9d0:	2b5d383a 	mul	r14,r5,r13
    f9d4:	20c9883a 	add	r4,r4,r3
    f9d8:	310d883a 	add	r6,r6,r4
    f9dc:	30c0022e 	bgeu	r6,r3,f9e8 <__muldf3+0x378>
    f9e0:	00c00074 	movhi	r3,1
    f9e4:	70dd883a 	add	r14,r14,r3
    f9e8:	8826d43a 	srli	r19,r17,16
    f9ec:	8bffffcc 	andi	r15,r17,65535
    f9f0:	7d23383a 	mul	r17,r15,r20
    f9f4:	7949383a 	mul	r4,r15,r5
    f9f8:	9d29383a 	mul	r20,r19,r20
    f9fc:	8814d43a 	srli	r10,r17,16
    fa00:	3012943a 	slli	r9,r6,16
    fa04:	a129883a 	add	r20,r20,r4
    fa08:	633fffcc 	andi	r12,r12,65535
    fa0c:	5515883a 	add	r10,r10,r20
    fa10:	3006d43a 	srli	r3,r6,16
    fa14:	4b13883a 	add	r9,r9,r12
    fa18:	2ccb383a 	mul	r5,r5,r19
    fa1c:	5100022e 	bgeu	r10,r4,fa28 <__muldf3+0x3b8>
    fa20:	01000074 	movhi	r4,1
    fa24:	290b883a 	add	r5,r5,r4
    fa28:	802ad43a 	srli	r21,r16,16
    fa2c:	843fffcc 	andi	r16,r16,65535
    fa30:	440d383a 	mul	r6,r8,r16
    fa34:	4565383a 	mul	r18,r8,r21
    fa38:	8349383a 	mul	r4,r16,r13
    fa3c:	500e943a 	slli	r7,r10,16
    fa40:	3010d43a 	srli	r8,r6,16
    fa44:	5028d43a 	srli	r20,r10,16
    fa48:	2489883a 	add	r4,r4,r18
    fa4c:	8abfffcc 	andi	r10,r17,65535
    fa50:	3a95883a 	add	r10,r7,r10
    fa54:	4119883a 	add	r12,r8,r4
    fa58:	a169883a 	add	r20,r20,r5
    fa5c:	1a87883a 	add	r3,r3,r10
    fa60:	6d5b383a 	mul	r13,r13,r21
    fa64:	6480022e 	bgeu	r12,r18,fa70 <__muldf3+0x400>
    fa68:	01000074 	movhi	r4,1
    fa6c:	691b883a 	add	r13,r13,r4
    fa70:	7c25383a 	mul	r18,r15,r16
    fa74:	7d4b383a 	mul	r5,r15,r21
    fa78:	84cf383a 	mul	r7,r16,r19
    fa7c:	901ed43a 	srli	r15,r18,16
    fa80:	6008d43a 	srli	r4,r12,16
    fa84:	6010943a 	slli	r8,r12,16
    fa88:	394f883a 	add	r7,r7,r5
    fa8c:	333fffcc 	andi	r12,r6,65535
    fa90:	79df883a 	add	r15,r15,r7
    fa94:	235b883a 	add	r13,r4,r13
    fa98:	9d63383a 	mul	r17,r19,r21
    fa9c:	4309883a 	add	r4,r8,r12
    faa0:	7940022e 	bgeu	r15,r5,faac <__muldf3+0x43c>
    faa4:	01400074 	movhi	r5,1
    faa8:	8963883a 	add	r17,r17,r5
    faac:	780a943a 	slli	r5,r15,16
    fab0:	91bfffcc 	andi	r6,r18,65535
    fab4:	70c7883a 	add	r3,r14,r3
    fab8:	298d883a 	add	r6,r5,r6
    fabc:	1a8f803a 	cmpltu	r7,r3,r10
    fac0:	350b883a 	add	r5,r6,r20
    fac4:	20c7883a 	add	r3,r4,r3
    fac8:	3955883a 	add	r10,r7,r5
    facc:	1909803a 	cmpltu	r4,r3,r4
    fad0:	6a91883a 	add	r8,r13,r10
    fad4:	780cd43a 	srli	r6,r15,16
    fad8:	2219883a 	add	r12,r4,r8
    fadc:	2d0b803a 	cmpltu	r5,r5,r20
    fae0:	51cf803a 	cmpltu	r7,r10,r7
    fae4:	29ceb03a 	or	r7,r5,r7
    fae8:	4351803a 	cmpltu	r8,r8,r13
    faec:	610b803a 	cmpltu	r5,r12,r4
    faf0:	4148b03a 	or	r4,r8,r5
    faf4:	398f883a 	add	r7,r7,r6
    faf8:	3909883a 	add	r4,r7,r4
    fafc:	1810927a 	slli	r8,r3,9
    fb00:	2449883a 	add	r4,r4,r17
    fb04:	2008927a 	slli	r4,r4,9
    fb08:	6022d5fa 	srli	r17,r12,23
    fb0c:	1806d5fa 	srli	r3,r3,23
    fb10:	4252b03a 	or	r9,r8,r9
    fb14:	600a927a 	slli	r5,r12,9
    fb18:	4810c03a 	cmpne	r8,r9,zero
    fb1c:	2462b03a 	or	r17,r4,r17
    fb20:	40c6b03a 	or	r3,r8,r3
    fb24:	8900402c 	andhi	r4,r17,256
    fb28:	1950b03a 	or	r8,r3,r5
    fb2c:	20000726 	beq	r4,zero,fb4c <__muldf3+0x4dc>
    fb30:	4006d07a 	srli	r3,r8,1
    fb34:	880497fa 	slli	r2,r17,31
    fb38:	4200004c 	andi	r8,r8,1
    fb3c:	8822d07a 	srli	r17,r17,1
    fb40:	1a10b03a 	or	r8,r3,r8
    fb44:	1210b03a 	or	r8,r2,r8
    fb48:	5805883a 	mov	r2,r11
    fb4c:	1140ffc4 	addi	r5,r2,1023
    fb50:	0140440e 	bge	zero,r5,fc64 <__muldf3+0x5f4>
    fb54:	40c001cc 	andi	r3,r8,7
    fb58:	18000726 	beq	r3,zero,fb78 <__muldf3+0x508>
    fb5c:	40c003cc 	andi	r3,r8,15
    fb60:	01000104 	movi	r4,4
    fb64:	19000426 	beq	r3,r4,fb78 <__muldf3+0x508>
    fb68:	4107883a 	add	r3,r8,r4
    fb6c:	1a11803a 	cmpltu	r8,r3,r8
    fb70:	8a23883a 	add	r17,r17,r8
    fb74:	1811883a 	mov	r8,r3
    fb78:	88c0402c 	andhi	r3,r17,256
    fb7c:	18000426 	beq	r3,zero,fb90 <__muldf3+0x520>
    fb80:	11410004 	addi	r5,r2,1024
    fb84:	00bfc034 	movhi	r2,65280
    fb88:	10bfffc4 	addi	r2,r2,-1
    fb8c:	88a2703a 	and	r17,r17,r2
    fb90:	0081ff84 	movi	r2,2046
    fb94:	117f6416 	blt	r2,r5,f928 <__muldf3+0x2b8>
    fb98:	8828977a 	slli	r20,r17,29
    fb9c:	4010d0fa 	srli	r8,r8,3
    fba0:	8822927a 	slli	r17,r17,9
    fba4:	2881ffcc 	andi	r2,r5,2047
    fba8:	a228b03a 	or	r20,r20,r8
    fbac:	880ad33a 	srli	r5,r17,12
    fbb0:	b02b883a 	mov	r21,r22
    fbb4:	003f0d06 	br	f7ec <__muldf3+0x17c>
    fbb8:	8080022c 	andhi	r2,r16,8
    fbbc:	10000926 	beq	r2,zero,fbe4 <__muldf3+0x574>
    fbc0:	8880022c 	andhi	r2,r17,8
    fbc4:	1000071e 	bne	r2,zero,fbe4 <__muldf3+0x574>
    fbc8:	00800434 	movhi	r2,16
    fbcc:	89400234 	orhi	r5,r17,8
    fbd0:	10bfffc4 	addi	r2,r2,-1
    fbd4:	b82b883a 	mov	r21,r23
    fbd8:	288a703a 	and	r5,r5,r2
    fbdc:	4029883a 	mov	r20,r8
    fbe0:	003f6806 	br	f984 <__muldf3+0x314>
    fbe4:	00800434 	movhi	r2,16
    fbe8:	81400234 	orhi	r5,r16,8
    fbec:	10bfffc4 	addi	r2,r2,-1
    fbf0:	288a703a 	and	r5,r5,r2
    fbf4:	003f6306 	br	f984 <__muldf3+0x314>
    fbf8:	147ff604 	addi	r17,r2,-40
    fbfc:	3462983a 	sll	r17,r6,r17
    fc00:	0011883a 	mov	r8,zero
    fc04:	003f4406 	br	f918 <__muldf3+0x2a8>
    fc08:	3009883a 	mov	r4,r6
    fc0c:	d9800215 	stw	r6,8(sp)
    fc10:	da400115 	stw	r9,4(sp)
    fc14:	da800015 	stw	r10,0(sp)
    fc18:	00108880 	call	10888 <__clzsi2>
    fc1c:	10800804 	addi	r2,r2,32
    fc20:	da800017 	ldw	r10,0(sp)
    fc24:	da400117 	ldw	r9,4(sp)
    fc28:	d9800217 	ldw	r6,8(sp)
    fc2c:	003f3006 	br	f8f0 <__muldf3+0x280>
    fc30:	143ff604 	addi	r16,r2,-40
    fc34:	9c20983a 	sll	r16,r19,r16
    fc38:	0029883a 	mov	r20,zero
    fc3c:	003f1606 	br	f898 <__muldf3+0x228>
    fc40:	d9800215 	stw	r6,8(sp)
    fc44:	d9c00015 	stw	r7,0(sp)
    fc48:	da400115 	stw	r9,4(sp)
    fc4c:	00108880 	call	10888 <__clzsi2>
    fc50:	10800804 	addi	r2,r2,32
    fc54:	da400117 	ldw	r9,4(sp)
    fc58:	d9c00017 	ldw	r7,0(sp)
    fc5c:	d9800217 	ldw	r6,8(sp)
    fc60:	003f0306 	br	f870 <__muldf3+0x200>
    fc64:	00c00044 	movi	r3,1
    fc68:	1947c83a 	sub	r3,r3,r5
    fc6c:	00800e04 	movi	r2,56
    fc70:	10feda16 	blt	r2,r3,f7dc <__muldf3+0x16c>
    fc74:	008007c4 	movi	r2,31
    fc78:	10c01b16 	blt	r2,r3,fce8 <__muldf3+0x678>
    fc7c:	00800804 	movi	r2,32
    fc80:	10c5c83a 	sub	r2,r2,r3
    fc84:	888a983a 	sll	r5,r17,r2
    fc88:	40c8d83a 	srl	r4,r8,r3
    fc8c:	4084983a 	sll	r2,r8,r2
    fc90:	88e2d83a 	srl	r17,r17,r3
    fc94:	2906b03a 	or	r3,r5,r4
    fc98:	1004c03a 	cmpne	r2,r2,zero
    fc9c:	1886b03a 	or	r3,r3,r2
    fca0:	188001cc 	andi	r2,r3,7
    fca4:	10000726 	beq	r2,zero,fcc4 <__muldf3+0x654>
    fca8:	188003cc 	andi	r2,r3,15
    fcac:	01000104 	movi	r4,4
    fcb0:	11000426 	beq	r2,r4,fcc4 <__muldf3+0x654>
    fcb4:	1805883a 	mov	r2,r3
    fcb8:	10c00104 	addi	r3,r2,4
    fcbc:	1885803a 	cmpltu	r2,r3,r2
    fcc0:	88a3883a 	add	r17,r17,r2
    fcc4:	8880202c 	andhi	r2,r17,128
    fcc8:	10001c26 	beq	r2,zero,fd3c <__muldf3+0x6cc>
    fccc:	b02b883a 	mov	r21,r22
    fcd0:	00800044 	movi	r2,1
    fcd4:	000b883a 	mov	r5,zero
    fcd8:	0029883a 	mov	r20,zero
    fcdc:	003ec306 	br	f7ec <__muldf3+0x17c>
    fce0:	5805883a 	mov	r2,r11
    fce4:	003f9906 	br	fb4c <__muldf3+0x4dc>
    fce8:	00bff844 	movi	r2,-31
    fcec:	1145c83a 	sub	r2,r2,r5
    fcf0:	8888d83a 	srl	r4,r17,r2
    fcf4:	00800804 	movi	r2,32
    fcf8:	18801a26 	beq	r3,r2,fd64 <__muldf3+0x6f4>
    fcfc:	00801004 	movi	r2,64
    fd00:	10c5c83a 	sub	r2,r2,r3
    fd04:	8884983a 	sll	r2,r17,r2
    fd08:	1204b03a 	or	r2,r2,r8
    fd0c:	1004c03a 	cmpne	r2,r2,zero
    fd10:	2084b03a 	or	r2,r4,r2
    fd14:	144001cc 	andi	r17,r2,7
    fd18:	88000d1e 	bne	r17,zero,fd50 <__muldf3+0x6e0>
    fd1c:	000b883a 	mov	r5,zero
    fd20:	1028d0fa 	srli	r20,r2,3
    fd24:	b02b883a 	mov	r21,r22
    fd28:	0005883a 	mov	r2,zero
    fd2c:	a468b03a 	or	r20,r20,r17
    fd30:	003eae06 	br	f7ec <__muldf3+0x17c>
    fd34:	1007883a 	mov	r3,r2
    fd38:	0023883a 	mov	r17,zero
    fd3c:	880a927a 	slli	r5,r17,9
    fd40:	1805883a 	mov	r2,r3
    fd44:	8822977a 	slli	r17,r17,29
    fd48:	280ad33a 	srli	r5,r5,12
    fd4c:	003ff406 	br	fd20 <__muldf3+0x6b0>
    fd50:	10c003cc 	andi	r3,r2,15
    fd54:	01000104 	movi	r4,4
    fd58:	193ff626 	beq	r3,r4,fd34 <__muldf3+0x6c4>
    fd5c:	0023883a 	mov	r17,zero
    fd60:	003fd506 	br	fcb8 <__muldf3+0x648>
    fd64:	0005883a 	mov	r2,zero
    fd68:	003fe706 	br	fd08 <__muldf3+0x698>
    fd6c:	00800434 	movhi	r2,16
    fd70:	89400234 	orhi	r5,r17,8
    fd74:	10bfffc4 	addi	r2,r2,-1
    fd78:	b02b883a 	mov	r21,r22
    fd7c:	288a703a 	and	r5,r5,r2
    fd80:	4029883a 	mov	r20,r8
    fd84:	003eff06 	br	f984 <__muldf3+0x314>

0000fd88 <__subdf3>:
    fd88:	02000434 	movhi	r8,16
    fd8c:	423fffc4 	addi	r8,r8,-1
    fd90:	defffb04 	addi	sp,sp,-20
    fd94:	2a14703a 	and	r10,r5,r8
    fd98:	3812d53a 	srli	r9,r7,20
    fd9c:	3a10703a 	and	r8,r7,r8
    fda0:	2006d77a 	srli	r3,r4,29
    fda4:	3004d77a 	srli	r2,r6,29
    fda8:	dc000015 	stw	r16,0(sp)
    fdac:	501490fa 	slli	r10,r10,3
    fdb0:	2820d53a 	srli	r16,r5,20
    fdb4:	401090fa 	slli	r8,r8,3
    fdb8:	dc800215 	stw	r18,8(sp)
    fdbc:	dc400115 	stw	r17,4(sp)
    fdc0:	dfc00415 	stw	ra,16(sp)
    fdc4:	202290fa 	slli	r17,r4,3
    fdc8:	dcc00315 	stw	r19,12(sp)
    fdcc:	4a41ffcc 	andi	r9,r9,2047
    fdd0:	0101ffc4 	movi	r4,2047
    fdd4:	2824d7fa 	srli	r18,r5,31
    fdd8:	8401ffcc 	andi	r16,r16,2047
    fddc:	50c6b03a 	or	r3,r10,r3
    fde0:	380ed7fa 	srli	r7,r7,31
    fde4:	408ab03a 	or	r5,r8,r2
    fde8:	300c90fa 	slli	r6,r6,3
    fdec:	49009626 	beq	r9,r4,10048 <__subdf3+0x2c0>
    fdf0:	39c0005c 	xori	r7,r7,1
    fdf4:	8245c83a 	sub	r2,r16,r9
    fdf8:	3c807426 	beq	r7,r18,ffcc <__subdf3+0x244>
    fdfc:	0080af0e 	bge	zero,r2,100bc <__subdf3+0x334>
    fe00:	48002a1e 	bne	r9,zero,feac <__subdf3+0x124>
    fe04:	2988b03a 	or	r4,r5,r6
    fe08:	20009a1e 	bne	r4,zero,10074 <__subdf3+0x2ec>
    fe0c:	888001cc 	andi	r2,r17,7
    fe10:	10000726 	beq	r2,zero,fe30 <__subdf3+0xa8>
    fe14:	888003cc 	andi	r2,r17,15
    fe18:	01000104 	movi	r4,4
    fe1c:	11000426 	beq	r2,r4,fe30 <__subdf3+0xa8>
    fe20:	890b883a 	add	r5,r17,r4
    fe24:	2c63803a 	cmpltu	r17,r5,r17
    fe28:	1c47883a 	add	r3,r3,r17
    fe2c:	2823883a 	mov	r17,r5
    fe30:	1880202c 	andhi	r2,r3,128
    fe34:	10005926 	beq	r2,zero,ff9c <__subdf3+0x214>
    fe38:	84000044 	addi	r16,r16,1
    fe3c:	0081ffc4 	movi	r2,2047
    fe40:	8080be26 	beq	r16,r2,1013c <__subdf3+0x3b4>
    fe44:	017fe034 	movhi	r5,65408
    fe48:	297fffc4 	addi	r5,r5,-1
    fe4c:	1946703a 	and	r3,r3,r5
    fe50:	1804977a 	slli	r2,r3,29
    fe54:	1806927a 	slli	r3,r3,9
    fe58:	8822d0fa 	srli	r17,r17,3
    fe5c:	8401ffcc 	andi	r16,r16,2047
    fe60:	180ad33a 	srli	r5,r3,12
    fe64:	9100004c 	andi	r4,r18,1
    fe68:	1444b03a 	or	r2,r2,r17
    fe6c:	80c1ffcc 	andi	r3,r16,2047
    fe70:	1820953a 	slli	r16,r3,20
    fe74:	20c03fcc 	andi	r3,r4,255
    fe78:	180897fa 	slli	r4,r3,31
    fe7c:	00c00434 	movhi	r3,16
    fe80:	18ffffc4 	addi	r3,r3,-1
    fe84:	28c6703a 	and	r3,r5,r3
    fe88:	1c06b03a 	or	r3,r3,r16
    fe8c:	1906b03a 	or	r3,r3,r4
    fe90:	dfc00417 	ldw	ra,16(sp)
    fe94:	dcc00317 	ldw	r19,12(sp)
    fe98:	dc800217 	ldw	r18,8(sp)
    fe9c:	dc400117 	ldw	r17,4(sp)
    fea0:	dc000017 	ldw	r16,0(sp)
    fea4:	dec00504 	addi	sp,sp,20
    fea8:	f800283a 	ret
    feac:	0101ffc4 	movi	r4,2047
    feb0:	813fd626 	beq	r16,r4,fe0c <__subdf3+0x84>
    feb4:	29402034 	orhi	r5,r5,128
    feb8:	01000e04 	movi	r4,56
    febc:	2080a316 	blt	r4,r2,1014c <__subdf3+0x3c4>
    fec0:	010007c4 	movi	r4,31
    fec4:	2080c616 	blt	r4,r2,101e0 <__subdf3+0x458>
    fec8:	01000804 	movi	r4,32
    fecc:	2089c83a 	sub	r4,r4,r2
    fed0:	2910983a 	sll	r8,r5,r4
    fed4:	308ed83a 	srl	r7,r6,r2
    fed8:	3108983a 	sll	r4,r6,r4
    fedc:	2884d83a 	srl	r2,r5,r2
    fee0:	41ccb03a 	or	r6,r8,r7
    fee4:	2008c03a 	cmpne	r4,r4,zero
    fee8:	310cb03a 	or	r6,r6,r4
    feec:	898dc83a 	sub	r6,r17,r6
    fef0:	89a3803a 	cmpltu	r17,r17,r6
    fef4:	1887c83a 	sub	r3,r3,r2
    fef8:	1c47c83a 	sub	r3,r3,r17
    fefc:	3023883a 	mov	r17,r6
    ff00:	1880202c 	andhi	r2,r3,128
    ff04:	10002326 	beq	r2,zero,ff94 <__subdf3+0x20c>
    ff08:	04c02034 	movhi	r19,128
    ff0c:	9cffffc4 	addi	r19,r19,-1
    ff10:	1ce6703a 	and	r19,r3,r19
    ff14:	98007a26 	beq	r19,zero,10100 <__subdf3+0x378>
    ff18:	9809883a 	mov	r4,r19
    ff1c:	00108880 	call	10888 <__clzsi2>
    ff20:	113ffe04 	addi	r4,r2,-8
    ff24:	00c007c4 	movi	r3,31
    ff28:	19007b16 	blt	r3,r4,10118 <__subdf3+0x390>
    ff2c:	00800804 	movi	r2,32
    ff30:	1105c83a 	sub	r2,r2,r4
    ff34:	8884d83a 	srl	r2,r17,r2
    ff38:	9906983a 	sll	r3,r19,r4
    ff3c:	8922983a 	sll	r17,r17,r4
    ff40:	10c4b03a 	or	r2,r2,r3
    ff44:	24007816 	blt	r4,r16,10128 <__subdf3+0x3a0>
    ff48:	2421c83a 	sub	r16,r4,r16
    ff4c:	80c00044 	addi	r3,r16,1
    ff50:	010007c4 	movi	r4,31
    ff54:	20c09516 	blt	r4,r3,101ac <__subdf3+0x424>
    ff58:	01400804 	movi	r5,32
    ff5c:	28cbc83a 	sub	r5,r5,r3
    ff60:	88c8d83a 	srl	r4,r17,r3
    ff64:	8962983a 	sll	r17,r17,r5
    ff68:	114a983a 	sll	r5,r2,r5
    ff6c:	10c6d83a 	srl	r3,r2,r3
    ff70:	8804c03a 	cmpne	r2,r17,zero
    ff74:	290ab03a 	or	r5,r5,r4
    ff78:	28a2b03a 	or	r17,r5,r2
    ff7c:	0021883a 	mov	r16,zero
    ff80:	003fa206 	br	fe0c <__subdf3+0x84>
    ff84:	2090b03a 	or	r8,r4,r2
    ff88:	40018e26 	beq	r8,zero,105c4 <__subdf3+0x83c>
    ff8c:	1007883a 	mov	r3,r2
    ff90:	2023883a 	mov	r17,r4
    ff94:	888001cc 	andi	r2,r17,7
    ff98:	103f9e1e 	bne	r2,zero,fe14 <__subdf3+0x8c>
    ff9c:	1804977a 	slli	r2,r3,29
    ffa0:	8822d0fa 	srli	r17,r17,3
    ffa4:	1810d0fa 	srli	r8,r3,3
    ffa8:	9100004c 	andi	r4,r18,1
    ffac:	1444b03a 	or	r2,r2,r17
    ffb0:	00c1ffc4 	movi	r3,2047
    ffb4:	80c02826 	beq	r16,r3,10058 <__subdf3+0x2d0>
    ffb8:	01400434 	movhi	r5,16
    ffbc:	297fffc4 	addi	r5,r5,-1
    ffc0:	80e0703a 	and	r16,r16,r3
    ffc4:	414a703a 	and	r5,r8,r5
    ffc8:	003fa806 	br	fe6c <__subdf3+0xe4>
    ffcc:	0080630e 	bge	zero,r2,1015c <__subdf3+0x3d4>
    ffd0:	48003026 	beq	r9,zero,10094 <__subdf3+0x30c>
    ffd4:	0101ffc4 	movi	r4,2047
    ffd8:	813f8c26 	beq	r16,r4,fe0c <__subdf3+0x84>
    ffdc:	29402034 	orhi	r5,r5,128
    ffe0:	01000e04 	movi	r4,56
    ffe4:	2080a90e 	bge	r4,r2,1028c <__subdf3+0x504>
    ffe8:	298cb03a 	or	r6,r5,r6
    ffec:	3012c03a 	cmpne	r9,r6,zero
    fff0:	0005883a 	mov	r2,zero
    fff4:	4c53883a 	add	r9,r9,r17
    fff8:	4c63803a 	cmpltu	r17,r9,r17
    fffc:	10c7883a 	add	r3,r2,r3
   10000:	88c7883a 	add	r3,r17,r3
   10004:	4823883a 	mov	r17,r9
   10008:	1880202c 	andhi	r2,r3,128
   1000c:	1000d026 	beq	r2,zero,10350 <__subdf3+0x5c8>
   10010:	84000044 	addi	r16,r16,1
   10014:	0081ffc4 	movi	r2,2047
   10018:	8080fe26 	beq	r16,r2,10414 <__subdf3+0x68c>
   1001c:	00bfe034 	movhi	r2,65408
   10020:	10bfffc4 	addi	r2,r2,-1
   10024:	1886703a 	and	r3,r3,r2
   10028:	880ad07a 	srli	r5,r17,1
   1002c:	180497fa 	slli	r2,r3,31
   10030:	8900004c 	andi	r4,r17,1
   10034:	2922b03a 	or	r17,r5,r4
   10038:	1806d07a 	srli	r3,r3,1
   1003c:	1462b03a 	or	r17,r2,r17
   10040:	3825883a 	mov	r18,r7
   10044:	003f7106 	br	fe0c <__subdf3+0x84>
   10048:	2984b03a 	or	r2,r5,r6
   1004c:	103f6826 	beq	r2,zero,fdf0 <__subdf3+0x68>
   10050:	39c03fcc 	andi	r7,r7,255
   10054:	003f6706 	br	fdf4 <__subdf3+0x6c>
   10058:	4086b03a 	or	r3,r8,r2
   1005c:	18015226 	beq	r3,zero,105a8 <__subdf3+0x820>
   10060:	00c00434 	movhi	r3,16
   10064:	41400234 	orhi	r5,r8,8
   10068:	18ffffc4 	addi	r3,r3,-1
   1006c:	28ca703a 	and	r5,r5,r3
   10070:	003f7e06 	br	fe6c <__subdf3+0xe4>
   10074:	10bfffc4 	addi	r2,r2,-1
   10078:	1000491e 	bne	r2,zero,101a0 <__subdf3+0x418>
   1007c:	898fc83a 	sub	r7,r17,r6
   10080:	89e3803a 	cmpltu	r17,r17,r7
   10084:	1947c83a 	sub	r3,r3,r5
   10088:	1c47c83a 	sub	r3,r3,r17
   1008c:	3823883a 	mov	r17,r7
   10090:	003f9b06 	br	ff00 <__subdf3+0x178>
   10094:	2988b03a 	or	r4,r5,r6
   10098:	203f5c26 	beq	r4,zero,fe0c <__subdf3+0x84>
   1009c:	10bfffc4 	addi	r2,r2,-1
   100a0:	1000931e 	bne	r2,zero,102f0 <__subdf3+0x568>
   100a4:	898d883a 	add	r6,r17,r6
   100a8:	3463803a 	cmpltu	r17,r6,r17
   100ac:	1947883a 	add	r3,r3,r5
   100b0:	88c7883a 	add	r3,r17,r3
   100b4:	3023883a 	mov	r17,r6
   100b8:	003fd306 	br	10008 <__subdf3+0x280>
   100bc:	1000541e 	bne	r2,zero,10210 <__subdf3+0x488>
   100c0:	80800044 	addi	r2,r16,1
   100c4:	1081ffcc 	andi	r2,r2,2047
   100c8:	01000044 	movi	r4,1
   100cc:	2080a20e 	bge	r4,r2,10358 <__subdf3+0x5d0>
   100d0:	8989c83a 	sub	r4,r17,r6
   100d4:	8905803a 	cmpltu	r2,r17,r4
   100d8:	1967c83a 	sub	r19,r3,r5
   100dc:	98a7c83a 	sub	r19,r19,r2
   100e0:	9880202c 	andhi	r2,r19,128
   100e4:	10006326 	beq	r2,zero,10274 <__subdf3+0x4ec>
   100e8:	3463c83a 	sub	r17,r6,r17
   100ec:	28c7c83a 	sub	r3,r5,r3
   100f0:	344d803a 	cmpltu	r6,r6,r17
   100f4:	19a7c83a 	sub	r19,r3,r6
   100f8:	3825883a 	mov	r18,r7
   100fc:	983f861e 	bne	r19,zero,ff18 <__subdf3+0x190>
   10100:	8809883a 	mov	r4,r17
   10104:	00108880 	call	10888 <__clzsi2>
   10108:	10800804 	addi	r2,r2,32
   1010c:	113ffe04 	addi	r4,r2,-8
   10110:	00c007c4 	movi	r3,31
   10114:	193f850e 	bge	r3,r4,ff2c <__subdf3+0x1a4>
   10118:	10bff604 	addi	r2,r2,-40
   1011c:	8884983a 	sll	r2,r17,r2
   10120:	0023883a 	mov	r17,zero
   10124:	243f880e 	bge	r4,r16,ff48 <__subdf3+0x1c0>
   10128:	00ffe034 	movhi	r3,65408
   1012c:	18ffffc4 	addi	r3,r3,-1
   10130:	8121c83a 	sub	r16,r16,r4
   10134:	10c6703a 	and	r3,r2,r3
   10138:	003f3406 	br	fe0c <__subdf3+0x84>
   1013c:	9100004c 	andi	r4,r18,1
   10140:	000b883a 	mov	r5,zero
   10144:	0005883a 	mov	r2,zero
   10148:	003f4806 	br	fe6c <__subdf3+0xe4>
   1014c:	298cb03a 	or	r6,r5,r6
   10150:	300cc03a 	cmpne	r6,r6,zero
   10154:	0005883a 	mov	r2,zero
   10158:	003f6406 	br	feec <__subdf3+0x164>
   1015c:	10009a1e 	bne	r2,zero,103c8 <__subdf3+0x640>
   10160:	82400044 	addi	r9,r16,1
   10164:	4881ffcc 	andi	r2,r9,2047
   10168:	02800044 	movi	r10,1
   1016c:	5080670e 	bge	r10,r2,1030c <__subdf3+0x584>
   10170:	0081ffc4 	movi	r2,2047
   10174:	4880af26 	beq	r9,r2,10434 <__subdf3+0x6ac>
   10178:	898d883a 	add	r6,r17,r6
   1017c:	1945883a 	add	r2,r3,r5
   10180:	3447803a 	cmpltu	r3,r6,r17
   10184:	1887883a 	add	r3,r3,r2
   10188:	182297fa 	slli	r17,r3,31
   1018c:	300cd07a 	srli	r6,r6,1
   10190:	1806d07a 	srli	r3,r3,1
   10194:	4821883a 	mov	r16,r9
   10198:	89a2b03a 	or	r17,r17,r6
   1019c:	003f1b06 	br	fe0c <__subdf3+0x84>
   101a0:	0101ffc4 	movi	r4,2047
   101a4:	813f441e 	bne	r16,r4,feb8 <__subdf3+0x130>
   101a8:	003f1806 	br	fe0c <__subdf3+0x84>
   101ac:	843ff844 	addi	r16,r16,-31
   101b0:	01400804 	movi	r5,32
   101b4:	1408d83a 	srl	r4,r2,r16
   101b8:	19405026 	beq	r3,r5,102fc <__subdf3+0x574>
   101bc:	01401004 	movi	r5,64
   101c0:	28c7c83a 	sub	r3,r5,r3
   101c4:	10c4983a 	sll	r2,r2,r3
   101c8:	88a2b03a 	or	r17,r17,r2
   101cc:	8822c03a 	cmpne	r17,r17,zero
   101d0:	2462b03a 	or	r17,r4,r17
   101d4:	0007883a 	mov	r3,zero
   101d8:	0021883a 	mov	r16,zero
   101dc:	003f6d06 	br	ff94 <__subdf3+0x20c>
   101e0:	11fff804 	addi	r7,r2,-32
   101e4:	01000804 	movi	r4,32
   101e8:	29ced83a 	srl	r7,r5,r7
   101ec:	11004526 	beq	r2,r4,10304 <__subdf3+0x57c>
   101f0:	01001004 	movi	r4,64
   101f4:	2089c83a 	sub	r4,r4,r2
   101f8:	2904983a 	sll	r2,r5,r4
   101fc:	118cb03a 	or	r6,r2,r6
   10200:	300cc03a 	cmpne	r6,r6,zero
   10204:	398cb03a 	or	r6,r7,r6
   10208:	0005883a 	mov	r2,zero
   1020c:	003f3706 	br	feec <__subdf3+0x164>
   10210:	80002a26 	beq	r16,zero,102bc <__subdf3+0x534>
   10214:	0101ffc4 	movi	r4,2047
   10218:	49006626 	beq	r9,r4,103b4 <__subdf3+0x62c>
   1021c:	0085c83a 	sub	r2,zero,r2
   10220:	18c02034 	orhi	r3,r3,128
   10224:	01000e04 	movi	r4,56
   10228:	20807e16 	blt	r4,r2,10424 <__subdf3+0x69c>
   1022c:	010007c4 	movi	r4,31
   10230:	2080e716 	blt	r4,r2,105d0 <__subdf3+0x848>
   10234:	01000804 	movi	r4,32
   10238:	2089c83a 	sub	r4,r4,r2
   1023c:	1914983a 	sll	r10,r3,r4
   10240:	8890d83a 	srl	r8,r17,r2
   10244:	8908983a 	sll	r4,r17,r4
   10248:	1884d83a 	srl	r2,r3,r2
   1024c:	5222b03a 	or	r17,r10,r8
   10250:	2006c03a 	cmpne	r3,r4,zero
   10254:	88e2b03a 	or	r17,r17,r3
   10258:	3463c83a 	sub	r17,r6,r17
   1025c:	2885c83a 	sub	r2,r5,r2
   10260:	344d803a 	cmpltu	r6,r6,r17
   10264:	1187c83a 	sub	r3,r2,r6
   10268:	4821883a 	mov	r16,r9
   1026c:	3825883a 	mov	r18,r7
   10270:	003f2306 	br	ff00 <__subdf3+0x178>
   10274:	24d0b03a 	or	r8,r4,r19
   10278:	40001b1e 	bne	r8,zero,102e8 <__subdf3+0x560>
   1027c:	0005883a 	mov	r2,zero
   10280:	0009883a 	mov	r4,zero
   10284:	0021883a 	mov	r16,zero
   10288:	003f4906 	br	ffb0 <__subdf3+0x228>
   1028c:	010007c4 	movi	r4,31
   10290:	20803a16 	blt	r4,r2,1037c <__subdf3+0x5f4>
   10294:	01000804 	movi	r4,32
   10298:	2089c83a 	sub	r4,r4,r2
   1029c:	2912983a 	sll	r9,r5,r4
   102a0:	3090d83a 	srl	r8,r6,r2
   102a4:	3108983a 	sll	r4,r6,r4
   102a8:	2884d83a 	srl	r2,r5,r2
   102ac:	4a12b03a 	or	r9,r9,r8
   102b0:	2008c03a 	cmpne	r4,r4,zero
   102b4:	4912b03a 	or	r9,r9,r4
   102b8:	003f4e06 	br	fff4 <__subdf3+0x26c>
   102bc:	1c48b03a 	or	r4,r3,r17
   102c0:	20003c26 	beq	r4,zero,103b4 <__subdf3+0x62c>
   102c4:	0084303a 	nor	r2,zero,r2
   102c8:	1000381e 	bne	r2,zero,103ac <__subdf3+0x624>
   102cc:	3463c83a 	sub	r17,r6,r17
   102d0:	28c5c83a 	sub	r2,r5,r3
   102d4:	344d803a 	cmpltu	r6,r6,r17
   102d8:	1187c83a 	sub	r3,r2,r6
   102dc:	4821883a 	mov	r16,r9
   102e0:	3825883a 	mov	r18,r7
   102e4:	003f0606 	br	ff00 <__subdf3+0x178>
   102e8:	2023883a 	mov	r17,r4
   102ec:	003f0906 	br	ff14 <__subdf3+0x18c>
   102f0:	0101ffc4 	movi	r4,2047
   102f4:	813f3a1e 	bne	r16,r4,ffe0 <__subdf3+0x258>
   102f8:	003ec406 	br	fe0c <__subdf3+0x84>
   102fc:	0005883a 	mov	r2,zero
   10300:	003fb106 	br	101c8 <__subdf3+0x440>
   10304:	0005883a 	mov	r2,zero
   10308:	003fbc06 	br	101fc <__subdf3+0x474>
   1030c:	1c44b03a 	or	r2,r3,r17
   10310:	80008e1e 	bne	r16,zero,1054c <__subdf3+0x7c4>
   10314:	1000c826 	beq	r2,zero,10638 <__subdf3+0x8b0>
   10318:	2984b03a 	or	r2,r5,r6
   1031c:	103ebb26 	beq	r2,zero,fe0c <__subdf3+0x84>
   10320:	8989883a 	add	r4,r17,r6
   10324:	1945883a 	add	r2,r3,r5
   10328:	2447803a 	cmpltu	r3,r4,r17
   1032c:	1887883a 	add	r3,r3,r2
   10330:	1880202c 	andhi	r2,r3,128
   10334:	2023883a 	mov	r17,r4
   10338:	103f1626 	beq	r2,zero,ff94 <__subdf3+0x20c>
   1033c:	00bfe034 	movhi	r2,65408
   10340:	10bfffc4 	addi	r2,r2,-1
   10344:	5021883a 	mov	r16,r10
   10348:	1886703a 	and	r3,r3,r2
   1034c:	003eaf06 	br	fe0c <__subdf3+0x84>
   10350:	3825883a 	mov	r18,r7
   10354:	003f0f06 	br	ff94 <__subdf3+0x20c>
   10358:	1c44b03a 	or	r2,r3,r17
   1035c:	8000251e 	bne	r16,zero,103f4 <__subdf3+0x66c>
   10360:	1000661e 	bne	r2,zero,104fc <__subdf3+0x774>
   10364:	2990b03a 	or	r8,r5,r6
   10368:	40009626 	beq	r8,zero,105c4 <__subdf3+0x83c>
   1036c:	2807883a 	mov	r3,r5
   10370:	3023883a 	mov	r17,r6
   10374:	3825883a 	mov	r18,r7
   10378:	003ea406 	br	fe0c <__subdf3+0x84>
   1037c:	127ff804 	addi	r9,r2,-32
   10380:	01000804 	movi	r4,32
   10384:	2a52d83a 	srl	r9,r5,r9
   10388:	11008c26 	beq	r2,r4,105bc <__subdf3+0x834>
   1038c:	01001004 	movi	r4,64
   10390:	2085c83a 	sub	r2,r4,r2
   10394:	2884983a 	sll	r2,r5,r2
   10398:	118cb03a 	or	r6,r2,r6
   1039c:	300cc03a 	cmpne	r6,r6,zero
   103a0:	4992b03a 	or	r9,r9,r6
   103a4:	0005883a 	mov	r2,zero
   103a8:	003f1206 	br	fff4 <__subdf3+0x26c>
   103ac:	0101ffc4 	movi	r4,2047
   103b0:	493f9c1e 	bne	r9,r4,10224 <__subdf3+0x49c>
   103b4:	2807883a 	mov	r3,r5
   103b8:	3023883a 	mov	r17,r6
   103bc:	4821883a 	mov	r16,r9
   103c0:	3825883a 	mov	r18,r7
   103c4:	003e9106 	br	fe0c <__subdf3+0x84>
   103c8:	80001f1e 	bne	r16,zero,10448 <__subdf3+0x6c0>
   103cc:	1c48b03a 	or	r4,r3,r17
   103d0:	20005a26 	beq	r4,zero,1053c <__subdf3+0x7b4>
   103d4:	0084303a 	nor	r2,zero,r2
   103d8:	1000561e 	bne	r2,zero,10534 <__subdf3+0x7ac>
   103dc:	89a3883a 	add	r17,r17,r6
   103e0:	1945883a 	add	r2,r3,r5
   103e4:	898d803a 	cmpltu	r6,r17,r6
   103e8:	3087883a 	add	r3,r6,r2
   103ec:	4821883a 	mov	r16,r9
   103f0:	003f0506 	br	10008 <__subdf3+0x280>
   103f4:	10002b1e 	bne	r2,zero,104a4 <__subdf3+0x71c>
   103f8:	2984b03a 	or	r2,r5,r6
   103fc:	10008026 	beq	r2,zero,10600 <__subdf3+0x878>
   10400:	2807883a 	mov	r3,r5
   10404:	3023883a 	mov	r17,r6
   10408:	3825883a 	mov	r18,r7
   1040c:	0401ffc4 	movi	r16,2047
   10410:	003e7e06 	br	fe0c <__subdf3+0x84>
   10414:	3809883a 	mov	r4,r7
   10418:	0011883a 	mov	r8,zero
   1041c:	0005883a 	mov	r2,zero
   10420:	003ee306 	br	ffb0 <__subdf3+0x228>
   10424:	1c62b03a 	or	r17,r3,r17
   10428:	8822c03a 	cmpne	r17,r17,zero
   1042c:	0005883a 	mov	r2,zero
   10430:	003f8906 	br	10258 <__subdf3+0x4d0>
   10434:	3809883a 	mov	r4,r7
   10438:	4821883a 	mov	r16,r9
   1043c:	0011883a 	mov	r8,zero
   10440:	0005883a 	mov	r2,zero
   10444:	003eda06 	br	ffb0 <__subdf3+0x228>
   10448:	0101ffc4 	movi	r4,2047
   1044c:	49003b26 	beq	r9,r4,1053c <__subdf3+0x7b4>
   10450:	0085c83a 	sub	r2,zero,r2
   10454:	18c02034 	orhi	r3,r3,128
   10458:	01000e04 	movi	r4,56
   1045c:	20806e16 	blt	r4,r2,10618 <__subdf3+0x890>
   10460:	010007c4 	movi	r4,31
   10464:	20807716 	blt	r4,r2,10644 <__subdf3+0x8bc>
   10468:	01000804 	movi	r4,32
   1046c:	2089c83a 	sub	r4,r4,r2
   10470:	1914983a 	sll	r10,r3,r4
   10474:	8890d83a 	srl	r8,r17,r2
   10478:	8908983a 	sll	r4,r17,r4
   1047c:	1884d83a 	srl	r2,r3,r2
   10480:	5222b03a 	or	r17,r10,r8
   10484:	2006c03a 	cmpne	r3,r4,zero
   10488:	88e2b03a 	or	r17,r17,r3
   1048c:	89a3883a 	add	r17,r17,r6
   10490:	1145883a 	add	r2,r2,r5
   10494:	898d803a 	cmpltu	r6,r17,r6
   10498:	3087883a 	add	r3,r6,r2
   1049c:	4821883a 	mov	r16,r9
   104a0:	003ed906 	br	10008 <__subdf3+0x280>
   104a4:	2984b03a 	or	r2,r5,r6
   104a8:	10004226 	beq	r2,zero,105b4 <__subdf3+0x82c>
   104ac:	1808d0fa 	srli	r4,r3,3
   104b0:	8822d0fa 	srli	r17,r17,3
   104b4:	1806977a 	slli	r3,r3,29
   104b8:	2080022c 	andhi	r2,r4,8
   104bc:	1c62b03a 	or	r17,r3,r17
   104c0:	10000826 	beq	r2,zero,104e4 <__subdf3+0x75c>
   104c4:	2812d0fa 	srli	r9,r5,3
   104c8:	4880022c 	andhi	r2,r9,8
   104cc:	1000051e 	bne	r2,zero,104e4 <__subdf3+0x75c>
   104d0:	300cd0fa 	srli	r6,r6,3
   104d4:	2804977a 	slli	r2,r5,29
   104d8:	4809883a 	mov	r4,r9
   104dc:	3825883a 	mov	r18,r7
   104e0:	11a2b03a 	or	r17,r2,r6
   104e4:	8806d77a 	srli	r3,r17,29
   104e8:	200890fa 	slli	r4,r4,3
   104ec:	882290fa 	slli	r17,r17,3
   104f0:	0401ffc4 	movi	r16,2047
   104f4:	1906b03a 	or	r3,r3,r4
   104f8:	003e4406 	br	fe0c <__subdf3+0x84>
   104fc:	2984b03a 	or	r2,r5,r6
   10500:	103e4226 	beq	r2,zero,fe0c <__subdf3+0x84>
   10504:	8989c83a 	sub	r4,r17,r6
   10508:	8911803a 	cmpltu	r8,r17,r4
   1050c:	1945c83a 	sub	r2,r3,r5
   10510:	1205c83a 	sub	r2,r2,r8
   10514:	1200202c 	andhi	r8,r2,128
   10518:	403e9a26 	beq	r8,zero,ff84 <__subdf3+0x1fc>
   1051c:	3463c83a 	sub	r17,r6,r17
   10520:	28c5c83a 	sub	r2,r5,r3
   10524:	344d803a 	cmpltu	r6,r6,r17
   10528:	1187c83a 	sub	r3,r2,r6
   1052c:	3825883a 	mov	r18,r7
   10530:	003e3606 	br	fe0c <__subdf3+0x84>
   10534:	0101ffc4 	movi	r4,2047
   10538:	493fc71e 	bne	r9,r4,10458 <__subdf3+0x6d0>
   1053c:	2807883a 	mov	r3,r5
   10540:	3023883a 	mov	r17,r6
   10544:	4821883a 	mov	r16,r9
   10548:	003e3006 	br	fe0c <__subdf3+0x84>
   1054c:	10003626 	beq	r2,zero,10628 <__subdf3+0x8a0>
   10550:	2984b03a 	or	r2,r5,r6
   10554:	10001726 	beq	r2,zero,105b4 <__subdf3+0x82c>
   10558:	1808d0fa 	srli	r4,r3,3
   1055c:	8822d0fa 	srli	r17,r17,3
   10560:	1806977a 	slli	r3,r3,29
   10564:	2080022c 	andhi	r2,r4,8
   10568:	1c62b03a 	or	r17,r3,r17
   1056c:	10000726 	beq	r2,zero,1058c <__subdf3+0x804>
   10570:	2812d0fa 	srli	r9,r5,3
   10574:	4880022c 	andhi	r2,r9,8
   10578:	1000041e 	bne	r2,zero,1058c <__subdf3+0x804>
   1057c:	300cd0fa 	srli	r6,r6,3
   10580:	2804977a 	slli	r2,r5,29
   10584:	4809883a 	mov	r4,r9
   10588:	11a2b03a 	or	r17,r2,r6
   1058c:	8806d77a 	srli	r3,r17,29
   10590:	200890fa 	slli	r4,r4,3
   10594:	882290fa 	slli	r17,r17,3
   10598:	3825883a 	mov	r18,r7
   1059c:	1906b03a 	or	r3,r3,r4
   105a0:	0401ffc4 	movi	r16,2047
   105a4:	003e1906 	br	fe0c <__subdf3+0x84>
   105a8:	000b883a 	mov	r5,zero
   105ac:	0005883a 	mov	r2,zero
   105b0:	003e2e06 	br	fe6c <__subdf3+0xe4>
   105b4:	0401ffc4 	movi	r16,2047
   105b8:	003e1406 	br	fe0c <__subdf3+0x84>
   105bc:	0005883a 	mov	r2,zero
   105c0:	003f7506 	br	10398 <__subdf3+0x610>
   105c4:	0005883a 	mov	r2,zero
   105c8:	0009883a 	mov	r4,zero
   105cc:	003e7806 	br	ffb0 <__subdf3+0x228>
   105d0:	123ff804 	addi	r8,r2,-32
   105d4:	01000804 	movi	r4,32
   105d8:	1a10d83a 	srl	r8,r3,r8
   105dc:	11002526 	beq	r2,r4,10674 <__subdf3+0x8ec>
   105e0:	01001004 	movi	r4,64
   105e4:	2085c83a 	sub	r2,r4,r2
   105e8:	1884983a 	sll	r2,r3,r2
   105ec:	1444b03a 	or	r2,r2,r17
   105f0:	1004c03a 	cmpne	r2,r2,zero
   105f4:	40a2b03a 	or	r17,r8,r2
   105f8:	0005883a 	mov	r2,zero
   105fc:	003f1606 	br	10258 <__subdf3+0x4d0>
   10600:	02000434 	movhi	r8,16
   10604:	0009883a 	mov	r4,zero
   10608:	423fffc4 	addi	r8,r8,-1
   1060c:	00bfffc4 	movi	r2,-1
   10610:	0401ffc4 	movi	r16,2047
   10614:	003e6606 	br	ffb0 <__subdf3+0x228>
   10618:	1c62b03a 	or	r17,r3,r17
   1061c:	8822c03a 	cmpne	r17,r17,zero
   10620:	0005883a 	mov	r2,zero
   10624:	003f9906 	br	1048c <__subdf3+0x704>
   10628:	2807883a 	mov	r3,r5
   1062c:	3023883a 	mov	r17,r6
   10630:	0401ffc4 	movi	r16,2047
   10634:	003df506 	br	fe0c <__subdf3+0x84>
   10638:	2807883a 	mov	r3,r5
   1063c:	3023883a 	mov	r17,r6
   10640:	003df206 	br	fe0c <__subdf3+0x84>
   10644:	123ff804 	addi	r8,r2,-32
   10648:	01000804 	movi	r4,32
   1064c:	1a10d83a 	srl	r8,r3,r8
   10650:	11000a26 	beq	r2,r4,1067c <__subdf3+0x8f4>
   10654:	01001004 	movi	r4,64
   10658:	2085c83a 	sub	r2,r4,r2
   1065c:	1884983a 	sll	r2,r3,r2
   10660:	1444b03a 	or	r2,r2,r17
   10664:	1004c03a 	cmpne	r2,r2,zero
   10668:	40a2b03a 	or	r17,r8,r2
   1066c:	0005883a 	mov	r2,zero
   10670:	003f8606 	br	1048c <__subdf3+0x704>
   10674:	0005883a 	mov	r2,zero
   10678:	003fdc06 	br	105ec <__subdf3+0x864>
   1067c:	0005883a 	mov	r2,zero
   10680:	003ff706 	br	10660 <__subdf3+0x8d8>

00010684 <__fixdfsi>:
   10684:	280cd53a 	srli	r6,r5,20
   10688:	00c00434 	movhi	r3,16
   1068c:	18ffffc4 	addi	r3,r3,-1
   10690:	3181ffcc 	andi	r6,r6,2047
   10694:	01c0ff84 	movi	r7,1022
   10698:	28c6703a 	and	r3,r5,r3
   1069c:	280ad7fa 	srli	r5,r5,31
   106a0:	3980120e 	bge	r7,r6,106ec <__fixdfsi+0x68>
   106a4:	00810744 	movi	r2,1053
   106a8:	11800c16 	blt	r2,r6,106dc <__fixdfsi+0x58>
   106ac:	00810cc4 	movi	r2,1075
   106b0:	1185c83a 	sub	r2,r2,r6
   106b4:	01c007c4 	movi	r7,31
   106b8:	18c00434 	orhi	r3,r3,16
   106bc:	38800d16 	blt	r7,r2,106f4 <__fixdfsi+0x70>
   106c0:	31befb44 	addi	r6,r6,-1043
   106c4:	2084d83a 	srl	r2,r4,r2
   106c8:	1986983a 	sll	r3,r3,r6
   106cc:	1884b03a 	or	r2,r3,r2
   106d0:	28000726 	beq	r5,zero,106f0 <__fixdfsi+0x6c>
   106d4:	0085c83a 	sub	r2,zero,r2
   106d8:	f800283a 	ret
   106dc:	00a00034 	movhi	r2,32768
   106e0:	10bfffc4 	addi	r2,r2,-1
   106e4:	2885883a 	add	r2,r5,r2
   106e8:	f800283a 	ret
   106ec:	0005883a 	mov	r2,zero
   106f0:	f800283a 	ret
   106f4:	008104c4 	movi	r2,1043
   106f8:	1185c83a 	sub	r2,r2,r6
   106fc:	1884d83a 	srl	r2,r3,r2
   10700:	003ff306 	br	106d0 <__fixdfsi+0x4c>

00010704 <__floatsidf>:
   10704:	defffd04 	addi	sp,sp,-12
   10708:	dfc00215 	stw	ra,8(sp)
   1070c:	dc400115 	stw	r17,4(sp)
   10710:	dc000015 	stw	r16,0(sp)
   10714:	20002b26 	beq	r4,zero,107c4 <__floatsidf+0xc0>
   10718:	2023883a 	mov	r17,r4
   1071c:	2020d7fa 	srli	r16,r4,31
   10720:	20002d16 	blt	r4,zero,107d8 <__floatsidf+0xd4>
   10724:	8809883a 	mov	r4,r17
   10728:	00108880 	call	10888 <__clzsi2>
   1072c:	01410784 	movi	r5,1054
   10730:	288bc83a 	sub	r5,r5,r2
   10734:	01010cc4 	movi	r4,1075
   10738:	2149c83a 	sub	r4,r4,r5
   1073c:	00c007c4 	movi	r3,31
   10740:	1900160e 	bge	r3,r4,1079c <__floatsidf+0x98>
   10744:	00c104c4 	movi	r3,1043
   10748:	1947c83a 	sub	r3,r3,r5
   1074c:	88c6983a 	sll	r3,r17,r3
   10750:	00800434 	movhi	r2,16
   10754:	10bfffc4 	addi	r2,r2,-1
   10758:	1886703a 	and	r3,r3,r2
   1075c:	2941ffcc 	andi	r5,r5,2047
   10760:	800d883a 	mov	r6,r16
   10764:	0005883a 	mov	r2,zero
   10768:	280a953a 	slli	r5,r5,20
   1076c:	31803fcc 	andi	r6,r6,255
   10770:	01000434 	movhi	r4,16
   10774:	300c97fa 	slli	r6,r6,31
   10778:	213fffc4 	addi	r4,r4,-1
   1077c:	1906703a 	and	r3,r3,r4
   10780:	1946b03a 	or	r3,r3,r5
   10784:	1986b03a 	or	r3,r3,r6
   10788:	dfc00217 	ldw	ra,8(sp)
   1078c:	dc400117 	ldw	r17,4(sp)
   10790:	dc000017 	ldw	r16,0(sp)
   10794:	dec00304 	addi	sp,sp,12
   10798:	f800283a 	ret
   1079c:	00c002c4 	movi	r3,11
   107a0:	1887c83a 	sub	r3,r3,r2
   107a4:	88c6d83a 	srl	r3,r17,r3
   107a8:	8904983a 	sll	r2,r17,r4
   107ac:	01000434 	movhi	r4,16
   107b0:	213fffc4 	addi	r4,r4,-1
   107b4:	2941ffcc 	andi	r5,r5,2047
   107b8:	1906703a 	and	r3,r3,r4
   107bc:	800d883a 	mov	r6,r16
   107c0:	003fe906 	br	10768 <__floatsidf+0x64>
   107c4:	000d883a 	mov	r6,zero
   107c8:	000b883a 	mov	r5,zero
   107cc:	0007883a 	mov	r3,zero
   107d0:	0005883a 	mov	r2,zero
   107d4:	003fe406 	br	10768 <__floatsidf+0x64>
   107d8:	0123c83a 	sub	r17,zero,r4
   107dc:	003fd106 	br	10724 <__floatsidf+0x20>

000107e0 <__floatunsidf>:
   107e0:	defffe04 	addi	sp,sp,-8
   107e4:	dc000015 	stw	r16,0(sp)
   107e8:	dfc00115 	stw	ra,4(sp)
   107ec:	2021883a 	mov	r16,r4
   107f0:	20002226 	beq	r4,zero,1087c <__floatunsidf+0x9c>
   107f4:	00108880 	call	10888 <__clzsi2>
   107f8:	01010784 	movi	r4,1054
   107fc:	2089c83a 	sub	r4,r4,r2
   10800:	01810cc4 	movi	r6,1075
   10804:	310dc83a 	sub	r6,r6,r4
   10808:	00c007c4 	movi	r3,31
   1080c:	1980120e 	bge	r3,r6,10858 <__floatunsidf+0x78>
   10810:	00c104c4 	movi	r3,1043
   10814:	1907c83a 	sub	r3,r3,r4
   10818:	80ca983a 	sll	r5,r16,r3
   1081c:	00800434 	movhi	r2,16
   10820:	10bfffc4 	addi	r2,r2,-1
   10824:	2101ffcc 	andi	r4,r4,2047
   10828:	0021883a 	mov	r16,zero
   1082c:	288a703a 	and	r5,r5,r2
   10830:	2008953a 	slli	r4,r4,20
   10834:	00c00434 	movhi	r3,16
   10838:	18ffffc4 	addi	r3,r3,-1
   1083c:	28c6703a 	and	r3,r5,r3
   10840:	8005883a 	mov	r2,r16
   10844:	1906b03a 	or	r3,r3,r4
   10848:	dfc00117 	ldw	ra,4(sp)
   1084c:	dc000017 	ldw	r16,0(sp)
   10850:	dec00204 	addi	sp,sp,8
   10854:	f800283a 	ret
   10858:	00c002c4 	movi	r3,11
   1085c:	188bc83a 	sub	r5,r3,r2
   10860:	814ad83a 	srl	r5,r16,r5
   10864:	00c00434 	movhi	r3,16
   10868:	18ffffc4 	addi	r3,r3,-1
   1086c:	81a0983a 	sll	r16,r16,r6
   10870:	2101ffcc 	andi	r4,r4,2047
   10874:	28ca703a 	and	r5,r5,r3
   10878:	003fed06 	br	10830 <__floatunsidf+0x50>
   1087c:	0009883a 	mov	r4,zero
   10880:	000b883a 	mov	r5,zero
   10884:	003fea06 	br	10830 <__floatunsidf+0x50>

00010888 <__clzsi2>:
   10888:	00bfffd4 	movui	r2,65535
   1088c:	11000536 	bltu	r2,r4,108a4 <__clzsi2+0x1c>
   10890:	00803fc4 	movi	r2,255
   10894:	11000f36 	bltu	r2,r4,108d4 <__clzsi2+0x4c>
   10898:	00800804 	movi	r2,32
   1089c:	0007883a 	mov	r3,zero
   108a0:	00000506 	br	108b8 <__clzsi2+0x30>
   108a4:	00804034 	movhi	r2,256
   108a8:	10bfffc4 	addi	r2,r2,-1
   108ac:	11000c2e 	bgeu	r2,r4,108e0 <__clzsi2+0x58>
   108b0:	00800204 	movi	r2,8
   108b4:	00c00604 	movi	r3,24
   108b8:	20c8d83a 	srl	r4,r4,r3
   108bc:	00c000b4 	movhi	r3,2
   108c0:	18f72904 	addi	r3,r3,-9052
   108c4:	1909883a 	add	r4,r3,r4
   108c8:	20c00003 	ldbu	r3,0(r4)
   108cc:	10c5c83a 	sub	r2,r2,r3
   108d0:	f800283a 	ret
   108d4:	00800604 	movi	r2,24
   108d8:	00c00204 	movi	r3,8
   108dc:	003ff606 	br	108b8 <__clzsi2+0x30>
   108e0:	00800404 	movi	r2,16
   108e4:	1007883a 	mov	r3,r2
   108e8:	003ff306 	br	108b8 <__clzsi2+0x30>

000108ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   108ec:	defffe04 	addi	sp,sp,-8
   108f0:	dfc00115 	stw	ra,4(sp)
   108f4:	df000015 	stw	fp,0(sp)
   108f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   108fc:	d0a00b17 	ldw	r2,-32724(gp)
   10900:	10000326 	beq	r2,zero,10910 <alt_get_errno+0x24>
   10904:	d0a00b17 	ldw	r2,-32724(gp)
   10908:	103ee83a 	callr	r2
   1090c:	00000106 	br	10914 <alt_get_errno+0x28>
   10910:	d0a7e104 	addi	r2,gp,-24700
}
   10914:	e037883a 	mov	sp,fp
   10918:	dfc00117 	ldw	ra,4(sp)
   1091c:	df000017 	ldw	fp,0(sp)
   10920:	dec00204 	addi	sp,sp,8
   10924:	f800283a 	ret

00010928 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   10928:	defffb04 	addi	sp,sp,-20
   1092c:	dfc00415 	stw	ra,16(sp)
   10930:	df000315 	stw	fp,12(sp)
   10934:	df000304 	addi	fp,sp,12
   10938:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1093c:	e0bfff17 	ldw	r2,-4(fp)
   10940:	10000616 	blt	r2,zero,1095c <close+0x34>
   10944:	e0bfff17 	ldw	r2,-4(fp)
   10948:	10c00324 	muli	r3,r2,12
   1094c:	008000b4 	movhi	r2,2
   10950:	10ba4304 	addi	r2,r2,-5876
   10954:	1885883a 	add	r2,r3,r2
   10958:	00000106 	br	10960 <close+0x38>
   1095c:	0005883a 	mov	r2,zero
   10960:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   10964:	e0bffd17 	ldw	r2,-12(fp)
   10968:	10001926 	beq	r2,zero,109d0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1096c:	e0bffd17 	ldw	r2,-12(fp)
   10970:	10800017 	ldw	r2,0(r2)
   10974:	10800417 	ldw	r2,16(r2)
   10978:	10000626 	beq	r2,zero,10994 <close+0x6c>
   1097c:	e0bffd17 	ldw	r2,-12(fp)
   10980:	10800017 	ldw	r2,0(r2)
   10984:	10800417 	ldw	r2,16(r2)
   10988:	e13ffd17 	ldw	r4,-12(fp)
   1098c:	103ee83a 	callr	r2
   10990:	00000106 	br	10998 <close+0x70>
   10994:	0005883a 	mov	r2,zero
   10998:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1099c:	e13fff17 	ldw	r4,-4(fp)
   109a0:	0010fe00 	call	10fe0 <alt_release_fd>
    if (rval < 0)
   109a4:	e0bffe17 	ldw	r2,-8(fp)
   109a8:	1000070e 	bge	r2,zero,109c8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   109ac:	00108ec0 	call	108ec <alt_get_errno>
   109b0:	1007883a 	mov	r3,r2
   109b4:	e0bffe17 	ldw	r2,-8(fp)
   109b8:	0085c83a 	sub	r2,zero,r2
   109bc:	18800015 	stw	r2,0(r3)
      return -1;
   109c0:	00bfffc4 	movi	r2,-1
   109c4:	00000706 	br	109e4 <close+0xbc>
    }
    return 0;
   109c8:	0005883a 	mov	r2,zero
   109cc:	00000506 	br	109e4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   109d0:	00108ec0 	call	108ec <alt_get_errno>
   109d4:	1007883a 	mov	r3,r2
   109d8:	00801444 	movi	r2,81
   109dc:	18800015 	stw	r2,0(r3)
    return -1;
   109e0:	00bfffc4 	movi	r2,-1
  }
}
   109e4:	e037883a 	mov	sp,fp
   109e8:	dfc00117 	ldw	ra,4(sp)
   109ec:	df000017 	ldw	fp,0(sp)
   109f0:	dec00204 	addi	sp,sp,8
   109f4:	f800283a 	ret

000109f8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   109f8:	defffc04 	addi	sp,sp,-16
   109fc:	df000315 	stw	fp,12(sp)
   10a00:	df000304 	addi	fp,sp,12
   10a04:	e13ffd15 	stw	r4,-12(fp)
   10a08:	e17ffe15 	stw	r5,-8(fp)
   10a0c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   10a10:	e0bfff17 	ldw	r2,-4(fp)
}
   10a14:	e037883a 	mov	sp,fp
   10a18:	df000017 	ldw	fp,0(sp)
   10a1c:	dec00104 	addi	sp,sp,4
   10a20:	f800283a 	ret

00010a24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10a24:	defffe04 	addi	sp,sp,-8
   10a28:	dfc00115 	stw	ra,4(sp)
   10a2c:	df000015 	stw	fp,0(sp)
   10a30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10a34:	d0a00b17 	ldw	r2,-32724(gp)
   10a38:	10000326 	beq	r2,zero,10a48 <alt_get_errno+0x24>
   10a3c:	d0a00b17 	ldw	r2,-32724(gp)
   10a40:	103ee83a 	callr	r2
   10a44:	00000106 	br	10a4c <alt_get_errno+0x28>
   10a48:	d0a7e104 	addi	r2,gp,-24700
}
   10a4c:	e037883a 	mov	sp,fp
   10a50:	dfc00117 	ldw	ra,4(sp)
   10a54:	df000017 	ldw	fp,0(sp)
   10a58:	dec00204 	addi	sp,sp,8
   10a5c:	f800283a 	ret

00010a60 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   10a60:	defffb04 	addi	sp,sp,-20
   10a64:	dfc00415 	stw	ra,16(sp)
   10a68:	df000315 	stw	fp,12(sp)
   10a6c:	df000304 	addi	fp,sp,12
   10a70:	e13ffe15 	stw	r4,-8(fp)
   10a74:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10a78:	e0bffe17 	ldw	r2,-8(fp)
   10a7c:	10000616 	blt	r2,zero,10a98 <fstat+0x38>
   10a80:	e0bffe17 	ldw	r2,-8(fp)
   10a84:	10c00324 	muli	r3,r2,12
   10a88:	008000b4 	movhi	r2,2
   10a8c:	10ba4304 	addi	r2,r2,-5876
   10a90:	1885883a 	add	r2,r3,r2
   10a94:	00000106 	br	10a9c <fstat+0x3c>
   10a98:	0005883a 	mov	r2,zero
   10a9c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   10aa0:	e0bffd17 	ldw	r2,-12(fp)
   10aa4:	10001026 	beq	r2,zero,10ae8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   10aa8:	e0bffd17 	ldw	r2,-12(fp)
   10aac:	10800017 	ldw	r2,0(r2)
   10ab0:	10800817 	ldw	r2,32(r2)
   10ab4:	10000726 	beq	r2,zero,10ad4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   10ab8:	e0bffd17 	ldw	r2,-12(fp)
   10abc:	10800017 	ldw	r2,0(r2)
   10ac0:	10800817 	ldw	r2,32(r2)
   10ac4:	e17fff17 	ldw	r5,-4(fp)
   10ac8:	e13ffd17 	ldw	r4,-12(fp)
   10acc:	103ee83a 	callr	r2
   10ad0:	00000a06 	br	10afc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   10ad4:	e0bfff17 	ldw	r2,-4(fp)
   10ad8:	00c80004 	movi	r3,8192
   10adc:	10c00115 	stw	r3,4(r2)
      return 0;
   10ae0:	0005883a 	mov	r2,zero
   10ae4:	00000506 	br	10afc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10ae8:	0010a240 	call	10a24 <alt_get_errno>
   10aec:	1007883a 	mov	r3,r2
   10af0:	00801444 	movi	r2,81
   10af4:	18800015 	stw	r2,0(r3)
    return -1;
   10af8:	00bfffc4 	movi	r2,-1
  }
}
   10afc:	e037883a 	mov	sp,fp
   10b00:	dfc00117 	ldw	ra,4(sp)
   10b04:	df000017 	ldw	fp,0(sp)
   10b08:	dec00204 	addi	sp,sp,8
   10b0c:	f800283a 	ret

00010b10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10b10:	defffe04 	addi	sp,sp,-8
   10b14:	dfc00115 	stw	ra,4(sp)
   10b18:	df000015 	stw	fp,0(sp)
   10b1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10b20:	d0a00b17 	ldw	r2,-32724(gp)
   10b24:	10000326 	beq	r2,zero,10b34 <alt_get_errno+0x24>
   10b28:	d0a00b17 	ldw	r2,-32724(gp)
   10b2c:	103ee83a 	callr	r2
   10b30:	00000106 	br	10b38 <alt_get_errno+0x28>
   10b34:	d0a7e104 	addi	r2,gp,-24700
}
   10b38:	e037883a 	mov	sp,fp
   10b3c:	dfc00117 	ldw	ra,4(sp)
   10b40:	df000017 	ldw	fp,0(sp)
   10b44:	dec00204 	addi	sp,sp,8
   10b48:	f800283a 	ret

00010b4c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   10b4c:	deffed04 	addi	sp,sp,-76
   10b50:	dfc01215 	stw	ra,72(sp)
   10b54:	df001115 	stw	fp,68(sp)
   10b58:	df001104 	addi	fp,sp,68
   10b5c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10b60:	e0bfff17 	ldw	r2,-4(fp)
   10b64:	10000616 	blt	r2,zero,10b80 <isatty+0x34>
   10b68:	e0bfff17 	ldw	r2,-4(fp)
   10b6c:	10c00324 	muli	r3,r2,12
   10b70:	008000b4 	movhi	r2,2
   10b74:	10ba4304 	addi	r2,r2,-5876
   10b78:	1885883a 	add	r2,r3,r2
   10b7c:	00000106 	br	10b84 <isatty+0x38>
   10b80:	0005883a 	mov	r2,zero
   10b84:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   10b88:	e0bfef17 	ldw	r2,-68(fp)
   10b8c:	10000e26 	beq	r2,zero,10bc8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   10b90:	e0bfef17 	ldw	r2,-68(fp)
   10b94:	10800017 	ldw	r2,0(r2)
   10b98:	10800817 	ldw	r2,32(r2)
   10b9c:	1000021e 	bne	r2,zero,10ba8 <isatty+0x5c>
    {
      return 1;
   10ba0:	00800044 	movi	r2,1
   10ba4:	00000d06 	br	10bdc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   10ba8:	e0bff004 	addi	r2,fp,-64
   10bac:	100b883a 	mov	r5,r2
   10bb0:	e13fff17 	ldw	r4,-4(fp)
   10bb4:	0010a600 	call	10a60 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   10bb8:	e0bff117 	ldw	r2,-60(fp)
   10bbc:	10880020 	cmpeqi	r2,r2,8192
   10bc0:	10803fcc 	andi	r2,r2,255
   10bc4:	00000506 	br	10bdc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10bc8:	0010b100 	call	10b10 <alt_get_errno>
   10bcc:	1007883a 	mov	r3,r2
   10bd0:	00801444 	movi	r2,81
   10bd4:	18800015 	stw	r2,0(r3)
    return 0;
   10bd8:	0005883a 	mov	r2,zero
  }
}
   10bdc:	e037883a 	mov	sp,fp
   10be0:	dfc00117 	ldw	ra,4(sp)
   10be4:	df000017 	ldw	fp,0(sp)
   10be8:	dec00204 	addi	sp,sp,8
   10bec:	f800283a 	ret

00010bf0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10bf0:	defffc04 	addi	sp,sp,-16
   10bf4:	df000315 	stw	fp,12(sp)
   10bf8:	df000304 	addi	fp,sp,12
   10bfc:	e13ffd15 	stw	r4,-12(fp)
   10c00:	e17ffe15 	stw	r5,-8(fp)
   10c04:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   10c08:	e0fffe17 	ldw	r3,-8(fp)
   10c0c:	e0bffd17 	ldw	r2,-12(fp)
   10c10:	18800c26 	beq	r3,r2,10c44 <alt_load_section+0x54>
  {
    while( to != end )
   10c14:	00000806 	br	10c38 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10c18:	e0bffe17 	ldw	r2,-8(fp)
   10c1c:	10c00104 	addi	r3,r2,4
   10c20:	e0fffe15 	stw	r3,-8(fp)
   10c24:	e0fffd17 	ldw	r3,-12(fp)
   10c28:	19000104 	addi	r4,r3,4
   10c2c:	e13ffd15 	stw	r4,-12(fp)
   10c30:	18c00017 	ldw	r3,0(r3)
   10c34:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10c38:	e0fffe17 	ldw	r3,-8(fp)
   10c3c:	e0bfff17 	ldw	r2,-4(fp)
   10c40:	18bff51e 	bne	r3,r2,10c18 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   10c44:	0001883a 	nop
   10c48:	e037883a 	mov	sp,fp
   10c4c:	df000017 	ldw	fp,0(sp)
   10c50:	dec00104 	addi	sp,sp,4
   10c54:	f800283a 	ret

00010c58 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10c58:	defffe04 	addi	sp,sp,-8
   10c5c:	dfc00115 	stw	ra,4(sp)
   10c60:	df000015 	stw	fp,0(sp)
   10c64:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10c68:	018000b4 	movhi	r6,2
   10c6c:	31bfb004 	addi	r6,r6,-320
   10c70:	014000b4 	movhi	r5,2
   10c74:	29781004 	addi	r5,r5,-8128
   10c78:	010000b4 	movhi	r4,2
   10c7c:	213fb004 	addi	r4,r4,-320
   10c80:	0010bf00 	call	10bf0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10c84:	01800034 	movhi	r6,0
   10c88:	31809204 	addi	r6,r6,584
   10c8c:	01400034 	movhi	r5,0
   10c90:	29400804 	addi	r5,r5,32
   10c94:	01000034 	movhi	r4,0
   10c98:	21000804 	addi	r4,r4,32
   10c9c:	0010bf00 	call	10bf0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10ca0:	018000b4 	movhi	r6,2
   10ca4:	31b81004 	addi	r6,r6,-8128
   10ca8:	014000b4 	movhi	r5,2
   10cac:	2975c504 	addi	r5,r5,-10476
   10cb0:	010000b4 	movhi	r4,2
   10cb4:	2135c504 	addi	r4,r4,-10476
   10cb8:	0010bf00 	call	10bf0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10cbc:	001c3b80 	call	1c3b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10cc0:	001c6080 	call	1c608 <alt_icache_flush_all>
}
   10cc4:	0001883a 	nop
   10cc8:	e037883a 	mov	sp,fp
   10ccc:	dfc00117 	ldw	ra,4(sp)
   10cd0:	df000017 	ldw	fp,0(sp)
   10cd4:	dec00204 	addi	sp,sp,8
   10cd8:	f800283a 	ret

00010cdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10cdc:	defffe04 	addi	sp,sp,-8
   10ce0:	dfc00115 	stw	ra,4(sp)
   10ce4:	df000015 	stw	fp,0(sp)
   10ce8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10cec:	d0a00b17 	ldw	r2,-32724(gp)
   10cf0:	10000326 	beq	r2,zero,10d00 <alt_get_errno+0x24>
   10cf4:	d0a00b17 	ldw	r2,-32724(gp)
   10cf8:	103ee83a 	callr	r2
   10cfc:	00000106 	br	10d04 <alt_get_errno+0x28>
   10d00:	d0a7e104 	addi	r2,gp,-24700
}
   10d04:	e037883a 	mov	sp,fp
   10d08:	dfc00117 	ldw	ra,4(sp)
   10d0c:	df000017 	ldw	fp,0(sp)
   10d10:	dec00204 	addi	sp,sp,8
   10d14:	f800283a 	ret

00010d18 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   10d18:	defff904 	addi	sp,sp,-28
   10d1c:	dfc00615 	stw	ra,24(sp)
   10d20:	df000515 	stw	fp,20(sp)
   10d24:	df000504 	addi	fp,sp,20
   10d28:	e13ffd15 	stw	r4,-12(fp)
   10d2c:	e17ffe15 	stw	r5,-8(fp)
   10d30:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   10d34:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10d38:	e0bffd17 	ldw	r2,-12(fp)
   10d3c:	10000616 	blt	r2,zero,10d58 <lseek+0x40>
   10d40:	e0bffd17 	ldw	r2,-12(fp)
   10d44:	10c00324 	muli	r3,r2,12
   10d48:	008000b4 	movhi	r2,2
   10d4c:	10ba4304 	addi	r2,r2,-5876
   10d50:	1885883a 	add	r2,r3,r2
   10d54:	00000106 	br	10d5c <lseek+0x44>
   10d58:	0005883a 	mov	r2,zero
   10d5c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   10d60:	e0bffc17 	ldw	r2,-16(fp)
   10d64:	10001026 	beq	r2,zero,10da8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   10d68:	e0bffc17 	ldw	r2,-16(fp)
   10d6c:	10800017 	ldw	r2,0(r2)
   10d70:	10800717 	ldw	r2,28(r2)
   10d74:	10000926 	beq	r2,zero,10d9c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   10d78:	e0bffc17 	ldw	r2,-16(fp)
   10d7c:	10800017 	ldw	r2,0(r2)
   10d80:	10800717 	ldw	r2,28(r2)
   10d84:	e1bfff17 	ldw	r6,-4(fp)
   10d88:	e17ffe17 	ldw	r5,-8(fp)
   10d8c:	e13ffc17 	ldw	r4,-16(fp)
   10d90:	103ee83a 	callr	r2
   10d94:	e0bffb15 	stw	r2,-20(fp)
   10d98:	00000506 	br	10db0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   10d9c:	00bfde84 	movi	r2,-134
   10da0:	e0bffb15 	stw	r2,-20(fp)
   10da4:	00000206 	br	10db0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   10da8:	00bfebc4 	movi	r2,-81
   10dac:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   10db0:	e0bffb17 	ldw	r2,-20(fp)
   10db4:	1000070e 	bge	r2,zero,10dd4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   10db8:	0010cdc0 	call	10cdc <alt_get_errno>
   10dbc:	1007883a 	mov	r3,r2
   10dc0:	e0bffb17 	ldw	r2,-20(fp)
   10dc4:	0085c83a 	sub	r2,zero,r2
   10dc8:	18800015 	stw	r2,0(r3)
    rc = -1;
   10dcc:	00bfffc4 	movi	r2,-1
   10dd0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   10dd4:	e0bffb17 	ldw	r2,-20(fp)
}
   10dd8:	e037883a 	mov	sp,fp
   10ddc:	dfc00117 	ldw	ra,4(sp)
   10de0:	df000017 	ldw	fp,0(sp)
   10de4:	dec00204 	addi	sp,sp,8
   10de8:	f800283a 	ret

00010dec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10dec:	defff904 	addi	sp,sp,-28
   10df0:	dfc00615 	stw	ra,24(sp)
   10df4:	df000515 	stw	fp,20(sp)
   10df8:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10dfc:	0009883a 	mov	r4,zero
   10e00:	00198140 	call	19814 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   10e04:	0011da80 	call	11da8 <OSInit>
   10e08:	01000044 	movi	r4,1
   10e0c:	00171d00 	call	171d0 <OSSemCreate>
   10e10:	d0a7e715 	stw	r2,-24676(gp)
   10e14:	01000044 	movi	r4,1
   10e18:	00171d00 	call	171d0 <OSSemCreate>
   10e1c:	d0a7e915 	stw	r2,-24668(gp)
   10e20:	d0a7e204 	addi	r2,gp,-24696
   10e24:	e0bffc15 	stw	r2,-16(fp)
   10e28:	00800044 	movi	r2,1
   10e2c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   10e30:	e0bffd0b 	ldhu	r2,-12(fp)
   10e34:	1009883a 	mov	r4,r2
   10e38:	00171d00 	call	171d0 <OSSemCreate>
   10e3c:	1007883a 	mov	r3,r2
   10e40:	e0bffc17 	ldw	r2,-16(fp)
   10e44:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10e48:	001984c0 	call	1984c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10e4c:	018000b4 	movhi	r6,2
   10e50:	31b76c04 	addi	r6,r6,-8784
   10e54:	014000b4 	movhi	r5,2
   10e58:	29776c04 	addi	r5,r5,-8784
   10e5c:	010000b4 	movhi	r4,2
   10e60:	21376c04 	addi	r4,r4,-8784
   10e64:	001c7000 	call	1c700 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10e68:	001c4b80 	call	1c4b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10e6c:	010000b4 	movhi	r4,2
   10e70:	21314604 	addi	r4,r4,-15080
   10e74:	001d3800 	call	1d380 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10e78:	d0a7e317 	ldw	r2,-24692(gp)
   10e7c:	d0e7e417 	ldw	r3,-24688(gp)
   10e80:	d127e517 	ldw	r4,-24684(gp)
   10e84:	200d883a 	mov	r6,r4
   10e88:	180b883a 	mov	r5,r3
   10e8c:	1009883a 	mov	r4,r2
   10e90:	00007280 	call	728 <main>
   10e94:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   10e98:	01000044 	movi	r4,1
   10e9c:	00109280 	call	10928 <close>
  exit (result);
   10ea0:	e13ffb17 	ldw	r4,-20(fp)
   10ea4:	001d3940 	call	1d394 <exit>

00010ea8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10ea8:	defffe04 	addi	sp,sp,-8
   10eac:	dfc00115 	stw	ra,4(sp)
   10eb0:	df000015 	stw	fp,0(sp)
   10eb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10eb8:	d0a00b17 	ldw	r2,-32724(gp)
   10ebc:	10000326 	beq	r2,zero,10ecc <alt_get_errno+0x24>
   10ec0:	d0a00b17 	ldw	r2,-32724(gp)
   10ec4:	103ee83a 	callr	r2
   10ec8:	00000106 	br	10ed0 <alt_get_errno+0x28>
   10ecc:	d0a7e104 	addi	r2,gp,-24700
}
   10ed0:	e037883a 	mov	sp,fp
   10ed4:	dfc00117 	ldw	ra,4(sp)
   10ed8:	df000017 	ldw	fp,0(sp)
   10edc:	dec00204 	addi	sp,sp,8
   10ee0:	f800283a 	ret

00010ee4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   10ee4:	defff904 	addi	sp,sp,-28
   10ee8:	dfc00615 	stw	ra,24(sp)
   10eec:	df000515 	stw	fp,20(sp)
   10ef0:	df000504 	addi	fp,sp,20
   10ef4:	e13ffd15 	stw	r4,-12(fp)
   10ef8:	e17ffe15 	stw	r5,-8(fp)
   10efc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10f00:	e0bffd17 	ldw	r2,-12(fp)
   10f04:	10000616 	blt	r2,zero,10f20 <read+0x3c>
   10f08:	e0bffd17 	ldw	r2,-12(fp)
   10f0c:	10c00324 	muli	r3,r2,12
   10f10:	008000b4 	movhi	r2,2
   10f14:	10ba4304 	addi	r2,r2,-5876
   10f18:	1885883a 	add	r2,r3,r2
   10f1c:	00000106 	br	10f24 <read+0x40>
   10f20:	0005883a 	mov	r2,zero
   10f24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10f28:	e0bffb17 	ldw	r2,-20(fp)
   10f2c:	10002226 	beq	r2,zero,10fb8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10f30:	e0bffb17 	ldw	r2,-20(fp)
   10f34:	10800217 	ldw	r2,8(r2)
   10f38:	108000cc 	andi	r2,r2,3
   10f3c:	10800060 	cmpeqi	r2,r2,1
   10f40:	1000181e 	bne	r2,zero,10fa4 <read+0xc0>
        (fd->dev->read))
   10f44:	e0bffb17 	ldw	r2,-20(fp)
   10f48:	10800017 	ldw	r2,0(r2)
   10f4c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10f50:	10001426 	beq	r2,zero,10fa4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   10f54:	e0bffb17 	ldw	r2,-20(fp)
   10f58:	10800017 	ldw	r2,0(r2)
   10f5c:	10800517 	ldw	r2,20(r2)
   10f60:	e0ffff17 	ldw	r3,-4(fp)
   10f64:	180d883a 	mov	r6,r3
   10f68:	e17ffe17 	ldw	r5,-8(fp)
   10f6c:	e13ffb17 	ldw	r4,-20(fp)
   10f70:	103ee83a 	callr	r2
   10f74:	e0bffc15 	stw	r2,-16(fp)
   10f78:	e0bffc17 	ldw	r2,-16(fp)
   10f7c:	1000070e 	bge	r2,zero,10f9c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   10f80:	0010ea80 	call	10ea8 <alt_get_errno>
   10f84:	1007883a 	mov	r3,r2
   10f88:	e0bffc17 	ldw	r2,-16(fp)
   10f8c:	0085c83a 	sub	r2,zero,r2
   10f90:	18800015 	stw	r2,0(r3)
          return -1;
   10f94:	00bfffc4 	movi	r2,-1
   10f98:	00000c06 	br	10fcc <read+0xe8>
        }
        return rval;
   10f9c:	e0bffc17 	ldw	r2,-16(fp)
   10fa0:	00000a06 	br	10fcc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10fa4:	0010ea80 	call	10ea8 <alt_get_errno>
   10fa8:	1007883a 	mov	r3,r2
   10fac:	00800344 	movi	r2,13
   10fb0:	18800015 	stw	r2,0(r3)
   10fb4:	00000406 	br	10fc8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   10fb8:	0010ea80 	call	10ea8 <alt_get_errno>
   10fbc:	1007883a 	mov	r3,r2
   10fc0:	00801444 	movi	r2,81
   10fc4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10fc8:	00bfffc4 	movi	r2,-1
}
   10fcc:	e037883a 	mov	sp,fp
   10fd0:	dfc00117 	ldw	ra,4(sp)
   10fd4:	df000017 	ldw	fp,0(sp)
   10fd8:	dec00204 	addi	sp,sp,8
   10fdc:	f800283a 	ret

00010fe0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10fe0:	defffe04 	addi	sp,sp,-8
   10fe4:	df000115 	stw	fp,4(sp)
   10fe8:	df000104 	addi	fp,sp,4
   10fec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   10ff0:	e0bfff17 	ldw	r2,-4(fp)
   10ff4:	108000d0 	cmplti	r2,r2,3
   10ff8:	10000d1e 	bne	r2,zero,11030 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   10ffc:	008000b4 	movhi	r2,2
   11000:	10ba4304 	addi	r2,r2,-5876
   11004:	e0ffff17 	ldw	r3,-4(fp)
   11008:	18c00324 	muli	r3,r3,12
   1100c:	10c5883a 	add	r2,r2,r3
   11010:	10800204 	addi	r2,r2,8
   11014:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   11018:	008000b4 	movhi	r2,2
   1101c:	10ba4304 	addi	r2,r2,-5876
   11020:	e0ffff17 	ldw	r3,-4(fp)
   11024:	18c00324 	muli	r3,r3,12
   11028:	10c5883a 	add	r2,r2,r3
   1102c:	10000015 	stw	zero,0(r2)
  }
}
   11030:	0001883a 	nop
   11034:	e037883a 	mov	sp,fp
   11038:	df000017 	ldw	fp,0(sp)
   1103c:	dec00104 	addi	sp,sp,4
   11040:	f800283a 	ret

00011044 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   11044:	defff904 	addi	sp,sp,-28
   11048:	df000615 	stw	fp,24(sp)
   1104c:	df000604 	addi	fp,sp,24
   11050:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11054:	0005303a 	rdctl	r2,status
   11058:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1105c:	e0fffe17 	ldw	r3,-8(fp)
   11060:	00bfff84 	movi	r2,-2
   11064:	1884703a 	and	r2,r3,r2
   11068:	1001703a 	wrctl	status,r2
  
  return context;
   1106c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   11070:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   11074:	d0a00c17 	ldw	r2,-32720(gp)
   11078:	10c000c4 	addi	r3,r2,3
   1107c:	00bfff04 	movi	r2,-4
   11080:	1884703a 	and	r2,r3,r2
   11084:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   11088:	d0e00c17 	ldw	r3,-32720(gp)
   1108c:	e0bfff17 	ldw	r2,-4(fp)
   11090:	1887883a 	add	r3,r3,r2
   11094:	00810034 	movhi	r2,1024
   11098:	10800004 	addi	r2,r2,0
   1109c:	10c0062e 	bgeu	r2,r3,110b8 <sbrk+0x74>
   110a0:	e0bffb17 	ldw	r2,-20(fp)
   110a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   110a8:	e0bffa17 	ldw	r2,-24(fp)
   110ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   110b0:	00bfffc4 	movi	r2,-1
   110b4:	00000b06 	br	110e4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   110b8:	d0a00c17 	ldw	r2,-32720(gp)
   110bc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   110c0:	d0e00c17 	ldw	r3,-32720(gp)
   110c4:	e0bfff17 	ldw	r2,-4(fp)
   110c8:	1885883a 	add	r2,r3,r2
   110cc:	d0a00c15 	stw	r2,-32720(gp)
   110d0:	e0bffb17 	ldw	r2,-20(fp)
   110d4:	e0bffc15 	stw	r2,-16(fp)
   110d8:	e0bffc17 	ldw	r2,-16(fp)
   110dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   110e0:	e0bffd17 	ldw	r2,-12(fp)
} 
   110e4:	e037883a 	mov	sp,fp
   110e8:	df000017 	ldw	fp,0(sp)
   110ec:	dec00104 	addi	sp,sp,4
   110f0:	f800283a 	ret

000110f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   110f4:	defffe04 	addi	sp,sp,-8
   110f8:	dfc00115 	stw	ra,4(sp)
   110fc:	df000015 	stw	fp,0(sp)
   11100:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11104:	d0a00b17 	ldw	r2,-32724(gp)
   11108:	10000326 	beq	r2,zero,11118 <alt_get_errno+0x24>
   1110c:	d0a00b17 	ldw	r2,-32724(gp)
   11110:	103ee83a 	callr	r2
   11114:	00000106 	br	1111c <alt_get_errno+0x28>
   11118:	d0a7e104 	addi	r2,gp,-24700
}
   1111c:	e037883a 	mov	sp,fp
   11120:	dfc00117 	ldw	ra,4(sp)
   11124:	df000017 	ldw	fp,0(sp)
   11128:	dec00204 	addi	sp,sp,8
   1112c:	f800283a 	ret

00011130 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   11130:	defff904 	addi	sp,sp,-28
   11134:	dfc00615 	stw	ra,24(sp)
   11138:	df000515 	stw	fp,20(sp)
   1113c:	df000504 	addi	fp,sp,20
   11140:	e13ffd15 	stw	r4,-12(fp)
   11144:	e17ffe15 	stw	r5,-8(fp)
   11148:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1114c:	e0bffd17 	ldw	r2,-12(fp)
   11150:	10000616 	blt	r2,zero,1116c <write+0x3c>
   11154:	e0bffd17 	ldw	r2,-12(fp)
   11158:	10c00324 	muli	r3,r2,12
   1115c:	008000b4 	movhi	r2,2
   11160:	10ba4304 	addi	r2,r2,-5876
   11164:	1885883a 	add	r2,r3,r2
   11168:	00000106 	br	11170 <write+0x40>
   1116c:	0005883a 	mov	r2,zero
   11170:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   11174:	e0bffb17 	ldw	r2,-20(fp)
   11178:	10002126 	beq	r2,zero,11200 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1117c:	e0bffb17 	ldw	r2,-20(fp)
   11180:	10800217 	ldw	r2,8(r2)
   11184:	108000cc 	andi	r2,r2,3
   11188:	10001826 	beq	r2,zero,111ec <write+0xbc>
   1118c:	e0bffb17 	ldw	r2,-20(fp)
   11190:	10800017 	ldw	r2,0(r2)
   11194:	10800617 	ldw	r2,24(r2)
   11198:	10001426 	beq	r2,zero,111ec <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1119c:	e0bffb17 	ldw	r2,-20(fp)
   111a0:	10800017 	ldw	r2,0(r2)
   111a4:	10800617 	ldw	r2,24(r2)
   111a8:	e0ffff17 	ldw	r3,-4(fp)
   111ac:	180d883a 	mov	r6,r3
   111b0:	e17ffe17 	ldw	r5,-8(fp)
   111b4:	e13ffb17 	ldw	r4,-20(fp)
   111b8:	103ee83a 	callr	r2
   111bc:	e0bffc15 	stw	r2,-16(fp)
   111c0:	e0bffc17 	ldw	r2,-16(fp)
   111c4:	1000070e 	bge	r2,zero,111e4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   111c8:	00110f40 	call	110f4 <alt_get_errno>
   111cc:	1007883a 	mov	r3,r2
   111d0:	e0bffc17 	ldw	r2,-16(fp)
   111d4:	0085c83a 	sub	r2,zero,r2
   111d8:	18800015 	stw	r2,0(r3)
        return -1;
   111dc:	00bfffc4 	movi	r2,-1
   111e0:	00000c06 	br	11214 <write+0xe4>
      }
      return rval;
   111e4:	e0bffc17 	ldw	r2,-16(fp)
   111e8:	00000a06 	br	11214 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   111ec:	00110f40 	call	110f4 <alt_get_errno>
   111f0:	1007883a 	mov	r3,r2
   111f4:	00800344 	movi	r2,13
   111f8:	18800015 	stw	r2,0(r3)
   111fc:	00000406 	br	11210 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   11200:	00110f40 	call	110f4 <alt_get_errno>
   11204:	1007883a 	mov	r3,r2
   11208:	00801444 	movi	r2,81
   1120c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   11210:	00bfffc4 	movi	r2,-1
}
   11214:	e037883a 	mov	sp,fp
   11218:	dfc00117 	ldw	ra,4(sp)
   1121c:	df000017 	ldw	fp,0(sp)
   11220:	dec00204 	addi	sp,sp,8
   11224:	f800283a 	ret

00011228 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   11228:	deffdf04 	addi	sp,sp,-132
   1122c:	dfc02015 	stw	ra,128(sp)
   11230:	df001f15 	stw	fp,124(sp)
   11234:	df001f04 	addi	fp,sp,124
   11238:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   1123c:	e0bfe204 	addi	r2,fp,-120
   11240:	100b883a 	mov	r5,r2
   11244:	01003fc4 	movi	r4,255
   11248:	00191580 	call	19158 <OSTaskQuery>
   1124c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   11250:	e0bffe83 	ldbu	r2,-6(fp)
   11254:	10803fcc 	andi	r2,r2,255
   11258:	10001e1e 	bne	r2,zero,112d4 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   1125c:	e0bfee83 	ldbu	r2,-70(fp)
   11260:	10803fcc 	andi	r2,r2,255
   11264:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   11268:	d0a7e717 	ldw	r2,-24676(gp)
   1126c:	e0fffd04 	addi	r3,fp,-12
   11270:	180b883a 	mov	r5,r3
   11274:	1009883a 	mov	r4,r2
   11278:	00179700 	call	17970 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   1127c:	e0bffe43 	ldbu	r2,-7(fp)
   11280:	10803fcc 	andi	r2,r2,255
   11284:	10000726 	beq	r2,zero,112a4 <__env_lock+0x7c>
   11288:	d0a00d17 	ldw	r2,-32716(gp)
   1128c:	e0ffe117 	ldw	r3,-124(fp)
   11290:	1880041e 	bne	r3,r2,112a4 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   11294:	d0a7e617 	ldw	r2,-24680(gp)
   11298:	10800044 	addi	r2,r2,1
   1129c:	d0a7e615 	stw	r2,-24680(gp)
   112a0:	00000a06 	br	112cc <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   112a4:	d0a7e717 	ldw	r2,-24676(gp)
   112a8:	e0fffe84 	addi	r3,fp,-6
   112ac:	180d883a 	mov	r6,r3
   112b0:	000b883a 	mov	r5,zero
   112b4:	1009883a 	mov	r4,r2
   112b8:	00174e80 	call	174e8 <OSSemPend>
    locks  = 1;
   112bc:	00800044 	movi	r2,1
   112c0:	d0a7e615 	stw	r2,-24680(gp)
    lockid = id;
   112c4:	e0bfe117 	ldw	r2,-124(fp)
   112c8:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   112cc:	0001883a 	nop
   112d0:	00000106 	br	112d8 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   112d4:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   112d8:	e037883a 	mov	sp,fp
   112dc:	dfc00117 	ldw	ra,4(sp)
   112e0:	df000017 	ldw	fp,0(sp)
   112e4:	dec00204 	addi	sp,sp,8
   112e8:	f800283a 	ret

000112ec <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   112ec:	defffd04 	addi	sp,sp,-12
   112f0:	dfc00215 	stw	ra,8(sp)
   112f4:	df000115 	stw	fp,4(sp)
   112f8:	df000104 	addi	fp,sp,4
   112fc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   11300:	d0a7e617 	ldw	r2,-24680(gp)
   11304:	10000b26 	beq	r2,zero,11334 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   11308:	d0a7e617 	ldw	r2,-24680(gp)
   1130c:	10bfffc4 	addi	r2,r2,-1
   11310:	d0a7e615 	stw	r2,-24680(gp)
   11314:	d0a7e617 	ldw	r2,-24680(gp)
   11318:	1000071e 	bne	r2,zero,11338 <__env_unlock+0x4c>
  {
    lockid = -1;
   1131c:	00bfffc4 	movi	r2,-1
   11320:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
   11324:	d0a7e717 	ldw	r2,-24676(gp)
   11328:	1009883a 	mov	r4,r2
   1132c:	00178600 	call	17860 <OSSemPost>
   11330:	00000106 	br	11338 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   11334:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   11338:	e037883a 	mov	sp,fp
   1133c:	dfc00117 	ldw	ra,4(sp)
   11340:	df000017 	ldw	fp,0(sp)
   11344:	dec00204 	addi	sp,sp,8
   11348:	f800283a 	ret

0001134c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   1134c:	deffdb04 	addi	sp,sp,-148
   11350:	dfc02415 	stw	ra,144(sp)
   11354:	df002315 	stw	fp,140(sp)
   11358:	df002304 	addi	fp,sp,140
   1135c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11360:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   11364:	d0a7ea43 	ldbu	r2,-24663(gp)
   11368:	10803fcc 	andi	r2,r2,255
   1136c:	10800060 	cmpeqi	r2,r2,1
   11370:	10003626 	beq	r2,zero,1144c <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   11374:	e0bfe204 	addi	r2,fp,-120
   11378:	100b883a 	mov	r5,r2
   1137c:	01003fc4 	movi	r4,255
   11380:	00191580 	call	19158 <OSTaskQuery>
   11384:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   11388:	e0bffe83 	ldbu	r2,-6(fp)
   1138c:	10803fcc 	andi	r2,r2,255
   11390:	1000301e 	bne	r2,zero,11454 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   11394:	e0bfee83 	ldbu	r2,-70(fp)
   11398:	10803fcc 	andi	r2,r2,255
   1139c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   113a0:	d0a7e917 	ldw	r2,-24668(gp)
   113a4:	e0fffd04 	addi	r3,fp,-12
   113a8:	180b883a 	mov	r5,r3
   113ac:	1009883a 	mov	r4,r2
   113b0:	00179700 	call	17970 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   113b4:	0005303a 	rdctl	r2,status
   113b8:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   113bc:	e0ffe117 	ldw	r3,-124(fp)
   113c0:	00bfff84 	movi	r2,-2
   113c4:	1884703a 	and	r2,r3,r2
   113c8:	1001703a 	wrctl	status,r2
  
  return context;
   113cc:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   113d0:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   113d4:	e0bffd0b 	ldhu	r2,-12(fp)
   113d8:	10bfffcc 	andi	r2,r2,65535
   113dc:	10000b1e 	bne	r2,zero,1140c <__malloc_lock+0xc0>
   113e0:	d0a00e17 	ldw	r2,-32712(gp)
   113e4:	e0ffde17 	ldw	r3,-136(fp)
   113e8:	1880081e 	bne	r3,r2,1140c <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   113ec:	d0a7e817 	ldw	r2,-24672(gp)
   113f0:	10800044 	addi	r2,r2,1
   113f4:	d0a7e815 	stw	r2,-24672(gp)
   113f8:	e0bfdd17 	ldw	r2,-140(fp)
   113fc:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11400:	e0bfdf17 	ldw	r2,-132(fp)
   11404:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   11408:	00000e06 	br	11444 <__malloc_lock+0xf8>
   1140c:	e0bfdd17 	ldw	r2,-140(fp)
   11410:	e0bfe015 	stw	r2,-128(fp)
   11414:	e0bfe017 	ldw	r2,-128(fp)
   11418:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   1141c:	d0a7e917 	ldw	r2,-24668(gp)
   11420:	e0fffe84 	addi	r3,fp,-6
   11424:	180d883a 	mov	r6,r3
   11428:	000b883a 	mov	r5,zero
   1142c:	1009883a 	mov	r4,r2
   11430:	00174e80 	call	174e8 <OSSemPend>
    locks  = 1;
   11434:	00800044 	movi	r2,1
   11438:	d0a7e815 	stw	r2,-24672(gp)
    lockid = id;
   1143c:	e0bfde17 	ldw	r2,-136(fp)
   11440:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   11444:	0001883a 	nop
   11448:	00000306 	br	11458 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   1144c:	0001883a 	nop
   11450:	00000106 	br	11458 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   11454:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   11458:	e037883a 	mov	sp,fp
   1145c:	dfc00117 	ldw	ra,4(sp)
   11460:	df000017 	ldw	fp,0(sp)
   11464:	dec00204 	addi	sp,sp,8
   11468:	f800283a 	ret

0001146c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1146c:	defff804 	addi	sp,sp,-32
   11470:	dfc00715 	stw	ra,28(sp)
   11474:	df000615 	stw	fp,24(sp)
   11478:	df000604 	addi	fp,sp,24
   1147c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11480:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   11484:	d0a7ea43 	ldbu	r2,-24663(gp)
   11488:	10803fcc 	andi	r2,r2,255
   1148c:	10800060 	cmpeqi	r2,r2,1
   11490:	10002326 	beq	r2,zero,11520 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11494:	0005303a 	rdctl	r2,status
   11498:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1149c:	e0fffe17 	ldw	r3,-8(fp)
   114a0:	00bfff84 	movi	r2,-2
   114a4:	1884703a 	and	r2,r3,r2
   114a8:	1001703a 	wrctl	status,r2
  
  return context;
   114ac:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   114b0:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   114b4:	d0a7e817 	ldw	r2,-24672(gp)
   114b8:	1000051e 	bne	r2,zero,114d0 <__malloc_unlock+0x64>
   114bc:	e0bffa17 	ldw	r2,-24(fp)
   114c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114c4:	e0bffb17 	ldw	r2,-20(fp)
   114c8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   114cc:	00001506 	br	11524 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   114d0:	d0a7e817 	ldw	r2,-24672(gp)
   114d4:	10bfffc4 	addi	r2,r2,-1
   114d8:	d0a7e815 	stw	r2,-24672(gp)
   114dc:	d0a7e817 	ldw	r2,-24672(gp)
   114e0:	10000a1e 	bne	r2,zero,1150c <__malloc_unlock+0xa0>
  {
    lockid = -1;
   114e4:	00bfffc4 	movi	r2,-1
   114e8:	d0a00e15 	stw	r2,-32712(gp)
   114ec:	e0bffa17 	ldw	r2,-24(fp)
   114f0:	e0bffc15 	stw	r2,-16(fp)
   114f4:	e0bffc17 	ldw	r2,-16(fp)
   114f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   114fc:	d0a7e917 	ldw	r2,-24668(gp)
   11500:	1009883a 	mov	r4,r2
   11504:	00178600 	call	17860 <OSSemPost>
   11508:	00000606 	br	11524 <__malloc_unlock+0xb8>
   1150c:	e0bffa17 	ldw	r2,-24(fp)
   11510:	e0bffd15 	stw	r2,-12(fp)
   11514:	e0bffd17 	ldw	r2,-12(fp)
   11518:	1001703a 	wrctl	status,r2
   1151c:	00000106 	br	11524 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   11520:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   11524:	e037883a 	mov	sp,fp
   11528:	dfc00117 	ldw	ra,4(sp)
   1152c:	df000017 	ldw	fp,0(sp)
   11530:	dec00204 	addi	sp,sp,8
   11534:	f800283a 	ret

00011538 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   11538:	defff704 	addi	sp,sp,-36
   1153c:	dfc00815 	stw	ra,32(sp)
   11540:	df000715 	stw	fp,28(sp)
   11544:	df000704 	addi	fp,sp,28
   11548:	e13ffd15 	stw	r4,-12(fp)
   1154c:	e17ffe15 	stw	r5,-8(fp)
   11550:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11554:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11558:	e0bfff17 	ldw	r2,-4(fp)
   1155c:	1000021e 	bne	r2,zero,11568 <OSEventNameGet+0x30>
        return (0);
   11560:	0005883a 	mov	r2,zero
   11564:	00003706 	br	11644 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   11568:	e0bffd17 	ldw	r2,-12(fp)
   1156c:	1000051e 	bne	r2,zero,11584 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   11570:	e0bfff17 	ldw	r2,-4(fp)
   11574:	00c00104 	movi	r3,4
   11578:	10c00005 	stb	r3,0(r2)
        return (0);
   1157c:	0005883a 	mov	r2,zero
   11580:	00003006 	br	11644 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11584:	e0bffe17 	ldw	r2,-8(fp)
   11588:	1000051e 	bne	r2,zero,115a0 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1158c:	e0bfff17 	ldw	r2,-4(fp)
   11590:	00c00304 	movi	r3,12
   11594:	10c00005 	stb	r3,0(r2)
        return (0);
   11598:	0005883a 	mov	r2,zero
   1159c:	00002906 	br	11644 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   115a0:	d0a7f803 	ldbu	r2,-24608(gp)
   115a4:	10803fcc 	andi	r2,r2,255
   115a8:	10000526 	beq	r2,zero,115c0 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   115ac:	e0bfff17 	ldw	r2,-4(fp)
   115b0:	00c00444 	movi	r3,17
   115b4:	10c00005 	stb	r3,0(r2)
        return (0);
   115b8:	0005883a 	mov	r2,zero
   115bc:	00002106 	br	11644 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   115c0:	e0bffd17 	ldw	r2,-12(fp)
   115c4:	10800003 	ldbu	r2,0(r2)
   115c8:	10803fcc 	andi	r2,r2,255
   115cc:	10bfffc4 	addi	r2,r2,-1
   115d0:	10800128 	cmpgeui	r2,r2,4
   115d4:	10000526 	beq	r2,zero,115ec <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   115d8:	e0bfff17 	ldw	r2,-4(fp)
   115dc:	00c00044 	movi	r3,1
   115e0:	10c00005 	stb	r3,0(r2)
             return (0);
   115e4:	0005883a 	mov	r2,zero
   115e8:	00001606 	br	11644 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   115ec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115f0:	0005303a 	rdctl	r2,status
   115f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115f8:	e0fffb17 	ldw	r3,-20(fp)
   115fc:	00bfff84 	movi	r2,-2
   11600:	1884703a 	and	r2,r3,r2
   11604:	1001703a 	wrctl	status,r2
  
  return context;
   11608:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   1160c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   11610:	e0bffd17 	ldw	r2,-12(fp)
   11614:	10800384 	addi	r2,r2,14
   11618:	100b883a 	mov	r5,r2
   1161c:	e13ffe17 	ldw	r4,-8(fp)
   11620:	0012fbc0 	call	12fbc <OS_StrCopy>
   11624:	e0bffa05 	stb	r2,-24(fp)
   11628:	e0bff917 	ldw	r2,-28(fp)
   1162c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11630:	e0bffc17 	ldw	r2,-16(fp)
   11634:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11638:	e0bfff17 	ldw	r2,-4(fp)
   1163c:	10000005 	stb	zero,0(r2)
    return (len);
   11640:	e0bffa03 	ldbu	r2,-24(fp)
}
   11644:	e037883a 	mov	sp,fp
   11648:	dfc00117 	ldw	ra,4(sp)
   1164c:	df000017 	ldw	fp,0(sp)
   11650:	dec00204 	addi	sp,sp,8
   11654:	f800283a 	ret

00011658 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   11658:	defff604 	addi	sp,sp,-40
   1165c:	dfc00915 	stw	ra,36(sp)
   11660:	df000815 	stw	fp,32(sp)
   11664:	df000804 	addi	fp,sp,32
   11668:	e13ffd15 	stw	r4,-12(fp)
   1166c:	e17ffe15 	stw	r5,-8(fp)
   11670:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11674:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11678:	e0bfff17 	ldw	r2,-4(fp)
   1167c:	10004026 	beq	r2,zero,11780 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   11680:	e0bffd17 	ldw	r2,-12(fp)
   11684:	1000041e 	bne	r2,zero,11698 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   11688:	e0bfff17 	ldw	r2,-4(fp)
   1168c:	00c00104 	movi	r3,4
   11690:	10c00005 	stb	r3,0(r2)
        return;
   11694:	00003b06 	br	11784 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11698:	e0bffe17 	ldw	r2,-8(fp)
   1169c:	1000041e 	bne	r2,zero,116b0 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   116a0:	e0bfff17 	ldw	r2,-4(fp)
   116a4:	00c00304 	movi	r3,12
   116a8:	10c00005 	stb	r3,0(r2)
        return;
   116ac:	00003506 	br	11784 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   116b0:	d0a7f803 	ldbu	r2,-24608(gp)
   116b4:	10803fcc 	andi	r2,r2,255
   116b8:	10000426 	beq	r2,zero,116cc <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   116bc:	e0bfff17 	ldw	r2,-4(fp)
   116c0:	00c00484 	movi	r3,18
   116c4:	10c00005 	stb	r3,0(r2)
        return;
   116c8:	00002e06 	br	11784 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   116cc:	e0bffd17 	ldw	r2,-12(fp)
   116d0:	10800003 	ldbu	r2,0(r2)
   116d4:	10803fcc 	andi	r2,r2,255
   116d8:	10bfffc4 	addi	r2,r2,-1
   116dc:	10800128 	cmpgeui	r2,r2,4
   116e0:	10000426 	beq	r2,zero,116f4 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   116e4:	e0bfff17 	ldw	r2,-4(fp)
   116e8:	00c00044 	movi	r3,1
   116ec:	10c00005 	stb	r3,0(r2)
             return;
   116f0:	00002406 	br	11784 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   116f4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   116f8:	0005303a 	rdctl	r2,status
   116fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11700:	e0fffc17 	ldw	r3,-16(fp)
   11704:	00bfff84 	movi	r2,-2
   11708:	1884703a 	and	r2,r3,r2
   1170c:	1001703a 	wrctl	status,r2
  
  return context;
   11710:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   11714:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   11718:	e13ffe17 	ldw	r4,-8(fp)
   1171c:	00130300 	call	13030 <OS_StrLen>
   11720:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   11724:	e0bffa03 	ldbu	r2,-24(fp)
   11728:	10800830 	cmpltui	r2,r2,32
   1172c:	1000081e 	bne	r2,zero,11750 <OSEventNameSet+0xf8>
   11730:	e0bff817 	ldw	r2,-32(fp)
   11734:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11738:	e0bff917 	ldw	r2,-28(fp)
   1173c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   11740:	e0bfff17 	ldw	r2,-4(fp)
   11744:	00c002c4 	movi	r3,11
   11748:	10c00005 	stb	r3,0(r2)
        return;
   1174c:	00000d06 	br	11784 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   11750:	e0bffd17 	ldw	r2,-12(fp)
   11754:	10800384 	addi	r2,r2,14
   11758:	e17ffe17 	ldw	r5,-8(fp)
   1175c:	1009883a 	mov	r4,r2
   11760:	0012fbc0 	call	12fbc <OS_StrCopy>
   11764:	e0bff817 	ldw	r2,-32(fp)
   11768:	e0bffb15 	stw	r2,-20(fp)
   1176c:	e0bffb17 	ldw	r2,-20(fp)
   11770:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11774:	e0bfff17 	ldw	r2,-4(fp)
   11778:	10000005 	stb	zero,0(r2)
   1177c:	00000106 	br	11784 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   11780:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   11784:	e037883a 	mov	sp,fp
   11788:	dfc00117 	ldw	ra,4(sp)
   1178c:	df000017 	ldw	fp,0(sp)
   11790:	dec00204 	addi	sp,sp,8
   11794:	f800283a 	ret

00011798 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   11798:	deffed04 	addi	sp,sp,-76
   1179c:	dfc01215 	stw	ra,72(sp)
   117a0:	df001115 	stw	fp,68(sp)
   117a4:	df001104 	addi	fp,sp,68
   117a8:	e13ffc15 	stw	r4,-16(fp)
   117ac:	e17ffd15 	stw	r5,-12(fp)
   117b0:	e1bffe15 	stw	r6,-8(fp)
   117b4:	3805883a 	mov	r2,r7
   117b8:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   117bc:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   117c0:	e0800217 	ldw	r2,8(fp)
   117c4:	1000021e 	bne	r2,zero,117d0 <OSEventPendMulti+0x38>
        return (0);
   117c8:	0005883a 	mov	r2,zero
   117cc:	00017106 	br	11d94 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   117d0:	e0bffc17 	ldw	r2,-16(fp)
   117d4:	1000051e 	bne	r2,zero,117ec <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   117d8:	e0800217 	ldw	r2,8(fp)
   117dc:	00c00104 	movi	r3,4
   117e0:	10c00005 	stb	r3,0(r2)
        return (0);
   117e4:	0005883a 	mov	r2,zero
   117e8:	00016a06 	br	11d94 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   117ec:	e0bffd17 	ldw	r2,-12(fp)
   117f0:	1000051e 	bne	r2,zero,11808 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   117f4:	e0800217 	ldw	r2,8(fp)
   117f8:	00c00104 	movi	r3,4
   117fc:	10c00005 	stb	r3,0(r2)
        return (0);
   11800:	0005883a 	mov	r2,zero
   11804:	00016306 	br	11d94 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   11808:	e0bffe17 	ldw	r2,-8(fp)
   1180c:	1000051e 	bne	r2,zero,11824 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   11810:	e0800217 	ldw	r2,8(fp)
   11814:	00c00104 	movi	r3,4
   11818:	10c00005 	stb	r3,0(r2)
        return (0);
   1181c:	0005883a 	mov	r2,zero
   11820:	00015c06 	br	11d94 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   11824:	e0bffd17 	ldw	r2,-12(fp)
   11828:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   1182c:	e0bffc17 	ldw	r2,-16(fp)
   11830:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   11834:	e0bfef17 	ldw	r2,-68(fp)
   11838:	10800017 	ldw	r2,0(r2)
   1183c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   11840:	00001906 	br	118a8 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   11844:	e0bff017 	ldw	r2,-64(fp)
   11848:	10800003 	ldbu	r2,0(r2)
   1184c:	10803fcc 	andi	r2,r2,255
   11850:	10c000a0 	cmpeqi	r3,r2,2
   11854:	1800091e 	bne	r3,zero,1187c <OSEventPendMulti+0xe4>
   11858:	10c000e0 	cmpeqi	r3,r2,3
   1185c:	1800091e 	bne	r3,zero,11884 <OSEventPendMulti+0xec>
   11860:	10800060 	cmpeqi	r2,r2,1
   11864:	1000091e 	bne	r2,zero,1188c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   11868:	e0800217 	ldw	r2,8(fp)
   1186c:	00c00044 	movi	r3,1
   11870:	10c00005 	stb	r3,0(r2)
                 return (0);
   11874:	0005883a 	mov	r2,zero
   11878:	00014606 	br	11d94 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   1187c:	0001883a 	nop
   11880:	00000306 	br	11890 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   11884:	0001883a 	nop
   11888:	00000106 	br	11890 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   1188c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   11890:	e0bfef17 	ldw	r2,-68(fp)
   11894:	10800104 	addi	r2,r2,4
   11898:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   1189c:	e0bfef17 	ldw	r2,-68(fp)
   118a0:	10800017 	ldw	r2,0(r2)
   118a4:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   118a8:	e0bff017 	ldw	r2,-64(fp)
   118ac:	103fe51e 	bne	r2,zero,11844 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   118b0:	d0a7f803 	ldbu	r2,-24608(gp)
   118b4:	10803fcc 	andi	r2,r2,255
   118b8:	10000526 	beq	r2,zero,118d0 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   118bc:	e0800217 	ldw	r2,8(fp)
   118c0:	00c00084 	movi	r3,2
   118c4:	10c00005 	stb	r3,0(r2)
        return (0);
   118c8:	0005883a 	mov	r2,zero
   118cc:	00013106 	br	11d94 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   118d0:	d0a7ea03 	ldbu	r2,-24664(gp)
   118d4:	10803fcc 	andi	r2,r2,255
   118d8:	10000526 	beq	r2,zero,118f0 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   118dc:	e0800217 	ldw	r2,8(fp)
   118e0:	00c00344 	movi	r3,13
   118e4:	10c00005 	stb	r3,0(r2)
        return (0);
   118e8:	0005883a 	mov	r2,zero
   118ec:	00012906 	br	11d94 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118f0:	0005303a 	rdctl	r2,status
   118f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118f8:	e0fffb17 	ldw	r3,-20(fp)
   118fc:	00bfff84 	movi	r2,-2
   11900:	1884703a 	and	r2,r3,r2
   11904:	1001703a 	wrctl	status,r2
  
  return context;
   11908:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1190c:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   11910:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   11914:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   11918:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   1191c:	e0bffc17 	ldw	r2,-16(fp)
   11920:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   11924:	e0bfef17 	ldw	r2,-68(fp)
   11928:	10800017 	ldw	r2,0(r2)
   1192c:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   11930:	00008106 	br	11b38 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   11934:	e0bff017 	ldw	r2,-64(fp)
   11938:	10800003 	ldbu	r2,0(r2)
   1193c:	10803fcc 	andi	r2,r2,255
   11940:	10c000a0 	cmpeqi	r3,r2,2
   11944:	18003c1e 	bne	r3,zero,11a38 <OSEventPendMulti+0x2a0>
   11948:	10c000e0 	cmpeqi	r3,r2,3
   1194c:	1800031e 	bne	r3,zero,1195c <OSEventPendMulti+0x1c4>
   11950:	10800060 	cmpeqi	r2,r2,1
   11954:	10001e1e 	bne	r2,zero,119d0 <OSEventPendMulti+0x238>
   11958:	00006606 	br	11af4 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   1195c:	e0bff017 	ldw	r2,-64(fp)
   11960:	1080020b 	ldhu	r2,8(r2)
   11964:	10bfffcc 	andi	r2,r2,65535
   11968:	10001526 	beq	r2,zero,119c0 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   1196c:	e0bff017 	ldw	r2,-64(fp)
   11970:	1080020b 	ldhu	r2,8(r2)
   11974:	10bfffc4 	addi	r2,r2,-1
   11978:	1007883a 	mov	r3,r2
   1197c:	e0bff017 	ldw	r2,-64(fp)
   11980:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   11984:	e0bffd17 	ldw	r2,-12(fp)
   11988:	10c00104 	addi	r3,r2,4
   1198c:	e0fffd15 	stw	r3,-12(fp)
   11990:	e0fff017 	ldw	r3,-64(fp)
   11994:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   11998:	00800044 	movi	r2,1
   1199c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   119a0:	e0bffe17 	ldw	r2,-8(fp)
   119a4:	10c00104 	addi	r3,r2,4
   119a8:	e0fffe15 	stw	r3,-8(fp)
   119ac:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   119b0:	e0bff18b 	ldhu	r2,-58(fp)
   119b4:	10800044 	addi	r2,r2,1
   119b8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   119bc:	00005806 	br	11b20 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   119c0:	e0bff203 	ldbu	r2,-56(fp)
   119c4:	10800054 	ori	r2,r2,1
   119c8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   119cc:	00005406 	br	11b20 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   119d0:	e0bff017 	ldw	r2,-64(fp)
   119d4:	10800117 	ldw	r2,4(r2)
   119d8:	10001326 	beq	r2,zero,11a28 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   119dc:	e0bffe17 	ldw	r2,-8(fp)
   119e0:	10c00104 	addi	r3,r2,4
   119e4:	e0fffe15 	stw	r3,-8(fp)
   119e8:	e0fff017 	ldw	r3,-64(fp)
   119ec:	18c00117 	ldw	r3,4(r3)
   119f0:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   119f4:	e0bff017 	ldw	r2,-64(fp)
   119f8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   119fc:	e0bffd17 	ldw	r2,-12(fp)
   11a00:	10c00104 	addi	r3,r2,4
   11a04:	e0fffd15 	stw	r3,-12(fp)
   11a08:	e0fff017 	ldw	r3,-64(fp)
   11a0c:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   11a10:	00800044 	movi	r2,1
   11a14:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   11a18:	e0bff18b 	ldhu	r2,-58(fp)
   11a1c:	10800044 	addi	r2,r2,1
   11a20:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   11a24:	00003e06 	br	11b20 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   11a28:	e0bff203 	ldbu	r2,-56(fp)
   11a2c:	10800094 	ori	r2,r2,2
   11a30:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   11a34:	00003a06 	br	11b20 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   11a38:	e0bff017 	ldw	r2,-64(fp)
   11a3c:	10800117 	ldw	r2,4(r2)
   11a40:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   11a44:	e0bff517 	ldw	r2,-44(fp)
   11a48:	1080058b 	ldhu	r2,22(r2)
   11a4c:	10bfffcc 	andi	r2,r2,65535
   11a50:	10002426 	beq	r2,zero,11ae4 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   11a54:	e0bffe17 	ldw	r2,-8(fp)
   11a58:	10c00104 	addi	r3,r2,4
   11a5c:	e0fffe15 	stw	r3,-8(fp)
   11a60:	e0fff517 	ldw	r3,-44(fp)
   11a64:	18c00417 	ldw	r3,16(r3)
   11a68:	19400104 	addi	r5,r3,4
   11a6c:	e13ff517 	ldw	r4,-44(fp)
   11a70:	21400415 	stw	r5,16(r4)
   11a74:	18c00017 	ldw	r3,0(r3)
   11a78:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   11a7c:	e0bff517 	ldw	r2,-44(fp)
   11a80:	10c00417 	ldw	r3,16(r2)
   11a84:	e0bff517 	ldw	r2,-44(fp)
   11a88:	10800217 	ldw	r2,8(r2)
   11a8c:	1880041e 	bne	r3,r2,11aa0 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   11a90:	e0bff517 	ldw	r2,-44(fp)
   11a94:	10c00117 	ldw	r3,4(r2)
   11a98:	e0bff517 	ldw	r2,-44(fp)
   11a9c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   11aa0:	e0bff517 	ldw	r2,-44(fp)
   11aa4:	1080058b 	ldhu	r2,22(r2)
   11aa8:	10bfffc4 	addi	r2,r2,-1
   11aac:	1007883a 	mov	r3,r2
   11ab0:	e0bff517 	ldw	r2,-44(fp)
   11ab4:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   11ab8:	e0bffd17 	ldw	r2,-12(fp)
   11abc:	10c00104 	addi	r3,r2,4
   11ac0:	e0fffd15 	stw	r3,-12(fp)
   11ac4:	e0fff017 	ldw	r3,-64(fp)
   11ac8:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   11acc:	00800044 	movi	r2,1
   11ad0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   11ad4:	e0bff18b 	ldhu	r2,-58(fp)
   11ad8:	10800044 	addi	r2,r2,1
   11adc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   11ae0:	00000f06 	br	11b20 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   11ae4:	e0bff203 	ldbu	r2,-56(fp)
   11ae8:	10800114 	ori	r2,r2,4
   11aec:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   11af0:	00000b06 	br	11b20 <OSEventPendMulti+0x388>
   11af4:	e0bff317 	ldw	r2,-52(fp)
   11af8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11afc:	e0bff417 	ldw	r2,-48(fp)
   11b00:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   11b04:	e0bffd17 	ldw	r2,-12(fp)
   11b08:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   11b0c:	e0800217 	ldw	r2,8(fp)
   11b10:	00c00044 	movi	r3,1
   11b14:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   11b18:	e0bff18b 	ldhu	r2,-58(fp)
   11b1c:	00009d06 	br	11d94 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   11b20:	e0bfef17 	ldw	r2,-68(fp)
   11b24:	10800104 	addi	r2,r2,4
   11b28:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   11b2c:	e0bfef17 	ldw	r2,-68(fp)
   11b30:	10800017 	ldw	r2,0(r2)
   11b34:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   11b38:	e0bff017 	ldw	r2,-64(fp)
   11b3c:	103f7d1e 	bne	r2,zero,11934 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   11b40:	e0bff103 	ldbu	r2,-60(fp)
   11b44:	10800058 	cmpnei	r2,r2,1
   11b48:	10000a1e 	bne	r2,zero,11b74 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   11b4c:	e0bffd17 	ldw	r2,-12(fp)
   11b50:	10000015 	stw	zero,0(r2)
   11b54:	e0bff317 	ldw	r2,-52(fp)
   11b58:	e0bff615 	stw	r2,-40(fp)
   11b5c:	e0bff617 	ldw	r2,-40(fp)
   11b60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   11b64:	e0800217 	ldw	r2,8(fp)
   11b68:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   11b6c:	e0bff18b 	ldhu	r2,-58(fp)
   11b70:	00008806 	br	11d94 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   11b74:	d0a7f917 	ldw	r2,-24604(gp)
   11b78:	d0e7f917 	ldw	r3,-24604(gp)
   11b7c:	19000c03 	ldbu	r4,48(r3)
   11b80:	e0fff203 	ldbu	r3,-56(fp)
   11b84:	20c6b03a 	or	r3,r4,r3
   11b88:	1809883a 	mov	r4,r3
   11b8c:	00ffe004 	movi	r3,-128
   11b90:	20c6b03a 	or	r3,r4,r3
   11b94:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   11b98:	d0a7f917 	ldw	r2,-24604(gp)
   11b9c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   11ba0:	d0a7f917 	ldw	r2,-24604(gp)
   11ba4:	e0ffff0b 	ldhu	r3,-4(fp)
   11ba8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   11bac:	e13ffc17 	ldw	r4,-16(fp)
   11bb0:	00126d40 	call	126d4 <OS_EventTaskWaitMulti>
   11bb4:	e0bff317 	ldw	r2,-52(fp)
   11bb8:	e0bff915 	stw	r2,-28(fp)
   11bbc:	e0bff917 	ldw	r2,-28(fp)
   11bc0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   11bc4:	0012e780 	call	12e78 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11bc8:	0005303a 	rdctl	r2,status
   11bcc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11bd0:	e0fff717 	ldw	r3,-36(fp)
   11bd4:	00bfff84 	movi	r2,-2
   11bd8:	1884703a 	and	r2,r3,r2
   11bdc:	1001703a 	wrctl	status,r2
  
  return context;
   11be0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   11be4:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   11be8:	d0a7f917 	ldw	r2,-24604(gp)
   11bec:	10800c43 	ldbu	r2,49(r2)
   11bf0:	10803fcc 	andi	r2,r2,255
   11bf4:	10000226 	beq	r2,zero,11c00 <OSEventPendMulti+0x468>
   11bf8:	108000a0 	cmpeqi	r2,r2,2
   11bfc:	10001826 	beq	r2,zero,11c60 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   11c00:	d0a7f917 	ldw	r2,-24604(gp)
   11c04:	10800717 	ldw	r2,28(r2)
   11c08:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   11c0c:	e0bff017 	ldw	r2,-64(fp)
   11c10:	10000b26 	beq	r2,zero,11c40 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   11c14:	e0bffd17 	ldw	r2,-12(fp)
   11c18:	10c00104 	addi	r3,r2,4
   11c1c:	e0fffd15 	stw	r3,-12(fp)
   11c20:	e0fff017 	ldw	r3,-64(fp)
   11c24:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   11c28:	e0bffd17 	ldw	r2,-12(fp)
   11c2c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   11c30:	e0bff18b 	ldhu	r2,-58(fp)
   11c34:	10800044 	addi	r2,r2,1
   11c38:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   11c3c:	00000d06 	br	11c74 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   11c40:	d0a7f917 	ldw	r2,-24604(gp)
   11c44:	00c00044 	movi	r3,1
   11c48:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   11c4c:	d0a7f917 	ldw	r2,-24604(gp)
   11c50:	e17ffc17 	ldw	r5,-16(fp)
   11c54:	1009883a 	mov	r4,r2
   11c58:	00128dc0 	call	128dc <OS_EventTaskRemoveMulti>
             }
			 break;
   11c5c:	00000506 	br	11c74 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   11c60:	d0a7f917 	ldw	r2,-24604(gp)
   11c64:	e17ffc17 	ldw	r5,-16(fp)
   11c68:	1009883a 	mov	r4,r2
   11c6c:	00128dc0 	call	128dc <OS_EventTaskRemoveMulti>
             break;
   11c70:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   11c74:	d0a7f917 	ldw	r2,-24604(gp)
   11c78:	10800c43 	ldbu	r2,49(r2)
   11c7c:	10803fcc 	andi	r2,r2,255
   11c80:	10000326 	beq	r2,zero,11c90 <OSEventPendMulti+0x4f8>
   11c84:	108000a0 	cmpeqi	r2,r2,2
   11c88:	1000231e 	bne	r2,zero,11d18 <OSEventPendMulti+0x580>
   11c8c:	00002a06 	br	11d38 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   11c90:	e0bff017 	ldw	r2,-64(fp)
   11c94:	10800003 	ldbu	r2,0(r2)
   11c98:	10803fcc 	andi	r2,r2,255
   11c9c:	0080100e 	bge	zero,r2,11ce0 <OSEventPendMulti+0x548>
   11ca0:	10c000d0 	cmplti	r3,r2,3
   11ca4:	1800071e 	bne	r3,zero,11cc4 <OSEventPendMulti+0x52c>
   11ca8:	108000e0 	cmpeqi	r2,r2,3
   11cac:	10000c26 	beq	r2,zero,11ce0 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   11cb0:	e0bffe17 	ldw	r2,-8(fp)
   11cb4:	10c00104 	addi	r3,r2,4
   11cb8:	e0fffe15 	stw	r3,-8(fp)
   11cbc:	10000015 	stw	zero,0(r2)
                      break;
   11cc0:	00001206 	br	11d0c <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   11cc4:	e0bffe17 	ldw	r2,-8(fp)
   11cc8:	10c00104 	addi	r3,r2,4
   11ccc:	e0fffe15 	stw	r3,-8(fp)
   11cd0:	d0e7f917 	ldw	r3,-24604(gp)
   11cd4:	18c00917 	ldw	r3,36(r3)
   11cd8:	10c00015 	stw	r3,0(r2)
                      break;
   11cdc:	00000b06 	br	11d0c <OSEventPendMulti+0x574>
   11ce0:	e0bff317 	ldw	r2,-52(fp)
   11ce4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ce8:	e0bff817 	ldw	r2,-32(fp)
   11cec:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   11cf0:	e0bffd17 	ldw	r2,-12(fp)
   11cf4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   11cf8:	e0800217 	ldw	r2,8(fp)
   11cfc:	00c00044 	movi	r3,1
   11d00:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   11d04:	e0bff18b 	ldhu	r2,-58(fp)
   11d08:	00002206 	br	11d94 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   11d0c:	e0800217 	ldw	r2,8(fp)
   11d10:	10000005 	stb	zero,0(r2)
             break;
   11d14:	00001006 	br	11d58 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   11d18:	e0bffe17 	ldw	r2,-8(fp)
   11d1c:	10c00104 	addi	r3,r2,4
   11d20:	e0fffe15 	stw	r3,-8(fp)
   11d24:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   11d28:	e0800217 	ldw	r2,8(fp)
   11d2c:	00c00384 	movi	r3,14
   11d30:	10c00005 	stb	r3,0(r2)
             break;
   11d34:	00000806 	br	11d58 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   11d38:	e0bffe17 	ldw	r2,-8(fp)
   11d3c:	10c00104 	addi	r3,r2,4
   11d40:	e0fffe15 	stw	r3,-8(fp)
   11d44:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   11d48:	e0800217 	ldw	r2,8(fp)
   11d4c:	00c00284 	movi	r3,10
   11d50:	10c00005 	stb	r3,0(r2)
             break;
   11d54:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   11d58:	d0a7f917 	ldw	r2,-24604(gp)
   11d5c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   11d60:	d0a7f917 	ldw	r2,-24604(gp)
   11d64:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   11d68:	d0a7f917 	ldw	r2,-24604(gp)
   11d6c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   11d70:	d0a7f917 	ldw	r2,-24604(gp)
   11d74:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   11d78:	d0a7f917 	ldw	r2,-24604(gp)
   11d7c:	10000915 	stw	zero,36(r2)
   11d80:	e0bff317 	ldw	r2,-52(fp)
   11d84:	e0bffa15 	stw	r2,-24(fp)
   11d88:	e0bffa17 	ldw	r2,-24(fp)
   11d8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   11d90:	e0bff18b 	ldhu	r2,-58(fp)
}
   11d94:	e037883a 	mov	sp,fp
   11d98:	dfc00117 	ldw	ra,4(sp)
   11d9c:	df000017 	ldw	fp,0(sp)
   11da0:	dec00204 	addi	sp,sp,8
   11da4:	f800283a 	ret

00011da8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   11da8:	defffe04 	addi	sp,sp,-8
   11dac:	dfc00115 	stw	ra,4(sp)
   11db0:	df000015 	stw	fp,0(sp)
   11db4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   11db8:	001cfec0 	call	1cfec <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   11dbc:	0012b240 	call	12b24 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   11dc0:	0012b6c0 	call	12b6c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   11dc4:	0012cd80 	call	12cd8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   11dc8:	0012a440 	call	12a44 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   11dcc:	0014b880 	call	14b88 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   11dd0:	0015f500 	call	15f50 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   11dd4:	00170780 	call	17078 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   11dd8:	0012bd80 	call	12bd8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   11ddc:	0012c580 	call	12c58 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   11de0:	001d00c0 	call	1d00c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   11de4:	001355c0 	call	1355c <OSDebugInit>
#endif
}
   11de8:	0001883a 	nop
   11dec:	e037883a 	mov	sp,fp
   11df0:	dfc00117 	ldw	ra,4(sp)
   11df4:	df000017 	ldw	fp,0(sp)
   11df8:	dec00204 	addi	sp,sp,8
   11dfc:	f800283a 	ret

00011e00 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   11e00:	deffff04 	addi	sp,sp,-4
   11e04:	df000015 	stw	fp,0(sp)
   11e08:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   11e0c:	d0a7ea43 	ldbu	r2,-24663(gp)
   11e10:	10803fcc 	andi	r2,r2,255
   11e14:	10800058 	cmpnei	r2,r2,1
   11e18:	1000071e 	bne	r2,zero,11e38 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   11e1c:	d0a7f803 	ldbu	r2,-24608(gp)
   11e20:	10803fcc 	andi	r2,r2,255
   11e24:	10803fe0 	cmpeqi	r2,r2,255
   11e28:	1000031e 	bne	r2,zero,11e38 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   11e2c:	d0a7f803 	ldbu	r2,-24608(gp)
   11e30:	10800044 	addi	r2,r2,1
   11e34:	d0a7f805 	stb	r2,-24608(gp)
        }
    }
}
   11e38:	0001883a 	nop
   11e3c:	e037883a 	mov	sp,fp
   11e40:	df000017 	ldw	fp,0(sp)
   11e44:	dec00104 	addi	sp,sp,4
   11e48:	f800283a 	ret

00011e4c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   11e4c:	defffb04 	addi	sp,sp,-20
   11e50:	dfc00415 	stw	ra,16(sp)
   11e54:	df000315 	stw	fp,12(sp)
   11e58:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11e5c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   11e60:	d0a7ea43 	ldbu	r2,-24663(gp)
   11e64:	10803fcc 	andi	r2,r2,255
   11e68:	10800058 	cmpnei	r2,r2,1
   11e6c:	10002f1e 	bne	r2,zero,11f2c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e70:	0005303a 	rdctl	r2,status
   11e74:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e78:	e0ffff17 	ldw	r3,-4(fp)
   11e7c:	00bfff84 	movi	r2,-2
   11e80:	1884703a 	and	r2,r3,r2
   11e84:	1001703a 	wrctl	status,r2
  
  return context;
   11e88:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   11e8c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   11e90:	d0a7f803 	ldbu	r2,-24608(gp)
   11e94:	10803fcc 	andi	r2,r2,255
   11e98:	10000326 	beq	r2,zero,11ea8 <OSIntExit+0x5c>
            OSIntNesting--;
   11e9c:	d0a7f803 	ldbu	r2,-24608(gp)
   11ea0:	10bfffc4 	addi	r2,r2,-1
   11ea4:	d0a7f805 	stb	r2,-24608(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   11ea8:	d0a7f803 	ldbu	r2,-24608(gp)
   11eac:	10803fcc 	andi	r2,r2,255
   11eb0:	10001a1e 	bne	r2,zero,11f1c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   11eb4:	d0a7ea03 	ldbu	r2,-24664(gp)
   11eb8:	10803fcc 	andi	r2,r2,255
   11ebc:	1000171e 	bne	r2,zero,11f1c <OSIntExit+0xd0>
                OS_SchedNew();
   11ec0:	0012f480 	call	12f48 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   11ec4:	d0e7ec03 	ldbu	r3,-24656(gp)
   11ec8:	d0a7ec43 	ldbu	r2,-24655(gp)
   11ecc:	18c03fcc 	andi	r3,r3,255
   11ed0:	10803fcc 	andi	r2,r2,255
   11ed4:	18801126 	beq	r3,r2,11f1c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   11ed8:	d0a7ec03 	ldbu	r2,-24656(gp)
   11edc:	10c03fcc 	andi	r3,r2,255
   11ee0:	008000f4 	movhi	r2,3
   11ee4:	10b40104 	addi	r2,r2,-12284
   11ee8:	18c7883a 	add	r3,r3,r3
   11eec:	18c7883a 	add	r3,r3,r3
   11ef0:	10c5883a 	add	r2,r2,r3
   11ef4:	10800017 	ldw	r2,0(r2)
   11ef8:	d0a7f415 	stw	r2,-24624(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   11efc:	d0a7f417 	ldw	r2,-24624(gp)
   11f00:	10c00e17 	ldw	r3,56(r2)
   11f04:	18c00044 	addi	r3,r3,1
   11f08:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   11f0c:	d0a7ef17 	ldw	r2,-24644(gp)
   11f10:	10800044 	addi	r2,r2,1
   11f14:	d0a7ef15 	stw	r2,-24644(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   11f18:	001cd180 	call	1cd18 <OSCtxSw>
   11f1c:	e0bffd17 	ldw	r2,-12(fp)
   11f20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f24:	e0bffe17 	ldw	r2,-8(fp)
   11f28:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   11f2c:	0001883a 	nop
   11f30:	e037883a 	mov	sp,fp
   11f34:	dfc00117 	ldw	ra,4(sp)
   11f38:	df000017 	ldw	fp,0(sp)
   11f3c:	dec00204 	addi	sp,sp,8
   11f40:	f800283a 	ret

00011f44 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   11f44:	defffc04 	addi	sp,sp,-16
   11f48:	df000315 	stw	fp,12(sp)
   11f4c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11f50:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   11f54:	d0a7ea43 	ldbu	r2,-24663(gp)
   11f58:	10803fcc 	andi	r2,r2,255
   11f5c:	10800058 	cmpnei	r2,r2,1
   11f60:	1000161e 	bne	r2,zero,11fbc <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f64:	0005303a 	rdctl	r2,status
   11f68:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f6c:	e0ffff17 	ldw	r3,-4(fp)
   11f70:	00bfff84 	movi	r2,-2
   11f74:	1884703a 	and	r2,r3,r2
   11f78:	1001703a 	wrctl	status,r2
  
  return context;
   11f7c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   11f80:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   11f84:	d0a7f803 	ldbu	r2,-24608(gp)
   11f88:	10803fcc 	andi	r2,r2,255
   11f8c:	1000071e 	bne	r2,zero,11fac <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   11f90:	d0a7ea03 	ldbu	r2,-24664(gp)
   11f94:	10803fcc 	andi	r2,r2,255
   11f98:	10803fe0 	cmpeqi	r2,r2,255
   11f9c:	1000031e 	bne	r2,zero,11fac <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   11fa0:	d0a7ea03 	ldbu	r2,-24664(gp)
   11fa4:	10800044 	addi	r2,r2,1
   11fa8:	d0a7ea05 	stb	r2,-24664(gp)
   11fac:	e0bffd17 	ldw	r2,-12(fp)
   11fb0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11fb4:	e0bffe17 	ldw	r2,-8(fp)
   11fb8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   11fbc:	0001883a 	nop
   11fc0:	e037883a 	mov	sp,fp
   11fc4:	df000017 	ldw	fp,0(sp)
   11fc8:	dec00104 	addi	sp,sp,4
   11fcc:	f800283a 	ret

00011fd0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   11fd0:	defff804 	addi	sp,sp,-32
   11fd4:	dfc00715 	stw	ra,28(sp)
   11fd8:	df000615 	stw	fp,24(sp)
   11fdc:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11fe0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   11fe4:	d0a7ea43 	ldbu	r2,-24663(gp)
   11fe8:	10803fcc 	andi	r2,r2,255
   11fec:	10800058 	cmpnei	r2,r2,1
   11ff0:	1000281e 	bne	r2,zero,12094 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ff4:	0005303a 	rdctl	r2,status
   11ff8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ffc:	e0ffff17 	ldw	r3,-4(fp)
   12000:	00bfff84 	movi	r2,-2
   12004:	1884703a 	and	r2,r3,r2
   12008:	1001703a 	wrctl	status,r2
  
  return context;
   1200c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   12010:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   12014:	d0a7ea03 	ldbu	r2,-24664(gp)
   12018:	10803fcc 	andi	r2,r2,255
   1201c:	10001926 	beq	r2,zero,12084 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   12020:	d0a7ea03 	ldbu	r2,-24664(gp)
   12024:	10bfffc4 	addi	r2,r2,-1
   12028:	d0a7ea05 	stb	r2,-24664(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   1202c:	d0a7ea03 	ldbu	r2,-24664(gp)
   12030:	10803fcc 	andi	r2,r2,255
   12034:	10000e1e 	bne	r2,zero,12070 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   12038:	d0a7f803 	ldbu	r2,-24608(gp)
   1203c:	10803fcc 	andi	r2,r2,255
   12040:	1000061e 	bne	r2,zero,1205c <OSSchedUnlock+0x8c>
   12044:	e0bffa17 	ldw	r2,-24(fp)
   12048:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1204c:	e0bffb17 	ldw	r2,-20(fp)
   12050:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   12054:	0012e780 	call	12e78 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   12058:	00000e06 	br	12094 <OSSchedUnlock+0xc4>
   1205c:	e0bffa17 	ldw	r2,-24(fp)
   12060:	e0bffc15 	stw	r2,-16(fp)
   12064:	e0bffc17 	ldw	r2,-16(fp)
   12068:	1001703a 	wrctl	status,r2
   1206c:	00000906 	br	12094 <OSSchedUnlock+0xc4>
   12070:	e0bffa17 	ldw	r2,-24(fp)
   12074:	e0bffd15 	stw	r2,-12(fp)
   12078:	e0bffd17 	ldw	r2,-12(fp)
   1207c:	1001703a 	wrctl	status,r2
   12080:	00000406 	br	12094 <OSSchedUnlock+0xc4>
   12084:	e0bffa17 	ldw	r2,-24(fp)
   12088:	e0bffe15 	stw	r2,-8(fp)
   1208c:	e0bffe17 	ldw	r2,-8(fp)
   12090:	1001703a 	wrctl	status,r2
   12094:	0001883a 	nop
   12098:	e037883a 	mov	sp,fp
   1209c:	dfc00117 	ldw	ra,4(sp)
   120a0:	df000017 	ldw	fp,0(sp)
   120a4:	dec00204 	addi	sp,sp,8
   120a8:	f800283a 	ret

000120ac <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   120ac:	defffe04 	addi	sp,sp,-8
   120b0:	dfc00115 	stw	ra,4(sp)
   120b4:	df000015 	stw	fp,0(sp)
   120b8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   120bc:	d0a7ea43 	ldbu	r2,-24663(gp)
   120c0:	10803fcc 	andi	r2,r2,255
   120c4:	10000f1e 	bne	r2,zero,12104 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   120c8:	0012f480 	call	12f48 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   120cc:	d0a7ec03 	ldbu	r2,-24656(gp)
   120d0:	d0a7ec45 	stb	r2,-24655(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   120d4:	d0a7ec03 	ldbu	r2,-24656(gp)
   120d8:	10c03fcc 	andi	r3,r2,255
   120dc:	008000f4 	movhi	r2,3
   120e0:	10b40104 	addi	r2,r2,-12284
   120e4:	18c7883a 	add	r3,r3,r3
   120e8:	18c7883a 	add	r3,r3,r3
   120ec:	10c5883a 	add	r2,r2,r3
   120f0:	10800017 	ldw	r2,0(r2)
   120f4:	d0a7f415 	stw	r2,-24624(gp)
        OSTCBCur      = OSTCBHighRdy;
   120f8:	d0a7f417 	ldw	r2,-24624(gp)
   120fc:	d0a7f915 	stw	r2,-24604(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   12100:	001cda40 	call	1cda4 <OSStartHighRdy>
    }
}
   12104:	0001883a 	nop
   12108:	e037883a 	mov	sp,fp
   1210c:	dfc00117 	ldw	ra,4(sp)
   12110:	df000017 	ldw	fp,0(sp)
   12114:	dec00204 	addi	sp,sp,8
   12118:	f800283a 	ret

0001211c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   1211c:	defff904 	addi	sp,sp,-28
   12120:	dfc00615 	stw	ra,24(sp)
   12124:	df000515 	stw	fp,20(sp)
   12128:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1212c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   12130:	01000084 	movi	r4,2
   12134:	00192ec0 	call	192ec <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12138:	0005303a 	rdctl	r2,status
   1213c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12140:	e0fffc17 	ldw	r3,-16(fp)
   12144:	00bfff84 	movi	r2,-2
   12148:	1884703a 	and	r2,r3,r2
   1214c:	1001703a 	wrctl	status,r2
  
  return context;
   12150:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   12154:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   12158:	d027eb15 	stw	zero,-24660(gp)
   1215c:	e0bffb17 	ldw	r2,-20(fp)
   12160:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12164:	e0bffd17 	ldw	r2,-12(fp)
   12168:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   1216c:	0009883a 	mov	r4,zero
   12170:	00192ec0 	call	192ec <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12174:	0005303a 	rdctl	r2,status
   12178:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1217c:	e0fffe17 	ldw	r3,-8(fp)
   12180:	00bfff84 	movi	r2,-2
   12184:	1884703a 	and	r2,r3,r2
   12188:	1001703a 	wrctl	status,r2
  
  return context;
   1218c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   12190:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   12194:	d0a7eb17 	ldw	r2,-24660(gp)
   12198:	d0a7f015 	stw	r2,-24640(gp)
    OSStatRdy    = OS_TRUE;
   1219c:	00800044 	movi	r2,1
   121a0:	d0a7fc05 	stb	r2,-24592(gp)
   121a4:	e0bffb17 	ldw	r2,-20(fp)
   121a8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   121ac:	e0bfff17 	ldw	r2,-4(fp)
   121b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   121b4:	0001883a 	nop
   121b8:	e037883a 	mov	sp,fp
   121bc:	dfc00117 	ldw	ra,4(sp)
   121c0:	df000017 	ldw	fp,0(sp)
   121c4:	dec00204 	addi	sp,sp,8
   121c8:	f800283a 	ret

000121cc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   121cc:	defff704 	addi	sp,sp,-36
   121d0:	dfc00815 	stw	ra,32(sp)
   121d4:	df000715 	stw	fp,28(sp)
   121d8:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   121dc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   121e0:	001cfcc0 	call	1cfcc <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121e4:	0005303a 	rdctl	r2,status
   121e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121ec:	e0fffd17 	ldw	r3,-12(fp)
   121f0:	00bfff84 	movi	r2,-2
   121f4:	1884703a 	and	r2,r3,r2
   121f8:	1001703a 	wrctl	status,r2
  
  return context;
   121fc:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   12200:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   12204:	d0a7fa17 	ldw	r2,-24600(gp)
   12208:	10800044 	addi	r2,r2,1
   1220c:	d0a7fa15 	stw	r2,-24600(gp)
   12210:	e0bffb17 	ldw	r2,-20(fp)
   12214:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12218:	e0bfff17 	ldw	r2,-4(fp)
   1221c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   12220:	d0a7ea43 	ldbu	r2,-24663(gp)
   12224:	10803fcc 	andi	r2,r2,255
   12228:	10800058 	cmpnei	r2,r2,1
   1222c:	10006a1e 	bne	r2,zero,123d8 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   12230:	d0a7ee03 	ldbu	r2,-24648(gp)
   12234:	10803fcc 	andi	r2,r2,255
   12238:	10c00060 	cmpeqi	r3,r2,1
   1223c:	1800061e 	bne	r3,zero,12258 <OSTimeTick+0x8c>
   12240:	10c000a0 	cmpeqi	r3,r2,2
   12244:	1800061e 	bne	r3,zero,12260 <OSTimeTick+0x94>
   12248:	10000a1e 	bne	r2,zero,12274 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   1224c:	00800044 	movi	r2,1
   12250:	e0bffa05 	stb	r2,-24(fp)
                 break;
   12254:	00000b06 	br	12284 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   12258:	e03ffa05 	stb	zero,-24(fp)
                 break;
   1225c:	00000906 	br	12284 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   12260:	00800044 	movi	r2,1
   12264:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   12268:	00800044 	movi	r2,1
   1226c:	d0a7ee05 	stb	r2,-24648(gp)
                 break;
   12270:	00000406 	br	12284 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   12274:	00800044 	movi	r2,1
   12278:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   1227c:	d027ee05 	stb	zero,-24648(gp)
                 break;
   12280:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   12284:	e0bffa03 	ldbu	r2,-24(fp)
   12288:	10005226 	beq	r2,zero,123d4 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   1228c:	d0a7ed17 	ldw	r2,-24652(gp)
   12290:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   12294:	00004906 	br	123bc <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12298:	0005303a 	rdctl	r2,status
   1229c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   122a0:	e0fffc17 	ldw	r3,-16(fp)
   122a4:	00bfff84 	movi	r2,-2
   122a8:	1884703a 	and	r2,r3,r2
   122ac:	1001703a 	wrctl	status,r2
  
  return context;
   122b0:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   122b4:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   122b8:	e0bff917 	ldw	r2,-28(fp)
   122bc:	10800b8b 	ldhu	r2,46(r2)
   122c0:	10bfffcc 	andi	r2,r2,65535
   122c4:	10003626 	beq	r2,zero,123a0 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   122c8:	e0bff917 	ldw	r2,-28(fp)
   122cc:	10800b8b 	ldhu	r2,46(r2)
   122d0:	10bfffc4 	addi	r2,r2,-1
   122d4:	1007883a 	mov	r3,r2
   122d8:	e0bff917 	ldw	r2,-28(fp)
   122dc:	10c00b8d 	sth	r3,46(r2)
   122e0:	e0bff917 	ldw	r2,-28(fp)
   122e4:	10800b8b 	ldhu	r2,46(r2)
   122e8:	10bfffcc 	andi	r2,r2,65535
   122ec:	10002c1e 	bne	r2,zero,123a0 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   122f0:	e0bff917 	ldw	r2,-28(fp)
   122f4:	10800c03 	ldbu	r2,48(r2)
   122f8:	10803fcc 	andi	r2,r2,255
   122fc:	10800dcc 	andi	r2,r2,55
   12300:	10000b26 	beq	r2,zero,12330 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   12304:	e0bff917 	ldw	r2,-28(fp)
   12308:	10c00c03 	ldbu	r3,48(r2)
   1230c:	00bff204 	movi	r2,-56
   12310:	1884703a 	and	r2,r3,r2
   12314:	1007883a 	mov	r3,r2
   12318:	e0bff917 	ldw	r2,-28(fp)
   1231c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   12320:	e0bff917 	ldw	r2,-28(fp)
   12324:	00c00044 	movi	r3,1
   12328:	10c00c45 	stb	r3,49(r2)
   1232c:	00000206 	br	12338 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   12330:	e0bff917 	ldw	r2,-28(fp)
   12334:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   12338:	e0bff917 	ldw	r2,-28(fp)
   1233c:	10800c03 	ldbu	r2,48(r2)
   12340:	10803fcc 	andi	r2,r2,255
   12344:	1080020c 	andi	r2,r2,8
   12348:	1000151e 	bne	r2,zero,123a0 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   1234c:	e0bff917 	ldw	r2,-28(fp)
   12350:	10c00d83 	ldbu	r3,54(r2)
   12354:	d0a7f603 	ldbu	r2,-24616(gp)
   12358:	1884b03a 	or	r2,r3,r2
   1235c:	d0a7f605 	stb	r2,-24616(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   12360:	e0bff917 	ldw	r2,-28(fp)
   12364:	10800d03 	ldbu	r2,52(r2)
   12368:	10c03fcc 	andi	r3,r2,255
   1236c:	e0bff917 	ldw	r2,-28(fp)
   12370:	10800d03 	ldbu	r2,52(r2)
   12374:	11003fcc 	andi	r4,r2,255
   12378:	d0a7f644 	addi	r2,gp,-24615
   1237c:	2085883a 	add	r2,r4,r2
   12380:	11000003 	ldbu	r4,0(r2)
   12384:	e0bff917 	ldw	r2,-28(fp)
   12388:	10800d43 	ldbu	r2,53(r2)
   1238c:	2084b03a 	or	r2,r4,r2
   12390:	1009883a 	mov	r4,r2
   12394:	d0a7f644 	addi	r2,gp,-24615
   12398:	1885883a 	add	r2,r3,r2
   1239c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   123a0:	e0bff917 	ldw	r2,-28(fp)
   123a4:	10800517 	ldw	r2,20(r2)
   123a8:	e0bff915 	stw	r2,-28(fp)
   123ac:	e0bffb17 	ldw	r2,-20(fp)
   123b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   123b4:	e0bffe17 	ldw	r2,-8(fp)
   123b8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   123bc:	e0bff917 	ldw	r2,-28(fp)
   123c0:	10800c83 	ldbu	r2,50(r2)
   123c4:	10803fcc 	andi	r2,r2,255
   123c8:	10800518 	cmpnei	r2,r2,20
   123cc:	103fb21e 	bne	r2,zero,12298 <OSTimeTick+0xcc>
   123d0:	00000106 	br	123d8 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   123d4:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   123d8:	e037883a 	mov	sp,fp
   123dc:	dfc00117 	ldw	ra,4(sp)
   123e0:	df000017 	ldw	fp,0(sp)
   123e4:	dec00204 	addi	sp,sp,8
   123e8:	f800283a 	ret

000123ec <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   123ec:	deffff04 	addi	sp,sp,-4
   123f0:	df000015 	stw	fp,0(sp)
   123f4:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   123f8:	00804784 	movi	r2,286
}
   123fc:	e037883a 	mov	sp,fp
   12400:	df000017 	ldw	fp,0(sp)
   12404:	dec00104 	addi	sp,sp,4
   12408:	f800283a 	ret

0001240c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   1240c:	deffff04 	addi	sp,sp,-4
   12410:	df000015 	stw	fp,0(sp)
   12414:	d839883a 	mov	fp,sp
}
   12418:	0001883a 	nop
   1241c:	e037883a 	mov	sp,fp
   12420:	df000017 	ldw	fp,0(sp)
   12424:	dec00104 	addi	sp,sp,4
   12428:	f800283a 	ret

0001242c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   1242c:	defff804 	addi	sp,sp,-32
   12430:	dfc00715 	stw	ra,28(sp)
   12434:	df000615 	stw	fp,24(sp)
   12438:	df000604 	addi	fp,sp,24
   1243c:	e13ffc15 	stw	r4,-16(fp)
   12440:	e17ffd15 	stw	r5,-12(fp)
   12444:	3007883a 	mov	r3,r6
   12448:	3805883a 	mov	r2,r7
   1244c:	e0fffe05 	stb	r3,-8(fp)
   12450:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   12454:	e0bffc17 	ldw	r2,-16(fp)
   12458:	10800283 	ldbu	r2,10(r2)
   1245c:	10c03fcc 	andi	r3,r2,255
   12460:	008000b4 	movhi	r2,2
   12464:	10b77004 	addi	r2,r2,-8768
   12468:	10c5883a 	add	r2,r2,r3
   1246c:	10800003 	ldbu	r2,0(r2)
   12470:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   12474:	e0bffa03 	ldbu	r2,-24(fp)
   12478:	e0fffc17 	ldw	r3,-16(fp)
   1247c:	1885883a 	add	r2,r3,r2
   12480:	108002c4 	addi	r2,r2,11
   12484:	10800003 	ldbu	r2,0(r2)
   12488:	10c03fcc 	andi	r3,r2,255
   1248c:	008000b4 	movhi	r2,2
   12490:	10b77004 	addi	r2,r2,-8768
   12494:	10c5883a 	add	r2,r2,r3
   12498:	10800003 	ldbu	r2,0(r2)
   1249c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   124a0:	e0bffa03 	ldbu	r2,-24(fp)
   124a4:	100490fa 	slli	r2,r2,3
   124a8:	1007883a 	mov	r3,r2
   124ac:	e0bffa43 	ldbu	r2,-23(fp)
   124b0:	1885883a 	add	r2,r3,r2
   124b4:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   124b8:	e0fffa83 	ldbu	r3,-22(fp)
   124bc:	008000f4 	movhi	r2,3
   124c0:	10b40104 	addi	r2,r2,-12284
   124c4:	18c7883a 	add	r3,r3,r3
   124c8:	18c7883a 	add	r3,r3,r3
   124cc:	10c5883a 	add	r2,r2,r3
   124d0:	10800017 	ldw	r2,0(r2)
   124d4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   124d8:	e0bffb17 	ldw	r2,-20(fp)
   124dc:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   124e0:	e0bffb17 	ldw	r2,-20(fp)
   124e4:	e0fffd17 	ldw	r3,-12(fp)
   124e8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   124ec:	e0bffb17 	ldw	r2,-20(fp)
   124f0:	10800c03 	ldbu	r2,48(r2)
   124f4:	1007883a 	mov	r3,r2
   124f8:	e0bffe03 	ldbu	r2,-8(fp)
   124fc:	0084303a 	nor	r2,zero,r2
   12500:	1884703a 	and	r2,r3,r2
   12504:	1007883a 	mov	r3,r2
   12508:	e0bffb17 	ldw	r2,-20(fp)
   1250c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   12510:	e0bffb17 	ldw	r2,-20(fp)
   12514:	e0ffff03 	ldbu	r3,-4(fp)
   12518:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   1251c:	e0bffb17 	ldw	r2,-20(fp)
   12520:	10800c03 	ldbu	r2,48(r2)
   12524:	10803fcc 	andi	r2,r2,255
   12528:	1080020c 	andi	r2,r2,8
   1252c:	1000111e 	bne	r2,zero,12574 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   12530:	e0bffb17 	ldw	r2,-20(fp)
   12534:	10c00d83 	ldbu	r3,54(r2)
   12538:	d0a7f603 	ldbu	r2,-24616(gp)
   1253c:	1884b03a 	or	r2,r3,r2
   12540:	d0a7f605 	stb	r2,-24616(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   12544:	e0fffa03 	ldbu	r3,-24(fp)
   12548:	e13ffa03 	ldbu	r4,-24(fp)
   1254c:	d0a7f644 	addi	r2,gp,-24615
   12550:	2085883a 	add	r2,r4,r2
   12554:	11000003 	ldbu	r4,0(r2)
   12558:	e0bffb17 	ldw	r2,-20(fp)
   1255c:	10800d43 	ldbu	r2,53(r2)
   12560:	2084b03a 	or	r2,r4,r2
   12564:	1009883a 	mov	r4,r2
   12568:	d0a7f644 	addi	r2,gp,-24615
   1256c:	1885883a 	add	r2,r3,r2
   12570:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   12574:	e17ffc17 	ldw	r5,-16(fp)
   12578:	e13ffb17 	ldw	r4,-20(fp)
   1257c:	00128240 	call	12824 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   12580:	e0bffb17 	ldw	r2,-20(fp)
   12584:	10800817 	ldw	r2,32(r2)
   12588:	10000826 	beq	r2,zero,125ac <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1258c:	e0bffb17 	ldw	r2,-20(fp)
   12590:	10800817 	ldw	r2,32(r2)
   12594:	100b883a 	mov	r5,r2
   12598:	e13ffb17 	ldw	r4,-20(fp)
   1259c:	00128dc0 	call	128dc <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   125a0:	e0bffb17 	ldw	r2,-20(fp)
   125a4:	e0fffc17 	ldw	r3,-16(fp)
   125a8:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   125ac:	e0bffa83 	ldbu	r2,-22(fp)
}
   125b0:	e037883a 	mov	sp,fp
   125b4:	dfc00117 	ldw	ra,4(sp)
   125b8:	df000017 	ldw	fp,0(sp)
   125bc:	dec00204 	addi	sp,sp,8
   125c0:	f800283a 	ret

000125c4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   125c4:	defffd04 	addi	sp,sp,-12
   125c8:	df000215 	stw	fp,8(sp)
   125cc:	df000204 	addi	fp,sp,8
   125d0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   125d4:	d0a7f917 	ldw	r2,-24604(gp)
   125d8:	e0ffff17 	ldw	r3,-4(fp)
   125dc:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   125e0:	d0a7f917 	ldw	r2,-24604(gp)
   125e4:	10800d03 	ldbu	r2,52(r2)
   125e8:	10803fcc 	andi	r2,r2,255
   125ec:	d0e7f917 	ldw	r3,-24604(gp)
   125f0:	18c00d03 	ldbu	r3,52(r3)
   125f4:	18c03fcc 	andi	r3,r3,255
   125f8:	e13fff17 	ldw	r4,-4(fp)
   125fc:	20c7883a 	add	r3,r4,r3
   12600:	18c002c4 	addi	r3,r3,11
   12604:	19000003 	ldbu	r4,0(r3)
   12608:	d0e7f917 	ldw	r3,-24604(gp)
   1260c:	18c00d43 	ldbu	r3,53(r3)
   12610:	20c6b03a 	or	r3,r4,r3
   12614:	1809883a 	mov	r4,r3
   12618:	e0ffff17 	ldw	r3,-4(fp)
   1261c:	1885883a 	add	r2,r3,r2
   12620:	108002c4 	addi	r2,r2,11
   12624:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   12628:	e0bfff17 	ldw	r2,-4(fp)
   1262c:	10c00283 	ldbu	r3,10(r2)
   12630:	d0a7f917 	ldw	r2,-24604(gp)
   12634:	10800d83 	ldbu	r2,54(r2)
   12638:	1884b03a 	or	r2,r3,r2
   1263c:	1007883a 	mov	r3,r2
   12640:	e0bfff17 	ldw	r2,-4(fp)
   12644:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   12648:	d0a7f917 	ldw	r2,-24604(gp)
   1264c:	10800d03 	ldbu	r2,52(r2)
   12650:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   12654:	e0fffe03 	ldbu	r3,-8(fp)
   12658:	e13ffe03 	ldbu	r4,-8(fp)
   1265c:	d0a7f644 	addi	r2,gp,-24615
   12660:	2085883a 	add	r2,r4,r2
   12664:	10800003 	ldbu	r2,0(r2)
   12668:	1009883a 	mov	r4,r2
   1266c:	d0a7f917 	ldw	r2,-24604(gp)
   12670:	10800d43 	ldbu	r2,53(r2)
   12674:	0084303a 	nor	r2,zero,r2
   12678:	2084703a 	and	r2,r4,r2
   1267c:	1009883a 	mov	r4,r2
   12680:	d0a7f644 	addi	r2,gp,-24615
   12684:	1885883a 	add	r2,r3,r2
   12688:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1268c:	e0fffe03 	ldbu	r3,-8(fp)
   12690:	d0a7f644 	addi	r2,gp,-24615
   12694:	1885883a 	add	r2,r3,r2
   12698:	10800003 	ldbu	r2,0(r2)
   1269c:	10803fcc 	andi	r2,r2,255
   126a0:	1000071e 	bne	r2,zero,126c0 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   126a4:	d0a7f917 	ldw	r2,-24604(gp)
   126a8:	10800d83 	ldbu	r2,54(r2)
   126ac:	0084303a 	nor	r2,zero,r2
   126b0:	1007883a 	mov	r3,r2
   126b4:	d0a7f603 	ldbu	r2,-24616(gp)
   126b8:	1884703a 	and	r2,r3,r2
   126bc:	d0a7f605 	stb	r2,-24616(gp)
    }
}
   126c0:	0001883a 	nop
   126c4:	e037883a 	mov	sp,fp
   126c8:	df000017 	ldw	fp,0(sp)
   126cc:	dec00104 	addi	sp,sp,4
   126d0:	f800283a 	ret

000126d4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   126d4:	defffb04 	addi	sp,sp,-20
   126d8:	df000415 	stw	fp,16(sp)
   126dc:	df000404 	addi	fp,sp,16
   126e0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   126e4:	d0a7f917 	ldw	r2,-24604(gp)
   126e8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   126ec:	d0a7f917 	ldw	r2,-24604(gp)
   126f0:	e0ffff17 	ldw	r3,-4(fp)
   126f4:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   126f8:	e0bfff17 	ldw	r2,-4(fp)
   126fc:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   12700:	e0bffc17 	ldw	r2,-16(fp)
   12704:	10800017 	ldw	r2,0(r2)
   12708:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   1270c:	00002006 	br	12790 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   12710:	d0a7f917 	ldw	r2,-24604(gp)
   12714:	10800d03 	ldbu	r2,52(r2)
   12718:	10803fcc 	andi	r2,r2,255
   1271c:	d0e7f917 	ldw	r3,-24604(gp)
   12720:	18c00d03 	ldbu	r3,52(r3)
   12724:	18c03fcc 	andi	r3,r3,255
   12728:	e13ffd17 	ldw	r4,-12(fp)
   1272c:	20c7883a 	add	r3,r4,r3
   12730:	18c002c4 	addi	r3,r3,11
   12734:	19000003 	ldbu	r4,0(r3)
   12738:	d0e7f917 	ldw	r3,-24604(gp)
   1273c:	18c00d43 	ldbu	r3,53(r3)
   12740:	20c6b03a 	or	r3,r4,r3
   12744:	1809883a 	mov	r4,r3
   12748:	e0fffd17 	ldw	r3,-12(fp)
   1274c:	1885883a 	add	r2,r3,r2
   12750:	108002c4 	addi	r2,r2,11
   12754:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   12758:	e0bffd17 	ldw	r2,-12(fp)
   1275c:	10c00283 	ldbu	r3,10(r2)
   12760:	d0a7f917 	ldw	r2,-24604(gp)
   12764:	10800d83 	ldbu	r2,54(r2)
   12768:	1884b03a 	or	r2,r3,r2
   1276c:	1007883a 	mov	r3,r2
   12770:	e0bffd17 	ldw	r2,-12(fp)
   12774:	10c00285 	stb	r3,10(r2)
        pevents++;
   12778:	e0bffc17 	ldw	r2,-16(fp)
   1277c:	10800104 	addi	r2,r2,4
   12780:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   12784:	e0bffc17 	ldw	r2,-16(fp)
   12788:	10800017 	ldw	r2,0(r2)
   1278c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   12790:	e0bffd17 	ldw	r2,-12(fp)
   12794:	103fde1e 	bne	r2,zero,12710 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   12798:	d0a7f917 	ldw	r2,-24604(gp)
   1279c:	10800d03 	ldbu	r2,52(r2)
   127a0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   127a4:	e0fffe03 	ldbu	r3,-8(fp)
   127a8:	e13ffe03 	ldbu	r4,-8(fp)
   127ac:	d0a7f644 	addi	r2,gp,-24615
   127b0:	2085883a 	add	r2,r4,r2
   127b4:	10800003 	ldbu	r2,0(r2)
   127b8:	1009883a 	mov	r4,r2
   127bc:	d0a7f917 	ldw	r2,-24604(gp)
   127c0:	10800d43 	ldbu	r2,53(r2)
   127c4:	0084303a 	nor	r2,zero,r2
   127c8:	2084703a 	and	r2,r4,r2
   127cc:	1009883a 	mov	r4,r2
   127d0:	d0a7f644 	addi	r2,gp,-24615
   127d4:	1885883a 	add	r2,r3,r2
   127d8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   127dc:	e0fffe03 	ldbu	r3,-8(fp)
   127e0:	d0a7f644 	addi	r2,gp,-24615
   127e4:	1885883a 	add	r2,r3,r2
   127e8:	10800003 	ldbu	r2,0(r2)
   127ec:	10803fcc 	andi	r2,r2,255
   127f0:	1000071e 	bne	r2,zero,12810 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   127f4:	d0a7f917 	ldw	r2,-24604(gp)
   127f8:	10800d83 	ldbu	r2,54(r2)
   127fc:	0084303a 	nor	r2,zero,r2
   12800:	1007883a 	mov	r3,r2
   12804:	d0a7f603 	ldbu	r2,-24616(gp)
   12808:	1884703a 	and	r2,r3,r2
   1280c:	d0a7f605 	stb	r2,-24616(gp)
    }
}
   12810:	0001883a 	nop
   12814:	e037883a 	mov	sp,fp
   12818:	df000017 	ldw	fp,0(sp)
   1281c:	dec00104 	addi	sp,sp,4
   12820:	f800283a 	ret

00012824 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   12824:	defffc04 	addi	sp,sp,-16
   12828:	df000315 	stw	fp,12(sp)
   1282c:	df000304 	addi	fp,sp,12
   12830:	e13ffe15 	stw	r4,-8(fp)
   12834:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   12838:	e0bffe17 	ldw	r2,-8(fp)
   1283c:	10800d03 	ldbu	r2,52(r2)
   12840:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   12844:	e0bffd03 	ldbu	r2,-12(fp)
   12848:	e0fffd03 	ldbu	r3,-12(fp)
   1284c:	e13fff17 	ldw	r4,-4(fp)
   12850:	20c7883a 	add	r3,r4,r3
   12854:	18c002c4 	addi	r3,r3,11
   12858:	18c00003 	ldbu	r3,0(r3)
   1285c:	1809883a 	mov	r4,r3
   12860:	e0fffe17 	ldw	r3,-8(fp)
   12864:	18c00d43 	ldbu	r3,53(r3)
   12868:	00c6303a 	nor	r3,zero,r3
   1286c:	20c6703a 	and	r3,r4,r3
   12870:	1809883a 	mov	r4,r3
   12874:	e0ffff17 	ldw	r3,-4(fp)
   12878:	1885883a 	add	r2,r3,r2
   1287c:	108002c4 	addi	r2,r2,11
   12880:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   12884:	e0bffd03 	ldbu	r2,-12(fp)
   12888:	e0ffff17 	ldw	r3,-4(fp)
   1288c:	1885883a 	add	r2,r3,r2
   12890:	108002c4 	addi	r2,r2,11
   12894:	10800003 	ldbu	r2,0(r2)
   12898:	10803fcc 	andi	r2,r2,255
   1289c:	10000a1e 	bne	r2,zero,128c8 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   128a0:	e0bfff17 	ldw	r2,-4(fp)
   128a4:	10800283 	ldbu	r2,10(r2)
   128a8:	1007883a 	mov	r3,r2
   128ac:	e0bffe17 	ldw	r2,-8(fp)
   128b0:	10800d83 	ldbu	r2,54(r2)
   128b4:	0084303a 	nor	r2,zero,r2
   128b8:	1884703a 	and	r2,r3,r2
   128bc:	1007883a 	mov	r3,r2
   128c0:	e0bfff17 	ldw	r2,-4(fp)
   128c4:	10c00285 	stb	r3,10(r2)
    }
}
   128c8:	0001883a 	nop
   128cc:	e037883a 	mov	sp,fp
   128d0:	df000017 	ldw	fp,0(sp)
   128d4:	dec00104 	addi	sp,sp,4
   128d8:	f800283a 	ret

000128dc <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   128dc:	defffa04 	addi	sp,sp,-24
   128e0:	df000515 	stw	fp,20(sp)
   128e4:	df000504 	addi	fp,sp,20
   128e8:	e13ffe15 	stw	r4,-8(fp)
   128ec:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   128f0:	e0bffe17 	ldw	r2,-8(fp)
   128f4:	10800d03 	ldbu	r2,52(r2)
   128f8:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   128fc:	e0bffe17 	ldw	r2,-8(fp)
   12900:	10800d83 	ldbu	r2,54(r2)
   12904:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   12908:	e0bffe17 	ldw	r2,-8(fp)
   1290c:	10800d43 	ldbu	r2,53(r2)
   12910:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   12914:	e0bfff17 	ldw	r2,-4(fp)
   12918:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   1291c:	e0bffb17 	ldw	r2,-20(fp)
   12920:	10800017 	ldw	r2,0(r2)
   12924:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   12928:	00002506 	br	129c0 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   1292c:	e0bffd03 	ldbu	r2,-12(fp)
   12930:	e0fffd03 	ldbu	r3,-12(fp)
   12934:	e13ffc17 	ldw	r4,-16(fp)
   12938:	20c7883a 	add	r3,r4,r3
   1293c:	18c002c4 	addi	r3,r3,11
   12940:	18c00003 	ldbu	r3,0(r3)
   12944:	1809883a 	mov	r4,r3
   12948:	e0fffd83 	ldbu	r3,-10(fp)
   1294c:	00c6303a 	nor	r3,zero,r3
   12950:	20c6703a 	and	r3,r4,r3
   12954:	1809883a 	mov	r4,r3
   12958:	e0fffc17 	ldw	r3,-16(fp)
   1295c:	1885883a 	add	r2,r3,r2
   12960:	108002c4 	addi	r2,r2,11
   12964:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   12968:	e0bffd03 	ldbu	r2,-12(fp)
   1296c:	e0fffc17 	ldw	r3,-16(fp)
   12970:	1885883a 	add	r2,r3,r2
   12974:	108002c4 	addi	r2,r2,11
   12978:	10800003 	ldbu	r2,0(r2)
   1297c:	10803fcc 	andi	r2,r2,255
   12980:	1000091e 	bne	r2,zero,129a8 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   12984:	e0bffc17 	ldw	r2,-16(fp)
   12988:	10800283 	ldbu	r2,10(r2)
   1298c:	1007883a 	mov	r3,r2
   12990:	e0bffd43 	ldbu	r2,-11(fp)
   12994:	0084303a 	nor	r2,zero,r2
   12998:	1884703a 	and	r2,r3,r2
   1299c:	1007883a 	mov	r3,r2
   129a0:	e0bffc17 	ldw	r2,-16(fp)
   129a4:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   129a8:	e0bffb17 	ldw	r2,-20(fp)
   129ac:	10800104 	addi	r2,r2,4
   129b0:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   129b4:	e0bffb17 	ldw	r2,-20(fp)
   129b8:	10800017 	ldw	r2,0(r2)
   129bc:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   129c0:	e0bffc17 	ldw	r2,-16(fp)
   129c4:	103fd91e 	bne	r2,zero,1292c <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   129c8:	0001883a 	nop
   129cc:	e037883a 	mov	sp,fp
   129d0:	df000017 	ldw	fp,0(sp)
   129d4:	dec00104 	addi	sp,sp,4
   129d8:	f800283a 	ret

000129dc <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   129dc:	defffc04 	addi	sp,sp,-16
   129e0:	df000315 	stw	fp,12(sp)
   129e4:	df000304 	addi	fp,sp,12
   129e8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   129ec:	e0bfff17 	ldw	r2,-4(fp)
   129f0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   129f4:	e0bfff17 	ldw	r2,-4(fp)
   129f8:	108002c4 	addi	r2,r2,11
   129fc:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12a00:	e03ffe05 	stb	zero,-8(fp)
   12a04:	00000706 	br	12a24 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   12a08:	e0bffd17 	ldw	r2,-12(fp)
   12a0c:	10c00044 	addi	r3,r2,1
   12a10:	e0fffd15 	stw	r3,-12(fp)
   12a14:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12a18:	e0bffe03 	ldbu	r2,-8(fp)
   12a1c:	10800044 	addi	r2,r2,1
   12a20:	e0bffe05 	stb	r2,-8(fp)
   12a24:	e0bffe03 	ldbu	r2,-8(fp)
   12a28:	108000f0 	cmpltui	r2,r2,3
   12a2c:	103ff61e 	bne	r2,zero,12a08 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
   12a30:	0001883a 	nop
   12a34:	e037883a 	mov	sp,fp
   12a38:	df000017 	ldw	fp,0(sp)
   12a3c:	dec00104 	addi	sp,sp,4
   12a40:	f800283a 	ret

00012a44 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   12a44:	defffb04 	addi	sp,sp,-20
   12a48:	dfc00415 	stw	ra,16(sp)
   12a4c:	df000315 	stw	fp,12(sp)
   12a50:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   12a54:	0142d004 	movi	r5,2880
   12a58:	010000f4 	movhi	r4,3
   12a5c:	212fed04 	addi	r4,r4,-16460
   12a60:	0012dbc0 	call	12dbc <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   12a64:	008000f4 	movhi	r2,3
   12a68:	10afed04 	addi	r2,r2,-16460
   12a6c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   12a70:	008000f4 	movhi	r2,3
   12a74:	10aff904 	addi	r2,r2,-16412
   12a78:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   12a7c:	e03ffd0d 	sth	zero,-12(fp)
   12a80:	00001306 	br	12ad0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12a84:	e0bffe17 	ldw	r2,-8(fp)
   12a88:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   12a8c:	e0bffe17 	ldw	r2,-8(fp)
   12a90:	e0ffff17 	ldw	r3,-4(fp)
   12a94:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   12a98:	e0bffe17 	ldw	r2,-8(fp)
   12a9c:	00c00fc4 	movi	r3,63
   12aa0:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   12aa4:	e0bffe17 	ldw	r2,-8(fp)
   12aa8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   12aac:	e0bffe17 	ldw	r2,-8(fp)
   12ab0:	10800c04 	addi	r2,r2,48
   12ab4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   12ab8:	e0bfff17 	ldw	r2,-4(fp)
   12abc:	10800c04 	addi	r2,r2,48
   12ac0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   12ac4:	e0bffd0b 	ldhu	r2,-12(fp)
   12ac8:	10800044 	addi	r2,r2,1
   12acc:	e0bffd0d 	sth	r2,-12(fp)
   12ad0:	e0bffd0b 	ldhu	r2,-12(fp)
   12ad4:	10800ef0 	cmpltui	r2,r2,59
   12ad8:	103fea1e 	bne	r2,zero,12a84 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   12adc:	e0bffe17 	ldw	r2,-8(fp)
   12ae0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   12ae4:	e0bffe17 	ldw	r2,-8(fp)
   12ae8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   12aec:	e0bffe17 	ldw	r2,-8(fp)
   12af0:	00c00fc4 	movi	r3,63
   12af4:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   12af8:	e0bffe17 	ldw	r2,-8(fp)
   12afc:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   12b00:	008000f4 	movhi	r2,3
   12b04:	10afed04 	addi	r2,r2,-16460
   12b08:	d0a7f715 	stw	r2,-24612(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   12b0c:	0001883a 	nop
   12b10:	e037883a 	mov	sp,fp
   12b14:	dfc00117 	ldw	ra,4(sp)
   12b18:	df000017 	ldw	fp,0(sp)
   12b1c:	dec00204 	addi	sp,sp,8
   12b20:	f800283a 	ret

00012b24 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   12b24:	deffff04 	addi	sp,sp,-4
   12b28:	df000015 	stw	fp,0(sp)
   12b2c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   12b30:	d027fa15 	stw	zero,-24600(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   12b34:	d027f805 	stb	zero,-24608(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   12b38:	d027ea05 	stb	zero,-24664(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   12b3c:	d027f245 	stb	zero,-24631(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   12b40:	d027ea45 	stb	zero,-24663(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   12b44:	d027ef15 	stw	zero,-24644(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   12b48:	d027eb15 	stw	zero,-24660(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   12b4c:	d027fd15 	stw	zero,-24588(gp)
    OSIdleCtrMax  = 0L;
   12b50:	d027f015 	stw	zero,-24640(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   12b54:	d027fc05 	stb	zero,-24592(gp)
#endif
}
   12b58:	0001883a 	nop
   12b5c:	e037883a 	mov	sp,fp
   12b60:	df000017 	ldw	fp,0(sp)
   12b64:	dec00104 	addi	sp,sp,4
   12b68:	f800283a 	ret

00012b6c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   12b6c:	defffd04 	addi	sp,sp,-12
   12b70:	df000215 	stw	fp,8(sp)
   12b74:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   12b78:	d027f605 	stb	zero,-24616(gp)
    prdytbl       = &OSRdyTbl[0];
   12b7c:	d0a7f644 	addi	r2,gp,-24615
   12b80:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   12b84:	e03ffe05 	stb	zero,-8(fp)
   12b88:	00000706 	br	12ba8 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   12b8c:	e0bfff17 	ldw	r2,-4(fp)
   12b90:	10c00044 	addi	r3,r2,1
   12b94:	e0ffff15 	stw	r3,-4(fp)
   12b98:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   12b9c:	e0bffe03 	ldbu	r2,-8(fp)
   12ba0:	10800044 	addi	r2,r2,1
   12ba4:	e0bffe05 	stb	r2,-8(fp)
   12ba8:	e0bffe03 	ldbu	r2,-8(fp)
   12bac:	108000f0 	cmpltui	r2,r2,3
   12bb0:	103ff61e 	bne	r2,zero,12b8c <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   12bb4:	d027ec45 	stb	zero,-24655(gp)
    OSPrioHighRdy = 0;
   12bb8:	d027ec05 	stb	zero,-24656(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   12bbc:	d027f415 	stw	zero,-24624(gp)
    OSTCBCur      = (OS_TCB *)0;
   12bc0:	d027f915 	stw	zero,-24604(gp)
}
   12bc4:	0001883a 	nop
   12bc8:	e037883a 	mov	sp,fp
   12bcc:	df000017 	ldw	fp,0(sp)
   12bd0:	dec00104 	addi	sp,sp,4
   12bd4:	f800283a 	ret

00012bd8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   12bd8:	defff804 	addi	sp,sp,-32
   12bdc:	dfc00715 	stw	ra,28(sp)
   12be0:	df000615 	stw	fp,24(sp)
   12be4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   12be8:	008000c4 	movi	r2,3
   12bec:	d8800415 	stw	r2,16(sp)
   12bf0:	d8000315 	stw	zero,12(sp)
   12bf4:	00808004 	movi	r2,512
   12bf8:	d8800215 	stw	r2,8(sp)
   12bfc:	008000f4 	movhi	r2,3
   12c00:	10aded04 	addi	r2,r2,-18508
   12c04:	d8800115 	stw	r2,4(sp)
   12c08:	00bfffd4 	movui	r2,65535
   12c0c:	d8800015 	stw	r2,0(sp)
   12c10:	01c00504 	movi	r7,20
   12c14:	018000f4 	movhi	r6,3
   12c18:	31afec04 	addi	r6,r6,-16464
   12c1c:	000b883a 	mov	r5,zero
   12c20:	01000074 	movhi	r4,1
   12c24:	210c2104 	addi	r4,r4,12420
   12c28:	001821c0 	call	1821c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   12c2c:	e1bfff04 	addi	r6,fp,-4
   12c30:	014000b4 	movhi	r5,2
   12c34:	2977b004 	addi	r5,r5,-8512
   12c38:	01000504 	movi	r4,20
   12c3c:	0018a2c0 	call	18a2c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   12c40:	0001883a 	nop
   12c44:	e037883a 	mov	sp,fp
   12c48:	dfc00117 	ldw	ra,4(sp)
   12c4c:	df000017 	ldw	fp,0(sp)
   12c50:	dec00204 	addi	sp,sp,8
   12c54:	f800283a 	ret

00012c58 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   12c58:	defff804 	addi	sp,sp,-32
   12c5c:	dfc00715 	stw	ra,28(sp)
   12c60:	df000615 	stw	fp,24(sp)
   12c64:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   12c68:	008000c4 	movi	r2,3
   12c6c:	d8800415 	stw	r2,16(sp)
   12c70:	d8000315 	stw	zero,12(sp)
   12c74:	00808004 	movi	r2,512
   12c78:	d8800215 	stw	r2,8(sp)
   12c7c:	008000f4 	movhi	r2,3
   12c80:	10ab7504 	addi	r2,r2,-21036
   12c84:	d8800115 	stw	r2,4(sp)
   12c88:	00bfff94 	movui	r2,65534
   12c8c:	d8800015 	stw	r2,0(sp)
   12c90:	01c004c4 	movi	r7,19
   12c94:	018000f4 	movhi	r6,3
   12c98:	31ad7404 	addi	r6,r6,-18992
   12c9c:	000b883a 	mov	r5,zero
   12ca0:	01000074 	movhi	r4,1
   12ca4:	210c3804 	addi	r4,r4,12512
   12ca8:	001821c0 	call	1821c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   12cac:	e1bfff04 	addi	r6,fp,-4
   12cb0:	014000b4 	movhi	r5,2
   12cb4:	2977b404 	addi	r5,r5,-8496
   12cb8:	010004c4 	movi	r4,19
   12cbc:	0018a2c0 	call	18a2c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   12cc0:	0001883a 	nop
   12cc4:	e037883a 	mov	sp,fp
   12cc8:	dfc00117 	ldw	ra,4(sp)
   12ccc:	df000017 	ldw	fp,0(sp)
   12cd0:	dec00204 	addi	sp,sp,8
   12cd4:	f800283a 	ret

00012cd8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   12cd8:	defffb04 	addi	sp,sp,-20
   12cdc:	dfc00415 	stw	ra,16(sp)
   12ce0:	df000315 	stw	fp,12(sp)
   12ce4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   12ce8:	01414404 	movi	r5,1296
   12cec:	010000f4 	movhi	r4,3
   12cf0:	2132bd04 	addi	r4,r4,-13580
   12cf4:	0012dbc0 	call	12dbc <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   12cf8:	01401504 	movi	r5,84
   12cfc:	010000f4 	movhi	r4,3
   12d00:	21340104 	addi	r4,r4,-12284
   12d04:	0012dbc0 	call	12dbc <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   12d08:	008000f4 	movhi	r2,3
   12d0c:	10b2bd04 	addi	r2,r2,-13580
   12d10:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   12d14:	008000f4 	movhi	r2,3
   12d18:	10b2d804 	addi	r2,r2,-13472
   12d1c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   12d20:	e03ffd05 	stb	zero,-12(fp)
   12d24:	00001106 	br	12d6c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   12d28:	e0bffe17 	ldw	r2,-8(fp)
   12d2c:	e0ffff17 	ldw	r3,-4(fp)
   12d30:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   12d34:	e0bffe17 	ldw	r2,-8(fp)
   12d38:	00c00fc4 	movi	r3,63
   12d3c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   12d40:	e0bffe17 	ldw	r2,-8(fp)
   12d44:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   12d48:	e0bffe17 	ldw	r2,-8(fp)
   12d4c:	10801b04 	addi	r2,r2,108
   12d50:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   12d54:	e0bfff17 	ldw	r2,-4(fp)
   12d58:	10801b04 	addi	r2,r2,108
   12d5c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   12d60:	e0bffd03 	ldbu	r2,-12(fp)
   12d64:	10800044 	addi	r2,r2,1
   12d68:	e0bffd05 	stb	r2,-12(fp)
   12d6c:	e0bffd03 	ldbu	r2,-12(fp)
   12d70:	108002f0 	cmpltui	r2,r2,11
   12d74:	103fec1e 	bne	r2,zero,12d28 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   12d78:	e0bffe17 	ldw	r2,-8(fp)
   12d7c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   12d80:	e0bffe17 	ldw	r2,-8(fp)
   12d84:	00c00fc4 	movi	r3,63
   12d88:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   12d8c:	e0bffe17 	ldw	r2,-8(fp)
   12d90:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   12d94:	d027ed15 	stw	zero,-24652(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   12d98:	008000f4 	movhi	r2,3
   12d9c:	10b2bd04 	addi	r2,r2,-13580
   12da0:	d0a7f115 	stw	r2,-24636(gp)
}
   12da4:	0001883a 	nop
   12da8:	e037883a 	mov	sp,fp
   12dac:	dfc00117 	ldw	ra,4(sp)
   12db0:	df000017 	ldw	fp,0(sp)
   12db4:	dec00204 	addi	sp,sp,8
   12db8:	f800283a 	ret

00012dbc <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   12dbc:	defffd04 	addi	sp,sp,-12
   12dc0:	df000215 	stw	fp,8(sp)
   12dc4:	df000204 	addi	fp,sp,8
   12dc8:	e13ffe15 	stw	r4,-8(fp)
   12dcc:	2805883a 	mov	r2,r5
   12dd0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   12dd4:	00000706 	br	12df4 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   12dd8:	e0bffe17 	ldw	r2,-8(fp)
   12ddc:	10c00044 	addi	r3,r2,1
   12de0:	e0fffe15 	stw	r3,-8(fp)
   12de4:	10000005 	stb	zero,0(r2)
        size--;
   12de8:	e0bfff0b 	ldhu	r2,-4(fp)
   12dec:	10bfffc4 	addi	r2,r2,-1
   12df0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   12df4:	e0bfff0b 	ldhu	r2,-4(fp)
   12df8:	103ff71e 	bne	r2,zero,12dd8 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   12dfc:	0001883a 	nop
   12e00:	e037883a 	mov	sp,fp
   12e04:	df000017 	ldw	fp,0(sp)
   12e08:	dec00104 	addi	sp,sp,4
   12e0c:	f800283a 	ret

00012e10 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   12e10:	defffc04 	addi	sp,sp,-16
   12e14:	df000315 	stw	fp,12(sp)
   12e18:	df000304 	addi	fp,sp,12
   12e1c:	e13ffd15 	stw	r4,-12(fp)
   12e20:	e17ffe15 	stw	r5,-8(fp)
   12e24:	3005883a 	mov	r2,r6
   12e28:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   12e2c:	00000b06 	br	12e5c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   12e30:	e0bffd17 	ldw	r2,-12(fp)
   12e34:	10c00044 	addi	r3,r2,1
   12e38:	e0fffd15 	stw	r3,-12(fp)
   12e3c:	e0fffe17 	ldw	r3,-8(fp)
   12e40:	19000044 	addi	r4,r3,1
   12e44:	e13ffe15 	stw	r4,-8(fp)
   12e48:	18c00003 	ldbu	r3,0(r3)
   12e4c:	10c00005 	stb	r3,0(r2)
        size--;
   12e50:	e0bfff0b 	ldhu	r2,-4(fp)
   12e54:	10bfffc4 	addi	r2,r2,-1
   12e58:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   12e5c:	e0bfff0b 	ldhu	r2,-4(fp)
   12e60:	103ff31e 	bne	r2,zero,12e30 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
   12e64:	0001883a 	nop
   12e68:	e037883a 	mov	sp,fp
   12e6c:	df000017 	ldw	fp,0(sp)
   12e70:	dec00104 	addi	sp,sp,4
   12e74:	f800283a 	ret

00012e78 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   12e78:	defffb04 	addi	sp,sp,-20
   12e7c:	dfc00415 	stw	ra,16(sp)
   12e80:	df000315 	stw	fp,12(sp)
   12e84:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12e88:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e8c:	0005303a 	rdctl	r2,status
   12e90:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e94:	e0ffff17 	ldw	r3,-4(fp)
   12e98:	00bfff84 	movi	r2,-2
   12e9c:	1884703a 	and	r2,r3,r2
   12ea0:	1001703a 	wrctl	status,r2
  
  return context;
   12ea4:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   12ea8:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   12eac:	d0a7f803 	ldbu	r2,-24608(gp)
   12eb0:	10803fcc 	andi	r2,r2,255
   12eb4:	10001a1e 	bne	r2,zero,12f20 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   12eb8:	d0a7ea03 	ldbu	r2,-24664(gp)
   12ebc:	10803fcc 	andi	r2,r2,255
   12ec0:	1000171e 	bne	r2,zero,12f20 <OS_Sched+0xa8>
            OS_SchedNew();
   12ec4:	0012f480 	call	12f48 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   12ec8:	d0e7ec03 	ldbu	r3,-24656(gp)
   12ecc:	d0a7ec43 	ldbu	r2,-24655(gp)
   12ed0:	18c03fcc 	andi	r3,r3,255
   12ed4:	10803fcc 	andi	r2,r2,255
   12ed8:	18801126 	beq	r3,r2,12f20 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   12edc:	d0a7ec03 	ldbu	r2,-24656(gp)
   12ee0:	10c03fcc 	andi	r3,r2,255
   12ee4:	008000f4 	movhi	r2,3
   12ee8:	10b40104 	addi	r2,r2,-12284
   12eec:	18c7883a 	add	r3,r3,r3
   12ef0:	18c7883a 	add	r3,r3,r3
   12ef4:	10c5883a 	add	r2,r2,r3
   12ef8:	10800017 	ldw	r2,0(r2)
   12efc:	d0a7f415 	stw	r2,-24624(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   12f00:	d0a7f417 	ldw	r2,-24624(gp)
   12f04:	10c00e17 	ldw	r3,56(r2)
   12f08:	18c00044 	addi	r3,r3,1
   12f0c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   12f10:	d0a7ef17 	ldw	r2,-24644(gp)
   12f14:	10800044 	addi	r2,r2,1
   12f18:	d0a7ef15 	stw	r2,-24644(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   12f1c:	001cd180 	call	1cd18 <OSCtxSw>
   12f20:	e0bffd17 	ldw	r2,-12(fp)
   12f24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f28:	e0bffe17 	ldw	r2,-8(fp)
   12f2c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   12f30:	0001883a 	nop
   12f34:	e037883a 	mov	sp,fp
   12f38:	dfc00117 	ldw	ra,4(sp)
   12f3c:	df000017 	ldw	fp,0(sp)
   12f40:	dec00204 	addi	sp,sp,8
   12f44:	f800283a 	ret

00012f48 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   12f48:	defffe04 	addi	sp,sp,-8
   12f4c:	df000115 	stw	fp,4(sp)
   12f50:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   12f54:	d0a7f603 	ldbu	r2,-24616(gp)
   12f58:	10c03fcc 	andi	r3,r2,255
   12f5c:	008000b4 	movhi	r2,2
   12f60:	10b77004 	addi	r2,r2,-8768
   12f64:	10c5883a 	add	r2,r2,r3
   12f68:	10800003 	ldbu	r2,0(r2)
   12f6c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   12f70:	e0bfff03 	ldbu	r2,-4(fp)
   12f74:	100490fa 	slli	r2,r2,3
   12f78:	1009883a 	mov	r4,r2
   12f7c:	e0ffff03 	ldbu	r3,-4(fp)
   12f80:	d0a7f644 	addi	r2,gp,-24615
   12f84:	1885883a 	add	r2,r3,r2
   12f88:	10800003 	ldbu	r2,0(r2)
   12f8c:	10c03fcc 	andi	r3,r2,255
   12f90:	008000b4 	movhi	r2,2
   12f94:	10b77004 	addi	r2,r2,-8768
   12f98:	10c5883a 	add	r2,r2,r3
   12f9c:	10800003 	ldbu	r2,0(r2)
   12fa0:	2085883a 	add	r2,r4,r2
   12fa4:	d0a7ec05 	stb	r2,-24656(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   12fa8:	0001883a 	nop
   12fac:	e037883a 	mov	sp,fp
   12fb0:	df000017 	ldw	fp,0(sp)
   12fb4:	dec00104 	addi	sp,sp,4
   12fb8:	f800283a 	ret

00012fbc <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   12fbc:	defffc04 	addi	sp,sp,-16
   12fc0:	df000315 	stw	fp,12(sp)
   12fc4:	df000304 	addi	fp,sp,12
   12fc8:	e13ffe15 	stw	r4,-8(fp)
   12fcc:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   12fd0:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   12fd4:	00000b06 	br	13004 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   12fd8:	e0bffe17 	ldw	r2,-8(fp)
   12fdc:	10c00044 	addi	r3,r2,1
   12fe0:	e0fffe15 	stw	r3,-8(fp)
   12fe4:	e0ffff17 	ldw	r3,-4(fp)
   12fe8:	19000044 	addi	r4,r3,1
   12fec:	e13fff15 	stw	r4,-4(fp)
   12ff0:	18c00003 	ldbu	r3,0(r3)
   12ff4:	10c00005 	stb	r3,0(r2)
        len++;
   12ff8:	e0bffd03 	ldbu	r2,-12(fp)
   12ffc:	10800044 	addi	r2,r2,1
   13000:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   13004:	e0bfff17 	ldw	r2,-4(fp)
   13008:	10800003 	ldbu	r2,0(r2)
   1300c:	10803fcc 	andi	r2,r2,255
   13010:	103ff11e 	bne	r2,zero,12fd8 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   13014:	e0bffe17 	ldw	r2,-8(fp)
   13018:	10000005 	stb	zero,0(r2)
    return (len);
   1301c:	e0bffd03 	ldbu	r2,-12(fp)
}
   13020:	e037883a 	mov	sp,fp
   13024:	df000017 	ldw	fp,0(sp)
   13028:	dec00104 	addi	sp,sp,4
   1302c:	f800283a 	ret

00013030 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   13030:	defffd04 	addi	sp,sp,-12
   13034:	df000215 	stw	fp,8(sp)
   13038:	df000204 	addi	fp,sp,8
   1303c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   13040:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   13044:	00000606 	br	13060 <OS_StrLen+0x30>
        psrc++;
   13048:	e0bfff17 	ldw	r2,-4(fp)
   1304c:	10800044 	addi	r2,r2,1
   13050:	e0bfff15 	stw	r2,-4(fp)
        len++;
   13054:	e0bffe03 	ldbu	r2,-8(fp)
   13058:	10800044 	addi	r2,r2,1
   1305c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   13060:	e0bfff17 	ldw	r2,-4(fp)
   13064:	10800003 	ldbu	r2,0(r2)
   13068:	10803fcc 	andi	r2,r2,255
   1306c:	103ff61e 	bne	r2,zero,13048 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
   13070:	e0bffe03 	ldbu	r2,-8(fp)
}
   13074:	e037883a 	mov	sp,fp
   13078:	df000017 	ldw	fp,0(sp)
   1307c:	dec00104 	addi	sp,sp,4
   13080:	f800283a 	ret

00013084 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   13084:	defffa04 	addi	sp,sp,-24
   13088:	dfc00515 	stw	ra,20(sp)
   1308c:	df000415 	stw	fp,16(sp)
   13090:	df000404 	addi	fp,sp,16
   13094:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13098:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1309c:	0005303a 	rdctl	r2,status
   130a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   130a4:	e0fffd17 	ldw	r3,-12(fp)
   130a8:	00bfff84 	movi	r2,-2
   130ac:	1884703a 	and	r2,r3,r2
   130b0:	1001703a 	wrctl	status,r2
  
  return context;
   130b4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   130b8:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   130bc:	d0a7eb17 	ldw	r2,-24660(gp)
   130c0:	10800044 	addi	r2,r2,1
   130c4:	d0a7eb15 	stw	r2,-24660(gp)
   130c8:	e0bffc17 	ldw	r2,-16(fp)
   130cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   130d0:	e0bffe17 	ldw	r2,-8(fp)
   130d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   130d8:	001d02c0 	call	1d02c <OSTaskIdleHook>
    }
   130dc:	003fef06 	br	1309c <OS_TaskIdle+0x18>

000130e0 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   130e0:	defff804 	addi	sp,sp,-32
   130e4:	dfc00715 	stw	ra,28(sp)
   130e8:	df000615 	stw	fp,24(sp)
   130ec:	dc400515 	stw	r17,20(sp)
   130f0:	dc000415 	stw	r16,16(sp)
   130f4:	df000604 	addi	fp,sp,24
   130f8:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   130fc:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   13100:	00000206 	br	1310c <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   13104:	01000044 	movi	r4,1
   13108:	00192ec0 	call	192ec <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   1310c:	d0a7fc03 	ldbu	r2,-24592(gp)
   13110:	10803fcc 	andi	r2,r2,255
   13114:	103ffb26 	beq	r2,zero,13104 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   13118:	d0e7f017 	ldw	r3,-24640(gp)
   1311c:	00947b34 	movhi	r2,20972
   13120:	10a147c4 	addi	r2,r2,-31457
   13124:	1888383a 	mulxuu	r4,r3,r2
   13128:	1885383a 	mul	r2,r3,r2
   1312c:	1021883a 	mov	r16,r2
   13130:	2023883a 	mov	r17,r4
   13134:	8804d17a 	srli	r2,r17,5
   13138:	d0a7f015 	stw	r2,-24640(gp)
    if (OSIdleCtrMax == 0L) {
   1313c:	d0a7f017 	ldw	r2,-24640(gp)
   13140:	1000031e 	bne	r2,zero,13150 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   13144:	d027f205 	stb	zero,-24632(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   13148:	01003fc4 	movi	r4,255
   1314c:	0018f740 	call	18f74 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13150:	0005303a 	rdctl	r2,status
   13154:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13158:	e0fffb17 	ldw	r3,-20(fp)
   1315c:	00bfff84 	movi	r2,-2
   13160:	1884703a 	and	r2,r3,r2
   13164:	1001703a 	wrctl	status,r2
  
  return context;
   13168:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   1316c:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   13170:	d0a7eb17 	ldw	r2,-24660(gp)
   13174:	d0a7fd15 	stw	r2,-24588(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   13178:	d027eb15 	stw	zero,-24660(gp)
   1317c:	e0bffa17 	ldw	r2,-24(fp)
   13180:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13184:	e0bffc17 	ldw	r2,-16(fp)
   13188:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   1318c:	d0e7fd17 	ldw	r3,-24588(gp)
   13190:	d0a7f017 	ldw	r2,-24640(gp)
   13194:	1885203a 	divu	r2,r3,r2
   13198:	1007883a 	mov	r3,r2
   1319c:	00801904 	movi	r2,100
   131a0:	10c5c83a 	sub	r2,r2,r3
   131a4:	d0a7f205 	stb	r2,-24632(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   131a8:	001cfac0 	call	1cfac <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   131ac:	00131bc0 	call	131bc <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   131b0:	0009883a 	mov	r4,zero
   131b4:	00192ec0 	call	192ec <OSTimeDly>
    }
   131b8:	003fe506 	br	13150 <OS_TaskStat+0x70>

000131bc <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   131bc:	defffa04 	addi	sp,sp,-24
   131c0:	dfc00515 	stw	ra,20(sp)
   131c4:	df000415 	stw	fp,16(sp)
   131c8:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   131cc:	e03ffc05 	stb	zero,-16(fp)
   131d0:	00002406 	br	13264 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   131d4:	e0bffc03 	ldbu	r2,-16(fp)
   131d8:	e0fffe04 	addi	r3,fp,-8
   131dc:	180b883a 	mov	r5,r3
   131e0:	1009883a 	mov	r4,r2
   131e4:	0018db40 	call	18db4 <OSTaskStkChk>
   131e8:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   131ec:	e0bffc43 	ldbu	r2,-15(fp)
   131f0:	1000191e 	bne	r2,zero,13258 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   131f4:	e0fffc03 	ldbu	r3,-16(fp)
   131f8:	008000f4 	movhi	r2,3
   131fc:	10b40104 	addi	r2,r2,-12284
   13200:	18c7883a 	add	r3,r3,r3
   13204:	18c7883a 	add	r3,r3,r3
   13208:	10c5883a 	add	r2,r2,r3
   1320c:	10800017 	ldw	r2,0(r2)
   13210:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   13214:	e0bffd17 	ldw	r2,-12(fp)
   13218:	10000f26 	beq	r2,zero,13258 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   1321c:	e0bffd17 	ldw	r2,-12(fp)
   13220:	10800060 	cmpeqi	r2,r2,1
   13224:	10000c1e 	bne	r2,zero,13258 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   13228:	e0bffd17 	ldw	r2,-12(fp)
   1322c:	10c00217 	ldw	r3,8(r2)
   13230:	e0bffd17 	ldw	r2,-12(fp)
   13234:	10800317 	ldw	r2,12(r2)
   13238:	1085883a 	add	r2,r2,r2
   1323c:	1085883a 	add	r2,r2,r2
   13240:	1887883a 	add	r3,r3,r2
   13244:	e0bffd17 	ldw	r2,-12(fp)
   13248:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   1324c:	e0ffff17 	ldw	r3,-4(fp)
   13250:	e0bffd17 	ldw	r2,-12(fp)
   13254:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   13258:	e0bffc03 	ldbu	r2,-16(fp)
   1325c:	10800044 	addi	r2,r2,1
   13260:	e0bffc05 	stb	r2,-16(fp)
   13264:	e0bffc03 	ldbu	r2,-16(fp)
   13268:	10800570 	cmpltui	r2,r2,21
   1326c:	103fd91e 	bne	r2,zero,131d4 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   13270:	0001883a 	nop
   13274:	e037883a 	mov	sp,fp
   13278:	dfc00117 	ldw	ra,4(sp)
   1327c:	df000017 	ldw	fp,0(sp)
   13280:	dec00204 	addi	sp,sp,8
   13284:	f800283a 	ret

00013288 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   13288:	defff204 	addi	sp,sp,-56
   1328c:	dfc00d15 	stw	ra,52(sp)
   13290:	df000c15 	stw	fp,48(sp)
   13294:	df000c04 	addi	fp,sp,48
   13298:	e17ffc15 	stw	r5,-16(fp)
   1329c:	e1bffd15 	stw	r6,-12(fp)
   132a0:	3807883a 	mov	r3,r7
   132a4:	e0800417 	ldw	r2,16(fp)
   132a8:	e13ffb05 	stb	r4,-20(fp)
   132ac:	e0fffe0d 	sth	r3,-8(fp)
   132b0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   132b4:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   132b8:	0005303a 	rdctl	r2,status
   132bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   132c0:	e0fffa17 	ldw	r3,-24(fp)
   132c4:	00bfff84 	movi	r2,-2
   132c8:	1884703a 	and	r2,r3,r2
   132cc:	1001703a 	wrctl	status,r2
  
  return context;
   132d0:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   132d4:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   132d8:	d0a7f117 	ldw	r2,-24636(gp)
   132dc:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   132e0:	e0bff617 	ldw	r2,-40(fp)
   132e4:	10009326 	beq	r2,zero,13534 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   132e8:	e0bff617 	ldw	r2,-40(fp)
   132ec:	10800517 	ldw	r2,20(r2)
   132f0:	d0a7f115 	stw	r2,-24636(gp)
   132f4:	e0bff417 	ldw	r2,-48(fp)
   132f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   132fc:	e0bff817 	ldw	r2,-32(fp)
   13300:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   13304:	e0bff617 	ldw	r2,-40(fp)
   13308:	e0fffc17 	ldw	r3,-16(fp)
   1330c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   13310:	e0bff617 	ldw	r2,-40(fp)
   13314:	e0fffb03 	ldbu	r3,-20(fp)
   13318:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   1331c:	e0bff617 	ldw	r2,-40(fp)
   13320:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   13324:	e0bff617 	ldw	r2,-40(fp)
   13328:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   1332c:	e0bff617 	ldw	r2,-40(fp)
   13330:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   13334:	e0bff617 	ldw	r2,-40(fp)
   13338:	e0c00317 	ldw	r3,12(fp)
   1333c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   13340:	e0bff617 	ldw	r2,-40(fp)
   13344:	e0c00217 	ldw	r3,8(fp)
   13348:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   1334c:	e0bff617 	ldw	r2,-40(fp)
   13350:	e0fffd17 	ldw	r3,-12(fp)
   13354:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   13358:	e0bff617 	ldw	r2,-40(fp)
   1335c:	e0ffff0b 	ldhu	r3,-4(fp)
   13360:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   13364:	e0bff617 	ldw	r2,-40(fp)
   13368:	e0fffe0b 	ldhu	r3,-8(fp)
   1336c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   13370:	e0bff617 	ldw	r2,-40(fp)
   13374:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   13378:	e0bffb03 	ldbu	r2,-20(fp)
   1337c:	1004d0fa 	srli	r2,r2,3
   13380:	1007883a 	mov	r3,r2
   13384:	e0bff617 	ldw	r2,-40(fp)
   13388:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   1338c:	e0bffb03 	ldbu	r2,-20(fp)
   13390:	108001cc 	andi	r2,r2,7
   13394:	1007883a 	mov	r3,r2
   13398:	e0bff617 	ldw	r2,-40(fp)
   1339c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   133a0:	e0bff617 	ldw	r2,-40(fp)
   133a4:	10800d03 	ldbu	r2,52(r2)
   133a8:	10803fcc 	andi	r2,r2,255
   133ac:	00c00044 	movi	r3,1
   133b0:	1884983a 	sll	r2,r3,r2
   133b4:	1007883a 	mov	r3,r2
   133b8:	e0bff617 	ldw	r2,-40(fp)
   133bc:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   133c0:	e0bff617 	ldw	r2,-40(fp)
   133c4:	10800cc3 	ldbu	r2,51(r2)
   133c8:	10803fcc 	andi	r2,r2,255
   133cc:	00c00044 	movi	r3,1
   133d0:	1884983a 	sll	r2,r3,r2
   133d4:	1007883a 	mov	r3,r2
   133d8:	e0bff617 	ldw	r2,-40(fp)
   133dc:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   133e0:	e0bff617 	ldw	r2,-40(fp)
   133e4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   133e8:	e0bff617 	ldw	r2,-40(fp)
   133ec:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   133f0:	e0bff617 	ldw	r2,-40(fp)
   133f4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   133f8:	e0bff617 	ldw	r2,-40(fp)
   133fc:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   13400:	e0bff617 	ldw	r2,-40(fp)
   13404:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   13408:	e0bff617 	ldw	r2,-40(fp)
   1340c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   13410:	e0bff617 	ldw	r2,-40(fp)
   13414:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   13418:	e0bff617 	ldw	r2,-40(fp)
   1341c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   13420:	e0bff617 	ldw	r2,-40(fp)
   13424:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   13428:	e0bff617 	ldw	r2,-40(fp)
   1342c:	00c00fc4 	movi	r3,63
   13430:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   13434:	e0bff617 	ldw	r2,-40(fp)
   13438:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   1343c:	e13ff617 	ldw	r4,-40(fp)
   13440:	001d04c0 	call	1d04c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   13444:	e13ff617 	ldw	r4,-40(fp)
   13448:	001cf440 	call	1cf44 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1344c:	0005303a 	rdctl	r2,status
   13450:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13454:	e0fff517 	ldw	r3,-44(fp)
   13458:	00bfff84 	movi	r2,-2
   1345c:	1884703a 	and	r2,r3,r2
   13460:	1001703a 	wrctl	status,r2
  
  return context;
   13464:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   13468:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   1346c:	e0fffb03 	ldbu	r3,-20(fp)
   13470:	008000f4 	movhi	r2,3
   13474:	10b40104 	addi	r2,r2,-12284
   13478:	18c7883a 	add	r3,r3,r3
   1347c:	18c7883a 	add	r3,r3,r3
   13480:	10c5883a 	add	r2,r2,r3
   13484:	e0fff617 	ldw	r3,-40(fp)
   13488:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   1348c:	d0e7ed17 	ldw	r3,-24652(gp)
   13490:	e0bff617 	ldw	r2,-40(fp)
   13494:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   13498:	e0bff617 	ldw	r2,-40(fp)
   1349c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   134a0:	d0a7ed17 	ldw	r2,-24652(gp)
   134a4:	10000326 	beq	r2,zero,134b4 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   134a8:	d0a7ed17 	ldw	r2,-24652(gp)
   134ac:	e0fff617 	ldw	r3,-40(fp)
   134b0:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   134b4:	e0bff617 	ldw	r2,-40(fp)
   134b8:	d0a7ed15 	stw	r2,-24652(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   134bc:	e0bff617 	ldw	r2,-40(fp)
   134c0:	10c00d83 	ldbu	r3,54(r2)
   134c4:	d0a7f603 	ldbu	r2,-24616(gp)
   134c8:	1884b03a 	or	r2,r3,r2
   134cc:	d0a7f605 	stb	r2,-24616(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   134d0:	e0bff617 	ldw	r2,-40(fp)
   134d4:	10800d03 	ldbu	r2,52(r2)
   134d8:	10c03fcc 	andi	r3,r2,255
   134dc:	e0bff617 	ldw	r2,-40(fp)
   134e0:	10800d03 	ldbu	r2,52(r2)
   134e4:	11003fcc 	andi	r4,r2,255
   134e8:	d0a7f644 	addi	r2,gp,-24615
   134ec:	2085883a 	add	r2,r4,r2
   134f0:	11000003 	ldbu	r4,0(r2)
   134f4:	e0bff617 	ldw	r2,-40(fp)
   134f8:	10800d43 	ldbu	r2,53(r2)
   134fc:	2084b03a 	or	r2,r4,r2
   13500:	1009883a 	mov	r4,r2
   13504:	d0a7f644 	addi	r2,gp,-24615
   13508:	1885883a 	add	r2,r3,r2
   1350c:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   13510:	d0a7f243 	ldbu	r2,-24631(gp)
   13514:	10800044 	addi	r2,r2,1
   13518:	d0a7f245 	stb	r2,-24631(gp)
   1351c:	e0bff417 	ldw	r2,-48(fp)
   13520:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13524:	e0bff717 	ldw	r2,-36(fp)
   13528:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1352c:	0005883a 	mov	r2,zero
   13530:	00000506 	br	13548 <OS_TCBInit+0x2c0>
   13534:	e0bff417 	ldw	r2,-48(fp)
   13538:	e0bff915 	stw	r2,-28(fp)
   1353c:	e0bff917 	ldw	r2,-28(fp)
   13540:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   13544:	00801084 	movi	r2,66
}
   13548:	e037883a 	mov	sp,fp
   1354c:	dfc00117 	ldw	ra,4(sp)
   13550:	df000017 	ldw	fp,0(sp)
   13554:	dec00204 	addi	sp,sp,8
   13558:	f800283a 	ret

0001355c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   1355c:	defffe04 	addi	sp,sp,-8
   13560:	df000115 	stw	fp,4(sp)
   13564:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   13568:	d0a00f04 	addi	r2,gp,-32708
   1356c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   13570:	d0a01004 	addi	r2,gp,-32704
   13574:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   13578:	d0a01184 	addi	r2,gp,-32698
   1357c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   13580:	d0a01204 	addi	r2,gp,-32696
   13584:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   13588:	d0a01104 	addi	r2,gp,-32700
   1358c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   13590:	d0a01284 	addi	r2,gp,-32694
   13594:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   13598:	d0a01304 	addi	r2,gp,-32692
   1359c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   135a0:	d0a01384 	addi	r2,gp,-32690
   135a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   135a8:	d0a01404 	addi	r2,gp,-32688
   135ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   135b0:	d0a01484 	addi	r2,gp,-32686
   135b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   135b8:	d0a01504 	addi	r2,gp,-32684
   135bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   135c0:	d0a01584 	addi	r2,gp,-32682
   135c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   135c8:	d0a01604 	addi	r2,gp,-32680
   135cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   135d0:	d0a01684 	addi	r2,gp,-32678
   135d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   135d8:	d0a01704 	addi	r2,gp,-32676
   135dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   135e0:	d0a01784 	addi	r2,gp,-32674
   135e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   135e8:	d0a01804 	addi	r2,gp,-32672
   135ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   135f0:	d0a01884 	addi	r2,gp,-32670
   135f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   135f8:	d0a01904 	addi	r2,gp,-32668
   135fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   13600:	d0a01984 	addi	r2,gp,-32666
   13604:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   13608:	d0a01a04 	addi	r2,gp,-32664
   1360c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   13610:	d0a01a84 	addi	r2,gp,-32662
   13614:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   13618:	d0a01b04 	addi	r2,gp,-32660
   1361c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   13620:	d0a01b84 	addi	r2,gp,-32658
   13624:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   13628:	d0a01c04 	addi	r2,gp,-32656
   1362c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   13630:	d0a01c84 	addi	r2,gp,-32654
   13634:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   13638:	d0a01d04 	addi	r2,gp,-32652
   1363c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   13640:	d0a01d84 	addi	r2,gp,-32650
   13644:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   13648:	d0a01e04 	addi	r2,gp,-32648
   1364c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   13650:	d0a01e84 	addi	r2,gp,-32646
   13654:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   13658:	d0a01f04 	addi	r2,gp,-32644
   1365c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   13660:	d0a01f84 	addi	r2,gp,-32642
   13664:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   13668:	d0a02004 	addi	r2,gp,-32640
   1366c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   13670:	d0a02084 	addi	r2,gp,-32638
   13674:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   13678:	d0a02104 	addi	r2,gp,-32636
   1367c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   13680:	d0a02184 	addi	r2,gp,-32634
   13684:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   13688:	d0a02204 	addi	r2,gp,-32632
   1368c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   13690:	d0a02284 	addi	r2,gp,-32630
   13694:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   13698:	d0a02304 	addi	r2,gp,-32628
   1369c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   136a0:	d0a02384 	addi	r2,gp,-32626
   136a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   136a8:	d0a02404 	addi	r2,gp,-32624
   136ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   136b0:	d0a02484 	addi	r2,gp,-32622
   136b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   136b8:	d0a02504 	addi	r2,gp,-32620
   136bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   136c0:	d0a02584 	addi	r2,gp,-32618
   136c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   136c8:	d0a02604 	addi	r2,gp,-32616
   136cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   136d0:	d0a02b04 	addi	r2,gp,-32596
   136d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   136d8:	0001883a 	nop
   136dc:	e037883a 	mov	sp,fp
   136e0:	df000017 	ldw	fp,0(sp)
   136e4:	dec00104 	addi	sp,sp,4
   136e8:	f800283a 	ret

000136ec <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   136ec:	defff204 	addi	sp,sp,-56
   136f0:	df000d15 	stw	fp,52(sp)
   136f4:	df000d04 	addi	fp,sp,52
   136f8:	e13ffc15 	stw	r4,-16(fp)
   136fc:	2807883a 	mov	r3,r5
   13700:	3005883a 	mov	r2,r6
   13704:	e1ffff15 	stw	r7,-4(fp)
   13708:	e0fffd0d 	sth	r3,-12(fp)
   1370c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13710:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13714:	e0bfff17 	ldw	r2,-4(fp)
   13718:	1000021e 	bne	r2,zero,13724 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   1371c:	0005883a 	mov	r2,zero
   13720:	0000b006 	br	139e4 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   13724:	e0bffc17 	ldw	r2,-16(fp)
   13728:	1000051e 	bne	r2,zero,13740 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1372c:	e0bfff17 	ldw	r2,-4(fp)
   13730:	00c01b84 	movi	r3,110
   13734:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13738:	0005883a 	mov	r2,zero
   1373c:	0000a906 	br	139e4 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   13740:	e0bffc17 	ldw	r2,-16(fp)
   13744:	10800003 	ldbu	r2,0(r2)
   13748:	10803fcc 	andi	r2,r2,255
   1374c:	10800160 	cmpeqi	r2,r2,5
   13750:	1000051e 	bne	r2,zero,13768 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   13754:	e0bfff17 	ldw	r2,-4(fp)
   13758:	00c00044 	movi	r3,1
   1375c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13760:	0005883a 	mov	r2,zero
   13764:	00009f06 	br	139e4 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   13768:	e0fffe03 	ldbu	r3,-8(fp)
   1376c:	00bfe004 	movi	r2,-128
   13770:	1884703a 	and	r2,r3,r2
   13774:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   13778:	e0bff503 	ldbu	r2,-44(fp)
   1377c:	10000626 	beq	r2,zero,13798 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   13780:	e0bffe03 	ldbu	r2,-8(fp)
   13784:	10801fcc 	andi	r2,r2,127
   13788:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   1378c:	00800044 	movi	r2,1
   13790:	e0bff385 	stb	r2,-50(fp)
   13794:	00000106 	br	1379c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   13798:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   1379c:	e0bfff17 	ldw	r2,-4(fp)
   137a0:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   137a4:	0005303a 	rdctl	r2,status
   137a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   137ac:	e0fffb17 	ldw	r3,-20(fp)
   137b0:	00bfff84 	movi	r2,-2
   137b4:	1884703a 	and	r2,r3,r2
   137b8:	1001703a 	wrctl	status,r2
  
  return context;
   137bc:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   137c0:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   137c4:	e0bffe03 	ldbu	r2,-8(fp)
   137c8:	10c00060 	cmpeqi	r3,r2,1
   137cc:	18005f1e 	bne	r3,zero,1394c <OSFlagAccept+0x260>
   137d0:	10c00088 	cmpgei	r3,r2,2
   137d4:	1800021e 	bne	r3,zero,137e0 <OSFlagAccept+0xf4>
   137d8:	10003f26 	beq	r2,zero,138d8 <OSFlagAccept+0x1ec>
   137dc:	00007706 	br	139bc <OSFlagAccept+0x2d0>
   137e0:	10c000a0 	cmpeqi	r3,r2,2
   137e4:	1800031e 	bne	r3,zero,137f4 <OSFlagAccept+0x108>
   137e8:	108000e0 	cmpeqi	r2,r2,3
   137ec:	10001e1e 	bne	r2,zero,13868 <OSFlagAccept+0x17c>
   137f0:	00007206 	br	139bc <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   137f4:	e0bffc17 	ldw	r2,-16(fp)
   137f8:	10c0020b 	ldhu	r3,8(r2)
   137fc:	e0bffd0b 	ldhu	r2,-12(fp)
   13800:	1884703a 	and	r2,r3,r2
   13804:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   13808:	e0fff30b 	ldhu	r3,-52(fp)
   1380c:	e0bffd0b 	ldhu	r2,-12(fp)
   13810:	18800d1e 	bne	r3,r2,13848 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13814:	e0bff383 	ldbu	r2,-50(fp)
   13818:	10800058 	cmpnei	r2,r2,1
   1381c:	10000d1e 	bne	r2,zero,13854 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   13820:	e0bffc17 	ldw	r2,-16(fp)
   13824:	1080020b 	ldhu	r2,8(r2)
   13828:	1007883a 	mov	r3,r2
   1382c:	e0bff30b 	ldhu	r2,-52(fp)
   13830:	0084303a 	nor	r2,zero,r2
   13834:	1884703a 	and	r2,r3,r2
   13838:	1007883a 	mov	r3,r2
   1383c:	e0bffc17 	ldw	r2,-16(fp)
   13840:	10c0020d 	sth	r3,8(r2)
   13844:	00000306 	br	13854 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   13848:	e0bfff17 	ldw	r2,-4(fp)
   1384c:	00c01c04 	movi	r3,112
   13850:	10c00005 	stb	r3,0(r2)
   13854:	e0bff417 	ldw	r2,-48(fp)
   13858:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1385c:	e0bff617 	ldw	r2,-40(fp)
   13860:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   13864:	00005e06 	br	139e0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   13868:	e0bffc17 	ldw	r2,-16(fp)
   1386c:	10c0020b 	ldhu	r3,8(r2)
   13870:	e0bffd0b 	ldhu	r2,-12(fp)
   13874:	1884703a 	and	r2,r3,r2
   13878:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1387c:	e0bff30b 	ldhu	r2,-52(fp)
   13880:	10000d26 	beq	r2,zero,138b8 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13884:	e0bff383 	ldbu	r2,-50(fp)
   13888:	10800058 	cmpnei	r2,r2,1
   1388c:	10000d1e 	bne	r2,zero,138c4 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   13890:	e0bffc17 	ldw	r2,-16(fp)
   13894:	1080020b 	ldhu	r2,8(r2)
   13898:	1007883a 	mov	r3,r2
   1389c:	e0bff30b 	ldhu	r2,-52(fp)
   138a0:	0084303a 	nor	r2,zero,r2
   138a4:	1884703a 	and	r2,r3,r2
   138a8:	1007883a 	mov	r3,r2
   138ac:	e0bffc17 	ldw	r2,-16(fp)
   138b0:	10c0020d 	sth	r3,8(r2)
   138b4:	00000306 	br	138c4 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   138b8:	e0bfff17 	ldw	r2,-4(fp)
   138bc:	00c01c04 	movi	r3,112
   138c0:	10c00005 	stb	r3,0(r2)
   138c4:	e0bff417 	ldw	r2,-48(fp)
   138c8:	e0bff715 	stw	r2,-36(fp)
   138cc:	e0bff717 	ldw	r2,-36(fp)
   138d0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   138d4:	00004206 	br	139e0 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   138d8:	e0bffc17 	ldw	r2,-16(fp)
   138dc:	1080020b 	ldhu	r2,8(r2)
   138e0:	0084303a 	nor	r2,zero,r2
   138e4:	1007883a 	mov	r3,r2
   138e8:	e0bffd0b 	ldhu	r2,-12(fp)
   138ec:	1884703a 	and	r2,r3,r2
   138f0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   138f4:	e0fff30b 	ldhu	r3,-52(fp)
   138f8:	e0bffd0b 	ldhu	r2,-12(fp)
   138fc:	18800b1e 	bne	r3,r2,1392c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13900:	e0bff383 	ldbu	r2,-50(fp)
   13904:	10800058 	cmpnei	r2,r2,1
   13908:	10000b1e 	bne	r2,zero,13938 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   1390c:	e0bffc17 	ldw	r2,-16(fp)
   13910:	10c0020b 	ldhu	r3,8(r2)
   13914:	e0bff30b 	ldhu	r2,-52(fp)
   13918:	1884b03a 	or	r2,r3,r2
   1391c:	1007883a 	mov	r3,r2
   13920:	e0bffc17 	ldw	r2,-16(fp)
   13924:	10c0020d 	sth	r3,8(r2)
   13928:	00000306 	br	13938 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1392c:	e0bfff17 	ldw	r2,-4(fp)
   13930:	00c01c04 	movi	r3,112
   13934:	10c00005 	stb	r3,0(r2)
   13938:	e0bff417 	ldw	r2,-48(fp)
   1393c:	e0bff815 	stw	r2,-32(fp)
   13940:	e0bff817 	ldw	r2,-32(fp)
   13944:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   13948:	00002506 	br	139e0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1394c:	e0bffc17 	ldw	r2,-16(fp)
   13950:	1080020b 	ldhu	r2,8(r2)
   13954:	0084303a 	nor	r2,zero,r2
   13958:	1007883a 	mov	r3,r2
   1395c:	e0bffd0b 	ldhu	r2,-12(fp)
   13960:	1884703a 	and	r2,r3,r2
   13964:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   13968:	e0bff30b 	ldhu	r2,-52(fp)
   1396c:	10000b26 	beq	r2,zero,1399c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13970:	e0bff383 	ldbu	r2,-50(fp)
   13974:	10800058 	cmpnei	r2,r2,1
   13978:	10000b1e 	bne	r2,zero,139a8 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1397c:	e0bffc17 	ldw	r2,-16(fp)
   13980:	10c0020b 	ldhu	r3,8(r2)
   13984:	e0bff30b 	ldhu	r2,-52(fp)
   13988:	1884b03a 	or	r2,r3,r2
   1398c:	1007883a 	mov	r3,r2
   13990:	e0bffc17 	ldw	r2,-16(fp)
   13994:	10c0020d 	sth	r3,8(r2)
   13998:	00000306 	br	139a8 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1399c:	e0bfff17 	ldw	r2,-4(fp)
   139a0:	00c01c04 	movi	r3,112
   139a4:	10c00005 	stb	r3,0(r2)
   139a8:	e0bff417 	ldw	r2,-48(fp)
   139ac:	e0bff915 	stw	r2,-28(fp)
   139b0:	e0bff917 	ldw	r2,-28(fp)
   139b4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   139b8:	00000906 	br	139e0 <OSFlagAccept+0x2f4>
   139bc:	e0bff417 	ldw	r2,-48(fp)
   139c0:	e0bffa15 	stw	r2,-24(fp)
   139c4:	e0bffa17 	ldw	r2,-24(fp)
   139c8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   139cc:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   139d0:	e0bfff17 	ldw	r2,-4(fp)
   139d4:	00c01bc4 	movi	r3,111
   139d8:	10c00005 	stb	r3,0(r2)
             break;
   139dc:	0001883a 	nop
    }
    return (flags_rdy);
   139e0:	e0bff30b 	ldhu	r2,-52(fp)
}
   139e4:	e037883a 	mov	sp,fp
   139e8:	df000017 	ldw	fp,0(sp)
   139ec:	dec00104 	addi	sp,sp,4
   139f0:	f800283a 	ret

000139f4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   139f4:	defff804 	addi	sp,sp,-32
   139f8:	df000715 	stw	fp,28(sp)
   139fc:	df000704 	addi	fp,sp,28
   13a00:	2005883a 	mov	r2,r4
   13a04:	e17fff15 	stw	r5,-4(fp)
   13a08:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   13a0c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   13a10:	e0bfff17 	ldw	r2,-4(fp)
   13a14:	1000021e 	bne	r2,zero,13a20 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   13a18:	0005883a 	mov	r2,zero
   13a1c:	00003306 	br	13aec <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   13a20:	d0a7f803 	ldbu	r2,-24608(gp)
   13a24:	10803fcc 	andi	r2,r2,255
   13a28:	10000526 	beq	r2,zero,13a40 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   13a2c:	e0bfff17 	ldw	r2,-4(fp)
   13a30:	00c00404 	movi	r3,16
   13a34:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   13a38:	0005883a 	mov	r2,zero
   13a3c:	00002b06 	br	13aec <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a40:	0005303a 	rdctl	r2,status
   13a44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a48:	e0fffd17 	ldw	r3,-12(fp)
   13a4c:	00bfff84 	movi	r2,-2
   13a50:	1884703a 	and	r2,r3,r2
   13a54:	1001703a 	wrctl	status,r2
  
  return context;
   13a58:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13a5c:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   13a60:	d0a7fb17 	ldw	r2,-24596(gp)
   13a64:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   13a68:	e0bffb17 	ldw	r2,-20(fp)
   13a6c:	10001726 	beq	r2,zero,13acc <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   13a70:	d0a7fb17 	ldw	r2,-24596(gp)
   13a74:	10800117 	ldw	r2,4(r2)
   13a78:	d0a7fb15 	stw	r2,-24596(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   13a7c:	e0bffb17 	ldw	r2,-20(fp)
   13a80:	00c00144 	movi	r3,5
   13a84:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   13a88:	e0bffb17 	ldw	r2,-20(fp)
   13a8c:	e0fffe0b 	ldhu	r3,-8(fp)
   13a90:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   13a94:	e0bffb17 	ldw	r2,-20(fp)
   13a98:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   13a9c:	e0bffb17 	ldw	r2,-20(fp)
   13aa0:	00c00fc4 	movi	r3,63
   13aa4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   13aa8:	e0bffb17 	ldw	r2,-20(fp)
   13aac:	100002c5 	stb	zero,11(r2)
   13ab0:	e0bff917 	ldw	r2,-28(fp)
   13ab4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ab8:	e0bffa17 	ldw	r2,-24(fp)
   13abc:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   13ac0:	e0bfff17 	ldw	r2,-4(fp)
   13ac4:	10000005 	stb	zero,0(r2)
   13ac8:	00000706 	br	13ae8 <OSFlagCreate+0xf4>
   13acc:	e0bff917 	ldw	r2,-28(fp)
   13ad0:	e0bffc15 	stw	r2,-16(fp)
   13ad4:	e0bffc17 	ldw	r2,-16(fp)
   13ad8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   13adc:	e0bfff17 	ldw	r2,-4(fp)
   13ae0:	00c01c84 	movi	r3,114
   13ae4:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   13ae8:	e0bffb17 	ldw	r2,-20(fp)
}
   13aec:	e037883a 	mov	sp,fp
   13af0:	df000017 	ldw	fp,0(sp)
   13af4:	dec00104 	addi	sp,sp,4
   13af8:	f800283a 	ret

00013afc <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   13afc:	defff204 	addi	sp,sp,-56
   13b00:	dfc00d15 	stw	ra,52(sp)
   13b04:	df000c15 	stw	fp,48(sp)
   13b08:	df000c04 	addi	fp,sp,48
   13b0c:	e13ffd15 	stw	r4,-12(fp)
   13b10:	2805883a 	mov	r2,r5
   13b14:	e1bfff15 	stw	r6,-4(fp)
   13b18:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13b1c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13b20:	e0bfff17 	ldw	r2,-4(fp)
   13b24:	1000021e 	bne	r2,zero,13b30 <OSFlagDel+0x34>
        return (pgrp);
   13b28:	e0bffd17 	ldw	r2,-12(fp)
   13b2c:	00008006 	br	13d30 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   13b30:	e0bffd17 	ldw	r2,-12(fp)
   13b34:	1000051e 	bne	r2,zero,13b4c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13b38:	e0bfff17 	ldw	r2,-4(fp)
   13b3c:	00c01b84 	movi	r3,110
   13b40:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   13b44:	e0bffd17 	ldw	r2,-12(fp)
   13b48:	00007906 	br	13d30 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13b4c:	d0a7f803 	ldbu	r2,-24608(gp)
   13b50:	10803fcc 	andi	r2,r2,255
   13b54:	10000526 	beq	r2,zero,13b6c <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   13b58:	e0bfff17 	ldw	r2,-4(fp)
   13b5c:	00c003c4 	movi	r3,15
   13b60:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   13b64:	e0bffd17 	ldw	r2,-12(fp)
   13b68:	00007106 	br	13d30 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   13b6c:	e0bffd17 	ldw	r2,-12(fp)
   13b70:	10800003 	ldbu	r2,0(r2)
   13b74:	10803fcc 	andi	r2,r2,255
   13b78:	10800160 	cmpeqi	r2,r2,5
   13b7c:	1000051e 	bne	r2,zero,13b94 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   13b80:	e0bfff17 	ldw	r2,-4(fp)
   13b84:	00c00044 	movi	r3,1
   13b88:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   13b8c:	e0bffd17 	ldw	r2,-12(fp)
   13b90:	00006706 	br	13d30 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b94:	0005303a 	rdctl	r2,status
   13b98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b9c:	e0fffc17 	ldw	r3,-16(fp)
   13ba0:	00bfff84 	movi	r2,-2
   13ba4:	1884703a 	and	r2,r3,r2
   13ba8:	1001703a 	wrctl	status,r2
  
  return context;
   13bac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13bb0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   13bb4:	e0bffd17 	ldw	r2,-12(fp)
   13bb8:	10800117 	ldw	r2,4(r2)
   13bbc:	10000326 	beq	r2,zero,13bcc <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   13bc0:	00800044 	movi	r2,1
   13bc4:	e0bff405 	stb	r2,-48(fp)
   13bc8:	00000106 	br	13bd0 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   13bcc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   13bd0:	e0bffe03 	ldbu	r2,-8(fp)
   13bd4:	10000326 	beq	r2,zero,13be4 <OSFlagDel+0xe8>
   13bd8:	10800060 	cmpeqi	r2,r2,1
   13bdc:	1000231e 	bne	r2,zero,13c6c <OSFlagDel+0x170>
   13be0:	00004806 	br	13d04 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   13be4:	e0bff403 	ldbu	r2,-48(fp)
   13be8:	1000161e 	bne	r2,zero,13c44 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   13bec:	e0bffd17 	ldw	r2,-12(fp)
   13bf0:	00c00fc4 	movi	r3,63
   13bf4:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   13bf8:	e0bffd17 	ldw	r2,-12(fp)
   13bfc:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   13c00:	e0bffd17 	ldw	r2,-12(fp)
   13c04:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   13c08:	d0e7fb17 	ldw	r3,-24596(gp)
   13c0c:	e0bffd17 	ldw	r2,-12(fp)
   13c10:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   13c14:	e0bffd17 	ldw	r2,-12(fp)
   13c18:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   13c1c:	e0bffd17 	ldw	r2,-12(fp)
   13c20:	d0a7fb15 	stw	r2,-24596(gp)
   13c24:	e0bff717 	ldw	r2,-36(fp)
   13c28:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c2c:	e0bff817 	ldw	r2,-32(fp)
   13c30:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   13c34:	e0bfff17 	ldw	r2,-4(fp)
   13c38:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   13c3c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   13c40:	00003a06 	br	13d2c <OSFlagDel+0x230>
   13c44:	e0bff717 	ldw	r2,-36(fp)
   13c48:	e0bff915 	stw	r2,-28(fp)
   13c4c:	e0bff917 	ldw	r2,-28(fp)
   13c50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   13c54:	e0bfff17 	ldw	r2,-4(fp)
   13c58:	00c01244 	movi	r3,73
   13c5c:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   13c60:	e0bffd17 	ldw	r2,-12(fp)
   13c64:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   13c68:	00003006 	br	13d2c <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   13c6c:	e0bffd17 	ldw	r2,-12(fp)
   13c70:	10800117 	ldw	r2,4(r2)
   13c74:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   13c78:	00000606 	br	13c94 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   13c7c:	000b883a 	mov	r5,zero
   13c80:	e13ff517 	ldw	r4,-44(fp)
   13c84:	0014c680 	call	14c68 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   13c88:	e0bff517 	ldw	r2,-44(fp)
   13c8c:	10800017 	ldw	r2,0(r2)
   13c90:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   13c94:	e0bff517 	ldw	r2,-44(fp)
   13c98:	103ff81e 	bne	r2,zero,13c7c <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   13c9c:	e0bffd17 	ldw	r2,-12(fp)
   13ca0:	00c00fc4 	movi	r3,63
   13ca4:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   13ca8:	e0bffd17 	ldw	r2,-12(fp)
   13cac:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   13cb0:	e0bffd17 	ldw	r2,-12(fp)
   13cb4:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   13cb8:	d0e7fb17 	ldw	r3,-24596(gp)
   13cbc:	e0bffd17 	ldw	r2,-12(fp)
   13cc0:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   13cc4:	e0bffd17 	ldw	r2,-12(fp)
   13cc8:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   13ccc:	e0bffd17 	ldw	r2,-12(fp)
   13cd0:	d0a7fb15 	stw	r2,-24596(gp)
   13cd4:	e0bff717 	ldw	r2,-36(fp)
   13cd8:	e0bffa15 	stw	r2,-24(fp)
   13cdc:	e0bffa17 	ldw	r2,-24(fp)
   13ce0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   13ce4:	e0bff403 	ldbu	r2,-48(fp)
   13ce8:	10800058 	cmpnei	r2,r2,1
   13cec:	1000011e 	bne	r2,zero,13cf4 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   13cf0:	0012e780 	call	12e78 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   13cf4:	e0bfff17 	ldw	r2,-4(fp)
   13cf8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   13cfc:	e03ff615 	stw	zero,-40(fp)
             break;
   13d00:	00000a06 	br	13d2c <OSFlagDel+0x230>
   13d04:	e0bff717 	ldw	r2,-36(fp)
   13d08:	e0bffb15 	stw	r2,-20(fp)
   13d0c:	e0bffb17 	ldw	r2,-20(fp)
   13d10:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   13d14:	e0bfff17 	ldw	r2,-4(fp)
   13d18:	00c001c4 	movi	r3,7
   13d1c:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   13d20:	e0bffd17 	ldw	r2,-12(fp)
   13d24:	e0bff615 	stw	r2,-40(fp)
             break;
   13d28:	0001883a 	nop
    }
    return (pgrp_return);
   13d2c:	e0bff617 	ldw	r2,-40(fp)
}
   13d30:	e037883a 	mov	sp,fp
   13d34:	dfc00117 	ldw	ra,4(sp)
   13d38:	df000017 	ldw	fp,0(sp)
   13d3c:	dec00204 	addi	sp,sp,8
   13d40:	f800283a 	ret

00013d44 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   13d44:	defff604 	addi	sp,sp,-40
   13d48:	dfc00915 	stw	ra,36(sp)
   13d4c:	df000815 	stw	fp,32(sp)
   13d50:	df000804 	addi	fp,sp,32
   13d54:	e13ffd15 	stw	r4,-12(fp)
   13d58:	e17ffe15 	stw	r5,-8(fp)
   13d5c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13d60:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13d64:	e0bfff17 	ldw	r2,-4(fp)
   13d68:	1000021e 	bne	r2,zero,13d74 <OSFlagNameGet+0x30>
        return (0);
   13d6c:	0005883a 	mov	r2,zero
   13d70:	00003906 	br	13e58 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   13d74:	e0bffd17 	ldw	r2,-12(fp)
   13d78:	1000051e 	bne	r2,zero,13d90 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13d7c:	e0bfff17 	ldw	r2,-4(fp)
   13d80:	00c01b84 	movi	r3,110
   13d84:	10c00005 	stb	r3,0(r2)
        return (0);
   13d88:	0005883a 	mov	r2,zero
   13d8c:	00003206 	br	13e58 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13d90:	e0bffe17 	ldw	r2,-8(fp)
   13d94:	1000051e 	bne	r2,zero,13dac <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   13d98:	e0bfff17 	ldw	r2,-4(fp)
   13d9c:	00c00304 	movi	r3,12
   13da0:	10c00005 	stb	r3,0(r2)
        return (0);
   13da4:	0005883a 	mov	r2,zero
   13da8:	00002b06 	br	13e58 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13dac:	d0a7f803 	ldbu	r2,-24608(gp)
   13db0:	10803fcc 	andi	r2,r2,255
   13db4:	10000526 	beq	r2,zero,13dcc <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   13db8:	e0bfff17 	ldw	r2,-4(fp)
   13dbc:	00c00444 	movi	r3,17
   13dc0:	10c00005 	stb	r3,0(r2)
        return (0);
   13dc4:	0005883a 	mov	r2,zero
   13dc8:	00002306 	br	13e58 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13dcc:	0005303a 	rdctl	r2,status
   13dd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13dd4:	e0fffc17 	ldw	r3,-16(fp)
   13dd8:	00bfff84 	movi	r2,-2
   13ddc:	1884703a 	and	r2,r3,r2
   13de0:	1001703a 	wrctl	status,r2
  
  return context;
   13de4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13de8:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   13dec:	e0bffd17 	ldw	r2,-12(fp)
   13df0:	10800003 	ldbu	r2,0(r2)
   13df4:	10803fcc 	andi	r2,r2,255
   13df8:	10800160 	cmpeqi	r2,r2,5
   13dfc:	1000091e 	bne	r2,zero,13e24 <OSFlagNameGet+0xe0>
   13e00:	e0bff817 	ldw	r2,-32(fp)
   13e04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e08:	e0bff917 	ldw	r2,-28(fp)
   13e0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   13e10:	e0bfff17 	ldw	r2,-4(fp)
   13e14:	00c00044 	movi	r3,1
   13e18:	10c00005 	stb	r3,0(r2)
        return (0);
   13e1c:	0005883a 	mov	r2,zero
   13e20:	00000d06 	br	13e58 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   13e24:	e0bffd17 	ldw	r2,-12(fp)
   13e28:	10800284 	addi	r2,r2,10
   13e2c:	100b883a 	mov	r5,r2
   13e30:	e13ffe17 	ldw	r4,-8(fp)
   13e34:	0012fbc0 	call	12fbc <OS_StrCopy>
   13e38:	e0bffb05 	stb	r2,-20(fp)
   13e3c:	e0bff817 	ldw	r2,-32(fp)
   13e40:	e0bffa15 	stw	r2,-24(fp)
   13e44:	e0bffa17 	ldw	r2,-24(fp)
   13e48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13e4c:	e0bfff17 	ldw	r2,-4(fp)
   13e50:	10000005 	stb	zero,0(r2)
    return (len);
   13e54:	e0bffb03 	ldbu	r2,-20(fp)
}
   13e58:	e037883a 	mov	sp,fp
   13e5c:	dfc00117 	ldw	ra,4(sp)
   13e60:	df000017 	ldw	fp,0(sp)
   13e64:	dec00204 	addi	sp,sp,8
   13e68:	f800283a 	ret

00013e6c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   13e6c:	defff504 	addi	sp,sp,-44
   13e70:	dfc00a15 	stw	ra,40(sp)
   13e74:	df000915 	stw	fp,36(sp)
   13e78:	df000904 	addi	fp,sp,36
   13e7c:	e13ffd15 	stw	r4,-12(fp)
   13e80:	e17ffe15 	stw	r5,-8(fp)
   13e84:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13e88:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13e8c:	e0bfff17 	ldw	r2,-4(fp)
   13e90:	10004326 	beq	r2,zero,13fa0 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   13e94:	e0bffd17 	ldw	r2,-12(fp)
   13e98:	1000041e 	bne	r2,zero,13eac <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13e9c:	e0bfff17 	ldw	r2,-4(fp)
   13ea0:	00c01b84 	movi	r3,110
   13ea4:	10c00005 	stb	r3,0(r2)
        return;
   13ea8:	00003e06 	br	13fa4 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13eac:	e0bffe17 	ldw	r2,-8(fp)
   13eb0:	1000041e 	bne	r2,zero,13ec4 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   13eb4:	e0bfff17 	ldw	r2,-4(fp)
   13eb8:	00c00304 	movi	r3,12
   13ebc:	10c00005 	stb	r3,0(r2)
        return;
   13ec0:	00003806 	br	13fa4 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13ec4:	d0a7f803 	ldbu	r2,-24608(gp)
   13ec8:	10803fcc 	andi	r2,r2,255
   13ecc:	10000426 	beq	r2,zero,13ee0 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   13ed0:	e0bfff17 	ldw	r2,-4(fp)
   13ed4:	00c00484 	movi	r3,18
   13ed8:	10c00005 	stb	r3,0(r2)
        return;
   13edc:	00003106 	br	13fa4 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ee0:	0005303a 	rdctl	r2,status
   13ee4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ee8:	e0fffc17 	ldw	r3,-16(fp)
   13eec:	00bfff84 	movi	r2,-2
   13ef0:	1884703a 	and	r2,r3,r2
   13ef4:	1001703a 	wrctl	status,r2
  
  return context;
   13ef8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13efc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   13f00:	e0bffd17 	ldw	r2,-12(fp)
   13f04:	10800003 	ldbu	r2,0(r2)
   13f08:	10803fcc 	andi	r2,r2,255
   13f0c:	10800160 	cmpeqi	r2,r2,5
   13f10:	1000081e 	bne	r2,zero,13f34 <OSFlagNameSet+0xc8>
   13f14:	e0bff717 	ldw	r2,-36(fp)
   13f18:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f1c:	e0bff817 	ldw	r2,-32(fp)
   13f20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   13f24:	e0bfff17 	ldw	r2,-4(fp)
   13f28:	00c00044 	movi	r3,1
   13f2c:	10c00005 	stb	r3,0(r2)
        return;
   13f30:	00001c06 	br	13fa4 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   13f34:	e13ffe17 	ldw	r4,-8(fp)
   13f38:	00130300 	call	13030 <OS_StrLen>
   13f3c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   13f40:	e0bffa03 	ldbu	r2,-24(fp)
   13f44:	10800830 	cmpltui	r2,r2,32
   13f48:	1000081e 	bne	r2,zero,13f6c <OSFlagNameSet+0x100>
   13f4c:	e0bff717 	ldw	r2,-36(fp)
   13f50:	e0bff915 	stw	r2,-28(fp)
   13f54:	e0bff917 	ldw	r2,-28(fp)
   13f58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   13f5c:	e0bfff17 	ldw	r2,-4(fp)
   13f60:	00c01cc4 	movi	r3,115
   13f64:	10c00005 	stb	r3,0(r2)
        return;
   13f68:	00000e06 	br	13fa4 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   13f6c:	e0bffd17 	ldw	r2,-12(fp)
   13f70:	10800284 	addi	r2,r2,10
   13f74:	e17ffe17 	ldw	r5,-8(fp)
   13f78:	1009883a 	mov	r4,r2
   13f7c:	0012fbc0 	call	12fbc <OS_StrCopy>
   13f80:	e0bff717 	ldw	r2,-36(fp)
   13f84:	e0bffb15 	stw	r2,-20(fp)
   13f88:	e0bffb17 	ldw	r2,-20(fp)
   13f8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13f90:	e0bfff17 	ldw	r2,-4(fp)
   13f94:	10000005 	stb	zero,0(r2)
    return;
   13f98:	0001883a 	nop
   13f9c:	00000106 	br	13fa4 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   13fa0:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   13fa4:	e037883a 	mov	sp,fp
   13fa8:	dfc00117 	ldw	ra,4(sp)
   13fac:	df000017 	ldw	fp,0(sp)
   13fb0:	dec00204 	addi	sp,sp,8
   13fb4:	f800283a 	ret

00013fb8 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   13fb8:	deffe104 	addi	sp,sp,-124
   13fbc:	dfc01e15 	stw	ra,120(sp)
   13fc0:	df001d15 	stw	fp,116(sp)
   13fc4:	df001d04 	addi	fp,sp,116
   13fc8:	e13ffc15 	stw	r4,-16(fp)
   13fcc:	2809883a 	mov	r4,r5
   13fd0:	3007883a 	mov	r3,r6
   13fd4:	3805883a 	mov	r2,r7
   13fd8:	e13ffd0d 	sth	r4,-12(fp)
   13fdc:	e0fffe05 	stb	r3,-8(fp)
   13fe0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13fe4:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13fe8:	e0800217 	ldw	r2,8(fp)
   13fec:	1000021e 	bne	r2,zero,13ff8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   13ff0:	0005883a 	mov	r2,zero
   13ff4:	00015906 	br	1455c <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   13ff8:	e0bffc17 	ldw	r2,-16(fp)
   13ffc:	1000051e 	bne	r2,zero,14014 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   14000:	e0800217 	ldw	r2,8(fp)
   14004:	00c01b84 	movi	r3,110
   14008:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1400c:	0005883a 	mov	r2,zero
   14010:	00015206 	br	1455c <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14014:	d0a7f803 	ldbu	r2,-24608(gp)
   14018:	10803fcc 	andi	r2,r2,255
   1401c:	10000526 	beq	r2,zero,14034 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   14020:	e0800217 	ldw	r2,8(fp)
   14024:	00c00084 	movi	r3,2
   14028:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1402c:	0005883a 	mov	r2,zero
   14030:	00014a06 	br	1455c <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   14034:	d0a7ea03 	ldbu	r2,-24664(gp)
   14038:	10803fcc 	andi	r2,r2,255
   1403c:	10000526 	beq	r2,zero,14054 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   14040:	e0800217 	ldw	r2,8(fp)
   14044:	00c00344 	movi	r3,13
   14048:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1404c:	0005883a 	mov	r2,zero
   14050:	00014206 	br	1455c <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   14054:	e0bffc17 	ldw	r2,-16(fp)
   14058:	10800003 	ldbu	r2,0(r2)
   1405c:	10803fcc 	andi	r2,r2,255
   14060:	10800160 	cmpeqi	r2,r2,5
   14064:	1000051e 	bne	r2,zero,1407c <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   14068:	e0800217 	ldw	r2,8(fp)
   1406c:	00c00044 	movi	r3,1
   14070:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14074:	0005883a 	mov	r2,zero
   14078:	00013806 	br	1455c <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1407c:	e0fffe03 	ldbu	r3,-8(fp)
   14080:	00bfe004 	movi	r2,-128
   14084:	1884703a 	and	r2,r3,r2
   14088:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   1408c:	e0bfe603 	ldbu	r2,-104(fp)
   14090:	10000626 	beq	r2,zero,140ac <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   14094:	e0bffe03 	ldbu	r2,-8(fp)
   14098:	10801fcc 	andi	r2,r2,127
   1409c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   140a0:	00800044 	movi	r2,1
   140a4:	e0bfe405 	stb	r2,-112(fp)
   140a8:	00000106 	br	140b0 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   140ac:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   140b0:	0005303a 	rdctl	r2,status
   140b4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   140b8:	e0fff617 	ldw	r3,-40(fp)
   140bc:	00bfff84 	movi	r2,-2
   140c0:	1884703a 	and	r2,r3,r2
   140c4:	1001703a 	wrctl	status,r2
  
  return context;
   140c8:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   140cc:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   140d0:	e0bffe03 	ldbu	r2,-8(fp)
   140d4:	10c00060 	cmpeqi	r3,r2,1
   140d8:	1800921e 	bne	r3,zero,14324 <OSFlagPend+0x36c>
   140dc:	10c00088 	cmpgei	r3,r2,2
   140e0:	1800021e 	bne	r3,zero,140ec <OSFlagPend+0x134>
   140e4:	10006126 	beq	r2,zero,1426c <OSFlagPend+0x2b4>
   140e8:	0000bb06 	br	143d8 <OSFlagPend+0x420>
   140ec:	10c000a0 	cmpeqi	r3,r2,2
   140f0:	1800031e 	bne	r3,zero,14100 <OSFlagPend+0x148>
   140f4:	108000e0 	cmpeqi	r2,r2,3
   140f8:	10002f1e 	bne	r2,zero,141b8 <OSFlagPend+0x200>
   140fc:	0000b606 	br	143d8 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   14100:	e0bffc17 	ldw	r2,-16(fp)
   14104:	10c0020b 	ldhu	r3,8(r2)
   14108:	e0bffd0b 	ldhu	r2,-12(fp)
   1410c:	1884703a 	and	r2,r3,r2
   14110:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   14114:	e0ffe80b 	ldhu	r3,-96(fp)
   14118:	e0bffd0b 	ldhu	r2,-12(fp)
   1411c:	1880171e 	bne	r3,r2,1417c <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14120:	e0bfe403 	ldbu	r2,-112(fp)
   14124:	10800058 	cmpnei	r2,r2,1
   14128:	1000091e 	bne	r2,zero,14150 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1412c:	e0bffc17 	ldw	r2,-16(fp)
   14130:	1080020b 	ldhu	r2,8(r2)
   14134:	1007883a 	mov	r3,r2
   14138:	e0bfe80b 	ldhu	r2,-96(fp)
   1413c:	0084303a 	nor	r2,zero,r2
   14140:	1884703a 	and	r2,r3,r2
   14144:	1007883a 	mov	r3,r2
   14148:	e0bffc17 	ldw	r2,-16(fp)
   1414c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   14150:	d0a7f917 	ldw	r2,-24604(gp)
   14154:	e0ffe80b 	ldhu	r3,-96(fp)
   14158:	10c00b0d 	sth	r3,44(r2)
   1415c:	e0bfe517 	ldw	r2,-108(fp)
   14160:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14164:	e0bfe717 	ldw	r2,-100(fp)
   14168:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1416c:	e0800217 	ldw	r2,8(fp)
   14170:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   14174:	e0bfe80b 	ldhu	r2,-96(fp)
   14178:	0000f806 	br	1455c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1417c:	e13ffd0b 	ldhu	r4,-12(fp)
   14180:	e17ffe03 	ldbu	r5,-8(fp)
   14184:	e0bfff0b 	ldhu	r2,-4(fp)
   14188:	e0fff704 	addi	r3,fp,-36
   1418c:	d8800015 	stw	r2,0(sp)
   14190:	280f883a 	mov	r7,r5
   14194:	200d883a 	mov	r6,r4
   14198:	180b883a 	mov	r5,r3
   1419c:	e13ffc17 	ldw	r4,-16(fp)
   141a0:	0014a280 	call	14a28 <OS_FlagBlock>
   141a4:	e0bfe517 	ldw	r2,-108(fp)
   141a8:	e0bfe915 	stw	r2,-92(fp)
   141ac:	e0bfe917 	ldw	r2,-92(fp)
   141b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   141b4:	00009206 	br	14400 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   141b8:	e0bffc17 	ldw	r2,-16(fp)
   141bc:	10c0020b 	ldhu	r3,8(r2)
   141c0:	e0bffd0b 	ldhu	r2,-12(fp)
   141c4:	1884703a 	and	r2,r3,r2
   141c8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   141cc:	e0bfe80b 	ldhu	r2,-96(fp)
   141d0:	10001726 	beq	r2,zero,14230 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   141d4:	e0bfe403 	ldbu	r2,-112(fp)
   141d8:	10800058 	cmpnei	r2,r2,1
   141dc:	1000091e 	bne	r2,zero,14204 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   141e0:	e0bffc17 	ldw	r2,-16(fp)
   141e4:	1080020b 	ldhu	r2,8(r2)
   141e8:	1007883a 	mov	r3,r2
   141ec:	e0bfe80b 	ldhu	r2,-96(fp)
   141f0:	0084303a 	nor	r2,zero,r2
   141f4:	1884703a 	and	r2,r3,r2
   141f8:	1007883a 	mov	r3,r2
   141fc:	e0bffc17 	ldw	r2,-16(fp)
   14200:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   14204:	d0a7f917 	ldw	r2,-24604(gp)
   14208:	e0ffe80b 	ldhu	r3,-96(fp)
   1420c:	10c00b0d 	sth	r3,44(r2)
   14210:	e0bfe517 	ldw	r2,-108(fp)
   14214:	e0bfea15 	stw	r2,-88(fp)
   14218:	e0bfea17 	ldw	r2,-88(fp)
   1421c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   14220:	e0800217 	ldw	r2,8(fp)
   14224:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   14228:	e0bfe80b 	ldhu	r2,-96(fp)
   1422c:	0000cb06 	br	1455c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   14230:	e13ffd0b 	ldhu	r4,-12(fp)
   14234:	e17ffe03 	ldbu	r5,-8(fp)
   14238:	e0bfff0b 	ldhu	r2,-4(fp)
   1423c:	e0fff704 	addi	r3,fp,-36
   14240:	d8800015 	stw	r2,0(sp)
   14244:	280f883a 	mov	r7,r5
   14248:	200d883a 	mov	r6,r4
   1424c:	180b883a 	mov	r5,r3
   14250:	e13ffc17 	ldw	r4,-16(fp)
   14254:	0014a280 	call	14a28 <OS_FlagBlock>
   14258:	e0bfe517 	ldw	r2,-108(fp)
   1425c:	e0bfeb15 	stw	r2,-84(fp)
   14260:	e0bfeb17 	ldw	r2,-84(fp)
   14264:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   14268:	00006506 	br	14400 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1426c:	e0bffc17 	ldw	r2,-16(fp)
   14270:	1080020b 	ldhu	r2,8(r2)
   14274:	0084303a 	nor	r2,zero,r2
   14278:	1007883a 	mov	r3,r2
   1427c:	e0bffd0b 	ldhu	r2,-12(fp)
   14280:	1884703a 	and	r2,r3,r2
   14284:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   14288:	e0ffe80b 	ldhu	r3,-96(fp)
   1428c:	e0bffd0b 	ldhu	r2,-12(fp)
   14290:	1880151e 	bne	r3,r2,142e8 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14294:	e0bfe403 	ldbu	r2,-112(fp)
   14298:	10800058 	cmpnei	r2,r2,1
   1429c:	1000071e 	bne	r2,zero,142bc <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   142a0:	e0bffc17 	ldw	r2,-16(fp)
   142a4:	10c0020b 	ldhu	r3,8(r2)
   142a8:	e0bfe80b 	ldhu	r2,-96(fp)
   142ac:	1884b03a 	or	r2,r3,r2
   142b0:	1007883a 	mov	r3,r2
   142b4:	e0bffc17 	ldw	r2,-16(fp)
   142b8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   142bc:	d0a7f917 	ldw	r2,-24604(gp)
   142c0:	e0ffe80b 	ldhu	r3,-96(fp)
   142c4:	10c00b0d 	sth	r3,44(r2)
   142c8:	e0bfe517 	ldw	r2,-108(fp)
   142cc:	e0bfec15 	stw	r2,-80(fp)
   142d0:	e0bfec17 	ldw	r2,-80(fp)
   142d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   142d8:	e0800217 	ldw	r2,8(fp)
   142dc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   142e0:	e0bfe80b 	ldhu	r2,-96(fp)
   142e4:	00009d06 	br	1455c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   142e8:	e13ffd0b 	ldhu	r4,-12(fp)
   142ec:	e17ffe03 	ldbu	r5,-8(fp)
   142f0:	e0bfff0b 	ldhu	r2,-4(fp)
   142f4:	e0fff704 	addi	r3,fp,-36
   142f8:	d8800015 	stw	r2,0(sp)
   142fc:	280f883a 	mov	r7,r5
   14300:	200d883a 	mov	r6,r4
   14304:	180b883a 	mov	r5,r3
   14308:	e13ffc17 	ldw	r4,-16(fp)
   1430c:	0014a280 	call	14a28 <OS_FlagBlock>
   14310:	e0bfe517 	ldw	r2,-108(fp)
   14314:	e0bfed15 	stw	r2,-76(fp)
   14318:	e0bfed17 	ldw	r2,-76(fp)
   1431c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   14320:	00003706 	br	14400 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   14324:	e0bffc17 	ldw	r2,-16(fp)
   14328:	1080020b 	ldhu	r2,8(r2)
   1432c:	0084303a 	nor	r2,zero,r2
   14330:	1007883a 	mov	r3,r2
   14334:	e0bffd0b 	ldhu	r2,-12(fp)
   14338:	1884703a 	and	r2,r3,r2
   1433c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   14340:	e0bfe80b 	ldhu	r2,-96(fp)
   14344:	10001526 	beq	r2,zero,1439c <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   14348:	e0bfe403 	ldbu	r2,-112(fp)
   1434c:	10800058 	cmpnei	r2,r2,1
   14350:	1000071e 	bne	r2,zero,14370 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   14354:	e0bffc17 	ldw	r2,-16(fp)
   14358:	10c0020b 	ldhu	r3,8(r2)
   1435c:	e0bfe80b 	ldhu	r2,-96(fp)
   14360:	1884b03a 	or	r2,r3,r2
   14364:	1007883a 	mov	r3,r2
   14368:	e0bffc17 	ldw	r2,-16(fp)
   1436c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   14370:	d0a7f917 	ldw	r2,-24604(gp)
   14374:	e0ffe80b 	ldhu	r3,-96(fp)
   14378:	10c00b0d 	sth	r3,44(r2)
   1437c:	e0bfe517 	ldw	r2,-108(fp)
   14380:	e0bfee15 	stw	r2,-72(fp)
   14384:	e0bfee17 	ldw	r2,-72(fp)
   14388:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1438c:	e0800217 	ldw	r2,8(fp)
   14390:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   14394:	e0bfe80b 	ldhu	r2,-96(fp)
   14398:	00007006 	br	1455c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1439c:	e13ffd0b 	ldhu	r4,-12(fp)
   143a0:	e17ffe03 	ldbu	r5,-8(fp)
   143a4:	e0bfff0b 	ldhu	r2,-4(fp)
   143a8:	e0fff704 	addi	r3,fp,-36
   143ac:	d8800015 	stw	r2,0(sp)
   143b0:	280f883a 	mov	r7,r5
   143b4:	200d883a 	mov	r6,r4
   143b8:	180b883a 	mov	r5,r3
   143bc:	e13ffc17 	ldw	r4,-16(fp)
   143c0:	0014a280 	call	14a28 <OS_FlagBlock>
   143c4:	e0bfe517 	ldw	r2,-108(fp)
   143c8:	e0bfef15 	stw	r2,-68(fp)
   143cc:	e0bfef17 	ldw	r2,-68(fp)
   143d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   143d4:	00000a06 	br	14400 <OSFlagPend+0x448>
   143d8:	e0bfe517 	ldw	r2,-108(fp)
   143dc:	e0bff015 	stw	r2,-64(fp)
   143e0:	e0bff017 	ldw	r2,-64(fp)
   143e4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   143e8:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   143ec:	e0800217 	ldw	r2,8(fp)
   143f0:	00c01bc4 	movi	r3,111
   143f4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   143f8:	e0bfe80b 	ldhu	r2,-96(fp)
   143fc:	00005706 	br	1455c <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   14400:	0012e780 	call	12e78 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14404:	0005303a 	rdctl	r2,status
   14408:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1440c:	e0fff117 	ldw	r3,-60(fp)
   14410:	00bfff84 	movi	r2,-2
   14414:	1884703a 	and	r2,r3,r2
   14418:	1001703a 	wrctl	status,r2
  
  return context;
   1441c:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   14420:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   14424:	d0a7f917 	ldw	r2,-24604(gp)
   14428:	10800c43 	ldbu	r2,49(r2)
   1442c:	10803fcc 	andi	r2,r2,255
   14430:	10001c26 	beq	r2,zero,144a4 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   14434:	d0a7f917 	ldw	r2,-24604(gp)
   14438:	10800c43 	ldbu	r2,49(r2)
   1443c:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   14440:	d0a7f917 	ldw	r2,-24604(gp)
   14444:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   14448:	e0bff704 	addi	r2,fp,-36
   1444c:	1009883a 	mov	r4,r2
   14450:	0014d5c0 	call	14d5c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   14454:	d0a7f917 	ldw	r2,-24604(gp)
   14458:	10000c05 	stb	zero,48(r2)
   1445c:	e0bfe517 	ldw	r2,-108(fp)
   14460:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14464:	e0bff217 	ldw	r2,-56(fp)
   14468:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   1446c:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   14470:	e0bff303 	ldbu	r2,-52(fp)
   14474:	108000a0 	cmpeqi	r2,r2,2
   14478:	10000426 	beq	r2,zero,1448c <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   1447c:	e0800217 	ldw	r2,8(fp)
   14480:	00c00384 	movi	r3,14
   14484:	10c00005 	stb	r3,0(r2)
                 break;
   14488:	00000406 	br	1449c <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   1448c:	e0800217 	ldw	r2,8(fp)
   14490:	00c00284 	movi	r3,10
   14494:	10c00005 	stb	r3,0(r2)
                 break;
   14498:	0001883a 	nop
        }
        return (flags_rdy);
   1449c:	e0bfe80b 	ldhu	r2,-96(fp)
   144a0:	00002e06 	br	1455c <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   144a4:	d0a7f917 	ldw	r2,-24604(gp)
   144a8:	10800b0b 	ldhu	r2,44(r2)
   144ac:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   144b0:	e0bfe403 	ldbu	r2,-112(fp)
   144b4:	10800058 	cmpnei	r2,r2,1
   144b8:	1000211e 	bne	r2,zero,14540 <OSFlagPend+0x588>
        switch (wait_type) {
   144bc:	e0bffe03 	ldbu	r2,-8(fp)
   144c0:	10001616 	blt	r2,zero,1451c <OSFlagPend+0x564>
   144c4:	10c00090 	cmplti	r3,r2,2
   144c8:	18000c1e 	bne	r3,zero,144fc <OSFlagPend+0x544>
   144cc:	10800108 	cmpgei	r2,r2,4
   144d0:	1000121e 	bne	r2,zero,1451c <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   144d4:	e0bffc17 	ldw	r2,-16(fp)
   144d8:	1080020b 	ldhu	r2,8(r2)
   144dc:	1007883a 	mov	r3,r2
   144e0:	e0bfe80b 	ldhu	r2,-96(fp)
   144e4:	0084303a 	nor	r2,zero,r2
   144e8:	1884703a 	and	r2,r3,r2
   144ec:	1007883a 	mov	r3,r2
   144f0:	e0bffc17 	ldw	r2,-16(fp)
   144f4:	10c0020d 	sth	r3,8(r2)
                 break;
   144f8:	00001106 	br	14540 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   144fc:	e0bffc17 	ldw	r2,-16(fp)
   14500:	10c0020b 	ldhu	r3,8(r2)
   14504:	e0bfe80b 	ldhu	r2,-96(fp)
   14508:	1884b03a 	or	r2,r3,r2
   1450c:	1007883a 	mov	r3,r2
   14510:	e0bffc17 	ldw	r2,-16(fp)
   14514:	10c0020d 	sth	r3,8(r2)
                 break;
   14518:	00000906 	br	14540 <OSFlagPend+0x588>
   1451c:	e0bfe517 	ldw	r2,-108(fp)
   14520:	e0bff415 	stw	r2,-48(fp)
   14524:	e0bff417 	ldw	r2,-48(fp)
   14528:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1452c:	e0800217 	ldw	r2,8(fp)
   14530:	00c01bc4 	movi	r3,111
   14534:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   14538:	0005883a 	mov	r2,zero
   1453c:	00000706 	br	1455c <OSFlagPend+0x5a4>
   14540:	e0bfe517 	ldw	r2,-108(fp)
   14544:	e0bff515 	stw	r2,-44(fp)
   14548:	e0bff517 	ldw	r2,-44(fp)
   1454c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   14550:	e0800217 	ldw	r2,8(fp)
   14554:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   14558:	e0bfe80b 	ldhu	r2,-96(fp)
}
   1455c:	e037883a 	mov	sp,fp
   14560:	dfc00117 	ldw	ra,4(sp)
   14564:	df000017 	ldw	fp,0(sp)
   14568:	dec00204 	addi	sp,sp,8
   1456c:	f800283a 	ret

00014570 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   14570:	defffb04 	addi	sp,sp,-20
   14574:	df000415 	stw	fp,16(sp)
   14578:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1457c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14580:	0005303a 	rdctl	r2,status
   14584:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14588:	e0fffe17 	ldw	r3,-8(fp)
   1458c:	00bfff84 	movi	r2,-2
   14590:	1884703a 	and	r2,r3,r2
   14594:	1001703a 	wrctl	status,r2
  
  return context;
   14598:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1459c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   145a0:	d0a7f917 	ldw	r2,-24604(gp)
   145a4:	10800b0b 	ldhu	r2,44(r2)
   145a8:	e0bffd0d 	sth	r2,-12(fp)
   145ac:	e0bffc17 	ldw	r2,-16(fp)
   145b0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   145b4:	e0bfff17 	ldw	r2,-4(fp)
   145b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   145bc:	e0bffd0b 	ldhu	r2,-12(fp)
}
   145c0:	e037883a 	mov	sp,fp
   145c4:	df000017 	ldw	fp,0(sp)
   145c8:	dec00104 	addi	sp,sp,4
   145cc:	f800283a 	ret

000145d0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   145d0:	deffef04 	addi	sp,sp,-68
   145d4:	dfc01015 	stw	ra,64(sp)
   145d8:	df000f15 	stw	fp,60(sp)
   145dc:	df000f04 	addi	fp,sp,60
   145e0:	e13ffc15 	stw	r4,-16(fp)
   145e4:	2807883a 	mov	r3,r5
   145e8:	3005883a 	mov	r2,r6
   145ec:	e1ffff15 	stw	r7,-4(fp)
   145f0:	e0fffd0d 	sth	r3,-12(fp)
   145f4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   145f8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   145fc:	e0bfff17 	ldw	r2,-4(fp)
   14600:	1000021e 	bne	r2,zero,1460c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   14604:	0005883a 	mov	r2,zero
   14608:	0000d106 	br	14950 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   1460c:	e0bffc17 	ldw	r2,-16(fp)
   14610:	1000051e 	bne	r2,zero,14628 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   14614:	e0bfff17 	ldw	r2,-4(fp)
   14618:	00c01b84 	movi	r3,110
   1461c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14620:	0005883a 	mov	r2,zero
   14624:	0000ca06 	br	14950 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   14628:	e0bffc17 	ldw	r2,-16(fp)
   1462c:	10800003 	ldbu	r2,0(r2)
   14630:	10803fcc 	andi	r2,r2,255
   14634:	10800160 	cmpeqi	r2,r2,5
   14638:	1000051e 	bne	r2,zero,14650 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   1463c:	e0bfff17 	ldw	r2,-4(fp)
   14640:	00c00044 	movi	r3,1
   14644:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14648:	0005883a 	mov	r2,zero
   1464c:	0000c006 	br	14950 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14650:	0005303a 	rdctl	r2,status
   14654:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14658:	e0fffb17 	ldw	r3,-20(fp)
   1465c:	00bfff84 	movi	r2,-2
   14660:	1884703a 	and	r2,r3,r2
   14664:	1001703a 	wrctl	status,r2
  
  return context;
   14668:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1466c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   14670:	e0bffe03 	ldbu	r2,-8(fp)
   14674:	10000326 	beq	r2,zero,14684 <OSFlagPost+0xb4>
   14678:	10800060 	cmpeqi	r2,r2,1
   1467c:	10000b1e 	bne	r2,zero,146ac <OSFlagPost+0xdc>
   14680:	00001206 	br	146cc <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   14684:	e0bffc17 	ldw	r2,-16(fp)
   14688:	1080020b 	ldhu	r2,8(r2)
   1468c:	1007883a 	mov	r3,r2
   14690:	e0bffd0b 	ldhu	r2,-12(fp)
   14694:	0084303a 	nor	r2,zero,r2
   14698:	1884703a 	and	r2,r3,r2
   1469c:	1007883a 	mov	r3,r2
   146a0:	e0bffc17 	ldw	r2,-16(fp)
   146a4:	10c0020d 	sth	r3,8(r2)
             break;
   146a8:	00001106 	br	146f0 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   146ac:	e0bffc17 	ldw	r2,-16(fp)
   146b0:	10c0020b 	ldhu	r3,8(r2)
   146b4:	e0bffd0b 	ldhu	r2,-12(fp)
   146b8:	1884b03a 	or	r2,r3,r2
   146bc:	1007883a 	mov	r3,r2
   146c0:	e0bffc17 	ldw	r2,-16(fp)
   146c4:	10c0020d 	sth	r3,8(r2)
             break;
   146c8:	00000906 	br	146f0 <OSFlagPost+0x120>
   146cc:	e0bff317 	ldw	r2,-52(fp)
   146d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   146d4:	e0bff417 	ldw	r2,-48(fp)
   146d8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   146dc:	e0bfff17 	ldw	r2,-4(fp)
   146e0:	00c01c44 	movi	r3,113
   146e4:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   146e8:	0005883a 	mov	r2,zero
   146ec:	00009806 	br	14950 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   146f0:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   146f4:	e0bffc17 	ldw	r2,-16(fp)
   146f8:	10800117 	ldw	r2,4(r2)
   146fc:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   14700:	00007706 	br	148e0 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   14704:	e0bff117 	ldw	r2,-60(fp)
   14708:	10800483 	ldbu	r2,18(r2)
   1470c:	10803fcc 	andi	r2,r2,255
   14710:	10c00060 	cmpeqi	r3,r2,1
   14714:	18004a1e 	bne	r3,zero,14840 <OSFlagPost+0x270>
   14718:	10c00088 	cmpgei	r3,r2,2
   1471c:	1800021e 	bne	r3,zero,14728 <OSFlagPost+0x158>
   14720:	10002f26 	beq	r2,zero,147e0 <OSFlagPost+0x210>
   14724:	00005b06 	br	14894 <OSFlagPost+0x2c4>
   14728:	10c000a0 	cmpeqi	r3,r2,2
   1472c:	1800031e 	bne	r3,zero,1473c <OSFlagPost+0x16c>
   14730:	108000e0 	cmpeqi	r2,r2,3
   14734:	1000171e 	bne	r2,zero,14794 <OSFlagPost+0x1c4>
   14738:	00005606 	br	14894 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1473c:	e0bffc17 	ldw	r2,-16(fp)
   14740:	10c0020b 	ldhu	r3,8(r2)
   14744:	e0bff117 	ldw	r2,-60(fp)
   14748:	1080040b 	ldhu	r2,16(r2)
   1474c:	1884703a 	and	r2,r3,r2
   14750:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   14754:	e0bff117 	ldw	r2,-60(fp)
   14758:	1080040b 	ldhu	r2,16(r2)
   1475c:	10ffffcc 	andi	r3,r2,65535
   14760:	e0bff60b 	ldhu	r2,-40(fp)
   14764:	1880541e 	bne	r3,r2,148b8 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   14768:	e0bff60b 	ldhu	r2,-40(fp)
   1476c:	100b883a 	mov	r5,r2
   14770:	e13ff117 	ldw	r4,-60(fp)
   14774:	0014c680 	call	14c68 <OS_FlagTaskRdy>
   14778:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1477c:	e0bff683 	ldbu	r2,-38(fp)
   14780:	10800058 	cmpnei	r2,r2,1
   14784:	10004c1e 	bne	r2,zero,148b8 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   14788:	00800044 	movi	r2,1
   1478c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   14790:	00004906 	br	148b8 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   14794:	e0bffc17 	ldw	r2,-16(fp)
   14798:	10c0020b 	ldhu	r3,8(r2)
   1479c:	e0bff117 	ldw	r2,-60(fp)
   147a0:	1080040b 	ldhu	r2,16(r2)
   147a4:	1884703a 	and	r2,r3,r2
   147a8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   147ac:	e0bff60b 	ldhu	r2,-40(fp)
   147b0:	10004326 	beq	r2,zero,148c0 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   147b4:	e0bff60b 	ldhu	r2,-40(fp)
   147b8:	100b883a 	mov	r5,r2
   147bc:	e13ff117 	ldw	r4,-60(fp)
   147c0:	0014c680 	call	14c68 <OS_FlagTaskRdy>
   147c4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   147c8:	e0bff683 	ldbu	r2,-38(fp)
   147cc:	10800058 	cmpnei	r2,r2,1
   147d0:	10003b1e 	bne	r2,zero,148c0 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   147d4:	00800044 	movi	r2,1
   147d8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   147dc:	00003806 	br	148c0 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   147e0:	e0bffc17 	ldw	r2,-16(fp)
   147e4:	1080020b 	ldhu	r2,8(r2)
   147e8:	0084303a 	nor	r2,zero,r2
   147ec:	1007883a 	mov	r3,r2
   147f0:	e0bff117 	ldw	r2,-60(fp)
   147f4:	1080040b 	ldhu	r2,16(r2)
   147f8:	1884703a 	and	r2,r3,r2
   147fc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   14800:	e0bff117 	ldw	r2,-60(fp)
   14804:	1080040b 	ldhu	r2,16(r2)
   14808:	10ffffcc 	andi	r3,r2,65535
   1480c:	e0bff60b 	ldhu	r2,-40(fp)
   14810:	18802d1e 	bne	r3,r2,148c8 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   14814:	e0bff60b 	ldhu	r2,-40(fp)
   14818:	100b883a 	mov	r5,r2
   1481c:	e13ff117 	ldw	r4,-60(fp)
   14820:	0014c680 	call	14c68 <OS_FlagTaskRdy>
   14824:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   14828:	e0bff683 	ldbu	r2,-38(fp)
   1482c:	10800058 	cmpnei	r2,r2,1
   14830:	1000251e 	bne	r2,zero,148c8 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   14834:	00800044 	movi	r2,1
   14838:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1483c:	00002206 	br	148c8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   14840:	e0bffc17 	ldw	r2,-16(fp)
   14844:	1080020b 	ldhu	r2,8(r2)
   14848:	0084303a 	nor	r2,zero,r2
   1484c:	1007883a 	mov	r3,r2
   14850:	e0bff117 	ldw	r2,-60(fp)
   14854:	1080040b 	ldhu	r2,16(r2)
   14858:	1884703a 	and	r2,r3,r2
   1485c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   14860:	e0bff60b 	ldhu	r2,-40(fp)
   14864:	10001a26 	beq	r2,zero,148d0 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   14868:	e0bff60b 	ldhu	r2,-40(fp)
   1486c:	100b883a 	mov	r5,r2
   14870:	e13ff117 	ldw	r4,-60(fp)
   14874:	0014c680 	call	14c68 <OS_FlagTaskRdy>
   14878:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1487c:	e0bff683 	ldbu	r2,-38(fp)
   14880:	10800058 	cmpnei	r2,r2,1
   14884:	1000121e 	bne	r2,zero,148d0 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   14888:	00800044 	movi	r2,1
   1488c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   14890:	00000f06 	br	148d0 <OSFlagPost+0x300>
   14894:	e0bff317 	ldw	r2,-52(fp)
   14898:	e0bff515 	stw	r2,-44(fp)
   1489c:	e0bff517 	ldw	r2,-44(fp)
   148a0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   148a4:	e0bfff17 	ldw	r2,-4(fp)
   148a8:	00c01bc4 	movi	r3,111
   148ac:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   148b0:	0005883a 	mov	r2,zero
   148b4:	00002606 	br	14950 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   148b8:	0001883a 	nop
   148bc:	00000506 	br	148d4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   148c0:	0001883a 	nop
   148c4:	00000306 	br	148d4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   148c8:	0001883a 	nop
   148cc:	00000106 	br	148d4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   148d0:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   148d4:	e0bff117 	ldw	r2,-60(fp)
   148d8:	10800017 	ldw	r2,0(r2)
   148dc:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   148e0:	e0bff117 	ldw	r2,-60(fp)
   148e4:	103f871e 	bne	r2,zero,14704 <OSFlagPost+0x134>
   148e8:	e0bff317 	ldw	r2,-52(fp)
   148ec:	e0bff715 	stw	r2,-36(fp)
   148f0:	e0bff717 	ldw	r2,-36(fp)
   148f4:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   148f8:	e0bff203 	ldbu	r2,-56(fp)
   148fc:	10800058 	cmpnei	r2,r2,1
   14900:	1000011e 	bne	r2,zero,14908 <OSFlagPost+0x338>
        OS_Sched();
   14904:	0012e780 	call	12e78 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14908:	0005303a 	rdctl	r2,status
   1490c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14910:	e0fffa17 	ldw	r3,-24(fp)
   14914:	00bfff84 	movi	r2,-2
   14918:	1884703a 	and	r2,r3,r2
   1491c:	1001703a 	wrctl	status,r2
  
  return context;
   14920:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   14924:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   14928:	e0bffc17 	ldw	r2,-16(fp)
   1492c:	1080020b 	ldhu	r2,8(r2)
   14930:	e0bff90d 	sth	r2,-28(fp)
   14934:	e0bff317 	ldw	r2,-52(fp)
   14938:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1493c:	e0bff817 	ldw	r2,-32(fp)
   14940:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   14944:	e0bfff17 	ldw	r2,-4(fp)
   14948:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   1494c:	e0bff90b 	ldhu	r2,-28(fp)
}
   14950:	e037883a 	mov	sp,fp
   14954:	dfc00117 	ldw	ra,4(sp)
   14958:	df000017 	ldw	fp,0(sp)
   1495c:	dec00204 	addi	sp,sp,8
   14960:	f800283a 	ret

00014964 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   14964:	defff904 	addi	sp,sp,-28
   14968:	df000615 	stw	fp,24(sp)
   1496c:	df000604 	addi	fp,sp,24
   14970:	e13ffe15 	stw	r4,-8(fp)
   14974:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   14978:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   1497c:	e0bfff17 	ldw	r2,-4(fp)
   14980:	1000021e 	bne	r2,zero,1498c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   14984:	0005883a 	mov	r2,zero
   14988:	00002306 	br	14a18 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   1498c:	e0bffe17 	ldw	r2,-8(fp)
   14990:	1000051e 	bne	r2,zero,149a8 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   14994:	e0bfff17 	ldw	r2,-4(fp)
   14998:	00c01b84 	movi	r3,110
   1499c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   149a0:	0005883a 	mov	r2,zero
   149a4:	00001c06 	br	14a18 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   149a8:	e0bffe17 	ldw	r2,-8(fp)
   149ac:	10800003 	ldbu	r2,0(r2)
   149b0:	10803fcc 	andi	r2,r2,255
   149b4:	10800160 	cmpeqi	r2,r2,5
   149b8:	1000051e 	bne	r2,zero,149d0 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   149bc:	e0bfff17 	ldw	r2,-4(fp)
   149c0:	00c00044 	movi	r3,1
   149c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   149c8:	0005883a 	mov	r2,zero
   149cc:	00001206 	br	14a18 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   149d0:	0005303a 	rdctl	r2,status
   149d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   149d8:	e0fffc17 	ldw	r3,-16(fp)
   149dc:	00bfff84 	movi	r2,-2
   149e0:	1884703a 	and	r2,r3,r2
   149e4:	1001703a 	wrctl	status,r2
  
  return context;
   149e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   149ec:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   149f0:	e0bffe17 	ldw	r2,-8(fp)
   149f4:	1080020b 	ldhu	r2,8(r2)
   149f8:	e0bffb0d 	sth	r2,-20(fp)
   149fc:	e0bffa17 	ldw	r2,-24(fp)
   14a00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a04:	e0bffd17 	ldw	r2,-12(fp)
   14a08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14a0c:	e0bfff17 	ldw	r2,-4(fp)
   14a10:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   14a14:	e0bffb0b 	ldhu	r2,-20(fp)
}
   14a18:	e037883a 	mov	sp,fp
   14a1c:	df000017 	ldw	fp,0(sp)
   14a20:	dec00104 	addi	sp,sp,4
   14a24:	f800283a 	ret

00014a28 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   14a28:	defff804 	addi	sp,sp,-32
   14a2c:	df000715 	stw	fp,28(sp)
   14a30:	df000704 	addi	fp,sp,28
   14a34:	e13ffb15 	stw	r4,-20(fp)
   14a38:	e17ffc15 	stw	r5,-16(fp)
   14a3c:	3009883a 	mov	r4,r6
   14a40:	3807883a 	mov	r3,r7
   14a44:	e0800117 	ldw	r2,4(fp)
   14a48:	e13ffd0d 	sth	r4,-12(fp)
   14a4c:	e0fffe05 	stb	r3,-8(fp)
   14a50:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   14a54:	d0a7f917 	ldw	r2,-24604(gp)
   14a58:	d0e7f917 	ldw	r3,-24604(gp)
   14a5c:	18c00c03 	ldbu	r3,48(r3)
   14a60:	18c00814 	ori	r3,r3,32
   14a64:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   14a68:	d0a7f917 	ldw	r2,-24604(gp)
   14a6c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   14a70:	d0a7f917 	ldw	r2,-24604(gp)
   14a74:	e0ffff0b 	ldhu	r3,-4(fp)
   14a78:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   14a7c:	d0a7f917 	ldw	r2,-24604(gp)
   14a80:	e0fffc17 	ldw	r3,-16(fp)
   14a84:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   14a88:	e0bffc17 	ldw	r2,-16(fp)
   14a8c:	e0fffd0b 	ldhu	r3,-12(fp)
   14a90:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   14a94:	e0bffc17 	ldw	r2,-16(fp)
   14a98:	e0fffe03 	ldbu	r3,-8(fp)
   14a9c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   14aa0:	d0e7f917 	ldw	r3,-24604(gp)
   14aa4:	e0bffc17 	ldw	r2,-16(fp)
   14aa8:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   14aac:	e0bffb17 	ldw	r2,-20(fp)
   14ab0:	10c00117 	ldw	r3,4(r2)
   14ab4:	e0bffc17 	ldw	r2,-16(fp)
   14ab8:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   14abc:	e0bffc17 	ldw	r2,-16(fp)
   14ac0:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   14ac4:	e0bffc17 	ldw	r2,-16(fp)
   14ac8:	e0fffb17 	ldw	r3,-20(fp)
   14acc:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   14ad0:	e0bffb17 	ldw	r2,-20(fp)
   14ad4:	10800117 	ldw	r2,4(r2)
   14ad8:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   14adc:	e0bff917 	ldw	r2,-28(fp)
   14ae0:	10000326 	beq	r2,zero,14af0 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   14ae4:	e0bff917 	ldw	r2,-28(fp)
   14ae8:	e0fffc17 	ldw	r3,-16(fp)
   14aec:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   14af0:	e0bffb17 	ldw	r2,-20(fp)
   14af4:	e0fffc17 	ldw	r3,-16(fp)
   14af8:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   14afc:	d0a7f917 	ldw	r2,-24604(gp)
   14b00:	10800d03 	ldbu	r2,52(r2)
   14b04:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   14b08:	e0fffa03 	ldbu	r3,-24(fp)
   14b0c:	e13ffa03 	ldbu	r4,-24(fp)
   14b10:	d0a7f644 	addi	r2,gp,-24615
   14b14:	2085883a 	add	r2,r4,r2
   14b18:	10800003 	ldbu	r2,0(r2)
   14b1c:	1009883a 	mov	r4,r2
   14b20:	d0a7f917 	ldw	r2,-24604(gp)
   14b24:	10800d43 	ldbu	r2,53(r2)
   14b28:	0084303a 	nor	r2,zero,r2
   14b2c:	2084703a 	and	r2,r4,r2
   14b30:	1009883a 	mov	r4,r2
   14b34:	d0a7f644 	addi	r2,gp,-24615
   14b38:	1885883a 	add	r2,r3,r2
   14b3c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   14b40:	e0fffa03 	ldbu	r3,-24(fp)
   14b44:	d0a7f644 	addi	r2,gp,-24615
   14b48:	1885883a 	add	r2,r3,r2
   14b4c:	10800003 	ldbu	r2,0(r2)
   14b50:	10803fcc 	andi	r2,r2,255
   14b54:	1000071e 	bne	r2,zero,14b74 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   14b58:	d0a7f917 	ldw	r2,-24604(gp)
   14b5c:	10800d83 	ldbu	r2,54(r2)
   14b60:	0084303a 	nor	r2,zero,r2
   14b64:	1007883a 	mov	r3,r2
   14b68:	d0a7f603 	ldbu	r2,-24616(gp)
   14b6c:	1884703a 	and	r2,r3,r2
   14b70:	d0a7f605 	stb	r2,-24616(gp)
    }
}
   14b74:	0001883a 	nop
   14b78:	e037883a 	mov	sp,fp
   14b7c:	df000017 	ldw	fp,0(sp)
   14b80:	dec00104 	addi	sp,sp,4
   14b84:	f800283a 	ret

00014b88 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   14b88:	defffb04 	addi	sp,sp,-20
   14b8c:	dfc00415 	stw	ra,16(sp)
   14b90:	df000315 	stw	fp,12(sp)
   14b94:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   14b98:	0140dc04 	movi	r5,880
   14b9c:	010000f4 	movhi	r4,3
   14ba0:	21278d04 	addi	r4,r4,-25036
   14ba4:	0012dbc0 	call	12dbc <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   14ba8:	008000f4 	movhi	r2,3
   14bac:	10a78d04 	addi	r2,r2,-25036
   14bb0:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   14bb4:	008000f4 	movhi	r2,3
   14bb8:	10a79804 	addi	r2,r2,-24992
   14bbc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   14bc0:	e03ffd0d 	sth	zero,-12(fp)
   14bc4:	00001306 	br	14c14 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   14bc8:	e0bffe17 	ldw	r2,-8(fp)
   14bcc:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   14bd0:	e0bffe17 	ldw	r2,-8(fp)
   14bd4:	e0ffff17 	ldw	r3,-4(fp)
   14bd8:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   14bdc:	e0bffe17 	ldw	r2,-8(fp)
   14be0:	00c00fc4 	movi	r3,63
   14be4:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   14be8:	e0bffe17 	ldw	r2,-8(fp)
   14bec:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   14bf0:	e0bffe17 	ldw	r2,-8(fp)
   14bf4:	10800b04 	addi	r2,r2,44
   14bf8:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   14bfc:	e0bfff17 	ldw	r2,-4(fp)
   14c00:	10800b04 	addi	r2,r2,44
   14c04:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   14c08:	e0bffd0b 	ldhu	r2,-12(fp)
   14c0c:	10800044 	addi	r2,r2,1
   14c10:	e0bffd0d 	sth	r2,-12(fp)
   14c14:	e0bffd0b 	ldhu	r2,-12(fp)
   14c18:	108004f0 	cmpltui	r2,r2,19
   14c1c:	103fea1e 	bne	r2,zero,14bc8 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   14c20:	e0bffe17 	ldw	r2,-8(fp)
   14c24:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   14c28:	e0bffe17 	ldw	r2,-8(fp)
   14c2c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   14c30:	e0bffe17 	ldw	r2,-8(fp)
   14c34:	00c00fc4 	movi	r3,63
   14c38:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   14c3c:	e0bffe17 	ldw	r2,-8(fp)
   14c40:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   14c44:	008000f4 	movhi	r2,3
   14c48:	10a78d04 	addi	r2,r2,-25036
   14c4c:	d0a7fb15 	stw	r2,-24596(gp)
#endif
}
   14c50:	0001883a 	nop
   14c54:	e037883a 	mov	sp,fp
   14c58:	dfc00117 	ldw	ra,4(sp)
   14c5c:	df000017 	ldw	fp,0(sp)
   14c60:	dec00204 	addi	sp,sp,8
   14c64:	f800283a 	ret

00014c68 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   14c68:	defffa04 	addi	sp,sp,-24
   14c6c:	dfc00515 	stw	ra,20(sp)
   14c70:	df000415 	stw	fp,16(sp)
   14c74:	df000404 	addi	fp,sp,16
   14c78:	e13ffe15 	stw	r4,-8(fp)
   14c7c:	2805883a 	mov	r2,r5
   14c80:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   14c84:	e0bffe17 	ldw	r2,-8(fp)
   14c88:	10800217 	ldw	r2,8(r2)
   14c8c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   14c90:	e0bffd17 	ldw	r2,-12(fp)
   14c94:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   14c98:	e0bffd17 	ldw	r2,-12(fp)
   14c9c:	e0ffff0b 	ldhu	r3,-4(fp)
   14ca0:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   14ca4:	e0bffd17 	ldw	r2,-12(fp)
   14ca8:	10c00c03 	ldbu	r3,48(r2)
   14cac:	00bff7c4 	movi	r2,-33
   14cb0:	1884703a 	and	r2,r3,r2
   14cb4:	1007883a 	mov	r3,r2
   14cb8:	e0bffd17 	ldw	r2,-12(fp)
   14cbc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   14cc0:	e0bffd17 	ldw	r2,-12(fp)
   14cc4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   14cc8:	e0bffd17 	ldw	r2,-12(fp)
   14ccc:	10800c03 	ldbu	r2,48(r2)
   14cd0:	10803fcc 	andi	r2,r2,255
   14cd4:	1000181e 	bne	r2,zero,14d38 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   14cd8:	e0bffd17 	ldw	r2,-12(fp)
   14cdc:	10c00d83 	ldbu	r3,54(r2)
   14ce0:	d0a7f603 	ldbu	r2,-24616(gp)
   14ce4:	1884b03a 	or	r2,r3,r2
   14ce8:	d0a7f605 	stb	r2,-24616(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14cec:	e0bffd17 	ldw	r2,-12(fp)
   14cf0:	10800d03 	ldbu	r2,52(r2)
   14cf4:	10c03fcc 	andi	r3,r2,255
   14cf8:	e0bffd17 	ldw	r2,-12(fp)
   14cfc:	10800d03 	ldbu	r2,52(r2)
   14d00:	11003fcc 	andi	r4,r2,255
   14d04:	d0a7f644 	addi	r2,gp,-24615
   14d08:	2085883a 	add	r2,r4,r2
   14d0c:	11000003 	ldbu	r4,0(r2)
   14d10:	e0bffd17 	ldw	r2,-12(fp)
   14d14:	10800d43 	ldbu	r2,53(r2)
   14d18:	2084b03a 	or	r2,r4,r2
   14d1c:	1009883a 	mov	r4,r2
   14d20:	d0a7f644 	addi	r2,gp,-24615
   14d24:	1885883a 	add	r2,r3,r2
   14d28:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   14d2c:	00800044 	movi	r2,1
   14d30:	e0bffc05 	stb	r2,-16(fp)
   14d34:	00000106 	br	14d3c <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   14d38:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   14d3c:	e13ffe17 	ldw	r4,-8(fp)
   14d40:	0014d5c0 	call	14d5c <OS_FlagUnlink>
    return (sched);
   14d44:	e0bffc03 	ldbu	r2,-16(fp)
}
   14d48:	e037883a 	mov	sp,fp
   14d4c:	dfc00117 	ldw	ra,4(sp)
   14d50:	df000017 	ldw	fp,0(sp)
   14d54:	dec00204 	addi	sp,sp,8
   14d58:	f800283a 	ret

00014d5c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   14d5c:	defffa04 	addi	sp,sp,-24
   14d60:	df000515 	stw	fp,20(sp)
   14d64:	df000504 	addi	fp,sp,20
   14d68:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   14d6c:	e0bfff17 	ldw	r2,-4(fp)
   14d70:	10800117 	ldw	r2,4(r2)
   14d74:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   14d78:	e0bfff17 	ldw	r2,-4(fp)
   14d7c:	10800017 	ldw	r2,0(r2)
   14d80:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   14d84:	e0bffb17 	ldw	r2,-20(fp)
   14d88:	10000b1e 	bne	r2,zero,14db8 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   14d8c:	e0bfff17 	ldw	r2,-4(fp)
   14d90:	10800317 	ldw	r2,12(r2)
   14d94:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   14d98:	e0bffd17 	ldw	r2,-12(fp)
   14d9c:	e0fffc17 	ldw	r3,-16(fp)
   14da0:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   14da4:	e0bffc17 	ldw	r2,-16(fp)
   14da8:	10000b26 	beq	r2,zero,14dd8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   14dac:	e0bffc17 	ldw	r2,-16(fp)
   14db0:	10000115 	stw	zero,4(r2)
   14db4:	00000806 	br	14dd8 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   14db8:	e0bffb17 	ldw	r2,-20(fp)
   14dbc:	e0fffc17 	ldw	r3,-16(fp)
   14dc0:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   14dc4:	e0bffc17 	ldw	r2,-16(fp)
   14dc8:	10000326 	beq	r2,zero,14dd8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   14dcc:	e0bffc17 	ldw	r2,-16(fp)
   14dd0:	e0fffb17 	ldw	r3,-20(fp)
   14dd4:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   14dd8:	e0bfff17 	ldw	r2,-4(fp)
   14ddc:	10800217 	ldw	r2,8(r2)
   14de0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   14de4:	e0bffe17 	ldw	r2,-8(fp)
   14de8:	10000a15 	stw	zero,40(r2)
#endif
}
   14dec:	0001883a 	nop
   14df0:	e037883a 	mov	sp,fp
   14df4:	df000017 	ldw	fp,0(sp)
   14df8:	dec00104 	addi	sp,sp,4
   14dfc:	f800283a 	ret

00014e00 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   14e00:	defffa04 	addi	sp,sp,-24
   14e04:	df000515 	stw	fp,20(sp)
   14e08:	df000504 	addi	fp,sp,20
   14e0c:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   14e10:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   14e14:	e0bfff17 	ldw	r2,-4(fp)
   14e18:	1000021e 	bne	r2,zero,14e24 <OSMboxAccept+0x24>
        return ((void *)0);
   14e1c:	0005883a 	mov	r2,zero
   14e20:	00001906 	br	14e88 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   14e24:	e0bfff17 	ldw	r2,-4(fp)
   14e28:	10800003 	ldbu	r2,0(r2)
   14e2c:	10803fcc 	andi	r2,r2,255
   14e30:	10800060 	cmpeqi	r2,r2,1
   14e34:	1000021e 	bne	r2,zero,14e40 <OSMboxAccept+0x40>
        return ((void *)0);
   14e38:	0005883a 	mov	r2,zero
   14e3c:	00001206 	br	14e88 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e40:	0005303a 	rdctl	r2,status
   14e44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e48:	e0fffd17 	ldw	r3,-12(fp)
   14e4c:	00bfff84 	movi	r2,-2
   14e50:	1884703a 	and	r2,r3,r2
   14e54:	1001703a 	wrctl	status,r2
  
  return context;
   14e58:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14e5c:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
   14e60:	e0bfff17 	ldw	r2,-4(fp)
   14e64:	10800117 	ldw	r2,4(r2)
   14e68:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   14e6c:	e0bfff17 	ldw	r2,-4(fp)
   14e70:	10000115 	stw	zero,4(r2)
   14e74:	e0bffb17 	ldw	r2,-20(fp)
   14e78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e7c:	e0bffe17 	ldw	r2,-8(fp)
   14e80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   14e84:	e0bffc17 	ldw	r2,-16(fp)
}
   14e88:	e037883a 	mov	sp,fp
   14e8c:	df000017 	ldw	fp,0(sp)
   14e90:	dec00104 	addi	sp,sp,4
   14e94:	f800283a 	ret

00014e98 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   14e98:	defff904 	addi	sp,sp,-28
   14e9c:	dfc00615 	stw	ra,24(sp)
   14ea0:	df000515 	stw	fp,20(sp)
   14ea4:	df000504 	addi	fp,sp,20
   14ea8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14eac:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   14eb0:	d0a7f803 	ldbu	r2,-24608(gp)
   14eb4:	10803fcc 	andi	r2,r2,255
   14eb8:	10000226 	beq	r2,zero,14ec4 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   14ebc:	0005883a 	mov	r2,zero
   14ec0:	00002506 	br	14f58 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ec4:	0005303a 	rdctl	r2,status
   14ec8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ecc:	e0fffe17 	ldw	r3,-8(fp)
   14ed0:	00bfff84 	movi	r2,-2
   14ed4:	1884703a 	and	r2,r3,r2
   14ed8:	1001703a 	wrctl	status,r2
  
  return context;
   14edc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   14ee0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   14ee4:	d0a7f717 	ldw	r2,-24612(gp)
   14ee8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   14eec:	d0a7f717 	ldw	r2,-24612(gp)
   14ef0:	10000326 	beq	r2,zero,14f00 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   14ef4:	d0a7f717 	ldw	r2,-24612(gp)
   14ef8:	10800117 	ldw	r2,4(r2)
   14efc:	d0a7f715 	stw	r2,-24612(gp)
   14f00:	e0bffb17 	ldw	r2,-20(fp)
   14f04:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f08:	e0bffc17 	ldw	r2,-16(fp)
   14f0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   14f10:	e0bffd17 	ldw	r2,-12(fp)
   14f14:	10000f26 	beq	r2,zero,14f54 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   14f18:	e0bffd17 	ldw	r2,-12(fp)
   14f1c:	00c00044 	movi	r3,1
   14f20:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
   14f24:	e0bffd17 	ldw	r2,-12(fp)
   14f28:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   14f2c:	e0bffd17 	ldw	r2,-12(fp)
   14f30:	e0ffff17 	ldw	r3,-4(fp)
   14f34:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   14f38:	e0bffd17 	ldw	r2,-12(fp)
   14f3c:	00c00fc4 	movi	r3,63
   14f40:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   14f44:	e0bffd17 	ldw	r2,-12(fp)
   14f48:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   14f4c:	e13ffd17 	ldw	r4,-12(fp)
   14f50:	00129dc0 	call	129dc <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   14f54:	e0bffd17 	ldw	r2,-12(fp)
}
   14f58:	e037883a 	mov	sp,fp
   14f5c:	dfc00117 	ldw	ra,4(sp)
   14f60:	df000017 	ldw	fp,0(sp)
   14f64:	dec00204 	addi	sp,sp,8
   14f68:	f800283a 	ret

00014f6c <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14f6c:	defff304 	addi	sp,sp,-52
   14f70:	dfc00c15 	stw	ra,48(sp)
   14f74:	df000b15 	stw	fp,44(sp)
   14f78:	df000b04 	addi	fp,sp,44
   14f7c:	e13ffd15 	stw	r4,-12(fp)
   14f80:	2805883a 	mov	r2,r5
   14f84:	e1bfff15 	stw	r6,-4(fp)
   14f88:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14f8c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   14f90:	e0bfff17 	ldw	r2,-4(fp)
   14f94:	1000021e 	bne	r2,zero,14fa0 <OSMboxDel+0x34>
        return (pevent);
   14f98:	e0bffd17 	ldw	r2,-12(fp)
   14f9c:	00007e06 	br	15198 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   14fa0:	e0bffd17 	ldw	r2,-12(fp)
   14fa4:	1000051e 	bne	r2,zero,14fbc <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14fa8:	e0bfff17 	ldw	r2,-4(fp)
   14fac:	00c00104 	movi	r3,4
   14fb0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14fb4:	e0bffd17 	ldw	r2,-12(fp)
   14fb8:	00007706 	br	15198 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   14fbc:	e0bffd17 	ldw	r2,-12(fp)
   14fc0:	10800003 	ldbu	r2,0(r2)
   14fc4:	10803fcc 	andi	r2,r2,255
   14fc8:	10800060 	cmpeqi	r2,r2,1
   14fcc:	1000051e 	bne	r2,zero,14fe4 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   14fd0:	e0bfff17 	ldw	r2,-4(fp)
   14fd4:	00c00044 	movi	r3,1
   14fd8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14fdc:	e0bffd17 	ldw	r2,-12(fp)
   14fe0:	00006d06 	br	15198 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14fe4:	d0a7f803 	ldbu	r2,-24608(gp)
   14fe8:	10803fcc 	andi	r2,r2,255
   14fec:	10000526 	beq	r2,zero,15004 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   14ff0:	e0bfff17 	ldw	r2,-4(fp)
   14ff4:	00c003c4 	movi	r3,15
   14ff8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14ffc:	e0bffd17 	ldw	r2,-12(fp)
   15000:	00006506 	br	15198 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15004:	0005303a 	rdctl	r2,status
   15008:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1500c:	e0fffc17 	ldw	r3,-16(fp)
   15010:	00bfff84 	movi	r2,-2
   15014:	1884703a 	and	r2,r3,r2
   15018:	1001703a 	wrctl	status,r2
  
  return context;
   1501c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15020:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   15024:	e0bffd17 	ldw	r2,-12(fp)
   15028:	10800283 	ldbu	r2,10(r2)
   1502c:	10803fcc 	andi	r2,r2,255
   15030:	10000326 	beq	r2,zero,15040 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   15034:	00800044 	movi	r2,1
   15038:	e0bff505 	stb	r2,-44(fp)
   1503c:	00000106 	br	15044 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   15040:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   15044:	e0bffe03 	ldbu	r2,-8(fp)
   15048:	10000326 	beq	r2,zero,15058 <OSMboxDel+0xec>
   1504c:	10800060 	cmpeqi	r2,r2,1
   15050:	1000281e 	bne	r2,zero,150f4 <OSMboxDel+0x188>
   15054:	00004506 	br	1516c <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   15058:	e0bff503 	ldbu	r2,-44(fp)
   1505c:	1000161e 	bne	r2,zero,150b8 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   15060:	e0bffd17 	ldw	r2,-12(fp)
   15064:	00c00fc4 	movi	r3,63
   15068:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1506c:	e0bffd17 	ldw	r2,-12(fp)
   15070:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   15074:	e0bffd17 	ldw	r2,-12(fp)
   15078:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   1507c:	d0e7f717 	ldw	r3,-24612(gp)
   15080:	e0bffd17 	ldw	r2,-12(fp)
   15084:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   15088:	e0bffd17 	ldw	r2,-12(fp)
   1508c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   15090:	e0bffd17 	ldw	r2,-12(fp)
   15094:	d0a7f715 	stw	r2,-24612(gp)
   15098:	e0bff717 	ldw	r2,-36(fp)
   1509c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150a0:	e0bff817 	ldw	r2,-32(fp)
   150a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   150a8:	e0bfff17 	ldw	r2,-4(fp)
   150ac:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   150b0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
   150b4:	00003706 	br	15194 <OSMboxDel+0x228>
   150b8:	e0bff717 	ldw	r2,-36(fp)
   150bc:	e0bff915 	stw	r2,-28(fp)
   150c0:	e0bff917 	ldw	r2,-28(fp)
   150c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   150c8:	e0bfff17 	ldw	r2,-4(fp)
   150cc:	00c01244 	movi	r3,73
   150d0:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
   150d4:	e0bffd17 	ldw	r2,-12(fp)
   150d8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   150dc:	00002d06 	br	15194 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   150e0:	000f883a 	mov	r7,zero
   150e4:	01800084 	movi	r6,2
   150e8:	000b883a 	mov	r5,zero
   150ec:	e13ffd17 	ldw	r4,-12(fp)
   150f0:	001242c0 	call	1242c <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   150f4:	e0bffd17 	ldw	r2,-12(fp)
   150f8:	10800283 	ldbu	r2,10(r2)
   150fc:	10803fcc 	andi	r2,r2,255
   15100:	103ff71e 	bne	r2,zero,150e0 <OSMboxDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   15104:	e0bffd17 	ldw	r2,-12(fp)
   15108:	00c00fc4 	movi	r3,63
   1510c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   15110:	e0bffd17 	ldw	r2,-12(fp)
   15114:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15118:	e0bffd17 	ldw	r2,-12(fp)
   1511c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   15120:	d0e7f717 	ldw	r3,-24612(gp)
   15124:	e0bffd17 	ldw	r2,-12(fp)
   15128:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1512c:	e0bffd17 	ldw	r2,-12(fp)
   15130:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   15134:	e0bffd17 	ldw	r2,-12(fp)
   15138:	d0a7f715 	stw	r2,-24612(gp)
   1513c:	e0bff717 	ldw	r2,-36(fp)
   15140:	e0bffa15 	stw	r2,-24(fp)
   15144:	e0bffa17 	ldw	r2,-24(fp)
   15148:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1514c:	e0bff503 	ldbu	r2,-44(fp)
   15150:	10800058 	cmpnei	r2,r2,1
   15154:	1000011e 	bne	r2,zero,1515c <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15158:	0012e780 	call	12e78 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   1515c:	e0bfff17 	ldw	r2,-4(fp)
   15160:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   15164:	e03ff615 	stw	zero,-40(fp)
             break;
   15168:	00000a06 	br	15194 <OSMboxDel+0x228>
   1516c:	e0bff717 	ldw	r2,-36(fp)
   15170:	e0bffb15 	stw	r2,-20(fp)
   15174:	e0bffb17 	ldw	r2,-20(fp)
   15178:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   1517c:	e0bfff17 	ldw	r2,-4(fp)
   15180:	00c001c4 	movi	r3,7
   15184:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
   15188:	e0bffd17 	ldw	r2,-12(fp)
   1518c:	e0bff615 	stw	r2,-40(fp)
             break;
   15190:	0001883a 	nop
    }
    return (pevent_return);
   15194:	e0bff617 	ldw	r2,-40(fp)
}
   15198:	e037883a 	mov	sp,fp
   1519c:	dfc00117 	ldw	ra,4(sp)
   151a0:	df000017 	ldw	fp,0(sp)
   151a4:	dec00204 	addi	sp,sp,8
   151a8:	f800283a 	ret

000151ac <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   151ac:	defff404 	addi	sp,sp,-48
   151b0:	dfc00b15 	stw	ra,44(sp)
   151b4:	df000a15 	stw	fp,40(sp)
   151b8:	df000a04 	addi	fp,sp,40
   151bc:	e13ffd15 	stw	r4,-12(fp)
   151c0:	2805883a 	mov	r2,r5
   151c4:	e1bfff15 	stw	r6,-4(fp)
   151c8:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   151cc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   151d0:	e0bfff17 	ldw	r2,-4(fp)
   151d4:	1000021e 	bne	r2,zero,151e0 <OSMboxPend+0x34>
        return ((void *)0);
   151d8:	0005883a 	mov	r2,zero
   151dc:	00007b06 	br	153cc <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   151e0:	e0bffd17 	ldw	r2,-12(fp)
   151e4:	1000051e 	bne	r2,zero,151fc <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   151e8:	e0bfff17 	ldw	r2,-4(fp)
   151ec:	00c00104 	movi	r3,4
   151f0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   151f4:	0005883a 	mov	r2,zero
   151f8:	00007406 	br	153cc <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   151fc:	e0bffd17 	ldw	r2,-12(fp)
   15200:	10800003 	ldbu	r2,0(r2)
   15204:	10803fcc 	andi	r2,r2,255
   15208:	10800060 	cmpeqi	r2,r2,1
   1520c:	1000051e 	bne	r2,zero,15224 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15210:	e0bfff17 	ldw	r2,-4(fp)
   15214:	00c00044 	movi	r3,1
   15218:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1521c:	0005883a 	mov	r2,zero
   15220:	00006a06 	br	153cc <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   15224:	d0a7f803 	ldbu	r2,-24608(gp)
   15228:	10803fcc 	andi	r2,r2,255
   1522c:	10000526 	beq	r2,zero,15244 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   15230:	e0bfff17 	ldw	r2,-4(fp)
   15234:	00c00084 	movi	r3,2
   15238:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1523c:	0005883a 	mov	r2,zero
   15240:	00006206 	br	153cc <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   15244:	d0a7ea03 	ldbu	r2,-24664(gp)
   15248:	10803fcc 	andi	r2,r2,255
   1524c:	10000526 	beq	r2,zero,15264 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   15250:	e0bfff17 	ldw	r2,-4(fp)
   15254:	00c00344 	movi	r3,13
   15258:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1525c:	0005883a 	mov	r2,zero
   15260:	00005a06 	br	153cc <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15264:	0005303a 	rdctl	r2,status
   15268:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1526c:	e0fffc17 	ldw	r3,-16(fp)
   15270:	00bfff84 	movi	r2,-2
   15274:	1884703a 	and	r2,r3,r2
   15278:	1001703a 	wrctl	status,r2
  
  return context;
   1527c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15280:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
   15284:	e0bffd17 	ldw	r2,-12(fp)
   15288:	10800117 	ldw	r2,4(r2)
   1528c:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   15290:	e0bff617 	ldw	r2,-40(fp)
   15294:	10000a26 	beq	r2,zero,152c0 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   15298:	e0bffd17 	ldw	r2,-12(fp)
   1529c:	10000115 	stw	zero,4(r2)
   152a0:	e0bff717 	ldw	r2,-36(fp)
   152a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152a8:	e0bff817 	ldw	r2,-32(fp)
   152ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   152b0:	e0bfff17 	ldw	r2,-4(fp)
   152b4:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   152b8:	e0bff617 	ldw	r2,-40(fp)
   152bc:	00004306 	br	153cc <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   152c0:	d0a7f917 	ldw	r2,-24604(gp)
   152c4:	d0e7f917 	ldw	r3,-24604(gp)
   152c8:	18c00c03 	ldbu	r3,48(r3)
   152cc:	18c00094 	ori	r3,r3,2
   152d0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   152d4:	d0a7f917 	ldw	r2,-24604(gp)
   152d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   152dc:	d0a7f917 	ldw	r2,-24604(gp)
   152e0:	e0fffe0b 	ldhu	r3,-8(fp)
   152e4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   152e8:	e13ffd17 	ldw	r4,-12(fp)
   152ec:	00125c40 	call	125c4 <OS_EventTaskWait>
   152f0:	e0bff717 	ldw	r2,-36(fp)
   152f4:	e0bffb15 	stw	r2,-20(fp)
   152f8:	e0bffb17 	ldw	r2,-20(fp)
   152fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   15300:	0012e780 	call	12e78 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15304:	0005303a 	rdctl	r2,status
   15308:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1530c:	e0fff917 	ldw	r3,-28(fp)
   15310:	00bfff84 	movi	r2,-2
   15314:	1884703a 	and	r2,r3,r2
   15318:	1001703a 	wrctl	status,r2
  
  return context;
   1531c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   15320:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   15324:	d0a7f917 	ldw	r2,-24604(gp)
   15328:	10800c43 	ldbu	r2,49(r2)
   1532c:	10803fcc 	andi	r2,r2,255
   15330:	10000326 	beq	r2,zero,15340 <OSMboxPend+0x194>
   15334:	108000a0 	cmpeqi	r2,r2,2
   15338:	1000071e 	bne	r2,zero,15358 <OSMboxPend+0x1ac>
   1533c:	00000b06 	br	1536c <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   15340:	d0a7f917 	ldw	r2,-24604(gp)
   15344:	10800917 	ldw	r2,36(r2)
   15348:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
   1534c:	e0bfff17 	ldw	r2,-4(fp)
   15350:	10000005 	stb	zero,0(r2)
             break;
   15354:	00000e06 	br	15390 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   15358:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1535c:	e0bfff17 	ldw	r2,-4(fp)
   15360:	00c00384 	movi	r3,14
   15364:	10c00005 	stb	r3,0(r2)
             break;
   15368:	00000906 	br	15390 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   1536c:	d0a7f917 	ldw	r2,-24604(gp)
   15370:	e17ffd17 	ldw	r5,-12(fp)
   15374:	1009883a 	mov	r4,r2
   15378:	00128240 	call	12824 <OS_EventTaskRemove>
             pmsg = (void *)0;
   1537c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   15380:	e0bfff17 	ldw	r2,-4(fp)
   15384:	00c00284 	movi	r3,10
   15388:	10c00005 	stb	r3,0(r2)
             break;
   1538c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   15390:	d0a7f917 	ldw	r2,-24604(gp)
   15394:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   15398:	d0a7f917 	ldw	r2,-24604(gp)
   1539c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   153a0:	d0a7f917 	ldw	r2,-24604(gp)
   153a4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   153a8:	d0a7f917 	ldw	r2,-24604(gp)
   153ac:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   153b0:	d0a7f917 	ldw	r2,-24604(gp)
   153b4:	10000915 	stw	zero,36(r2)
   153b8:	e0bff717 	ldw	r2,-36(fp)
   153bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   153c0:	e0bffa17 	ldw	r2,-24(fp)
   153c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   153c8:	e0bff617 	ldw	r2,-40(fp)
}
   153cc:	e037883a 	mov	sp,fp
   153d0:	dfc00117 	ldw	ra,4(sp)
   153d4:	df000017 	ldw	fp,0(sp)
   153d8:	dec00204 	addi	sp,sp,8
   153dc:	f800283a 	ret

000153e0 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   153e0:	defff604 	addi	sp,sp,-40
   153e4:	dfc00915 	stw	ra,36(sp)
   153e8:	df000815 	stw	fp,32(sp)
   153ec:	df000804 	addi	fp,sp,32
   153f0:	e13ffd15 	stw	r4,-12(fp)
   153f4:	2805883a 	mov	r2,r5
   153f8:	e1bfff15 	stw	r6,-4(fp)
   153fc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15400:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15404:	e0bfff17 	ldw	r2,-4(fp)
   15408:	1000021e 	bne	r2,zero,15414 <OSMboxPendAbort+0x34>
        return (0);
   1540c:	0005883a 	mov	r2,zero
   15410:	00004906 	br	15538 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15414:	e0bffd17 	ldw	r2,-12(fp)
   15418:	1000051e 	bne	r2,zero,15430 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1541c:	e0bfff17 	ldw	r2,-4(fp)
   15420:	00c00104 	movi	r3,4
   15424:	10c00005 	stb	r3,0(r2)
        return (0);
   15428:	0005883a 	mov	r2,zero
   1542c:	00004206 	br	15538 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   15430:	e0bffd17 	ldw	r2,-12(fp)
   15434:	10800003 	ldbu	r2,0(r2)
   15438:	10803fcc 	andi	r2,r2,255
   1543c:	10800060 	cmpeqi	r2,r2,1
   15440:	1000051e 	bne	r2,zero,15458 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15444:	e0bfff17 	ldw	r2,-4(fp)
   15448:	00c00044 	movi	r3,1
   1544c:	10c00005 	stb	r3,0(r2)
        return (0);
   15450:	0005883a 	mov	r2,zero
   15454:	00003806 	br	15538 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15458:	0005303a 	rdctl	r2,status
   1545c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15460:	e0fffc17 	ldw	r3,-16(fp)
   15464:	00bfff84 	movi	r2,-2
   15468:	1884703a 	and	r2,r3,r2
   1546c:	1001703a 	wrctl	status,r2
  
  return context;
   15470:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15474:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   15478:	e0bffd17 	ldw	r2,-12(fp)
   1547c:	10800283 	ldbu	r2,10(r2)
   15480:	10803fcc 	andi	r2,r2,255
   15484:	10002526 	beq	r2,zero,1551c <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
   15488:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1548c:	e0bffe03 	ldbu	r2,-8(fp)
   15490:	10800060 	cmpeqi	r2,r2,1
   15494:	10000e26 	beq	r2,zero,154d0 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   15498:	00000806 	br	154bc <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   1549c:	01c00084 	movi	r7,2
   154a0:	01800084 	movi	r6,2
   154a4:	000b883a 	mov	r5,zero
   154a8:	e13ffd17 	ldw	r4,-12(fp)
   154ac:	001242c0 	call	1242c <OS_EventTaskRdy>
                     nbr_tasks++;
   154b0:	e0bff803 	ldbu	r2,-32(fp)
   154b4:	10800044 	addi	r2,r2,1
   154b8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   154bc:	e0bffd17 	ldw	r2,-12(fp)
   154c0:	10800283 	ldbu	r2,10(r2)
   154c4:	10803fcc 	andi	r2,r2,255
   154c8:	103ff41e 	bne	r2,zero,1549c <OSMboxPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   154cc:	00000906 	br	154f4 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   154d0:	01c00084 	movi	r7,2
   154d4:	01800084 	movi	r6,2
   154d8:	000b883a 	mov	r5,zero
   154dc:	e13ffd17 	ldw	r4,-12(fp)
   154e0:	001242c0 	call	1242c <OS_EventTaskRdy>
                 nbr_tasks++;
   154e4:	e0bff803 	ldbu	r2,-32(fp)
   154e8:	10800044 	addi	r2,r2,1
   154ec:	e0bff805 	stb	r2,-32(fp)
                 break;
   154f0:	0001883a 	nop
   154f4:	e0bff917 	ldw	r2,-28(fp)
   154f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   154fc:	e0bffa17 	ldw	r2,-24(fp)
   15500:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   15504:	0012e780 	call	12e78 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   15508:	e0bfff17 	ldw	r2,-4(fp)
   1550c:	00c00384 	movi	r3,14
   15510:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   15514:	e0bff803 	ldbu	r2,-32(fp)
   15518:	00000706 	br	15538 <OSMboxPendAbort+0x158>
   1551c:	e0bff917 	ldw	r2,-28(fp)
   15520:	e0bffb15 	stw	r2,-20(fp)
   15524:	e0bffb17 	ldw	r2,-20(fp)
   15528:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1552c:	e0bfff17 	ldw	r2,-4(fp)
   15530:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   15534:	0005883a 	mov	r2,zero
}
   15538:	e037883a 	mov	sp,fp
   1553c:	dfc00117 	ldw	ra,4(sp)
   15540:	df000017 	ldw	fp,0(sp)
   15544:	dec00204 	addi	sp,sp,8
   15548:	f800283a 	ret

0001554c <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   1554c:	defff704 	addi	sp,sp,-36
   15550:	dfc00815 	stw	ra,32(sp)
   15554:	df000715 	stw	fp,28(sp)
   15558:	df000704 	addi	fp,sp,28
   1555c:	e13ffe15 	stw	r4,-8(fp)
   15560:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15564:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15568:	e0bffe17 	ldw	r2,-8(fp)
   1556c:	1000021e 	bne	r2,zero,15578 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   15570:	00800104 	movi	r2,4
   15574:	00003406 	br	15648 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   15578:	e0bfff17 	ldw	r2,-4(fp)
   1557c:	1000021e 	bne	r2,zero,15588 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
   15580:	008000c4 	movi	r2,3
   15584:	00003006 	br	15648 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   15588:	e0bffe17 	ldw	r2,-8(fp)
   1558c:	10800003 	ldbu	r2,0(r2)
   15590:	10803fcc 	andi	r2,r2,255
   15594:	10800060 	cmpeqi	r2,r2,1
   15598:	1000021e 	bne	r2,zero,155a4 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
   1559c:	00800044 	movi	r2,1
   155a0:	00002906 	br	15648 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   155a4:	0005303a 	rdctl	r2,status
   155a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   155ac:	e0fffd17 	ldw	r3,-12(fp)
   155b0:	00bfff84 	movi	r2,-2
   155b4:	1884703a 	and	r2,r3,r2
   155b8:	1001703a 	wrctl	status,r2
  
  return context;
   155bc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   155c0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   155c4:	e0bffe17 	ldw	r2,-8(fp)
   155c8:	10800283 	ldbu	r2,10(r2)
   155cc:	10803fcc 	andi	r2,r2,255
   155d0:	10000c26 	beq	r2,zero,15604 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   155d4:	000f883a 	mov	r7,zero
   155d8:	01800084 	movi	r6,2
   155dc:	e17fff17 	ldw	r5,-4(fp)
   155e0:	e13ffe17 	ldw	r4,-8(fp)
   155e4:	001242c0 	call	1242c <OS_EventTaskRdy>
   155e8:	e0bff917 	ldw	r2,-28(fp)
   155ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   155f0:	e0bffa17 	ldw	r2,-24(fp)
   155f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   155f8:	0012e780 	call	12e78 <OS_Sched>
        return (OS_ERR_NONE);
   155fc:	0005883a 	mov	r2,zero
   15600:	00001106 	br	15648 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   15604:	e0bffe17 	ldw	r2,-8(fp)
   15608:	10800117 	ldw	r2,4(r2)
   1560c:	10000626 	beq	r2,zero,15628 <OSMboxPost+0xdc>
   15610:	e0bff917 	ldw	r2,-28(fp)
   15614:	e0bffb15 	stw	r2,-20(fp)
   15618:	e0bffb17 	ldw	r2,-20(fp)
   1561c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   15620:	00800504 	movi	r2,20
   15624:	00000806 	br	15648 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   15628:	e0bffe17 	ldw	r2,-8(fp)
   1562c:	e0ffff17 	ldw	r3,-4(fp)
   15630:	10c00115 	stw	r3,4(r2)
   15634:	e0bff917 	ldw	r2,-28(fp)
   15638:	e0bffc15 	stw	r2,-16(fp)
   1563c:	e0bffc17 	ldw	r2,-16(fp)
   15640:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15644:	0005883a 	mov	r2,zero
}
   15648:	e037883a 	mov	sp,fp
   1564c:	dfc00117 	ldw	ra,4(sp)
   15650:	df000017 	ldw	fp,0(sp)
   15654:	dec00204 	addi	sp,sp,8
   15658:	f800283a 	ret

0001565c <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   1565c:	defff604 	addi	sp,sp,-40
   15660:	dfc00915 	stw	ra,36(sp)
   15664:	df000815 	stw	fp,32(sp)
   15668:	df000804 	addi	fp,sp,32
   1566c:	e13ffd15 	stw	r4,-12(fp)
   15670:	e17ffe15 	stw	r5,-8(fp)
   15674:	3005883a 	mov	r2,r6
   15678:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1567c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15680:	e0bffd17 	ldw	r2,-12(fp)
   15684:	1000021e 	bne	r2,zero,15690 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   15688:	00800104 	movi	r2,4
   1568c:	00004506 	br	157a4 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   15690:	e0bffe17 	ldw	r2,-8(fp)
   15694:	1000021e 	bne	r2,zero,156a0 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
   15698:	008000c4 	movi	r2,3
   1569c:	00004106 	br	157a4 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   156a0:	e0bffd17 	ldw	r2,-12(fp)
   156a4:	10800003 	ldbu	r2,0(r2)
   156a8:	10803fcc 	andi	r2,r2,255
   156ac:	10800060 	cmpeqi	r2,r2,1
   156b0:	1000021e 	bne	r2,zero,156bc <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
   156b4:	00800044 	movi	r2,1
   156b8:	00003a06 	br	157a4 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   156bc:	0005303a 	rdctl	r2,status
   156c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156c4:	e0fffc17 	ldw	r3,-16(fp)
   156c8:	00bfff84 	movi	r2,-2
   156cc:	1884703a 	and	r2,r3,r2
   156d0:	1001703a 	wrctl	status,r2
  
  return context;
   156d4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   156d8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   156dc:	e0bffd17 	ldw	r2,-12(fp)
   156e0:	10800283 	ldbu	r2,10(r2)
   156e4:	10803fcc 	andi	r2,r2,255
   156e8:	10001d26 	beq	r2,zero,15760 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   156ec:	e0bfff03 	ldbu	r2,-4(fp)
   156f0:	1080004c 	andi	r2,r2,1
   156f4:	10000b26 	beq	r2,zero,15724 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   156f8:	00000506 	br	15710 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   156fc:	000f883a 	mov	r7,zero
   15700:	01800084 	movi	r6,2
   15704:	e17ffe17 	ldw	r5,-8(fp)
   15708:	e13ffd17 	ldw	r4,-12(fp)
   1570c:	001242c0 	call	1242c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   15710:	e0bffd17 	ldw	r2,-12(fp)
   15714:	10800283 	ldbu	r2,10(r2)
   15718:	10803fcc 	andi	r2,r2,255
   1571c:	103ff71e 	bne	r2,zero,156fc <OSMboxPostOpt+0xa0>
   15720:	00000506 	br	15738 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   15724:	000f883a 	mov	r7,zero
   15728:	01800084 	movi	r6,2
   1572c:	e17ffe17 	ldw	r5,-8(fp)
   15730:	e13ffd17 	ldw	r4,-12(fp)
   15734:	001242c0 	call	1242c <OS_EventTaskRdy>
   15738:	e0bff817 	ldw	r2,-32(fp)
   1573c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15740:	e0bff917 	ldw	r2,-28(fp)
   15744:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   15748:	e0bfff03 	ldbu	r2,-4(fp)
   1574c:	1080010c 	andi	r2,r2,4
   15750:	1000011e 	bne	r2,zero,15758 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
   15754:	0012e780 	call	12e78 <OS_Sched>
        }
        return (OS_ERR_NONE);
   15758:	0005883a 	mov	r2,zero
   1575c:	00001106 	br	157a4 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   15760:	e0bffd17 	ldw	r2,-12(fp)
   15764:	10800117 	ldw	r2,4(r2)
   15768:	10000626 	beq	r2,zero,15784 <OSMboxPostOpt+0x128>
   1576c:	e0bff817 	ldw	r2,-32(fp)
   15770:	e0bffa15 	stw	r2,-24(fp)
   15774:	e0bffa17 	ldw	r2,-24(fp)
   15778:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   1577c:	00800504 	movi	r2,20
   15780:	00000806 	br	157a4 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   15784:	e0bffd17 	ldw	r2,-12(fp)
   15788:	e0fffe17 	ldw	r3,-8(fp)
   1578c:	10c00115 	stw	r3,4(r2)
   15790:	e0bff817 	ldw	r2,-32(fp)
   15794:	e0bffb15 	stw	r2,-20(fp)
   15798:	e0bffb17 	ldw	r2,-20(fp)
   1579c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   157a0:	0005883a 	mov	r2,zero
}
   157a4:	e037883a 	mov	sp,fp
   157a8:	dfc00117 	ldw	ra,4(sp)
   157ac:	df000017 	ldw	fp,0(sp)
   157b0:	dec00204 	addi	sp,sp,8
   157b4:	f800283a 	ret

000157b8 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   157b8:	defff704 	addi	sp,sp,-36
   157bc:	df000815 	stw	fp,32(sp)
   157c0:	df000804 	addi	fp,sp,32
   157c4:	e13ffe15 	stw	r4,-8(fp)
   157c8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   157cc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   157d0:	e0bffe17 	ldw	r2,-8(fp)
   157d4:	1000021e 	bne	r2,zero,157e0 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   157d8:	00800104 	movi	r2,4
   157dc:	00003606 	br	158b8 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   157e0:	e0bfff17 	ldw	r2,-4(fp)
   157e4:	1000021e 	bne	r2,zero,157f0 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   157e8:	00800244 	movi	r2,9
   157ec:	00003206 	br	158b8 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   157f0:	e0bffe17 	ldw	r2,-8(fp)
   157f4:	10800003 	ldbu	r2,0(r2)
   157f8:	10803fcc 	andi	r2,r2,255
   157fc:	10800060 	cmpeqi	r2,r2,1
   15800:	1000021e 	bne	r2,zero,1580c <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   15804:	00800044 	movi	r2,1
   15808:	00002b06 	br	158b8 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1580c:	0005303a 	rdctl	r2,status
   15810:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15814:	e0fffd17 	ldw	r3,-12(fp)
   15818:	00bfff84 	movi	r2,-2
   1581c:	1884703a 	and	r2,r3,r2
   15820:	1001703a 	wrctl	status,r2
  
  return context;
   15824:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15828:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   1582c:	e0bffe17 	ldw	r2,-8(fp)
   15830:	10c00283 	ldbu	r3,10(r2)
   15834:	e0bfff17 	ldw	r2,-4(fp)
   15838:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   1583c:	e0bffe17 	ldw	r2,-8(fp)
   15840:	108002c4 	addi	r2,r2,11
   15844:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   15848:	e0bfff17 	ldw	r2,-4(fp)
   1584c:	10800104 	addi	r2,r2,4
   15850:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15854:	e03ff805 	stb	zero,-32(fp)
   15858:	00000b06 	br	15888 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
   1585c:	e0bffa17 	ldw	r2,-24(fp)
   15860:	10c00044 	addi	r3,r2,1
   15864:	e0fffa15 	stw	r3,-24(fp)
   15868:	e0fff917 	ldw	r3,-28(fp)
   1586c:	19000044 	addi	r4,r3,1
   15870:	e13ff915 	stw	r4,-28(fp)
   15874:	18c00003 	ldbu	r3,0(r3)
   15878:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1587c:	e0bff803 	ldbu	r2,-32(fp)
   15880:	10800044 	addi	r2,r2,1
   15884:	e0bff805 	stb	r2,-32(fp)
   15888:	e0bff803 	ldbu	r2,-32(fp)
   1588c:	108000f0 	cmpltui	r2,r2,3
   15890:	103ff21e 	bne	r2,zero,1585c <OSMboxQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   15894:	e0bffe17 	ldw	r2,-8(fp)
   15898:	10c00117 	ldw	r3,4(r2)
   1589c:	e0bfff17 	ldw	r2,-4(fp)
   158a0:	10c00015 	stw	r3,0(r2)
   158a4:	e0bffb17 	ldw	r2,-20(fp)
   158a8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   158ac:	e0bffc17 	ldw	r2,-16(fp)
   158b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   158b4:	0005883a 	mov	r2,zero
}
   158b8:	e037883a 	mov	sp,fp
   158bc:	df000017 	ldw	fp,0(sp)
   158c0:	dec00104 	addi	sp,sp,4
   158c4:	f800283a 	ret

000158c8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   158c8:	defff404 	addi	sp,sp,-48
   158cc:	df000b15 	stw	fp,44(sp)
   158d0:	df000b04 	addi	fp,sp,44
   158d4:	e13ffc15 	stw	r4,-16(fp)
   158d8:	e17ffd15 	stw	r5,-12(fp)
   158dc:	e1bffe15 	stw	r6,-8(fp)
   158e0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   158e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   158e8:	e0bfff17 	ldw	r2,-4(fp)
   158ec:	1000021e 	bne	r2,zero,158f8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   158f0:	0005883a 	mov	r2,zero
   158f4:	00006506 	br	15a8c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   158f8:	e0bffc17 	ldw	r2,-16(fp)
   158fc:	1000051e 	bne	r2,zero,15914 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   15900:	e0bfff17 	ldw	r2,-4(fp)
   15904:	00c01884 	movi	r3,98
   15908:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1590c:	0005883a 	mov	r2,zero
   15910:	00005e06 	br	15a8c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   15914:	e0bffc17 	ldw	r2,-16(fp)
   15918:	108000cc 	andi	r2,r2,3
   1591c:	10000526 	beq	r2,zero,15934 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   15920:	e0bfff17 	ldw	r2,-4(fp)
   15924:	00c01884 	movi	r3,98
   15928:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1592c:	0005883a 	mov	r2,zero
   15930:	00005606 	br	15a8c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   15934:	e0bffd17 	ldw	r2,-12(fp)
   15938:	108000a8 	cmpgeui	r2,r2,2
   1593c:	1000051e 	bne	r2,zero,15954 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   15940:	e0bfff17 	ldw	r2,-4(fp)
   15944:	00c016c4 	movi	r3,91
   15948:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1594c:	0005883a 	mov	r2,zero
   15950:	00004e06 	br	15a8c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   15954:	e0bffe17 	ldw	r2,-8(fp)
   15958:	10800128 	cmpgeui	r2,r2,4
   1595c:	1000051e 	bne	r2,zero,15974 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   15960:	e0bfff17 	ldw	r2,-4(fp)
   15964:	00c01704 	movi	r3,92
   15968:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1596c:	0005883a 	mov	r2,zero
   15970:	00004606 	br	15a8c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15974:	0005303a 	rdctl	r2,status
   15978:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1597c:	e0fffb17 	ldw	r3,-20(fp)
   15980:	00bfff84 	movi	r2,-2
   15984:	1884703a 	and	r2,r3,r2
   15988:	1001703a 	wrctl	status,r2
  
  return context;
   1598c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15990:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   15994:	d0a7f317 	ldw	r2,-24628(gp)
   15998:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   1599c:	d0a7f317 	ldw	r2,-24628(gp)
   159a0:	10000326 	beq	r2,zero,159b0 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   159a4:	d0a7f317 	ldw	r2,-24628(gp)
   159a8:	10800117 	ldw	r2,4(r2)
   159ac:	d0a7f315 	stw	r2,-24628(gp)
   159b0:	e0bff817 	ldw	r2,-32(fp)
   159b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   159b8:	e0bff917 	ldw	r2,-28(fp)
   159bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   159c0:	e0bffa17 	ldw	r2,-24(fp)
   159c4:	1000051e 	bne	r2,zero,159dc <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   159c8:	e0bfff17 	ldw	r2,-4(fp)
   159cc:	00c01684 	movi	r3,90
   159d0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   159d4:	0005883a 	mov	r2,zero
   159d8:	00002c06 	br	15a8c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   159dc:	e0bffc17 	ldw	r2,-16(fp)
   159e0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   159e4:	e0fffc17 	ldw	r3,-16(fp)
   159e8:	e0bffe17 	ldw	r2,-8(fp)
   159ec:	1885883a 	add	r2,r3,r2
   159f0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   159f4:	e03ff715 	stw	zero,-36(fp)
   159f8:	00000c06 	br	15a2c <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   159fc:	e0bff617 	ldw	r2,-40(fp)
   15a00:	e0fff517 	ldw	r3,-44(fp)
   15a04:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   15a08:	e0bff517 	ldw	r2,-44(fp)
   15a0c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   15a10:	e0fff517 	ldw	r3,-44(fp)
   15a14:	e0bffe17 	ldw	r2,-8(fp)
   15a18:	1885883a 	add	r2,r3,r2
   15a1c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   15a20:	e0bff717 	ldw	r2,-36(fp)
   15a24:	10800044 	addi	r2,r2,1
   15a28:	e0bff715 	stw	r2,-36(fp)
   15a2c:	e0bffd17 	ldw	r2,-12(fp)
   15a30:	10bfffc4 	addi	r2,r2,-1
   15a34:	e0fff717 	ldw	r3,-36(fp)
   15a38:	18bff036 	bltu	r3,r2,159fc <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   15a3c:	e0bff617 	ldw	r2,-40(fp)
   15a40:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   15a44:	e0bffa17 	ldw	r2,-24(fp)
   15a48:	e0fffc17 	ldw	r3,-16(fp)
   15a4c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   15a50:	e0bffa17 	ldw	r2,-24(fp)
   15a54:	e0fffc17 	ldw	r3,-16(fp)
   15a58:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   15a5c:	e0bffa17 	ldw	r2,-24(fp)
   15a60:	e0fffd17 	ldw	r3,-12(fp)
   15a64:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   15a68:	e0bffa17 	ldw	r2,-24(fp)
   15a6c:	e0fffd17 	ldw	r3,-12(fp)
   15a70:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   15a74:	e0bffa17 	ldw	r2,-24(fp)
   15a78:	e0fffe17 	ldw	r3,-8(fp)
   15a7c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   15a80:	e0bfff17 	ldw	r2,-4(fp)
   15a84:	10000005 	stb	zero,0(r2)
    return (pmem);
   15a88:	e0bffa17 	ldw	r2,-24(fp)
}
   15a8c:	e037883a 	mov	sp,fp
   15a90:	df000017 	ldw	fp,0(sp)
   15a94:	dec00104 	addi	sp,sp,4
   15a98:	f800283a 	ret

00015a9c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   15a9c:	defff804 	addi	sp,sp,-32
   15aa0:	df000715 	stw	fp,28(sp)
   15aa4:	df000704 	addi	fp,sp,28
   15aa8:	e13ffe15 	stw	r4,-8(fp)
   15aac:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15ab0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   15ab4:	e0bfff17 	ldw	r2,-4(fp)
   15ab8:	1000021e 	bne	r2,zero,15ac4 <OSMemGet+0x28>
        return ((void *)0);
   15abc:	0005883a 	mov	r2,zero
   15ac0:	00002e06 	br	15b7c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   15ac4:	e0bffe17 	ldw	r2,-8(fp)
   15ac8:	1000051e 	bne	r2,zero,15ae0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   15acc:	e0bfff17 	ldw	r2,-4(fp)
   15ad0:	00c01804 	movi	r3,96
   15ad4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   15ad8:	0005883a 	mov	r2,zero
   15adc:	00002706 	br	15b7c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ae0:	0005303a 	rdctl	r2,status
   15ae4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ae8:	e0fffd17 	ldw	r3,-12(fp)
   15aec:	00bfff84 	movi	r2,-2
   15af0:	1884703a 	and	r2,r3,r2
   15af4:	1001703a 	wrctl	status,r2
  
  return context;
   15af8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15afc:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   15b00:	e0bffe17 	ldw	r2,-8(fp)
   15b04:	10800417 	ldw	r2,16(r2)
   15b08:	10001426 	beq	r2,zero,15b5c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   15b0c:	e0bffe17 	ldw	r2,-8(fp)
   15b10:	10800117 	ldw	r2,4(r2)
   15b14:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   15b18:	e0bffb17 	ldw	r2,-20(fp)
   15b1c:	10c00017 	ldw	r3,0(r2)
   15b20:	e0bffe17 	ldw	r2,-8(fp)
   15b24:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   15b28:	e0bffe17 	ldw	r2,-8(fp)
   15b2c:	10800417 	ldw	r2,16(r2)
   15b30:	10ffffc4 	addi	r3,r2,-1
   15b34:	e0bffe17 	ldw	r2,-8(fp)
   15b38:	10c00415 	stw	r3,16(r2)
   15b3c:	e0bff917 	ldw	r2,-28(fp)
   15b40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b44:	e0bffa17 	ldw	r2,-24(fp)
   15b48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   15b4c:	e0bfff17 	ldw	r2,-4(fp)
   15b50:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   15b54:	e0bffb17 	ldw	r2,-20(fp)
   15b58:	00000806 	br	15b7c <OSMemGet+0xe0>
   15b5c:	e0bff917 	ldw	r2,-28(fp)
   15b60:	e0bffc15 	stw	r2,-16(fp)
   15b64:	e0bffc17 	ldw	r2,-16(fp)
   15b68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   15b6c:	e0bfff17 	ldw	r2,-4(fp)
   15b70:	00c01744 	movi	r3,93
   15b74:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   15b78:	0005883a 	mov	r2,zero
}
   15b7c:	e037883a 	mov	sp,fp
   15b80:	df000017 	ldw	fp,0(sp)
   15b84:	dec00104 	addi	sp,sp,4
   15b88:	f800283a 	ret

00015b8c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   15b8c:	defff704 	addi	sp,sp,-36
   15b90:	dfc00815 	stw	ra,32(sp)
   15b94:	df000715 	stw	fp,28(sp)
   15b98:	df000704 	addi	fp,sp,28
   15b9c:	e13ffd15 	stw	r4,-12(fp)
   15ba0:	e17ffe15 	stw	r5,-8(fp)
   15ba4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15ba8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15bac:	e0bfff17 	ldw	r2,-4(fp)
   15bb0:	1000021e 	bne	r2,zero,15bbc <OSMemNameGet+0x30>
        return (0);
   15bb4:	0005883a 	mov	r2,zero
   15bb8:	00002b06 	br	15c68 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   15bbc:	e0bffd17 	ldw	r2,-12(fp)
   15bc0:	1000051e 	bne	r2,zero,15bd8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   15bc4:	e0bfff17 	ldw	r2,-4(fp)
   15bc8:	00c01804 	movi	r3,96
   15bcc:	10c00005 	stb	r3,0(r2)
        return (0);
   15bd0:	0005883a 	mov	r2,zero
   15bd4:	00002406 	br	15c68 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   15bd8:	e0bffe17 	ldw	r2,-8(fp)
   15bdc:	1000051e 	bne	r2,zero,15bf4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   15be0:	e0bfff17 	ldw	r2,-4(fp)
   15be4:	00c00304 	movi	r3,12
   15be8:	10c00005 	stb	r3,0(r2)
        return (0);
   15bec:	0005883a 	mov	r2,zero
   15bf0:	00001d06 	br	15c68 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15bf4:	d0a7f803 	ldbu	r2,-24608(gp)
   15bf8:	10803fcc 	andi	r2,r2,255
   15bfc:	10000526 	beq	r2,zero,15c14 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   15c00:	e0bfff17 	ldw	r2,-4(fp)
   15c04:	00c00444 	movi	r3,17
   15c08:	10c00005 	stb	r3,0(r2)
        return (0);
   15c0c:	0005883a 	mov	r2,zero
   15c10:	00001506 	br	15c68 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15c14:	0005303a 	rdctl	r2,status
   15c18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15c1c:	e0fffb17 	ldw	r3,-20(fp)
   15c20:	00bfff84 	movi	r2,-2
   15c24:	1884703a 	and	r2,r3,r2
   15c28:	1001703a 	wrctl	status,r2
  
  return context;
   15c2c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   15c30:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   15c34:	e0bffd17 	ldw	r2,-12(fp)
   15c38:	10800504 	addi	r2,r2,20
   15c3c:	100b883a 	mov	r5,r2
   15c40:	e13ffe17 	ldw	r4,-8(fp)
   15c44:	0012fbc0 	call	12fbc <OS_StrCopy>
   15c48:	e0bffa05 	stb	r2,-24(fp)
   15c4c:	e0bff917 	ldw	r2,-28(fp)
   15c50:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15c54:	e0bffc17 	ldw	r2,-16(fp)
   15c58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15c5c:	e0bfff17 	ldw	r2,-4(fp)
   15c60:	10000005 	stb	zero,0(r2)
    return (len);
   15c64:	e0bffa03 	ldbu	r2,-24(fp)
}
   15c68:	e037883a 	mov	sp,fp
   15c6c:	dfc00117 	ldw	ra,4(sp)
   15c70:	df000017 	ldw	fp,0(sp)
   15c74:	dec00204 	addi	sp,sp,8
   15c78:	f800283a 	ret

00015c7c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   15c7c:	defff604 	addi	sp,sp,-40
   15c80:	dfc00915 	stw	ra,36(sp)
   15c84:	df000815 	stw	fp,32(sp)
   15c88:	df000804 	addi	fp,sp,32
   15c8c:	e13ffd15 	stw	r4,-12(fp)
   15c90:	e17ffe15 	stw	r5,-8(fp)
   15c94:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15c98:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15c9c:	e0bfff17 	ldw	r2,-4(fp)
   15ca0:	10003526 	beq	r2,zero,15d78 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   15ca4:	e0bffd17 	ldw	r2,-12(fp)
   15ca8:	1000041e 	bne	r2,zero,15cbc <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   15cac:	e0bfff17 	ldw	r2,-4(fp)
   15cb0:	00c01804 	movi	r3,96
   15cb4:	10c00005 	stb	r3,0(r2)
        return;
   15cb8:	00003006 	br	15d7c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   15cbc:	e0bffe17 	ldw	r2,-8(fp)
   15cc0:	1000041e 	bne	r2,zero,15cd4 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   15cc4:	e0bfff17 	ldw	r2,-4(fp)
   15cc8:	00c00304 	movi	r3,12
   15ccc:	10c00005 	stb	r3,0(r2)
        return;
   15cd0:	00002a06 	br	15d7c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15cd4:	d0a7f803 	ldbu	r2,-24608(gp)
   15cd8:	10803fcc 	andi	r2,r2,255
   15cdc:	10000426 	beq	r2,zero,15cf0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   15ce0:	e0bfff17 	ldw	r2,-4(fp)
   15ce4:	00c00484 	movi	r3,18
   15ce8:	10c00005 	stb	r3,0(r2)
        return;
   15cec:	00002306 	br	15d7c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15cf0:	0005303a 	rdctl	r2,status
   15cf4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15cf8:	e0fffc17 	ldw	r3,-16(fp)
   15cfc:	00bfff84 	movi	r2,-2
   15d00:	1884703a 	and	r2,r3,r2
   15d04:	1001703a 	wrctl	status,r2
  
  return context;
   15d08:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15d0c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   15d10:	e13ffe17 	ldw	r4,-8(fp)
   15d14:	00130300 	call	13030 <OS_StrLen>
   15d18:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   15d1c:	e0bffa03 	ldbu	r2,-24(fp)
   15d20:	10800830 	cmpltui	r2,r2,32
   15d24:	1000081e 	bne	r2,zero,15d48 <OSMemNameSet+0xcc>
   15d28:	e0bff817 	ldw	r2,-32(fp)
   15d2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d30:	e0bff917 	ldw	r2,-28(fp)
   15d34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   15d38:	e0bfff17 	ldw	r2,-4(fp)
   15d3c:	00c018c4 	movi	r3,99
   15d40:	10c00005 	stb	r3,0(r2)
        return;
   15d44:	00000d06 	br	15d7c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   15d48:	e0bffd17 	ldw	r2,-12(fp)
   15d4c:	10800504 	addi	r2,r2,20
   15d50:	e17ffe17 	ldw	r5,-8(fp)
   15d54:	1009883a 	mov	r4,r2
   15d58:	0012fbc0 	call	12fbc <OS_StrCopy>
   15d5c:	e0bff817 	ldw	r2,-32(fp)
   15d60:	e0bffb15 	stw	r2,-20(fp)
   15d64:	e0bffb17 	ldw	r2,-20(fp)
   15d68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15d6c:	e0bfff17 	ldw	r2,-4(fp)
   15d70:	10000005 	stb	zero,0(r2)
   15d74:	00000106 	br	15d7c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   15d78:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   15d7c:	e037883a 	mov	sp,fp
   15d80:	dfc00117 	ldw	ra,4(sp)
   15d84:	df000017 	ldw	fp,0(sp)
   15d88:	dec00204 	addi	sp,sp,8
   15d8c:	f800283a 	ret

00015d90 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   15d90:	defff904 	addi	sp,sp,-28
   15d94:	df000615 	stw	fp,24(sp)
   15d98:	df000604 	addi	fp,sp,24
   15d9c:	e13ffe15 	stw	r4,-8(fp)
   15da0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15da4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   15da8:	e0bffe17 	ldw	r2,-8(fp)
   15dac:	1000021e 	bne	r2,zero,15db8 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   15db0:	00801804 	movi	r2,96
   15db4:	00002806 	br	15e58 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   15db8:	e0bfff17 	ldw	r2,-4(fp)
   15dbc:	1000021e 	bne	r2,zero,15dc8 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   15dc0:	008017c4 	movi	r2,95
   15dc4:	00002406 	br	15e58 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15dc8:	0005303a 	rdctl	r2,status
   15dcc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15dd0:	e0fffd17 	ldw	r3,-12(fp)
   15dd4:	00bfff84 	movi	r2,-2
   15dd8:	1884703a 	and	r2,r3,r2
   15ddc:	1001703a 	wrctl	status,r2
  
  return context;
   15de0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15de4:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   15de8:	e0bffe17 	ldw	r2,-8(fp)
   15dec:	10c00417 	ldw	r3,16(r2)
   15df0:	e0bffe17 	ldw	r2,-8(fp)
   15df4:	10800317 	ldw	r2,12(r2)
   15df8:	18800636 	bltu	r3,r2,15e14 <OSMemPut+0x84>
   15dfc:	e0bffa17 	ldw	r2,-24(fp)
   15e00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15e04:	e0bffb17 	ldw	r2,-20(fp)
   15e08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   15e0c:	00801784 	movi	r2,94
   15e10:	00001106 	br	15e58 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   15e14:	e0bffe17 	ldw	r2,-8(fp)
   15e18:	10c00117 	ldw	r3,4(r2)
   15e1c:	e0bfff17 	ldw	r2,-4(fp)
   15e20:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   15e24:	e0bffe17 	ldw	r2,-8(fp)
   15e28:	e0ffff17 	ldw	r3,-4(fp)
   15e2c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   15e30:	e0bffe17 	ldw	r2,-8(fp)
   15e34:	10800417 	ldw	r2,16(r2)
   15e38:	10c00044 	addi	r3,r2,1
   15e3c:	e0bffe17 	ldw	r2,-8(fp)
   15e40:	10c00415 	stw	r3,16(r2)
   15e44:	e0bffa17 	ldw	r2,-24(fp)
   15e48:	e0bffc15 	stw	r2,-16(fp)
   15e4c:	e0bffc17 	ldw	r2,-16(fp)
   15e50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   15e54:	0005883a 	mov	r2,zero
}
   15e58:	e037883a 	mov	sp,fp
   15e5c:	df000017 	ldw	fp,0(sp)
   15e60:	dec00104 	addi	sp,sp,4
   15e64:	f800283a 	ret

00015e68 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   15e68:	defffa04 	addi	sp,sp,-24
   15e6c:	df000515 	stw	fp,20(sp)
   15e70:	df000504 	addi	fp,sp,20
   15e74:	e13ffe15 	stw	r4,-8(fp)
   15e78:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15e7c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   15e80:	e0bffe17 	ldw	r2,-8(fp)
   15e84:	1000021e 	bne	r2,zero,15e90 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   15e88:	00801804 	movi	r2,96
   15e8c:	00002c06 	br	15f40 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   15e90:	e0bfff17 	ldw	r2,-4(fp)
   15e94:	1000021e 	bne	r2,zero,15ea0 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   15e98:	00801844 	movi	r2,97
   15e9c:	00002806 	br	15f40 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ea0:	0005303a 	rdctl	r2,status
   15ea4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ea8:	e0fffc17 	ldw	r3,-16(fp)
   15eac:	00bfff84 	movi	r2,-2
   15eb0:	1884703a 	and	r2,r3,r2
   15eb4:	1001703a 	wrctl	status,r2
  
  return context;
   15eb8:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15ebc:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   15ec0:	e0bffe17 	ldw	r2,-8(fp)
   15ec4:	10c00017 	ldw	r3,0(r2)
   15ec8:	e0bfff17 	ldw	r2,-4(fp)
   15ecc:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   15ed0:	e0bffe17 	ldw	r2,-8(fp)
   15ed4:	10c00117 	ldw	r3,4(r2)
   15ed8:	e0bfff17 	ldw	r2,-4(fp)
   15edc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   15ee0:	e0bffe17 	ldw	r2,-8(fp)
   15ee4:	10c00217 	ldw	r3,8(r2)
   15ee8:	e0bfff17 	ldw	r2,-4(fp)
   15eec:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   15ef0:	e0bffe17 	ldw	r2,-8(fp)
   15ef4:	10c00317 	ldw	r3,12(r2)
   15ef8:	e0bfff17 	ldw	r2,-4(fp)
   15efc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   15f00:	e0bffe17 	ldw	r2,-8(fp)
   15f04:	10c00417 	ldw	r3,16(r2)
   15f08:	e0bfff17 	ldw	r2,-4(fp)
   15f0c:	10c00415 	stw	r3,16(r2)
   15f10:	e0bffb17 	ldw	r2,-20(fp)
   15f14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f18:	e0bffd17 	ldw	r2,-12(fp)
   15f1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   15f20:	e0bfff17 	ldw	r2,-4(fp)
   15f24:	10c00317 	ldw	r3,12(r2)
   15f28:	e0bfff17 	ldw	r2,-4(fp)
   15f2c:	10800417 	ldw	r2,16(r2)
   15f30:	1887c83a 	sub	r3,r3,r2
   15f34:	e0bfff17 	ldw	r2,-4(fp)
   15f38:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   15f3c:	0005883a 	mov	r2,zero
}
   15f40:	e037883a 	mov	sp,fp
   15f44:	df000017 	ldw	fp,0(sp)
   15f48:	dec00104 	addi	sp,sp,4
   15f4c:	f800283a 	ret

00015f50 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   15f50:	defffc04 	addi	sp,sp,-16
   15f54:	dfc00315 	stw	ra,12(sp)
   15f58:	df000215 	stw	fp,8(sp)
   15f5c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   15f60:	01430c04 	movi	r5,3120
   15f64:	010000f4 	movhi	r4,3
   15f68:	21286904 	addi	r4,r4,-24156
   15f6c:	0012dbc0 	call	12dbc <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   15f70:	008000f4 	movhi	r2,3
   15f74:	10a86904 	addi	r2,r2,-24156
   15f78:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   15f7c:	e03fff0d 	sth	zero,-4(fp)
   15f80:	00001306 	br	15fd0 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   15f84:	e0bfff0b 	ldhu	r2,-4(fp)
   15f88:	10800044 	addi	r2,r2,1
   15f8c:	10c00d24 	muli	r3,r2,52
   15f90:	008000f4 	movhi	r2,3
   15f94:	10a86904 	addi	r2,r2,-24156
   15f98:	1887883a 	add	r3,r3,r2
   15f9c:	e0bffe17 	ldw	r2,-8(fp)
   15fa0:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   15fa4:	e0bffe17 	ldw	r2,-8(fp)
   15fa8:	00c00fc4 	movi	r3,63
   15fac:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   15fb0:	e0bffe17 	ldw	r2,-8(fp)
   15fb4:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   15fb8:	e0bffe17 	ldw	r2,-8(fp)
   15fbc:	10800d04 	addi	r2,r2,52
   15fc0:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   15fc4:	e0bfff0b 	ldhu	r2,-4(fp)
   15fc8:	10800044 	addi	r2,r2,1
   15fcc:	e0bfff0d 	sth	r2,-4(fp)
   15fd0:	e0bfff0b 	ldhu	r2,-4(fp)
   15fd4:	10800ef0 	cmpltui	r2,r2,59
   15fd8:	103fea1e 	bne	r2,zero,15f84 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   15fdc:	e0bffe17 	ldw	r2,-8(fp)
   15fe0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   15fe4:	e0bffe17 	ldw	r2,-8(fp)
   15fe8:	00c00fc4 	movi	r3,63
   15fec:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   15ff0:	e0bffe17 	ldw	r2,-8(fp)
   15ff4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   15ff8:	008000f4 	movhi	r2,3
   15ffc:	10a86904 	addi	r2,r2,-24156
   16000:	d0a7f315 	stw	r2,-24628(gp)
#endif
}
   16004:	0001883a 	nop
   16008:	e037883a 	mov	sp,fp
   1600c:	dfc00117 	ldw	ra,4(sp)
   16010:	df000017 	ldw	fp,0(sp)
   16014:	dec00204 	addi	sp,sp,8
   16018:	f800283a 	ret

0001601c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   1601c:	defff804 	addi	sp,sp,-32
   16020:	df000715 	stw	fp,28(sp)
   16024:	df000704 	addi	fp,sp,28
   16028:	e13ffe15 	stw	r4,-8(fp)
   1602c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16030:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16034:	e0bfff17 	ldw	r2,-4(fp)
   16038:	1000021e 	bne	r2,zero,16044 <OSQAccept+0x28>
        return ((void *)0);
   1603c:	0005883a 	mov	r2,zero
   16040:	00004206 	br	1614c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   16044:	e0bffe17 	ldw	r2,-8(fp)
   16048:	1000051e 	bne	r2,zero,16060 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1604c:	e0bfff17 	ldw	r2,-4(fp)
   16050:	00c00104 	movi	r3,4
   16054:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16058:	0005883a 	mov	r2,zero
   1605c:	00003b06 	br	1614c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   16060:	e0bffe17 	ldw	r2,-8(fp)
   16064:	10800003 	ldbu	r2,0(r2)
   16068:	10803fcc 	andi	r2,r2,255
   1606c:	108000a0 	cmpeqi	r2,r2,2
   16070:	1000051e 	bne	r2,zero,16088 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   16074:	e0bfff17 	ldw	r2,-4(fp)
   16078:	00c00044 	movi	r3,1
   1607c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16080:	0005883a 	mov	r2,zero
   16084:	00003106 	br	1614c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16088:	0005303a 	rdctl	r2,status
   1608c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16090:	e0fffd17 	ldw	r3,-12(fp)
   16094:	00bfff84 	movi	r2,-2
   16098:	1884703a 	and	r2,r3,r2
   1609c:	1001703a 	wrctl	status,r2
  
  return context;
   160a0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   160a4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   160a8:	e0bffe17 	ldw	r2,-8(fp)
   160ac:	10800117 	ldw	r2,4(r2)
   160b0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   160b4:	e0bffc17 	ldw	r2,-16(fp)
   160b8:	1080058b 	ldhu	r2,22(r2)
   160bc:	10bfffcc 	andi	r2,r2,65535
   160c0:	10001926 	beq	r2,zero,16128 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   160c4:	e0bffc17 	ldw	r2,-16(fp)
   160c8:	10800417 	ldw	r2,16(r2)
   160cc:	11000104 	addi	r4,r2,4
   160d0:	e0fffc17 	ldw	r3,-16(fp)
   160d4:	19000415 	stw	r4,16(r3)
   160d8:	10800017 	ldw	r2,0(r2)
   160dc:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   160e0:	e0bffc17 	ldw	r2,-16(fp)
   160e4:	1080058b 	ldhu	r2,22(r2)
   160e8:	10bfffc4 	addi	r2,r2,-1
   160ec:	1007883a 	mov	r3,r2
   160f0:	e0bffc17 	ldw	r2,-16(fp)
   160f4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   160f8:	e0bffc17 	ldw	r2,-16(fp)
   160fc:	10c00417 	ldw	r3,16(r2)
   16100:	e0bffc17 	ldw	r2,-16(fp)
   16104:	10800217 	ldw	r2,8(r2)
   16108:	1880041e 	bne	r3,r2,1611c <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   1610c:	e0bffc17 	ldw	r2,-16(fp)
   16110:	10c00117 	ldw	r3,4(r2)
   16114:	e0bffc17 	ldw	r2,-16(fp)
   16118:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   1611c:	e0bfff17 	ldw	r2,-4(fp)
   16120:	10000005 	stb	zero,0(r2)
   16124:	00000406 	br	16138 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   16128:	e0bfff17 	ldw	r2,-4(fp)
   1612c:	00c007c4 	movi	r3,31
   16130:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   16134:	e03ff915 	stw	zero,-28(fp)
   16138:	e0bffa17 	ldw	r2,-24(fp)
   1613c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16140:	e0bffb17 	ldw	r2,-20(fp)
   16144:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   16148:	e0bff917 	ldw	r2,-28(fp)
}
   1614c:	e037883a 	mov	sp,fp
   16150:	df000017 	ldw	fp,0(sp)
   16154:	dec00104 	addi	sp,sp,4
   16158:	f800283a 	ret

0001615c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   1615c:	defff404 	addi	sp,sp,-48
   16160:	dfc00b15 	stw	ra,44(sp)
   16164:	df000a15 	stw	fp,40(sp)
   16168:	df000a04 	addi	fp,sp,40
   1616c:	e13ffe15 	stw	r4,-8(fp)
   16170:	2805883a 	mov	r2,r5
   16174:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16178:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1617c:	d0a7f803 	ldbu	r2,-24608(gp)
   16180:	10803fcc 	andi	r2,r2,255
   16184:	10000226 	beq	r2,zero,16190 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   16188:	0005883a 	mov	r2,zero
   1618c:	00005906 	br	162f4 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16190:	0005303a 	rdctl	r2,status
   16194:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16198:	e0fffd17 	ldw	r3,-12(fp)
   1619c:	00bfff84 	movi	r2,-2
   161a0:	1884703a 	and	r2,r3,r2
   161a4:	1001703a 	wrctl	status,r2
  
  return context;
   161a8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   161ac:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   161b0:	d0a7f717 	ldw	r2,-24612(gp)
   161b4:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   161b8:	d0a7f717 	ldw	r2,-24612(gp)
   161bc:	10000326 	beq	r2,zero,161cc <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   161c0:	d0a7f717 	ldw	r2,-24612(gp)
   161c4:	10800117 	ldw	r2,4(r2)
   161c8:	d0a7f715 	stw	r2,-24612(gp)
   161cc:	e0bff717 	ldw	r2,-36(fp)
   161d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   161d4:	e0bff817 	ldw	r2,-32(fp)
   161d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   161dc:	e0bff617 	ldw	r2,-40(fp)
   161e0:	10004326 	beq	r2,zero,162f0 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161e4:	0005303a 	rdctl	r2,status
   161e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161ec:	e0fff917 	ldw	r3,-28(fp)
   161f0:	00bfff84 	movi	r2,-2
   161f4:	1884703a 	and	r2,r3,r2
   161f8:	1001703a 	wrctl	status,r2
  
  return context;
   161fc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   16200:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   16204:	d0a7f517 	ldw	r2,-24620(gp)
   16208:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   1620c:	e0bffb17 	ldw	r2,-20(fp)
   16210:	10002d26 	beq	r2,zero,162c8 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   16214:	d0a7f517 	ldw	r2,-24620(gp)
   16218:	10800017 	ldw	r2,0(r2)
   1621c:	d0a7f515 	stw	r2,-24620(gp)
   16220:	e0bff717 	ldw	r2,-36(fp)
   16224:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16228:	e0bffa17 	ldw	r2,-24(fp)
   1622c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   16230:	e0bffb17 	ldw	r2,-20(fp)
   16234:	e0fffe17 	ldw	r3,-8(fp)
   16238:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   1623c:	e0bfff0b 	ldhu	r2,-4(fp)
   16240:	1085883a 	add	r2,r2,r2
   16244:	1085883a 	add	r2,r2,r2
   16248:	1007883a 	mov	r3,r2
   1624c:	e0bffe17 	ldw	r2,-8(fp)
   16250:	10c7883a 	add	r3,r2,r3
   16254:	e0bffb17 	ldw	r2,-20(fp)
   16258:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   1625c:	e0bffb17 	ldw	r2,-20(fp)
   16260:	e0fffe17 	ldw	r3,-8(fp)
   16264:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   16268:	e0bffb17 	ldw	r2,-20(fp)
   1626c:	e0fffe17 	ldw	r3,-8(fp)
   16270:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   16274:	e0bffb17 	ldw	r2,-20(fp)
   16278:	e0ffff0b 	ldhu	r3,-4(fp)
   1627c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   16280:	e0bffb17 	ldw	r2,-20(fp)
   16284:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   16288:	e0bff617 	ldw	r2,-40(fp)
   1628c:	00c00084 	movi	r3,2
   16290:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   16294:	e0bff617 	ldw	r2,-40(fp)
   16298:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   1629c:	e0bff617 	ldw	r2,-40(fp)
   162a0:	e0fffb17 	ldw	r3,-20(fp)
   162a4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   162a8:	e0bff617 	ldw	r2,-40(fp)
   162ac:	00c00fc4 	movi	r3,63
   162b0:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   162b4:	e0bff617 	ldw	r2,-40(fp)
   162b8:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   162bc:	e13ff617 	ldw	r4,-40(fp)
   162c0:	00129dc0 	call	129dc <OS_EventWaitListInit>
   162c4:	00000a06 	br	162f0 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   162c8:	d0e7f717 	ldw	r3,-24612(gp)
   162cc:	e0bff617 	ldw	r2,-40(fp)
   162d0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   162d4:	e0bff617 	ldw	r2,-40(fp)
   162d8:	d0a7f715 	stw	r2,-24612(gp)
   162dc:	e0bff717 	ldw	r2,-36(fp)
   162e0:	e0bffc15 	stw	r2,-16(fp)
   162e4:	e0bffc17 	ldw	r2,-16(fp)
   162e8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   162ec:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   162f0:	e0bff617 	ldw	r2,-40(fp)
}
   162f4:	e037883a 	mov	sp,fp
   162f8:	dfc00117 	ldw	ra,4(sp)
   162fc:	df000017 	ldw	fp,0(sp)
   16300:	dec00204 	addi	sp,sp,8
   16304:	f800283a 	ret

00016308 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   16308:	defff204 	addi	sp,sp,-56
   1630c:	dfc00d15 	stw	ra,52(sp)
   16310:	df000c15 	stw	fp,48(sp)
   16314:	df000c04 	addi	fp,sp,48
   16318:	e13ffd15 	stw	r4,-12(fp)
   1631c:	2805883a 	mov	r2,r5
   16320:	e1bfff15 	stw	r6,-4(fp)
   16324:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16328:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1632c:	e0bfff17 	ldw	r2,-4(fp)
   16330:	1000021e 	bne	r2,zero,1633c <OSQDel+0x34>
        return (pevent);
   16334:	e0bffd17 	ldw	r2,-12(fp)
   16338:	00008e06 	br	16574 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1633c:	e0bffd17 	ldw	r2,-12(fp)
   16340:	1000051e 	bne	r2,zero,16358 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   16344:	e0bfff17 	ldw	r2,-4(fp)
   16348:	00c00104 	movi	r3,4
   1634c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16350:	e0bffd17 	ldw	r2,-12(fp)
   16354:	00008706 	br	16574 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   16358:	e0bffd17 	ldw	r2,-12(fp)
   1635c:	10800003 	ldbu	r2,0(r2)
   16360:	10803fcc 	andi	r2,r2,255
   16364:	108000a0 	cmpeqi	r2,r2,2
   16368:	1000051e 	bne	r2,zero,16380 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1636c:	e0bfff17 	ldw	r2,-4(fp)
   16370:	00c00044 	movi	r3,1
   16374:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16378:	e0bffd17 	ldw	r2,-12(fp)
   1637c:	00007d06 	br	16574 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   16380:	d0a7f803 	ldbu	r2,-24608(gp)
   16384:	10803fcc 	andi	r2,r2,255
   16388:	10000526 	beq	r2,zero,163a0 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1638c:	e0bfff17 	ldw	r2,-4(fp)
   16390:	00c003c4 	movi	r3,15
   16394:	10c00005 	stb	r3,0(r2)
        return (pevent);
   16398:	e0bffd17 	ldw	r2,-12(fp)
   1639c:	00007506 	br	16574 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   163a0:	0005303a 	rdctl	r2,status
   163a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   163a8:	e0fffc17 	ldw	r3,-16(fp)
   163ac:	00bfff84 	movi	r2,-2
   163b0:	1884703a 	and	r2,r3,r2
   163b4:	1001703a 	wrctl	status,r2
  
  return context;
   163b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   163bc:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   163c0:	e0bffd17 	ldw	r2,-12(fp)
   163c4:	10800283 	ldbu	r2,10(r2)
   163c8:	10803fcc 	andi	r2,r2,255
   163cc:	10000326 	beq	r2,zero,163dc <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   163d0:	00800044 	movi	r2,1
   163d4:	e0bff405 	stb	r2,-48(fp)
   163d8:	00000106 	br	163e0 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   163dc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   163e0:	e0bffe03 	ldbu	r2,-8(fp)
   163e4:	10000326 	beq	r2,zero,163f4 <OSQDel+0xec>
   163e8:	10800060 	cmpeqi	r2,r2,1
   163ec:	1000301e 	bne	r2,zero,164b0 <OSQDel+0x1a8>
   163f0:	00005506 	br	16548 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   163f4:	e0bff403 	ldbu	r2,-48(fp)
   163f8:	10001e1e 	bne	r2,zero,16474 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   163fc:	e0bffd17 	ldw	r2,-12(fp)
   16400:	00c00fc4 	movi	r3,63
   16404:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   16408:	e0bffd17 	ldw	r2,-12(fp)
   1640c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   16410:	e0bffd17 	ldw	r2,-12(fp)
   16414:	10800117 	ldw	r2,4(r2)
   16418:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   1641c:	d0e7f517 	ldw	r3,-24620(gp)
   16420:	e0bff817 	ldw	r2,-32(fp)
   16424:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   16428:	e0bff817 	ldw	r2,-32(fp)
   1642c:	d0a7f515 	stw	r2,-24620(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   16430:	e0bffd17 	ldw	r2,-12(fp)
   16434:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   16438:	d0e7f717 	ldw	r3,-24612(gp)
   1643c:	e0bffd17 	ldw	r2,-12(fp)
   16440:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   16444:	e0bffd17 	ldw	r2,-12(fp)
   16448:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1644c:	e0bffd17 	ldw	r2,-12(fp)
   16450:	d0a7f715 	stw	r2,-24612(gp)
   16454:	e0bff617 	ldw	r2,-40(fp)
   16458:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1645c:	e0bff717 	ldw	r2,-36(fp)
   16460:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   16464:	e0bfff17 	ldw	r2,-4(fp)
   16468:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   1646c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   16470:	00003f06 	br	16570 <OSQDel+0x268>
   16474:	e0bff617 	ldw	r2,-40(fp)
   16478:	e0bff915 	stw	r2,-28(fp)
   1647c:	e0bff917 	ldw	r2,-28(fp)
   16480:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   16484:	e0bfff17 	ldw	r2,-4(fp)
   16488:	00c01244 	movi	r3,73
   1648c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   16490:	e0bffd17 	ldw	r2,-12(fp)
   16494:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   16498:	00003506 	br	16570 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   1649c:	000f883a 	mov	r7,zero
   164a0:	01800104 	movi	r6,4
   164a4:	000b883a 	mov	r5,zero
   164a8:	e13ffd17 	ldw	r4,-12(fp)
   164ac:	001242c0 	call	1242c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   164b0:	e0bffd17 	ldw	r2,-12(fp)
   164b4:	10800283 	ldbu	r2,10(r2)
   164b8:	10803fcc 	andi	r2,r2,255
   164bc:	103ff71e 	bne	r2,zero,1649c <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   164c0:	e0bffd17 	ldw	r2,-12(fp)
   164c4:	00c00fc4 	movi	r3,63
   164c8:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   164cc:	e0bffd17 	ldw	r2,-12(fp)
   164d0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   164d4:	e0bffd17 	ldw	r2,-12(fp)
   164d8:	10800117 	ldw	r2,4(r2)
   164dc:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   164e0:	d0e7f517 	ldw	r3,-24620(gp)
   164e4:	e0bff817 	ldw	r2,-32(fp)
   164e8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   164ec:	e0bff817 	ldw	r2,-32(fp)
   164f0:	d0a7f515 	stw	r2,-24620(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   164f4:	e0bffd17 	ldw	r2,-12(fp)
   164f8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   164fc:	d0e7f717 	ldw	r3,-24612(gp)
   16500:	e0bffd17 	ldw	r2,-12(fp)
   16504:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   16508:	e0bffd17 	ldw	r2,-12(fp)
   1650c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   16510:	e0bffd17 	ldw	r2,-12(fp)
   16514:	d0a7f715 	stw	r2,-24612(gp)
   16518:	e0bff617 	ldw	r2,-40(fp)
   1651c:	e0bffa15 	stw	r2,-24(fp)
   16520:	e0bffa17 	ldw	r2,-24(fp)
   16524:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   16528:	e0bff403 	ldbu	r2,-48(fp)
   1652c:	10800058 	cmpnei	r2,r2,1
   16530:	1000011e 	bne	r2,zero,16538 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   16534:	0012e780 	call	12e78 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   16538:	e0bfff17 	ldw	r2,-4(fp)
   1653c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   16540:	e03ff515 	stw	zero,-44(fp)
             break;
   16544:	00000a06 	br	16570 <OSQDel+0x268>
   16548:	e0bff617 	ldw	r2,-40(fp)
   1654c:	e0bffb15 	stw	r2,-20(fp)
   16550:	e0bffb17 	ldw	r2,-20(fp)
   16554:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   16558:	e0bfff17 	ldw	r2,-4(fp)
   1655c:	00c001c4 	movi	r3,7
   16560:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   16564:	e0bffd17 	ldw	r2,-12(fp)
   16568:	e0bff515 	stw	r2,-44(fp)
             break;
   1656c:	0001883a 	nop
    }
    return (pevent_return);
   16570:	e0bff517 	ldw	r2,-44(fp)
}
   16574:	e037883a 	mov	sp,fp
   16578:	dfc00117 	ldw	ra,4(sp)
   1657c:	df000017 	ldw	fp,0(sp)
   16580:	dec00204 	addi	sp,sp,8
   16584:	f800283a 	ret

00016588 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   16588:	defffa04 	addi	sp,sp,-24
   1658c:	df000515 	stw	fp,20(sp)
   16590:	df000504 	addi	fp,sp,20
   16594:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16598:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1659c:	e0bfff17 	ldw	r2,-4(fp)
   165a0:	1000021e 	bne	r2,zero,165ac <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   165a4:	00800104 	movi	r2,4
   165a8:	00002106 	br	16630 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   165ac:	e0bfff17 	ldw	r2,-4(fp)
   165b0:	10800003 	ldbu	r2,0(r2)
   165b4:	10803fcc 	andi	r2,r2,255
   165b8:	108000a0 	cmpeqi	r2,r2,2
   165bc:	1000021e 	bne	r2,zero,165c8 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   165c0:	00800044 	movi	r2,1
   165c4:	00001a06 	br	16630 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   165c8:	0005303a 	rdctl	r2,status
   165cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   165d0:	e0fffd17 	ldw	r3,-12(fp)
   165d4:	00bfff84 	movi	r2,-2
   165d8:	1884703a 	and	r2,r3,r2
   165dc:	1001703a 	wrctl	status,r2
  
  return context;
   165e0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   165e4:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   165e8:	e0bfff17 	ldw	r2,-4(fp)
   165ec:	10800117 	ldw	r2,4(r2)
   165f0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   165f4:	e0bffc17 	ldw	r2,-16(fp)
   165f8:	10c00117 	ldw	r3,4(r2)
   165fc:	e0bffc17 	ldw	r2,-16(fp)
   16600:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   16604:	e0bffc17 	ldw	r2,-16(fp)
   16608:	10c00117 	ldw	r3,4(r2)
   1660c:	e0bffc17 	ldw	r2,-16(fp)
   16610:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   16614:	e0bffc17 	ldw	r2,-16(fp)
   16618:	1000058d 	sth	zero,22(r2)
   1661c:	e0bffb17 	ldw	r2,-20(fp)
   16620:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16624:	e0bffe17 	ldw	r2,-8(fp)
   16628:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1662c:	0005883a 	mov	r2,zero
}
   16630:	e037883a 	mov	sp,fp
   16634:	df000017 	ldw	fp,0(sp)
   16638:	dec00104 	addi	sp,sp,4
   1663c:	f800283a 	ret

00016640 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   16640:	defff304 	addi	sp,sp,-52
   16644:	dfc00c15 	stw	ra,48(sp)
   16648:	df000b15 	stw	fp,44(sp)
   1664c:	df000b04 	addi	fp,sp,44
   16650:	e13ffd15 	stw	r4,-12(fp)
   16654:	2805883a 	mov	r2,r5
   16658:	e1bfff15 	stw	r6,-4(fp)
   1665c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16660:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16664:	e0bfff17 	ldw	r2,-4(fp)
   16668:	1000021e 	bne	r2,zero,16674 <OSQPend+0x34>
        return ((void *)0);
   1666c:	0005883a 	mov	r2,zero
   16670:	00009106 	br	168b8 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   16674:	e0bffd17 	ldw	r2,-12(fp)
   16678:	1000051e 	bne	r2,zero,16690 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1667c:	e0bfff17 	ldw	r2,-4(fp)
   16680:	00c00104 	movi	r3,4
   16684:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   16688:	0005883a 	mov	r2,zero
   1668c:	00008a06 	br	168b8 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   16690:	e0bffd17 	ldw	r2,-12(fp)
   16694:	10800003 	ldbu	r2,0(r2)
   16698:	10803fcc 	andi	r2,r2,255
   1669c:	108000a0 	cmpeqi	r2,r2,2
   166a0:	1000051e 	bne	r2,zero,166b8 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   166a4:	e0bfff17 	ldw	r2,-4(fp)
   166a8:	00c00044 	movi	r3,1
   166ac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   166b0:	0005883a 	mov	r2,zero
   166b4:	00008006 	br	168b8 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   166b8:	d0a7f803 	ldbu	r2,-24608(gp)
   166bc:	10803fcc 	andi	r2,r2,255
   166c0:	10000526 	beq	r2,zero,166d8 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   166c4:	e0bfff17 	ldw	r2,-4(fp)
   166c8:	00c00084 	movi	r3,2
   166cc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   166d0:	0005883a 	mov	r2,zero
   166d4:	00007806 	br	168b8 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   166d8:	d0a7ea03 	ldbu	r2,-24664(gp)
   166dc:	10803fcc 	andi	r2,r2,255
   166e0:	10000526 	beq	r2,zero,166f8 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   166e4:	e0bfff17 	ldw	r2,-4(fp)
   166e8:	00c00344 	movi	r3,13
   166ec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   166f0:	0005883a 	mov	r2,zero
   166f4:	00007006 	br	168b8 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   166f8:	0005303a 	rdctl	r2,status
   166fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16700:	e0fffc17 	ldw	r3,-16(fp)
   16704:	00bfff84 	movi	r2,-2
   16708:	1884703a 	and	r2,r3,r2
   1670c:	1001703a 	wrctl	status,r2
  
  return context;
   16710:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16714:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   16718:	e0bffd17 	ldw	r2,-12(fp)
   1671c:	10800117 	ldw	r2,4(r2)
   16720:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   16724:	e0bff817 	ldw	r2,-32(fp)
   16728:	1080058b 	ldhu	r2,22(r2)
   1672c:	10bfffcc 	andi	r2,r2,65535
   16730:	10001e26 	beq	r2,zero,167ac <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   16734:	e0bff817 	ldw	r2,-32(fp)
   16738:	10800417 	ldw	r2,16(r2)
   1673c:	11000104 	addi	r4,r2,4
   16740:	e0fff817 	ldw	r3,-32(fp)
   16744:	19000415 	stw	r4,16(r3)
   16748:	10800017 	ldw	r2,0(r2)
   1674c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   16750:	e0bff817 	ldw	r2,-32(fp)
   16754:	1080058b 	ldhu	r2,22(r2)
   16758:	10bfffc4 	addi	r2,r2,-1
   1675c:	1007883a 	mov	r3,r2
   16760:	e0bff817 	ldw	r2,-32(fp)
   16764:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   16768:	e0bff817 	ldw	r2,-32(fp)
   1676c:	10c00417 	ldw	r3,16(r2)
   16770:	e0bff817 	ldw	r2,-32(fp)
   16774:	10800217 	ldw	r2,8(r2)
   16778:	1880041e 	bne	r3,r2,1678c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   1677c:	e0bff817 	ldw	r2,-32(fp)
   16780:	10c00117 	ldw	r3,4(r2)
   16784:	e0bff817 	ldw	r2,-32(fp)
   16788:	10c00415 	stw	r3,16(r2)
   1678c:	e0bff617 	ldw	r2,-40(fp)
   16790:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16794:	e0bff717 	ldw	r2,-36(fp)
   16798:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1679c:	e0bfff17 	ldw	r2,-4(fp)
   167a0:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   167a4:	e0bff517 	ldw	r2,-44(fp)
   167a8:	00004306 	br	168b8 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   167ac:	d0a7f917 	ldw	r2,-24604(gp)
   167b0:	d0e7f917 	ldw	r3,-24604(gp)
   167b4:	18c00c03 	ldbu	r3,48(r3)
   167b8:	18c00114 	ori	r3,r3,4
   167bc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   167c0:	d0a7f917 	ldw	r2,-24604(gp)
   167c4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   167c8:	d0a7f917 	ldw	r2,-24604(gp)
   167cc:	e0fffe0b 	ldhu	r3,-8(fp)
   167d0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   167d4:	e13ffd17 	ldw	r4,-12(fp)
   167d8:	00125c40 	call	125c4 <OS_EventTaskWait>
   167dc:	e0bff617 	ldw	r2,-40(fp)
   167e0:	e0bffb15 	stw	r2,-20(fp)
   167e4:	e0bffb17 	ldw	r2,-20(fp)
   167e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   167ec:	0012e780 	call	12e78 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   167f0:	0005303a 	rdctl	r2,status
   167f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167f8:	e0fff917 	ldw	r3,-28(fp)
   167fc:	00bfff84 	movi	r2,-2
   16800:	1884703a 	and	r2,r3,r2
   16804:	1001703a 	wrctl	status,r2
  
  return context;
   16808:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1680c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   16810:	d0a7f917 	ldw	r2,-24604(gp)
   16814:	10800c43 	ldbu	r2,49(r2)
   16818:	10803fcc 	andi	r2,r2,255
   1681c:	10000326 	beq	r2,zero,1682c <OSQPend+0x1ec>
   16820:	108000a0 	cmpeqi	r2,r2,2
   16824:	1000071e 	bne	r2,zero,16844 <OSQPend+0x204>
   16828:	00000b06 	br	16858 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   1682c:	d0a7f917 	ldw	r2,-24604(gp)
   16830:	10800917 	ldw	r2,36(r2)
   16834:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   16838:	e0bfff17 	ldw	r2,-4(fp)
   1683c:	10000005 	stb	zero,0(r2)
             break;
   16840:	00000e06 	br	1687c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   16844:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   16848:	e0bfff17 	ldw	r2,-4(fp)
   1684c:	00c00384 	movi	r3,14
   16850:	10c00005 	stb	r3,0(r2)
             break;
   16854:	00000906 	br	1687c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   16858:	d0a7f917 	ldw	r2,-24604(gp)
   1685c:	e17ffd17 	ldw	r5,-12(fp)
   16860:	1009883a 	mov	r4,r2
   16864:	00128240 	call	12824 <OS_EventTaskRemove>
             pmsg = (void *)0;
   16868:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1686c:	e0bfff17 	ldw	r2,-4(fp)
   16870:	00c00284 	movi	r3,10
   16874:	10c00005 	stb	r3,0(r2)
             break;
   16878:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1687c:	d0a7f917 	ldw	r2,-24604(gp)
   16880:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   16884:	d0a7f917 	ldw	r2,-24604(gp)
   16888:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1688c:	d0a7f917 	ldw	r2,-24604(gp)
   16890:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   16894:	d0a7f917 	ldw	r2,-24604(gp)
   16898:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   1689c:	d0a7f917 	ldw	r2,-24604(gp)
   168a0:	10000915 	stw	zero,36(r2)
   168a4:	e0bff617 	ldw	r2,-40(fp)
   168a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   168ac:	e0bffa17 	ldw	r2,-24(fp)
   168b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   168b4:	e0bff517 	ldw	r2,-44(fp)
}
   168b8:	e037883a 	mov	sp,fp
   168bc:	dfc00117 	ldw	ra,4(sp)
   168c0:	df000017 	ldw	fp,0(sp)
   168c4:	dec00204 	addi	sp,sp,8
   168c8:	f800283a 	ret

000168cc <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   168cc:	defff604 	addi	sp,sp,-40
   168d0:	dfc00915 	stw	ra,36(sp)
   168d4:	df000815 	stw	fp,32(sp)
   168d8:	df000804 	addi	fp,sp,32
   168dc:	e13ffd15 	stw	r4,-12(fp)
   168e0:	2805883a 	mov	r2,r5
   168e4:	e1bfff15 	stw	r6,-4(fp)
   168e8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   168ec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   168f0:	e0bfff17 	ldw	r2,-4(fp)
   168f4:	1000021e 	bne	r2,zero,16900 <OSQPendAbort+0x34>
        return (0);
   168f8:	0005883a 	mov	r2,zero
   168fc:	00004906 	br	16a24 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   16900:	e0bffd17 	ldw	r2,-12(fp)
   16904:	1000051e 	bne	r2,zero,1691c <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   16908:	e0bfff17 	ldw	r2,-4(fp)
   1690c:	00c00104 	movi	r3,4
   16910:	10c00005 	stb	r3,0(r2)
        return (0);
   16914:	0005883a 	mov	r2,zero
   16918:	00004206 	br	16a24 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1691c:	e0bffd17 	ldw	r2,-12(fp)
   16920:	10800003 	ldbu	r2,0(r2)
   16924:	10803fcc 	andi	r2,r2,255
   16928:	108000a0 	cmpeqi	r2,r2,2
   1692c:	1000051e 	bne	r2,zero,16944 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   16930:	e0bfff17 	ldw	r2,-4(fp)
   16934:	00c00044 	movi	r3,1
   16938:	10c00005 	stb	r3,0(r2)
        return (0);
   1693c:	0005883a 	mov	r2,zero
   16940:	00003806 	br	16a24 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16944:	0005303a 	rdctl	r2,status
   16948:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1694c:	e0fffc17 	ldw	r3,-16(fp)
   16950:	00bfff84 	movi	r2,-2
   16954:	1884703a 	and	r2,r3,r2
   16958:	1001703a 	wrctl	status,r2
  
  return context;
   1695c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16960:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   16964:	e0bffd17 	ldw	r2,-12(fp)
   16968:	10800283 	ldbu	r2,10(r2)
   1696c:	10803fcc 	andi	r2,r2,255
   16970:	10002526 	beq	r2,zero,16a08 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   16974:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   16978:	e0bffe03 	ldbu	r2,-8(fp)
   1697c:	10800060 	cmpeqi	r2,r2,1
   16980:	10000e26 	beq	r2,zero,169bc <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   16984:	00000806 	br	169a8 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   16988:	01c00084 	movi	r7,2
   1698c:	01800104 	movi	r6,4
   16990:	000b883a 	mov	r5,zero
   16994:	e13ffd17 	ldw	r4,-12(fp)
   16998:	001242c0 	call	1242c <OS_EventTaskRdy>
                     nbr_tasks++;
   1699c:	e0bff803 	ldbu	r2,-32(fp)
   169a0:	10800044 	addi	r2,r2,1
   169a4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   169a8:	e0bffd17 	ldw	r2,-12(fp)
   169ac:	10800283 	ldbu	r2,10(r2)
   169b0:	10803fcc 	andi	r2,r2,255
   169b4:	103ff41e 	bne	r2,zero,16988 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   169b8:	00000906 	br	169e0 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   169bc:	01c00084 	movi	r7,2
   169c0:	01800104 	movi	r6,4
   169c4:	000b883a 	mov	r5,zero
   169c8:	e13ffd17 	ldw	r4,-12(fp)
   169cc:	001242c0 	call	1242c <OS_EventTaskRdy>
                 nbr_tasks++;
   169d0:	e0bff803 	ldbu	r2,-32(fp)
   169d4:	10800044 	addi	r2,r2,1
   169d8:	e0bff805 	stb	r2,-32(fp)
                 break;
   169dc:	0001883a 	nop
   169e0:	e0bff917 	ldw	r2,-28(fp)
   169e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   169e8:	e0bffa17 	ldw	r2,-24(fp)
   169ec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   169f0:	0012e780 	call	12e78 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   169f4:	e0bfff17 	ldw	r2,-4(fp)
   169f8:	00c00384 	movi	r3,14
   169fc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   16a00:	e0bff803 	ldbu	r2,-32(fp)
   16a04:	00000706 	br	16a24 <OSQPendAbort+0x158>
   16a08:	e0bff917 	ldw	r2,-28(fp)
   16a0c:	e0bffb15 	stw	r2,-20(fp)
   16a10:	e0bffb17 	ldw	r2,-20(fp)
   16a14:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16a18:	e0bfff17 	ldw	r2,-4(fp)
   16a1c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   16a20:	0005883a 	mov	r2,zero
}
   16a24:	e037883a 	mov	sp,fp
   16a28:	dfc00117 	ldw	ra,4(sp)
   16a2c:	df000017 	ldw	fp,0(sp)
   16a30:	dec00204 	addi	sp,sp,8
   16a34:	f800283a 	ret

00016a38 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   16a38:	defff604 	addi	sp,sp,-40
   16a3c:	dfc00915 	stw	ra,36(sp)
   16a40:	df000815 	stw	fp,32(sp)
   16a44:	df000804 	addi	fp,sp,32
   16a48:	e13ffe15 	stw	r4,-8(fp)
   16a4c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   16a50:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   16a54:	e0bffe17 	ldw	r2,-8(fp)
   16a58:	1000021e 	bne	r2,zero,16a64 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   16a5c:	00800104 	movi	r2,4
   16a60:	00004a06 	br	16b8c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   16a64:	e0bffe17 	ldw	r2,-8(fp)
   16a68:	10800003 	ldbu	r2,0(r2)
   16a6c:	10803fcc 	andi	r2,r2,255
   16a70:	108000a0 	cmpeqi	r2,r2,2
   16a74:	1000021e 	bne	r2,zero,16a80 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   16a78:	00800044 	movi	r2,1
   16a7c:	00004306 	br	16b8c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a80:	0005303a 	rdctl	r2,status
   16a84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a88:	e0fffd17 	ldw	r3,-12(fp)
   16a8c:	00bfff84 	movi	r2,-2
   16a90:	1884703a 	and	r2,r3,r2
   16a94:	1001703a 	wrctl	status,r2
  
  return context;
   16a98:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   16a9c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   16aa0:	e0bffe17 	ldw	r2,-8(fp)
   16aa4:	10800283 	ldbu	r2,10(r2)
   16aa8:	10803fcc 	andi	r2,r2,255
   16aac:	10000c26 	beq	r2,zero,16ae0 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   16ab0:	000f883a 	mov	r7,zero
   16ab4:	01800104 	movi	r6,4
   16ab8:	e17fff17 	ldw	r5,-4(fp)
   16abc:	e13ffe17 	ldw	r4,-8(fp)
   16ac0:	001242c0 	call	1242c <OS_EventTaskRdy>
   16ac4:	e0bff817 	ldw	r2,-32(fp)
   16ac8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16acc:	e0bff917 	ldw	r2,-28(fp)
   16ad0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   16ad4:	0012e780 	call	12e78 <OS_Sched>
        return (OS_ERR_NONE);
   16ad8:	0005883a 	mov	r2,zero
   16adc:	00002b06 	br	16b8c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   16ae0:	e0bffe17 	ldw	r2,-8(fp)
   16ae4:	10800117 	ldw	r2,4(r2)
   16ae8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   16aec:	e0bffb17 	ldw	r2,-20(fp)
   16af0:	10c0058b 	ldhu	r3,22(r2)
   16af4:	e0bffb17 	ldw	r2,-20(fp)
   16af8:	1080050b 	ldhu	r2,20(r2)
   16afc:	18ffffcc 	andi	r3,r3,65535
   16b00:	10bfffcc 	andi	r2,r2,65535
   16b04:	18800636 	bltu	r3,r2,16b20 <OSQPost+0xe8>
   16b08:	e0bff817 	ldw	r2,-32(fp)
   16b0c:	e0bffa15 	stw	r2,-24(fp)
   16b10:	e0bffa17 	ldw	r2,-24(fp)
   16b14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   16b18:	00800784 	movi	r2,30
   16b1c:	00001b06 	br	16b8c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   16b20:	e0bffb17 	ldw	r2,-20(fp)
   16b24:	10800317 	ldw	r2,12(r2)
   16b28:	11000104 	addi	r4,r2,4
   16b2c:	e0fffb17 	ldw	r3,-20(fp)
   16b30:	19000315 	stw	r4,12(r3)
   16b34:	e0ffff17 	ldw	r3,-4(fp)
   16b38:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   16b3c:	e0bffb17 	ldw	r2,-20(fp)
   16b40:	1080058b 	ldhu	r2,22(r2)
   16b44:	10800044 	addi	r2,r2,1
   16b48:	1007883a 	mov	r3,r2
   16b4c:	e0bffb17 	ldw	r2,-20(fp)
   16b50:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   16b54:	e0bffb17 	ldw	r2,-20(fp)
   16b58:	10c00317 	ldw	r3,12(r2)
   16b5c:	e0bffb17 	ldw	r2,-20(fp)
   16b60:	10800217 	ldw	r2,8(r2)
   16b64:	1880041e 	bne	r3,r2,16b78 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   16b68:	e0bffb17 	ldw	r2,-20(fp)
   16b6c:	10c00117 	ldw	r3,4(r2)
   16b70:	e0bffb17 	ldw	r2,-20(fp)
   16b74:	10c00315 	stw	r3,12(r2)
   16b78:	e0bff817 	ldw	r2,-32(fp)
   16b7c:	e0bffc15 	stw	r2,-16(fp)
   16b80:	e0bffc17 	ldw	r2,-16(fp)
   16b84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16b88:	0005883a 	mov	r2,zero
}
   16b8c:	e037883a 	mov	sp,fp
   16b90:	dfc00117 	ldw	ra,4(sp)
   16b94:	df000017 	ldw	fp,0(sp)
   16b98:	dec00204 	addi	sp,sp,8
   16b9c:	f800283a 	ret

00016ba0 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   16ba0:	defff604 	addi	sp,sp,-40
   16ba4:	dfc00915 	stw	ra,36(sp)
   16ba8:	df000815 	stw	fp,32(sp)
   16bac:	df000804 	addi	fp,sp,32
   16bb0:	e13ffe15 	stw	r4,-8(fp)
   16bb4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16bb8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16bbc:	e0bffe17 	ldw	r2,-8(fp)
   16bc0:	1000021e 	bne	r2,zero,16bcc <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   16bc4:	00800104 	movi	r2,4
   16bc8:	00004c06 	br	16cfc <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   16bcc:	e0bffe17 	ldw	r2,-8(fp)
   16bd0:	10800003 	ldbu	r2,0(r2)
   16bd4:	10803fcc 	andi	r2,r2,255
   16bd8:	108000a0 	cmpeqi	r2,r2,2
   16bdc:	1000021e 	bne	r2,zero,16be8 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   16be0:	00800044 	movi	r2,1
   16be4:	00004506 	br	16cfc <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16be8:	0005303a 	rdctl	r2,status
   16bec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16bf0:	e0fffd17 	ldw	r3,-12(fp)
   16bf4:	00bfff84 	movi	r2,-2
   16bf8:	1884703a 	and	r2,r3,r2
   16bfc:	1001703a 	wrctl	status,r2
  
  return context;
   16c00:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   16c04:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   16c08:	e0bffe17 	ldw	r2,-8(fp)
   16c0c:	10800283 	ldbu	r2,10(r2)
   16c10:	10803fcc 	andi	r2,r2,255
   16c14:	10000c26 	beq	r2,zero,16c48 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   16c18:	000f883a 	mov	r7,zero
   16c1c:	01800104 	movi	r6,4
   16c20:	e17fff17 	ldw	r5,-4(fp)
   16c24:	e13ffe17 	ldw	r4,-8(fp)
   16c28:	001242c0 	call	1242c <OS_EventTaskRdy>
   16c2c:	e0bff817 	ldw	r2,-32(fp)
   16c30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16c34:	e0bff917 	ldw	r2,-28(fp)
   16c38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   16c3c:	0012e780 	call	12e78 <OS_Sched>
        return (OS_ERR_NONE);
   16c40:	0005883a 	mov	r2,zero
   16c44:	00002d06 	br	16cfc <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   16c48:	e0bffe17 	ldw	r2,-8(fp)
   16c4c:	10800117 	ldw	r2,4(r2)
   16c50:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   16c54:	e0bffb17 	ldw	r2,-20(fp)
   16c58:	10c0058b 	ldhu	r3,22(r2)
   16c5c:	e0bffb17 	ldw	r2,-20(fp)
   16c60:	1080050b 	ldhu	r2,20(r2)
   16c64:	18ffffcc 	andi	r3,r3,65535
   16c68:	10bfffcc 	andi	r2,r2,65535
   16c6c:	18800636 	bltu	r3,r2,16c88 <OSQPostFront+0xe8>
   16c70:	e0bff817 	ldw	r2,-32(fp)
   16c74:	e0bffa15 	stw	r2,-24(fp)
   16c78:	e0bffa17 	ldw	r2,-24(fp)
   16c7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   16c80:	00800784 	movi	r2,30
   16c84:	00001d06 	br	16cfc <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   16c88:	e0bffb17 	ldw	r2,-20(fp)
   16c8c:	10c00417 	ldw	r3,16(r2)
   16c90:	e0bffb17 	ldw	r2,-20(fp)
   16c94:	10800117 	ldw	r2,4(r2)
   16c98:	1880041e 	bne	r3,r2,16cac <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   16c9c:	e0bffb17 	ldw	r2,-20(fp)
   16ca0:	10c00217 	ldw	r3,8(r2)
   16ca4:	e0bffb17 	ldw	r2,-20(fp)
   16ca8:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   16cac:	e0bffb17 	ldw	r2,-20(fp)
   16cb0:	10800417 	ldw	r2,16(r2)
   16cb4:	10ffff04 	addi	r3,r2,-4
   16cb8:	e0bffb17 	ldw	r2,-20(fp)
   16cbc:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   16cc0:	e0bffb17 	ldw	r2,-20(fp)
   16cc4:	10800417 	ldw	r2,16(r2)
   16cc8:	e0ffff17 	ldw	r3,-4(fp)
   16ccc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   16cd0:	e0bffb17 	ldw	r2,-20(fp)
   16cd4:	1080058b 	ldhu	r2,22(r2)
   16cd8:	10800044 	addi	r2,r2,1
   16cdc:	1007883a 	mov	r3,r2
   16ce0:	e0bffb17 	ldw	r2,-20(fp)
   16ce4:	10c0058d 	sth	r3,22(r2)
   16ce8:	e0bff817 	ldw	r2,-32(fp)
   16cec:	e0bffc15 	stw	r2,-16(fp)
   16cf0:	e0bffc17 	ldw	r2,-16(fp)
   16cf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16cf8:	0005883a 	mov	r2,zero
}
   16cfc:	e037883a 	mov	sp,fp
   16d00:	dfc00117 	ldw	ra,4(sp)
   16d04:	df000017 	ldw	fp,0(sp)
   16d08:	dec00204 	addi	sp,sp,8
   16d0c:	f800283a 	ret

00016d10 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   16d10:	defff504 	addi	sp,sp,-44
   16d14:	dfc00a15 	stw	ra,40(sp)
   16d18:	df000915 	stw	fp,36(sp)
   16d1c:	df000904 	addi	fp,sp,36
   16d20:	e13ffd15 	stw	r4,-12(fp)
   16d24:	e17ffe15 	stw	r5,-8(fp)
   16d28:	3005883a 	mov	r2,r6
   16d2c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16d30:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16d34:	e0bffd17 	ldw	r2,-12(fp)
   16d38:	1000021e 	bne	r2,zero,16d44 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   16d3c:	00800104 	movi	r2,4
   16d40:	00007106 	br	16f08 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   16d44:	e0bffd17 	ldw	r2,-12(fp)
   16d48:	10800003 	ldbu	r2,0(r2)
   16d4c:	10803fcc 	andi	r2,r2,255
   16d50:	108000a0 	cmpeqi	r2,r2,2
   16d54:	1000021e 	bne	r2,zero,16d60 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   16d58:	00800044 	movi	r2,1
   16d5c:	00006a06 	br	16f08 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16d60:	0005303a 	rdctl	r2,status
   16d64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16d68:	e0fffc17 	ldw	r3,-16(fp)
   16d6c:	00bfff84 	movi	r2,-2
   16d70:	1884703a 	and	r2,r3,r2
   16d74:	1001703a 	wrctl	status,r2
  
  return context;
   16d78:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16d7c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   16d80:	e0bffd17 	ldw	r2,-12(fp)
   16d84:	10800283 	ldbu	r2,10(r2)
   16d88:	10803fcc 	andi	r2,r2,255
   16d8c:	10001d26 	beq	r2,zero,16e04 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   16d90:	e0bfff03 	ldbu	r2,-4(fp)
   16d94:	1080004c 	andi	r2,r2,1
   16d98:	10000b26 	beq	r2,zero,16dc8 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   16d9c:	00000506 	br	16db4 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   16da0:	000f883a 	mov	r7,zero
   16da4:	01800104 	movi	r6,4
   16da8:	e17ffe17 	ldw	r5,-8(fp)
   16dac:	e13ffd17 	ldw	r4,-12(fp)
   16db0:	001242c0 	call	1242c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   16db4:	e0bffd17 	ldw	r2,-12(fp)
   16db8:	10800283 	ldbu	r2,10(r2)
   16dbc:	10803fcc 	andi	r2,r2,255
   16dc0:	103ff71e 	bne	r2,zero,16da0 <OSQPostOpt+0x90>
   16dc4:	00000506 	br	16ddc <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   16dc8:	000f883a 	mov	r7,zero
   16dcc:	01800104 	movi	r6,4
   16dd0:	e17ffe17 	ldw	r5,-8(fp)
   16dd4:	e13ffd17 	ldw	r4,-12(fp)
   16dd8:	001242c0 	call	1242c <OS_EventTaskRdy>
   16ddc:	e0bff717 	ldw	r2,-36(fp)
   16de0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16de4:	e0bff817 	ldw	r2,-32(fp)
   16de8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   16dec:	e0bfff03 	ldbu	r2,-4(fp)
   16df0:	1080010c 	andi	r2,r2,4
   16df4:	1000011e 	bne	r2,zero,16dfc <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   16df8:	0012e780 	call	12e78 <OS_Sched>
        }
        return (OS_ERR_NONE);
   16dfc:	0005883a 	mov	r2,zero
   16e00:	00004106 	br	16f08 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   16e04:	e0bffd17 	ldw	r2,-12(fp)
   16e08:	10800117 	ldw	r2,4(r2)
   16e0c:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   16e10:	e0bffa17 	ldw	r2,-24(fp)
   16e14:	10c0058b 	ldhu	r3,22(r2)
   16e18:	e0bffa17 	ldw	r2,-24(fp)
   16e1c:	1080050b 	ldhu	r2,20(r2)
   16e20:	18ffffcc 	andi	r3,r3,65535
   16e24:	10bfffcc 	andi	r2,r2,65535
   16e28:	18800636 	bltu	r3,r2,16e44 <OSQPostOpt+0x134>
   16e2c:	e0bff717 	ldw	r2,-36(fp)
   16e30:	e0bff915 	stw	r2,-28(fp)
   16e34:	e0bff917 	ldw	r2,-28(fp)
   16e38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   16e3c:	00800784 	movi	r2,30
   16e40:	00003106 	br	16f08 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   16e44:	e0bfff03 	ldbu	r2,-4(fp)
   16e48:	1080008c 	andi	r2,r2,2
   16e4c:	10001326 	beq	r2,zero,16e9c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   16e50:	e0bffa17 	ldw	r2,-24(fp)
   16e54:	10c00417 	ldw	r3,16(r2)
   16e58:	e0bffa17 	ldw	r2,-24(fp)
   16e5c:	10800117 	ldw	r2,4(r2)
   16e60:	1880041e 	bne	r3,r2,16e74 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   16e64:	e0bffa17 	ldw	r2,-24(fp)
   16e68:	10c00217 	ldw	r3,8(r2)
   16e6c:	e0bffa17 	ldw	r2,-24(fp)
   16e70:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   16e74:	e0bffa17 	ldw	r2,-24(fp)
   16e78:	10800417 	ldw	r2,16(r2)
   16e7c:	10ffff04 	addi	r3,r2,-4
   16e80:	e0bffa17 	ldw	r2,-24(fp)
   16e84:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   16e88:	e0bffa17 	ldw	r2,-24(fp)
   16e8c:	10800417 	ldw	r2,16(r2)
   16e90:	e0fffe17 	ldw	r3,-8(fp)
   16e94:	10c00015 	stw	r3,0(r2)
   16e98:	00001006 	br	16edc <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   16e9c:	e0bffa17 	ldw	r2,-24(fp)
   16ea0:	10800317 	ldw	r2,12(r2)
   16ea4:	11000104 	addi	r4,r2,4
   16ea8:	e0fffa17 	ldw	r3,-24(fp)
   16eac:	19000315 	stw	r4,12(r3)
   16eb0:	e0fffe17 	ldw	r3,-8(fp)
   16eb4:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   16eb8:	e0bffa17 	ldw	r2,-24(fp)
   16ebc:	10c00317 	ldw	r3,12(r2)
   16ec0:	e0bffa17 	ldw	r2,-24(fp)
   16ec4:	10800217 	ldw	r2,8(r2)
   16ec8:	1880041e 	bne	r3,r2,16edc <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   16ecc:	e0bffa17 	ldw	r2,-24(fp)
   16ed0:	10c00117 	ldw	r3,4(r2)
   16ed4:	e0bffa17 	ldw	r2,-24(fp)
   16ed8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   16edc:	e0bffa17 	ldw	r2,-24(fp)
   16ee0:	1080058b 	ldhu	r2,22(r2)
   16ee4:	10800044 	addi	r2,r2,1
   16ee8:	1007883a 	mov	r3,r2
   16eec:	e0bffa17 	ldw	r2,-24(fp)
   16ef0:	10c0058d 	sth	r3,22(r2)
   16ef4:	e0bff717 	ldw	r2,-36(fp)
   16ef8:	e0bffb15 	stw	r2,-20(fp)
   16efc:	e0bffb17 	ldw	r2,-20(fp)
   16f00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16f04:	0005883a 	mov	r2,zero
}
   16f08:	e037883a 	mov	sp,fp
   16f0c:	dfc00117 	ldw	ra,4(sp)
   16f10:	df000017 	ldw	fp,0(sp)
   16f14:	dec00204 	addi	sp,sp,8
   16f18:	f800283a 	ret

00016f1c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   16f1c:	defff604 	addi	sp,sp,-40
   16f20:	df000915 	stw	fp,36(sp)
   16f24:	df000904 	addi	fp,sp,36
   16f28:	e13ffe15 	stw	r4,-8(fp)
   16f2c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   16f30:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   16f34:	e0bffe17 	ldw	r2,-8(fp)
   16f38:	1000021e 	bne	r2,zero,16f44 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   16f3c:	00800104 	movi	r2,4
   16f40:	00004906 	br	17068 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   16f44:	e0bfff17 	ldw	r2,-4(fp)
   16f48:	1000021e 	bne	r2,zero,16f54 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   16f4c:	00800244 	movi	r2,9
   16f50:	00004506 	br	17068 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   16f54:	e0bffe17 	ldw	r2,-8(fp)
   16f58:	10800003 	ldbu	r2,0(r2)
   16f5c:	10803fcc 	andi	r2,r2,255
   16f60:	108000a0 	cmpeqi	r2,r2,2
   16f64:	1000021e 	bne	r2,zero,16f70 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   16f68:	00800044 	movi	r2,1
   16f6c:	00003e06 	br	17068 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16f70:	0005303a 	rdctl	r2,status
   16f74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16f78:	e0fffd17 	ldw	r3,-12(fp)
   16f7c:	00bfff84 	movi	r2,-2
   16f80:	1884703a 	and	r2,r3,r2
   16f84:	1001703a 	wrctl	status,r2
  
  return context;
   16f88:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   16f8c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   16f90:	e0bffe17 	ldw	r2,-8(fp)
   16f94:	10c00283 	ldbu	r3,10(r2)
   16f98:	e0bfff17 	ldw	r2,-4(fp)
   16f9c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   16fa0:	e0bffe17 	ldw	r2,-8(fp)
   16fa4:	108002c4 	addi	r2,r2,11
   16fa8:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   16fac:	e0bfff17 	ldw	r2,-4(fp)
   16fb0:	10800204 	addi	r2,r2,8
   16fb4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   16fb8:	e03ff705 	stb	zero,-36(fp)
   16fbc:	00000b06 	br	16fec <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   16fc0:	e0bff917 	ldw	r2,-28(fp)
   16fc4:	10c00044 	addi	r3,r2,1
   16fc8:	e0fff915 	stw	r3,-28(fp)
   16fcc:	e0fff817 	ldw	r3,-32(fp)
   16fd0:	19000044 	addi	r4,r3,1
   16fd4:	e13ff815 	stw	r4,-32(fp)
   16fd8:	18c00003 	ldbu	r3,0(r3)
   16fdc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   16fe0:	e0bff703 	ldbu	r2,-36(fp)
   16fe4:	10800044 	addi	r2,r2,1
   16fe8:	e0bff705 	stb	r2,-36(fp)
   16fec:	e0bff703 	ldbu	r2,-36(fp)
   16ff0:	108000f0 	cmpltui	r2,r2,3
   16ff4:	103ff21e 	bne	r2,zero,16fc0 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   16ff8:	e0bffe17 	ldw	r2,-8(fp)
   16ffc:	10800117 	ldw	r2,4(r2)
   17000:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   17004:	e0bffc17 	ldw	r2,-16(fp)
   17008:	1080058b 	ldhu	r2,22(r2)
   1700c:	10bfffcc 	andi	r2,r2,65535
   17010:	10000626 	beq	r2,zero,1702c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   17014:	e0bffc17 	ldw	r2,-16(fp)
   17018:	10800417 	ldw	r2,16(r2)
   1701c:	10c00017 	ldw	r3,0(r2)
   17020:	e0bfff17 	ldw	r2,-4(fp)
   17024:	10c00015 	stw	r3,0(r2)
   17028:	00000206 	br	17034 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   1702c:	e0bfff17 	ldw	r2,-4(fp)
   17030:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   17034:	e0bffc17 	ldw	r2,-16(fp)
   17038:	10c0058b 	ldhu	r3,22(r2)
   1703c:	e0bfff17 	ldw	r2,-4(fp)
   17040:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   17044:	e0bffc17 	ldw	r2,-16(fp)
   17048:	10c0050b 	ldhu	r3,20(r2)
   1704c:	e0bfff17 	ldw	r2,-4(fp)
   17050:	10c0018d 	sth	r3,6(r2)
   17054:	e0bffa17 	ldw	r2,-24(fp)
   17058:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1705c:	e0bffb17 	ldw	r2,-20(fp)
   17060:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17064:	0005883a 	mov	r2,zero
}
   17068:	e037883a 	mov	sp,fp
   1706c:	df000017 	ldw	fp,0(sp)
   17070:	dec00104 	addi	sp,sp,4
   17074:	f800283a 	ret

00017078 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   17078:	defffb04 	addi	sp,sp,-20
   1707c:	dfc00415 	stw	ra,16(sp)
   17080:	df000315 	stw	fp,12(sp)
   17084:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   17088:	01407804 	movi	r5,480
   1708c:	010000f4 	movhi	r4,3
   17090:	212d7504 	addi	r4,r4,-18988
   17094:	0012dbc0 	call	12dbc <OS_MemClr>
    pq1 = &OSQTbl[0];
   17098:	008000f4 	movhi	r2,3
   1709c:	10ad7504 	addi	r2,r2,-18988
   170a0:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   170a4:	008000f4 	movhi	r2,3
   170a8:	10ad7b04 	addi	r2,r2,-18964
   170ac:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   170b0:	e03ffd0d 	sth	zero,-12(fp)
   170b4:	00000c06 	br	170e8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   170b8:	e0bffe17 	ldw	r2,-8(fp)
   170bc:	e0ffff17 	ldw	r3,-4(fp)
   170c0:	10c00015 	stw	r3,0(r2)
        pq1++;
   170c4:	e0bffe17 	ldw	r2,-8(fp)
   170c8:	10800604 	addi	r2,r2,24
   170cc:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   170d0:	e0bfff17 	ldw	r2,-4(fp)
   170d4:	10800604 	addi	r2,r2,24
   170d8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   170dc:	e0bffd0b 	ldhu	r2,-12(fp)
   170e0:	10800044 	addi	r2,r2,1
   170e4:	e0bffd0d 	sth	r2,-12(fp)
   170e8:	e0bffd0b 	ldhu	r2,-12(fp)
   170ec:	108004f0 	cmpltui	r2,r2,19
   170f0:	103ff11e 	bne	r2,zero,170b8 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   170f4:	e0bffe17 	ldw	r2,-8(fp)
   170f8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   170fc:	008000f4 	movhi	r2,3
   17100:	10ad7504 	addi	r2,r2,-18988
   17104:	d0a7f515 	stw	r2,-24620(gp)
#endif
}
   17108:	0001883a 	nop
   1710c:	e037883a 	mov	sp,fp
   17110:	dfc00117 	ldw	ra,4(sp)
   17114:	df000017 	ldw	fp,0(sp)
   17118:	dec00204 	addi	sp,sp,8
   1711c:	f800283a 	ret

00017120 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   17120:	defffa04 	addi	sp,sp,-24
   17124:	df000515 	stw	fp,20(sp)
   17128:	df000504 	addi	fp,sp,20
   1712c:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17130:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17134:	e0bfff17 	ldw	r2,-4(fp)
   17138:	1000021e 	bne	r2,zero,17144 <OSSemAccept+0x24>
        return (0);
   1713c:	0005883a 	mov	r2,zero
   17140:	00001f06 	br	171c0 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   17144:	e0bfff17 	ldw	r2,-4(fp)
   17148:	10800003 	ldbu	r2,0(r2)
   1714c:	10803fcc 	andi	r2,r2,255
   17150:	108000e0 	cmpeqi	r2,r2,3
   17154:	1000021e 	bne	r2,zero,17160 <OSSemAccept+0x40>
        return (0);
   17158:	0005883a 	mov	r2,zero
   1715c:	00001806 	br	171c0 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17160:	0005303a 	rdctl	r2,status
   17164:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17168:	e0fffe17 	ldw	r3,-8(fp)
   1716c:	00bfff84 	movi	r2,-2
   17170:	1884703a 	and	r2,r3,r2
   17174:	1001703a 	wrctl	status,r2
  
  return context;
   17178:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1717c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   17180:	e0bfff17 	ldw	r2,-4(fp)
   17184:	1080020b 	ldhu	r2,8(r2)
   17188:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   1718c:	e0bffd0b 	ldhu	r2,-12(fp)
   17190:	10000626 	beq	r2,zero,171ac <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   17194:	e0bfff17 	ldw	r2,-4(fp)
   17198:	1080020b 	ldhu	r2,8(r2)
   1719c:	10bfffc4 	addi	r2,r2,-1
   171a0:	1007883a 	mov	r3,r2
   171a4:	e0bfff17 	ldw	r2,-4(fp)
   171a8:	10c0020d 	sth	r3,8(r2)
   171ac:	e0bffb17 	ldw	r2,-20(fp)
   171b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   171b4:	e0bffc17 	ldw	r2,-16(fp)
   171b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   171bc:	e0bffd0b 	ldhu	r2,-12(fp)
}
   171c0:	e037883a 	mov	sp,fp
   171c4:	df000017 	ldw	fp,0(sp)
   171c8:	dec00104 	addi	sp,sp,4
   171cc:	f800283a 	ret

000171d0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   171d0:	defff904 	addi	sp,sp,-28
   171d4:	dfc00615 	stw	ra,24(sp)
   171d8:	df000515 	stw	fp,20(sp)
   171dc:	df000504 	addi	fp,sp,20
   171e0:	2005883a 	mov	r2,r4
   171e4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   171e8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   171ec:	d0a7f803 	ldbu	r2,-24608(gp)
   171f0:	10803fcc 	andi	r2,r2,255
   171f4:	10000226 	beq	r2,zero,17200 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   171f8:	0005883a 	mov	r2,zero
   171fc:	00002506 	br	17294 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17200:	0005303a 	rdctl	r2,status
   17204:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17208:	e0fffe17 	ldw	r3,-8(fp)
   1720c:	00bfff84 	movi	r2,-2
   17210:	1884703a 	and	r2,r3,r2
   17214:	1001703a 	wrctl	status,r2
  
  return context;
   17218:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1721c:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   17220:	d0a7f717 	ldw	r2,-24612(gp)
   17224:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   17228:	d0a7f717 	ldw	r2,-24612(gp)
   1722c:	10000326 	beq	r2,zero,1723c <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   17230:	d0a7f717 	ldw	r2,-24612(gp)
   17234:	10800117 	ldw	r2,4(r2)
   17238:	d0a7f715 	stw	r2,-24612(gp)
   1723c:	e0bffb17 	ldw	r2,-20(fp)
   17240:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17244:	e0bffc17 	ldw	r2,-16(fp)
   17248:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   1724c:	e0bffd17 	ldw	r2,-12(fp)
   17250:	10000f26 	beq	r2,zero,17290 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   17254:	e0bffd17 	ldw	r2,-12(fp)
   17258:	00c000c4 	movi	r3,3
   1725c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   17260:	e0bffd17 	ldw	r2,-12(fp)
   17264:	e0ffff0b 	ldhu	r3,-4(fp)
   17268:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   1726c:	e0bffd17 	ldw	r2,-12(fp)
   17270:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   17274:	e0bffd17 	ldw	r2,-12(fp)
   17278:	00c00fc4 	movi	r3,63
   1727c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   17280:	e0bffd17 	ldw	r2,-12(fp)
   17284:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   17288:	e13ffd17 	ldw	r4,-12(fp)
   1728c:	00129dc0 	call	129dc <OS_EventWaitListInit>
    }
    return (pevent);
   17290:	e0bffd17 	ldw	r2,-12(fp)
}
   17294:	e037883a 	mov	sp,fp
   17298:	dfc00117 	ldw	ra,4(sp)
   1729c:	df000017 	ldw	fp,0(sp)
   172a0:	dec00204 	addi	sp,sp,8
   172a4:	f800283a 	ret

000172a8 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   172a8:	defff304 	addi	sp,sp,-52
   172ac:	dfc00c15 	stw	ra,48(sp)
   172b0:	df000b15 	stw	fp,44(sp)
   172b4:	df000b04 	addi	fp,sp,44
   172b8:	e13ffd15 	stw	r4,-12(fp)
   172bc:	2805883a 	mov	r2,r5
   172c0:	e1bfff15 	stw	r6,-4(fp)
   172c4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   172c8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   172cc:	e0bfff17 	ldw	r2,-4(fp)
   172d0:	1000021e 	bne	r2,zero,172dc <OSSemDel+0x34>
        return (pevent);
   172d4:	e0bffd17 	ldw	r2,-12(fp)
   172d8:	00007e06 	br	174d4 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   172dc:	e0bffd17 	ldw	r2,-12(fp)
   172e0:	1000051e 	bne	r2,zero,172f8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   172e4:	e0bfff17 	ldw	r2,-4(fp)
   172e8:	00c00104 	movi	r3,4
   172ec:	10c00005 	stb	r3,0(r2)
        return (pevent);
   172f0:	e0bffd17 	ldw	r2,-12(fp)
   172f4:	00007706 	br	174d4 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   172f8:	e0bffd17 	ldw	r2,-12(fp)
   172fc:	10800003 	ldbu	r2,0(r2)
   17300:	10803fcc 	andi	r2,r2,255
   17304:	108000e0 	cmpeqi	r2,r2,3
   17308:	1000051e 	bne	r2,zero,17320 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1730c:	e0bfff17 	ldw	r2,-4(fp)
   17310:	00c00044 	movi	r3,1
   17314:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17318:	e0bffd17 	ldw	r2,-12(fp)
   1731c:	00006d06 	br	174d4 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   17320:	d0a7f803 	ldbu	r2,-24608(gp)
   17324:	10803fcc 	andi	r2,r2,255
   17328:	10000526 	beq	r2,zero,17340 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   1732c:	e0bfff17 	ldw	r2,-4(fp)
   17330:	00c003c4 	movi	r3,15
   17334:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17338:	e0bffd17 	ldw	r2,-12(fp)
   1733c:	00006506 	br	174d4 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17340:	0005303a 	rdctl	r2,status
   17344:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17348:	e0fffc17 	ldw	r3,-16(fp)
   1734c:	00bfff84 	movi	r2,-2
   17350:	1884703a 	and	r2,r3,r2
   17354:	1001703a 	wrctl	status,r2
  
  return context;
   17358:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1735c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   17360:	e0bffd17 	ldw	r2,-12(fp)
   17364:	10800283 	ldbu	r2,10(r2)
   17368:	10803fcc 	andi	r2,r2,255
   1736c:	10000326 	beq	r2,zero,1737c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   17370:	00800044 	movi	r2,1
   17374:	e0bff505 	stb	r2,-44(fp)
   17378:	00000106 	br	17380 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1737c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   17380:	e0bffe03 	ldbu	r2,-8(fp)
   17384:	10000326 	beq	r2,zero,17394 <OSSemDel+0xec>
   17388:	10800060 	cmpeqi	r2,r2,1
   1738c:	1000281e 	bne	r2,zero,17430 <OSSemDel+0x188>
   17390:	00004506 	br	174a8 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   17394:	e0bff503 	ldbu	r2,-44(fp)
   17398:	1000161e 	bne	r2,zero,173f4 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1739c:	e0bffd17 	ldw	r2,-12(fp)
   173a0:	00c00fc4 	movi	r3,63
   173a4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   173a8:	e0bffd17 	ldw	r2,-12(fp)
   173ac:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   173b0:	e0bffd17 	ldw	r2,-12(fp)
   173b4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   173b8:	d0e7f717 	ldw	r3,-24612(gp)
   173bc:	e0bffd17 	ldw	r2,-12(fp)
   173c0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   173c4:	e0bffd17 	ldw	r2,-12(fp)
   173c8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   173cc:	e0bffd17 	ldw	r2,-12(fp)
   173d0:	d0a7f715 	stw	r2,-24612(gp)
   173d4:	e0bff717 	ldw	r2,-36(fp)
   173d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   173dc:	e0bff817 	ldw	r2,-32(fp)
   173e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   173e4:	e0bfff17 	ldw	r2,-4(fp)
   173e8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   173ec:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   173f0:	00003706 	br	174d0 <OSSemDel+0x228>
   173f4:	e0bff717 	ldw	r2,-36(fp)
   173f8:	e0bff915 	stw	r2,-28(fp)
   173fc:	e0bff917 	ldw	r2,-28(fp)
   17400:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   17404:	e0bfff17 	ldw	r2,-4(fp)
   17408:	00c01244 	movi	r3,73
   1740c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   17410:	e0bffd17 	ldw	r2,-12(fp)
   17414:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   17418:	00002d06 	br	174d0 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1741c:	000f883a 	mov	r7,zero
   17420:	01800044 	movi	r6,1
   17424:	000b883a 	mov	r5,zero
   17428:	e13ffd17 	ldw	r4,-12(fp)
   1742c:	001242c0 	call	1242c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   17430:	e0bffd17 	ldw	r2,-12(fp)
   17434:	10800283 	ldbu	r2,10(r2)
   17438:	10803fcc 	andi	r2,r2,255
   1743c:	103ff71e 	bne	r2,zero,1741c <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   17440:	e0bffd17 	ldw	r2,-12(fp)
   17444:	00c00fc4 	movi	r3,63
   17448:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1744c:	e0bffd17 	ldw	r2,-12(fp)
   17450:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   17454:	e0bffd17 	ldw	r2,-12(fp)
   17458:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1745c:	d0e7f717 	ldw	r3,-24612(gp)
   17460:	e0bffd17 	ldw	r2,-12(fp)
   17464:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   17468:	e0bffd17 	ldw	r2,-12(fp)
   1746c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   17470:	e0bffd17 	ldw	r2,-12(fp)
   17474:	d0a7f715 	stw	r2,-24612(gp)
   17478:	e0bff717 	ldw	r2,-36(fp)
   1747c:	e0bffa15 	stw	r2,-24(fp)
   17480:	e0bffa17 	ldw	r2,-24(fp)
   17484:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   17488:	e0bff503 	ldbu	r2,-44(fp)
   1748c:	10800058 	cmpnei	r2,r2,1
   17490:	1000011e 	bne	r2,zero,17498 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   17494:	0012e780 	call	12e78 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   17498:	e0bfff17 	ldw	r2,-4(fp)
   1749c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   174a0:	e03ff615 	stw	zero,-40(fp)
             break;
   174a4:	00000a06 	br	174d0 <OSSemDel+0x228>
   174a8:	e0bff717 	ldw	r2,-36(fp)
   174ac:	e0bffb15 	stw	r2,-20(fp)
   174b0:	e0bffb17 	ldw	r2,-20(fp)
   174b4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   174b8:	e0bfff17 	ldw	r2,-4(fp)
   174bc:	00c001c4 	movi	r3,7
   174c0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   174c4:	e0bffd17 	ldw	r2,-12(fp)
   174c8:	e0bff615 	stw	r2,-40(fp)
             break;
   174cc:	0001883a 	nop
    }
    return (pevent_return);
   174d0:	e0bff617 	ldw	r2,-40(fp)
}
   174d4:	e037883a 	mov	sp,fp
   174d8:	dfc00117 	ldw	ra,4(sp)
   174dc:	df000017 	ldw	fp,0(sp)
   174e0:	dec00204 	addi	sp,sp,8
   174e4:	f800283a 	ret

000174e8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   174e8:	defff504 	addi	sp,sp,-44
   174ec:	dfc00a15 	stw	ra,40(sp)
   174f0:	df000915 	stw	fp,36(sp)
   174f4:	df000904 	addi	fp,sp,36
   174f8:	e13ffd15 	stw	r4,-12(fp)
   174fc:	2805883a 	mov	r2,r5
   17500:	e1bfff15 	stw	r6,-4(fp)
   17504:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17508:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1750c:	e0bfff17 	ldw	r2,-4(fp)
   17510:	10007226 	beq	r2,zero,176dc <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17514:	e0bffd17 	ldw	r2,-12(fp)
   17518:	1000041e 	bne	r2,zero,1752c <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1751c:	e0bfff17 	ldw	r2,-4(fp)
   17520:	00c00104 	movi	r3,4
   17524:	10c00005 	stb	r3,0(r2)
        return;
   17528:	00006d06 	br	176e0 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1752c:	e0bffd17 	ldw	r2,-12(fp)
   17530:	10800003 	ldbu	r2,0(r2)
   17534:	10803fcc 	andi	r2,r2,255
   17538:	108000e0 	cmpeqi	r2,r2,3
   1753c:	1000041e 	bne	r2,zero,17550 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   17540:	e0bfff17 	ldw	r2,-4(fp)
   17544:	00c00044 	movi	r3,1
   17548:	10c00005 	stb	r3,0(r2)
        return;
   1754c:	00006406 	br	176e0 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   17550:	d0a7f803 	ldbu	r2,-24608(gp)
   17554:	10803fcc 	andi	r2,r2,255
   17558:	10000426 	beq	r2,zero,1756c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   1755c:	e0bfff17 	ldw	r2,-4(fp)
   17560:	00c00084 	movi	r3,2
   17564:	10c00005 	stb	r3,0(r2)
        return;
   17568:	00005d06 	br	176e0 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   1756c:	d0a7ea03 	ldbu	r2,-24664(gp)
   17570:	10803fcc 	andi	r2,r2,255
   17574:	10000426 	beq	r2,zero,17588 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   17578:	e0bfff17 	ldw	r2,-4(fp)
   1757c:	00c00344 	movi	r3,13
   17580:	10c00005 	stb	r3,0(r2)
        return;
   17584:	00005606 	br	176e0 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17588:	0005303a 	rdctl	r2,status
   1758c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17590:	e0fffc17 	ldw	r3,-16(fp)
   17594:	00bfff84 	movi	r2,-2
   17598:	1884703a 	and	r2,r3,r2
   1759c:	1001703a 	wrctl	status,r2
  
  return context;
   175a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   175a4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   175a8:	e0bffd17 	ldw	r2,-12(fp)
   175ac:	1080020b 	ldhu	r2,8(r2)
   175b0:	10bfffcc 	andi	r2,r2,65535
   175b4:	10000d26 	beq	r2,zero,175ec <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   175b8:	e0bffd17 	ldw	r2,-12(fp)
   175bc:	1080020b 	ldhu	r2,8(r2)
   175c0:	10bfffc4 	addi	r2,r2,-1
   175c4:	1007883a 	mov	r3,r2
   175c8:	e0bffd17 	ldw	r2,-12(fp)
   175cc:	10c0020d 	sth	r3,8(r2)
   175d0:	e0bff717 	ldw	r2,-36(fp)
   175d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   175d8:	e0bff817 	ldw	r2,-32(fp)
   175dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   175e0:	e0bfff17 	ldw	r2,-4(fp)
   175e4:	10000005 	stb	zero,0(r2)
        return;
   175e8:	00003d06 	br	176e0 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   175ec:	d0a7f917 	ldw	r2,-24604(gp)
   175f0:	d0e7f917 	ldw	r3,-24604(gp)
   175f4:	18c00c03 	ldbu	r3,48(r3)
   175f8:	18c00054 	ori	r3,r3,1
   175fc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   17600:	d0a7f917 	ldw	r2,-24604(gp)
   17604:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   17608:	d0a7f917 	ldw	r2,-24604(gp)
   1760c:	e0fffe0b 	ldhu	r3,-8(fp)
   17610:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   17614:	e13ffd17 	ldw	r4,-12(fp)
   17618:	00125c40 	call	125c4 <OS_EventTaskWait>
   1761c:	e0bff717 	ldw	r2,-36(fp)
   17620:	e0bffb15 	stw	r2,-20(fp)
   17624:	e0bffb17 	ldw	r2,-20(fp)
   17628:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   1762c:	0012e780 	call	12e78 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17630:	0005303a 	rdctl	r2,status
   17634:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17638:	e0fff917 	ldw	r3,-28(fp)
   1763c:	00bfff84 	movi	r2,-2
   17640:	1884703a 	and	r2,r3,r2
   17644:	1001703a 	wrctl	status,r2
  
  return context;
   17648:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1764c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   17650:	d0a7f917 	ldw	r2,-24604(gp)
   17654:	10800c43 	ldbu	r2,49(r2)
   17658:	10803fcc 	andi	r2,r2,255
   1765c:	10000326 	beq	r2,zero,1766c <OSSemPend+0x184>
   17660:	108000a0 	cmpeqi	r2,r2,2
   17664:	1000041e 	bne	r2,zero,17678 <OSSemPend+0x190>
   17668:	00000706 	br	17688 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   1766c:	e0bfff17 	ldw	r2,-4(fp)
   17670:	10000005 	stb	zero,0(r2)
             break;
   17674:	00000c06 	br	176a8 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   17678:	e0bfff17 	ldw	r2,-4(fp)
   1767c:	00c00384 	movi	r3,14
   17680:	10c00005 	stb	r3,0(r2)
             break;
   17684:	00000806 	br	176a8 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   17688:	d0a7f917 	ldw	r2,-24604(gp)
   1768c:	e17ffd17 	ldw	r5,-12(fp)
   17690:	1009883a 	mov	r4,r2
   17694:	00128240 	call	12824 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   17698:	e0bfff17 	ldw	r2,-4(fp)
   1769c:	00c00284 	movi	r3,10
   176a0:	10c00005 	stb	r3,0(r2)
             break;
   176a4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   176a8:	d0a7f917 	ldw	r2,-24604(gp)
   176ac:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   176b0:	d0a7f917 	ldw	r2,-24604(gp)
   176b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   176b8:	d0a7f917 	ldw	r2,-24604(gp)
   176bc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   176c0:	d0a7f917 	ldw	r2,-24604(gp)
   176c4:	10000815 	stw	zero,32(r2)
   176c8:	e0bff717 	ldw	r2,-36(fp)
   176cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   176d0:	e0bffa17 	ldw	r2,-24(fp)
   176d4:	1001703a 	wrctl	status,r2
   176d8:	00000106 	br	176e0 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   176dc:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   176e0:	e037883a 	mov	sp,fp
   176e4:	dfc00117 	ldw	ra,4(sp)
   176e8:	df000017 	ldw	fp,0(sp)
   176ec:	dec00204 	addi	sp,sp,8
   176f0:	f800283a 	ret

000176f4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   176f4:	defff604 	addi	sp,sp,-40
   176f8:	dfc00915 	stw	ra,36(sp)
   176fc:	df000815 	stw	fp,32(sp)
   17700:	df000804 	addi	fp,sp,32
   17704:	e13ffd15 	stw	r4,-12(fp)
   17708:	2805883a 	mov	r2,r5
   1770c:	e1bfff15 	stw	r6,-4(fp)
   17710:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17714:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17718:	e0bfff17 	ldw	r2,-4(fp)
   1771c:	1000021e 	bne	r2,zero,17728 <OSSemPendAbort+0x34>
        return (0);
   17720:	0005883a 	mov	r2,zero
   17724:	00004906 	br	1784c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17728:	e0bffd17 	ldw	r2,-12(fp)
   1772c:	1000051e 	bne	r2,zero,17744 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17730:	e0bfff17 	ldw	r2,-4(fp)
   17734:	00c00104 	movi	r3,4
   17738:	10c00005 	stb	r3,0(r2)
        return (0);
   1773c:	0005883a 	mov	r2,zero
   17740:	00004206 	br	1784c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   17744:	e0bffd17 	ldw	r2,-12(fp)
   17748:	10800003 	ldbu	r2,0(r2)
   1774c:	10803fcc 	andi	r2,r2,255
   17750:	108000e0 	cmpeqi	r2,r2,3
   17754:	1000051e 	bne	r2,zero,1776c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17758:	e0bfff17 	ldw	r2,-4(fp)
   1775c:	00c00044 	movi	r3,1
   17760:	10c00005 	stb	r3,0(r2)
        return (0);
   17764:	0005883a 	mov	r2,zero
   17768:	00003806 	br	1784c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1776c:	0005303a 	rdctl	r2,status
   17770:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17774:	e0fffc17 	ldw	r3,-16(fp)
   17778:	00bfff84 	movi	r2,-2
   1777c:	1884703a 	and	r2,r3,r2
   17780:	1001703a 	wrctl	status,r2
  
  return context;
   17784:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17788:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   1778c:	e0bffd17 	ldw	r2,-12(fp)
   17790:	10800283 	ldbu	r2,10(r2)
   17794:	10803fcc 	andi	r2,r2,255
   17798:	10002526 	beq	r2,zero,17830 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   1779c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   177a0:	e0bffe03 	ldbu	r2,-8(fp)
   177a4:	10800060 	cmpeqi	r2,r2,1
   177a8:	10000e26 	beq	r2,zero,177e4 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   177ac:	00000806 	br	177d0 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   177b0:	01c00084 	movi	r7,2
   177b4:	01800044 	movi	r6,1
   177b8:	000b883a 	mov	r5,zero
   177bc:	e13ffd17 	ldw	r4,-12(fp)
   177c0:	001242c0 	call	1242c <OS_EventTaskRdy>
                     nbr_tasks++;
   177c4:	e0bff803 	ldbu	r2,-32(fp)
   177c8:	10800044 	addi	r2,r2,1
   177cc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   177d0:	e0bffd17 	ldw	r2,-12(fp)
   177d4:	10800283 	ldbu	r2,10(r2)
   177d8:	10803fcc 	andi	r2,r2,255
   177dc:	103ff41e 	bne	r2,zero,177b0 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   177e0:	00000906 	br	17808 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   177e4:	01c00084 	movi	r7,2
   177e8:	01800044 	movi	r6,1
   177ec:	000b883a 	mov	r5,zero
   177f0:	e13ffd17 	ldw	r4,-12(fp)
   177f4:	001242c0 	call	1242c <OS_EventTaskRdy>
                 nbr_tasks++;
   177f8:	e0bff803 	ldbu	r2,-32(fp)
   177fc:	10800044 	addi	r2,r2,1
   17800:	e0bff805 	stb	r2,-32(fp)
                 break;
   17804:	0001883a 	nop
   17808:	e0bff917 	ldw	r2,-28(fp)
   1780c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17810:	e0bffa17 	ldw	r2,-24(fp)
   17814:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   17818:	0012e780 	call	12e78 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1781c:	e0bfff17 	ldw	r2,-4(fp)
   17820:	00c00384 	movi	r3,14
   17824:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   17828:	e0bff803 	ldbu	r2,-32(fp)
   1782c:	00000706 	br	1784c <OSSemPendAbort+0x158>
   17830:	e0bff917 	ldw	r2,-28(fp)
   17834:	e0bffb15 	stw	r2,-20(fp)
   17838:	e0bffb17 	ldw	r2,-20(fp)
   1783c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17840:	e0bfff17 	ldw	r2,-4(fp)
   17844:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   17848:	0005883a 	mov	r2,zero
}
   1784c:	e037883a 	mov	sp,fp
   17850:	dfc00117 	ldw	ra,4(sp)
   17854:	df000017 	ldw	fp,0(sp)
   17858:	dec00204 	addi	sp,sp,8
   1785c:	f800283a 	ret

00017860 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   17860:	defff804 	addi	sp,sp,-32
   17864:	dfc00715 	stw	ra,28(sp)
   17868:	df000615 	stw	fp,24(sp)
   1786c:	df000604 	addi	fp,sp,24
   17870:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17874:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17878:	e0bfff17 	ldw	r2,-4(fp)
   1787c:	1000021e 	bne	r2,zero,17888 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   17880:	00800104 	movi	r2,4
   17884:	00003506 	br	1795c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   17888:	e0bfff17 	ldw	r2,-4(fp)
   1788c:	10800003 	ldbu	r2,0(r2)
   17890:	10803fcc 	andi	r2,r2,255
   17894:	108000e0 	cmpeqi	r2,r2,3
   17898:	1000021e 	bne	r2,zero,178a4 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   1789c:	00800044 	movi	r2,1
   178a0:	00002e06 	br	1795c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   178a4:	0005303a 	rdctl	r2,status
   178a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   178ac:	e0fffe17 	ldw	r3,-8(fp)
   178b0:	00bfff84 	movi	r2,-2
   178b4:	1884703a 	and	r2,r3,r2
   178b8:	1001703a 	wrctl	status,r2
  
  return context;
   178bc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   178c0:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   178c4:	e0bfff17 	ldw	r2,-4(fp)
   178c8:	10800283 	ldbu	r2,10(r2)
   178cc:	10803fcc 	andi	r2,r2,255
   178d0:	10000c26 	beq	r2,zero,17904 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   178d4:	000f883a 	mov	r7,zero
   178d8:	01800044 	movi	r6,1
   178dc:	000b883a 	mov	r5,zero
   178e0:	e13fff17 	ldw	r4,-4(fp)
   178e4:	001242c0 	call	1242c <OS_EventTaskRdy>
   178e8:	e0bffa17 	ldw	r2,-24(fp)
   178ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   178f0:	e0bffb17 	ldw	r2,-20(fp)
   178f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   178f8:	0012e780 	call	12e78 <OS_Sched>
        return (OS_ERR_NONE);
   178fc:	0005883a 	mov	r2,zero
   17900:	00001606 	br	1795c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   17904:	e0bfff17 	ldw	r2,-4(fp)
   17908:	1080020b 	ldhu	r2,8(r2)
   1790c:	10ffffcc 	andi	r3,r2,65535
   17910:	00bfffd4 	movui	r2,65535
   17914:	18800c26 	beq	r3,r2,17948 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   17918:	e0bfff17 	ldw	r2,-4(fp)
   1791c:	1080020b 	ldhu	r2,8(r2)
   17920:	10800044 	addi	r2,r2,1
   17924:	1007883a 	mov	r3,r2
   17928:	e0bfff17 	ldw	r2,-4(fp)
   1792c:	10c0020d 	sth	r3,8(r2)
   17930:	e0bffa17 	ldw	r2,-24(fp)
   17934:	e0bffc15 	stw	r2,-16(fp)
   17938:	e0bffc17 	ldw	r2,-16(fp)
   1793c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   17940:	0005883a 	mov	r2,zero
   17944:	00000506 	br	1795c <OSSemPost+0xfc>
   17948:	e0bffa17 	ldw	r2,-24(fp)
   1794c:	e0bffd15 	stw	r2,-12(fp)
   17950:	e0bffd17 	ldw	r2,-12(fp)
   17954:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   17958:	00800c84 	movi	r2,50
}
   1795c:	e037883a 	mov	sp,fp
   17960:	dfc00117 	ldw	ra,4(sp)
   17964:	df000017 	ldw	fp,0(sp)
   17968:	dec00204 	addi	sp,sp,8
   1796c:	f800283a 	ret

00017970 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   17970:	defff704 	addi	sp,sp,-36
   17974:	df000815 	stw	fp,32(sp)
   17978:	df000804 	addi	fp,sp,32
   1797c:	e13ffe15 	stw	r4,-8(fp)
   17980:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17984:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17988:	e0bffe17 	ldw	r2,-8(fp)
   1798c:	1000021e 	bne	r2,zero,17998 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   17990:	00800104 	movi	r2,4
   17994:	00003606 	br	17a70 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   17998:	e0bfff17 	ldw	r2,-4(fp)
   1799c:	1000021e 	bne	r2,zero,179a8 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   179a0:	00800244 	movi	r2,9
   179a4:	00003206 	br	17a70 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   179a8:	e0bffe17 	ldw	r2,-8(fp)
   179ac:	10800003 	ldbu	r2,0(r2)
   179b0:	10803fcc 	andi	r2,r2,255
   179b4:	108000e0 	cmpeqi	r2,r2,3
   179b8:	1000021e 	bne	r2,zero,179c4 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   179bc:	00800044 	movi	r2,1
   179c0:	00002b06 	br	17a70 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   179c4:	0005303a 	rdctl	r2,status
   179c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   179cc:	e0fffd17 	ldw	r3,-12(fp)
   179d0:	00bfff84 	movi	r2,-2
   179d4:	1884703a 	and	r2,r3,r2
   179d8:	1001703a 	wrctl	status,r2
  
  return context;
   179dc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   179e0:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   179e4:	e0bffe17 	ldw	r2,-8(fp)
   179e8:	10c00283 	ldbu	r3,10(r2)
   179ec:	e0bfff17 	ldw	r2,-4(fp)
   179f0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   179f4:	e0bffe17 	ldw	r2,-8(fp)
   179f8:	108002c4 	addi	r2,r2,11
   179fc:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   17a00:	e0bfff17 	ldw	r2,-4(fp)
   17a04:	10800084 	addi	r2,r2,2
   17a08:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   17a0c:	e03ffa05 	stb	zero,-24(fp)
   17a10:	00000b06 	br	17a40 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   17a14:	e0bff917 	ldw	r2,-28(fp)
   17a18:	10c00044 	addi	r3,r2,1
   17a1c:	e0fff915 	stw	r3,-28(fp)
   17a20:	e0fff817 	ldw	r3,-32(fp)
   17a24:	19000044 	addi	r4,r3,1
   17a28:	e13ff815 	stw	r4,-32(fp)
   17a2c:	18c00003 	ldbu	r3,0(r3)
   17a30:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   17a34:	e0bffa03 	ldbu	r2,-24(fp)
   17a38:	10800044 	addi	r2,r2,1
   17a3c:	e0bffa05 	stb	r2,-24(fp)
   17a40:	e0bffa03 	ldbu	r2,-24(fp)
   17a44:	108000f0 	cmpltui	r2,r2,3
   17a48:	103ff21e 	bne	r2,zero,17a14 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   17a4c:	e0bffe17 	ldw	r2,-8(fp)
   17a50:	10c0020b 	ldhu	r3,8(r2)
   17a54:	e0bfff17 	ldw	r2,-4(fp)
   17a58:	10c0000d 	sth	r3,0(r2)
   17a5c:	e0bffb17 	ldw	r2,-20(fp)
   17a60:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a64:	e0bffc17 	ldw	r2,-16(fp)
   17a68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17a6c:	0005883a 	mov	r2,zero
}
   17a70:	e037883a 	mov	sp,fp
   17a74:	df000017 	ldw	fp,0(sp)
   17a78:	dec00104 	addi	sp,sp,4
   17a7c:	f800283a 	ret

00017a80 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   17a80:	defff904 	addi	sp,sp,-28
   17a84:	df000615 	stw	fp,24(sp)
   17a88:	df000604 	addi	fp,sp,24
   17a8c:	e13ffd15 	stw	r4,-12(fp)
   17a90:	2805883a 	mov	r2,r5
   17a94:	e1bfff15 	stw	r6,-4(fp)
   17a98:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17a9c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17aa0:	e0bfff17 	ldw	r2,-4(fp)
   17aa4:	10003126 	beq	r2,zero,17b6c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   17aa8:	e0bffd17 	ldw	r2,-12(fp)
   17aac:	1000041e 	bne	r2,zero,17ac0 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   17ab0:	e0bfff17 	ldw	r2,-4(fp)
   17ab4:	00c00104 	movi	r3,4
   17ab8:	10c00005 	stb	r3,0(r2)
        return;
   17abc:	00002c06 	br	17b70 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   17ac0:	e0bffd17 	ldw	r2,-12(fp)
   17ac4:	10800003 	ldbu	r2,0(r2)
   17ac8:	10803fcc 	andi	r2,r2,255
   17acc:	108000e0 	cmpeqi	r2,r2,3
   17ad0:	1000041e 	bne	r2,zero,17ae4 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   17ad4:	e0bfff17 	ldw	r2,-4(fp)
   17ad8:	00c00044 	movi	r3,1
   17adc:	10c00005 	stb	r3,0(r2)
        return;
   17ae0:	00002306 	br	17b70 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ae4:	0005303a 	rdctl	r2,status
   17ae8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17aec:	e0fffc17 	ldw	r3,-16(fp)
   17af0:	00bfff84 	movi	r2,-2
   17af4:	1884703a 	and	r2,r3,r2
   17af8:	1001703a 	wrctl	status,r2
  
  return context;
   17afc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17b00:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   17b04:	e0bfff17 	ldw	r2,-4(fp)
   17b08:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   17b0c:	e0bffd17 	ldw	r2,-12(fp)
   17b10:	1080020b 	ldhu	r2,8(r2)
   17b14:	10bfffcc 	andi	r2,r2,65535
   17b18:	10000426 	beq	r2,zero,17b2c <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   17b1c:	e0bffd17 	ldw	r2,-12(fp)
   17b20:	e0fffe0b 	ldhu	r3,-8(fp)
   17b24:	10c0020d 	sth	r3,8(r2)
   17b28:	00000b06 	br	17b58 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   17b2c:	e0bffd17 	ldw	r2,-12(fp)
   17b30:	10800283 	ldbu	r2,10(r2)
   17b34:	10803fcc 	andi	r2,r2,255
   17b38:	1000041e 	bne	r2,zero,17b4c <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   17b3c:	e0bffd17 	ldw	r2,-12(fp)
   17b40:	e0fffe0b 	ldhu	r3,-8(fp)
   17b44:	10c0020d 	sth	r3,8(r2)
   17b48:	00000306 	br	17b58 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   17b4c:	e0bfff17 	ldw	r2,-4(fp)
   17b50:	00c01244 	movi	r3,73
   17b54:	10c00005 	stb	r3,0(r2)
   17b58:	e0bffa17 	ldw	r2,-24(fp)
   17b5c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17b60:	e0bffb17 	ldw	r2,-20(fp)
   17b64:	1001703a 	wrctl	status,r2
   17b68:	00000106 	br	17b70 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   17b6c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   17b70:	e037883a 	mov	sp,fp
   17b74:	df000017 	ldw	fp,0(sp)
   17b78:	dec00104 	addi	sp,sp,4
   17b7c:	f800283a 	ret

00017b80 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   17b80:	defff104 	addi	sp,sp,-60
   17b84:	dfc00e15 	stw	ra,56(sp)
   17b88:	df000d15 	stw	fp,52(sp)
   17b8c:	df000d04 	addi	fp,sp,52
   17b90:	2007883a 	mov	r3,r4
   17b94:	2805883a 	mov	r2,r5
   17b98:	e0fffe05 	stb	r3,-8(fp)
   17b9c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   17ba0:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   17ba4:	e0bffe03 	ldbu	r2,-8(fp)
   17ba8:	10800530 	cmpltui	r2,r2,20
   17bac:	1000051e 	bne	r2,zero,17bc4 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   17bb0:	e0bffe03 	ldbu	r2,-8(fp)
   17bb4:	10803fe0 	cmpeqi	r2,r2,255
   17bb8:	1000021e 	bne	r2,zero,17bc4 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   17bbc:	00800a84 	movi	r2,42
   17bc0:	00012606 	br	1805c <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   17bc4:	e0bfff03 	ldbu	r2,-4(fp)
   17bc8:	10800530 	cmpltui	r2,r2,20
   17bcc:	1000021e 	bne	r2,zero,17bd8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   17bd0:	00800a84 	movi	r2,42
   17bd4:	00012106 	br	1805c <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17bd8:	0005303a 	rdctl	r2,status
   17bdc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17be0:	e0fffd17 	ldw	r3,-12(fp)
   17be4:	00bfff84 	movi	r2,-2
   17be8:	1884703a 	and	r2,r3,r2
   17bec:	1001703a 	wrctl	status,r2
  
  return context;
   17bf0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17bf4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   17bf8:	e0ffff03 	ldbu	r3,-4(fp)
   17bfc:	008000f4 	movhi	r2,3
   17c00:	10b40104 	addi	r2,r2,-12284
   17c04:	18c7883a 	add	r3,r3,r3
   17c08:	18c7883a 	add	r3,r3,r3
   17c0c:	10c5883a 	add	r2,r2,r3
   17c10:	10800017 	ldw	r2,0(r2)
   17c14:	10000626 	beq	r2,zero,17c30 <OSTaskChangePrio+0xb0>
   17c18:	e0bff517 	ldw	r2,-44(fp)
   17c1c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17c20:	e0bff617 	ldw	r2,-40(fp)
   17c24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   17c28:	00800a04 	movi	r2,40
   17c2c:	00010b06 	br	1805c <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   17c30:	e0bffe03 	ldbu	r2,-8(fp)
   17c34:	10803fd8 	cmpnei	r2,r2,255
   17c38:	1000031e 	bne	r2,zero,17c48 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   17c3c:	d0a7f917 	ldw	r2,-24604(gp)
   17c40:	10800c83 	ldbu	r2,50(r2)
   17c44:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   17c48:	e0fffe03 	ldbu	r3,-8(fp)
   17c4c:	008000f4 	movhi	r2,3
   17c50:	10b40104 	addi	r2,r2,-12284
   17c54:	18c7883a 	add	r3,r3,r3
   17c58:	18c7883a 	add	r3,r3,r3
   17c5c:	10c5883a 	add	r2,r2,r3
   17c60:	10800017 	ldw	r2,0(r2)
   17c64:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   17c68:	e0bff817 	ldw	r2,-32(fp)
   17c6c:	1000061e 	bne	r2,zero,17c88 <OSTaskChangePrio+0x108>
   17c70:	e0bff517 	ldw	r2,-44(fp)
   17c74:	e0bff715 	stw	r2,-36(fp)
   17c78:	e0bff717 	ldw	r2,-36(fp)
   17c7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   17c80:	00800a44 	movi	r2,41
   17c84:	0000f506 	br	1805c <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   17c88:	e0bff817 	ldw	r2,-32(fp)
   17c8c:	10800058 	cmpnei	r2,r2,1
   17c90:	1000061e 	bne	r2,zero,17cac <OSTaskChangePrio+0x12c>
   17c94:	e0bff517 	ldw	r2,-44(fp)
   17c98:	e0bff915 	stw	r2,-28(fp)
   17c9c:	e0bff917 	ldw	r2,-28(fp)
   17ca0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   17ca4:	008010c4 	movi	r2,67
   17ca8:	0000ec06 	br	1805c <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   17cac:	e0bfff03 	ldbu	r2,-4(fp)
   17cb0:	1004d0fa 	srli	r2,r2,3
   17cb4:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   17cb8:	e0bfff03 	ldbu	r2,-4(fp)
   17cbc:	108001cc 	andi	r2,r2,7
   17cc0:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   17cc4:	e0bffb03 	ldbu	r2,-20(fp)
   17cc8:	00c00044 	movi	r3,1
   17ccc:	1884983a 	sll	r2,r3,r2
   17cd0:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   17cd4:	e0bffb43 	ldbu	r2,-19(fp)
   17cd8:	00c00044 	movi	r3,1
   17cdc:	1884983a 	sll	r2,r3,r2
   17ce0:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   17ce4:	e0fffe03 	ldbu	r3,-8(fp)
   17ce8:	008000f4 	movhi	r2,3
   17cec:	10b40104 	addi	r2,r2,-12284
   17cf0:	18c7883a 	add	r3,r3,r3
   17cf4:	18c7883a 	add	r3,r3,r3
   17cf8:	10c5883a 	add	r2,r2,r3
   17cfc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   17d00:	e0ffff03 	ldbu	r3,-4(fp)
   17d04:	008000f4 	movhi	r2,3
   17d08:	10b40104 	addi	r2,r2,-12284
   17d0c:	18c7883a 	add	r3,r3,r3
   17d10:	18c7883a 	add	r3,r3,r3
   17d14:	10c5883a 	add	r2,r2,r3
   17d18:	e0fff817 	ldw	r3,-32(fp)
   17d1c:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   17d20:	e0bff817 	ldw	r2,-32(fp)
   17d24:	10800d03 	ldbu	r2,52(r2)
   17d28:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   17d2c:	e0bff817 	ldw	r2,-32(fp)
   17d30:	10800d83 	ldbu	r2,54(r2)
   17d34:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   17d38:	e0bff817 	ldw	r2,-32(fp)
   17d3c:	10800d43 	ldbu	r2,53(r2)
   17d40:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   17d44:	e0fffc03 	ldbu	r3,-16(fp)
   17d48:	d0a7f644 	addi	r2,gp,-24615
   17d4c:	1885883a 	add	r2,r3,r2
   17d50:	10c00003 	ldbu	r3,0(r2)
   17d54:	e0bffc83 	ldbu	r2,-14(fp)
   17d58:	1884703a 	and	r2,r3,r2
   17d5c:	10803fcc 	andi	r2,r2,255
   17d60:	10002826 	beq	r2,zero,17e04 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   17d64:	e0fffc03 	ldbu	r3,-16(fp)
   17d68:	e13ffc03 	ldbu	r4,-16(fp)
   17d6c:	d0a7f644 	addi	r2,gp,-24615
   17d70:	2085883a 	add	r2,r4,r2
   17d74:	10800003 	ldbu	r2,0(r2)
   17d78:	1009883a 	mov	r4,r2
   17d7c:	e0bffc83 	ldbu	r2,-14(fp)
   17d80:	0084303a 	nor	r2,zero,r2
   17d84:	2084703a 	and	r2,r4,r2
   17d88:	1009883a 	mov	r4,r2
   17d8c:	d0a7f644 	addi	r2,gp,-24615
   17d90:	1885883a 	add	r2,r3,r2
   17d94:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   17d98:	e0fffc03 	ldbu	r3,-16(fp)
   17d9c:	d0a7f644 	addi	r2,gp,-24615
   17da0:	1885883a 	add	r2,r3,r2
   17da4:	10800003 	ldbu	r2,0(r2)
   17da8:	10803fcc 	andi	r2,r2,255
   17dac:	1000061e 	bne	r2,zero,17dc8 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   17db0:	e0bffc43 	ldbu	r2,-15(fp)
   17db4:	0084303a 	nor	r2,zero,r2
   17db8:	1007883a 	mov	r3,r2
   17dbc:	d0a7f603 	ldbu	r2,-24616(gp)
   17dc0:	1884703a 	and	r2,r3,r2
   17dc4:	d0a7f605 	stb	r2,-24616(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   17dc8:	d0e7f603 	ldbu	r3,-24616(gp)
   17dcc:	e0bffb83 	ldbu	r2,-18(fp)
   17dd0:	1884b03a 	or	r2,r3,r2
   17dd4:	d0a7f605 	stb	r2,-24616(gp)
         OSRdyTbl[y_new] |= bitx_new;
   17dd8:	e0fffb03 	ldbu	r3,-20(fp)
   17ddc:	e13ffb03 	ldbu	r4,-20(fp)
   17de0:	d0a7f644 	addi	r2,gp,-24615
   17de4:	2085883a 	add	r2,r4,r2
   17de8:	11000003 	ldbu	r4,0(r2)
   17dec:	e0bffbc3 	ldbu	r2,-17(fp)
   17df0:	2084b03a 	or	r2,r4,r2
   17df4:	1009883a 	mov	r4,r2
   17df8:	d0a7f644 	addi	r2,gp,-24615
   17dfc:	1885883a 	add	r2,r3,r2
   17e00:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   17e04:	e0bff817 	ldw	r2,-32(fp)
   17e08:	10800717 	ldw	r2,28(r2)
   17e0c:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   17e10:	e0bff317 	ldw	r2,-52(fp)
   17e14:	10003326 	beq	r2,zero,17ee4 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   17e18:	e0bffc03 	ldbu	r2,-16(fp)
   17e1c:	e0fffc03 	ldbu	r3,-16(fp)
   17e20:	e13ff317 	ldw	r4,-52(fp)
   17e24:	20c7883a 	add	r3,r4,r3
   17e28:	18c002c4 	addi	r3,r3,11
   17e2c:	18c00003 	ldbu	r3,0(r3)
   17e30:	1809883a 	mov	r4,r3
   17e34:	e0fffc83 	ldbu	r3,-14(fp)
   17e38:	00c6303a 	nor	r3,zero,r3
   17e3c:	20c6703a 	and	r3,r4,r3
   17e40:	1809883a 	mov	r4,r3
   17e44:	e0fff317 	ldw	r3,-52(fp)
   17e48:	1885883a 	add	r2,r3,r2
   17e4c:	108002c4 	addi	r2,r2,11
   17e50:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   17e54:	e0bffc03 	ldbu	r2,-16(fp)
   17e58:	e0fff317 	ldw	r3,-52(fp)
   17e5c:	1885883a 	add	r2,r3,r2
   17e60:	108002c4 	addi	r2,r2,11
   17e64:	10800003 	ldbu	r2,0(r2)
   17e68:	10803fcc 	andi	r2,r2,255
   17e6c:	1000091e 	bne	r2,zero,17e94 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   17e70:	e0bff317 	ldw	r2,-52(fp)
   17e74:	10800283 	ldbu	r2,10(r2)
   17e78:	1007883a 	mov	r3,r2
   17e7c:	e0bffc43 	ldbu	r2,-15(fp)
   17e80:	0084303a 	nor	r2,zero,r2
   17e84:	1884703a 	and	r2,r3,r2
   17e88:	1007883a 	mov	r3,r2
   17e8c:	e0bff317 	ldw	r2,-52(fp)
   17e90:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   17e94:	e0bff317 	ldw	r2,-52(fp)
   17e98:	10c00283 	ldbu	r3,10(r2)
   17e9c:	e0bffb83 	ldbu	r2,-18(fp)
   17ea0:	1884b03a 	or	r2,r3,r2
   17ea4:	1007883a 	mov	r3,r2
   17ea8:	e0bff317 	ldw	r2,-52(fp)
   17eac:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   17eb0:	e0bffb03 	ldbu	r2,-20(fp)
   17eb4:	e0fffb03 	ldbu	r3,-20(fp)
   17eb8:	e13ff317 	ldw	r4,-52(fp)
   17ebc:	20c7883a 	add	r3,r4,r3
   17ec0:	18c002c4 	addi	r3,r3,11
   17ec4:	19000003 	ldbu	r4,0(r3)
   17ec8:	e0fffbc3 	ldbu	r3,-17(fp)
   17ecc:	20c6b03a 	or	r3,r4,r3
   17ed0:	1809883a 	mov	r4,r3
   17ed4:	e0fff317 	ldw	r3,-52(fp)
   17ed8:	1885883a 	add	r2,r3,r2
   17edc:	108002c4 	addi	r2,r2,11
   17ee0:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   17ee4:	e0bff817 	ldw	r2,-32(fp)
   17ee8:	10800817 	ldw	r2,32(r2)
   17eec:	10004226 	beq	r2,zero,17ff8 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   17ef0:	e0bff817 	ldw	r2,-32(fp)
   17ef4:	10800817 	ldw	r2,32(r2)
   17ef8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   17efc:	e0bff417 	ldw	r2,-48(fp)
   17f00:	10800017 	ldw	r2,0(r2)
   17f04:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   17f08:	00003906 	br	17ff0 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   17f0c:	e0bffc03 	ldbu	r2,-16(fp)
   17f10:	e0fffc03 	ldbu	r3,-16(fp)
   17f14:	e13ff317 	ldw	r4,-52(fp)
   17f18:	20c7883a 	add	r3,r4,r3
   17f1c:	18c002c4 	addi	r3,r3,11
   17f20:	18c00003 	ldbu	r3,0(r3)
   17f24:	1809883a 	mov	r4,r3
   17f28:	e0fffc83 	ldbu	r3,-14(fp)
   17f2c:	00c6303a 	nor	r3,zero,r3
   17f30:	20c6703a 	and	r3,r4,r3
   17f34:	1809883a 	mov	r4,r3
   17f38:	e0fff317 	ldw	r3,-52(fp)
   17f3c:	1885883a 	add	r2,r3,r2
   17f40:	108002c4 	addi	r2,r2,11
   17f44:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   17f48:	e0bffc03 	ldbu	r2,-16(fp)
   17f4c:	e0fff317 	ldw	r3,-52(fp)
   17f50:	1885883a 	add	r2,r3,r2
   17f54:	108002c4 	addi	r2,r2,11
   17f58:	10800003 	ldbu	r2,0(r2)
   17f5c:	10803fcc 	andi	r2,r2,255
   17f60:	1000091e 	bne	r2,zero,17f88 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   17f64:	e0bff317 	ldw	r2,-52(fp)
   17f68:	10800283 	ldbu	r2,10(r2)
   17f6c:	1007883a 	mov	r3,r2
   17f70:	e0bffc43 	ldbu	r2,-15(fp)
   17f74:	0084303a 	nor	r2,zero,r2
   17f78:	1884703a 	and	r2,r3,r2
   17f7c:	1007883a 	mov	r3,r2
   17f80:	e0bff317 	ldw	r2,-52(fp)
   17f84:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   17f88:	e0bff317 	ldw	r2,-52(fp)
   17f8c:	10c00283 	ldbu	r3,10(r2)
   17f90:	e0bffb83 	ldbu	r2,-18(fp)
   17f94:	1884b03a 	or	r2,r3,r2
   17f98:	1007883a 	mov	r3,r2
   17f9c:	e0bff317 	ldw	r2,-52(fp)
   17fa0:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   17fa4:	e0bffb03 	ldbu	r2,-20(fp)
   17fa8:	e0fffb03 	ldbu	r3,-20(fp)
   17fac:	e13ff317 	ldw	r4,-52(fp)
   17fb0:	20c7883a 	add	r3,r4,r3
   17fb4:	18c002c4 	addi	r3,r3,11
   17fb8:	19000003 	ldbu	r4,0(r3)
   17fbc:	e0fffbc3 	ldbu	r3,-17(fp)
   17fc0:	20c6b03a 	or	r3,r4,r3
   17fc4:	1809883a 	mov	r4,r3
   17fc8:	e0fff317 	ldw	r3,-52(fp)
   17fcc:	1885883a 	add	r2,r3,r2
   17fd0:	108002c4 	addi	r2,r2,11
   17fd4:	11000005 	stb	r4,0(r2)
            pevents++;
   17fd8:	e0bff417 	ldw	r2,-48(fp)
   17fdc:	10800104 	addi	r2,r2,4
   17fe0:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   17fe4:	e0bff417 	ldw	r2,-48(fp)
   17fe8:	10800017 	ldw	r2,0(r2)
   17fec:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   17ff0:	e0bff317 	ldw	r2,-52(fp)
   17ff4:	103fc51e 	bne	r2,zero,17f0c <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   17ff8:	e0bff817 	ldw	r2,-32(fp)
   17ffc:	e0ffff03 	ldbu	r3,-4(fp)
   18000:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   18004:	e0bff817 	ldw	r2,-32(fp)
   18008:	e0fffb03 	ldbu	r3,-20(fp)
   1800c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   18010:	e0bff817 	ldw	r2,-32(fp)
   18014:	e0fffb43 	ldbu	r3,-19(fp)
   18018:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   1801c:	e0bff817 	ldw	r2,-32(fp)
   18020:	e0fffb83 	ldbu	r3,-18(fp)
   18024:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   18028:	e0bff817 	ldw	r2,-32(fp)
   1802c:	e0fffbc3 	ldbu	r3,-17(fp)
   18030:	10c00d45 	stb	r3,53(r2)
   18034:	e0bff517 	ldw	r2,-44(fp)
   18038:	e0bffa15 	stw	r2,-24(fp)
   1803c:	e0bffa17 	ldw	r2,-24(fp)
   18040:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   18044:	d0a7ea43 	ldbu	r2,-24663(gp)
   18048:	10803fcc 	andi	r2,r2,255
   1804c:	10800058 	cmpnei	r2,r2,1
   18050:	1000011e 	bne	r2,zero,18058 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   18054:	0012e780 	call	12e78 <OS_Sched>
    }
    return (OS_ERR_NONE);
   18058:	0005883a 	mov	r2,zero
}
   1805c:	e037883a 	mov	sp,fp
   18060:	dfc00117 	ldw	ra,4(sp)
   18064:	df000017 	ldw	fp,0(sp)
   18068:	dec00204 	addi	sp,sp,8
   1806c:	f800283a 	ret

00018070 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   18070:	deffee04 	addi	sp,sp,-72
   18074:	dfc01115 	stw	ra,68(sp)
   18078:	df001015 	stw	fp,64(sp)
   1807c:	df001004 	addi	fp,sp,64
   18080:	e13ffc15 	stw	r4,-16(fp)
   18084:	e17ffd15 	stw	r5,-12(fp)
   18088:	e1bffe15 	stw	r6,-8(fp)
   1808c:	3805883a 	mov	r2,r7
   18090:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   18094:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   18098:	e0bfff03 	ldbu	r2,-4(fp)
   1809c:	10800570 	cmpltui	r2,r2,21
   180a0:	1000021e 	bne	r2,zero,180ac <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   180a4:	00800a84 	movi	r2,42
   180a8:	00005706 	br	18208 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   180ac:	0005303a 	rdctl	r2,status
   180b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   180b4:	e0fffb17 	ldw	r3,-20(fp)
   180b8:	00bfff84 	movi	r2,-2
   180bc:	1884703a 	and	r2,r3,r2
   180c0:	1001703a 	wrctl	status,r2
  
  return context;
   180c4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   180c8:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   180cc:	d0a7f803 	ldbu	r2,-24608(gp)
   180d0:	10803fcc 	andi	r2,r2,255
   180d4:	10000626 	beq	r2,zero,180f0 <OSTaskCreate+0x80>
   180d8:	e0bff317 	ldw	r2,-52(fp)
   180dc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   180e0:	e0bff417 	ldw	r2,-48(fp)
   180e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   180e8:	00800f04 	movi	r2,60
   180ec:	00004606 	br	18208 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   180f0:	e0ffff03 	ldbu	r3,-4(fp)
   180f4:	008000f4 	movhi	r2,3
   180f8:	10b40104 	addi	r2,r2,-12284
   180fc:	18c7883a 	add	r3,r3,r3
   18100:	18c7883a 	add	r3,r3,r3
   18104:	10c5883a 	add	r2,r2,r3
   18108:	10800017 	ldw	r2,0(r2)
   1810c:	1000391e 	bne	r2,zero,181f4 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   18110:	e0ffff03 	ldbu	r3,-4(fp)
   18114:	008000f4 	movhi	r2,3
   18118:	10b40104 	addi	r2,r2,-12284
   1811c:	18c7883a 	add	r3,r3,r3
   18120:	18c7883a 	add	r3,r3,r3
   18124:	10c5883a 	add	r2,r2,r3
   18128:	00c00044 	movi	r3,1
   1812c:	10c00015 	stw	r3,0(r2)
   18130:	e0bff317 	ldw	r2,-52(fp)
   18134:	e0bff515 	stw	r2,-44(fp)
   18138:	e0bff517 	ldw	r2,-44(fp)
   1813c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   18140:	000f883a 	mov	r7,zero
   18144:	e1bffe17 	ldw	r6,-8(fp)
   18148:	e17ffd17 	ldw	r5,-12(fp)
   1814c:	e13ffc17 	ldw	r4,-16(fp)
   18150:	001cde80 	call	1cde8 <OSTaskStkInit>
   18154:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   18158:	e0bfff03 	ldbu	r2,-4(fp)
   1815c:	d8000215 	stw	zero,8(sp)
   18160:	d8000115 	stw	zero,4(sp)
   18164:	d8000015 	stw	zero,0(sp)
   18168:	000f883a 	mov	r7,zero
   1816c:	000d883a 	mov	r6,zero
   18170:	e17ff717 	ldw	r5,-36(fp)
   18174:	1009883a 	mov	r4,r2
   18178:	00132880 	call	13288 <OS_TCBInit>
   1817c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   18180:	e0bff803 	ldbu	r2,-32(fp)
   18184:	1000061e 	bne	r2,zero,181a0 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   18188:	d0a7ea43 	ldbu	r2,-24663(gp)
   1818c:	10803fcc 	andi	r2,r2,255
   18190:	10800058 	cmpnei	r2,r2,1
   18194:	1000151e 	bne	r2,zero,181ec <OSTaskCreate+0x17c>
                OS_Sched();
   18198:	0012e780 	call	12e78 <OS_Sched>
   1819c:	00001306 	br	181ec <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   181a0:	0005303a 	rdctl	r2,status
   181a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   181a8:	e0fffa17 	ldw	r3,-24(fp)
   181ac:	00bfff84 	movi	r2,-2
   181b0:	1884703a 	and	r2,r3,r2
   181b4:	1001703a 	wrctl	status,r2
  
  return context;
   181b8:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   181bc:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   181c0:	e0ffff03 	ldbu	r3,-4(fp)
   181c4:	008000f4 	movhi	r2,3
   181c8:	10b40104 	addi	r2,r2,-12284
   181cc:	18c7883a 	add	r3,r3,r3
   181d0:	18c7883a 	add	r3,r3,r3
   181d4:	10c5883a 	add	r2,r2,r3
   181d8:	10000015 	stw	zero,0(r2)
   181dc:	e0bff317 	ldw	r2,-52(fp)
   181e0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   181e4:	e0bff617 	ldw	r2,-40(fp)
   181e8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   181ec:	e0bff803 	ldbu	r2,-32(fp)
   181f0:	00000506 	br	18208 <OSTaskCreate+0x198>
   181f4:	e0bff317 	ldw	r2,-52(fp)
   181f8:	e0bff915 	stw	r2,-28(fp)
   181fc:	e0bff917 	ldw	r2,-28(fp)
   18200:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   18204:	00800a04 	movi	r2,40
}
   18208:	e037883a 	mov	sp,fp
   1820c:	dfc00117 	ldw	ra,4(sp)
   18210:	df000017 	ldw	fp,0(sp)
   18214:	dec00204 	addi	sp,sp,8
   18218:	f800283a 	ret

0001821c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   1821c:	deffec04 	addi	sp,sp,-80
   18220:	dfc01315 	stw	ra,76(sp)
   18224:	df001215 	stw	fp,72(sp)
   18228:	df001204 	addi	fp,sp,72
   1822c:	e13ffa15 	stw	r4,-24(fp)
   18230:	e17ffb15 	stw	r5,-20(fp)
   18234:	e1bffc15 	stw	r6,-16(fp)
   18238:	3809883a 	mov	r4,r7
   1823c:	e0c00217 	ldw	r3,8(fp)
   18240:	e0800617 	ldw	r2,24(fp)
   18244:	e13ffd05 	stb	r4,-12(fp)
   18248:	e0fffe0d 	sth	r3,-8(fp)
   1824c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   18250:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   18254:	e0bffd03 	ldbu	r2,-12(fp)
   18258:	10800570 	cmpltui	r2,r2,21
   1825c:	1000021e 	bne	r2,zero,18268 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   18260:	00800a84 	movi	r2,42
   18264:	00006106 	br	183ec <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18268:	0005303a 	rdctl	r2,status
   1826c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18270:	e0fff917 	ldw	r3,-28(fp)
   18274:	00bfff84 	movi	r2,-2
   18278:	1884703a 	and	r2,r3,r2
   1827c:	1001703a 	wrctl	status,r2
  
  return context;
   18280:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18284:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   18288:	d0a7f803 	ldbu	r2,-24608(gp)
   1828c:	10803fcc 	andi	r2,r2,255
   18290:	10000626 	beq	r2,zero,182ac <OSTaskCreateExt+0x90>
   18294:	e0bff117 	ldw	r2,-60(fp)
   18298:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1829c:	e0bff217 	ldw	r2,-56(fp)
   182a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   182a4:	00800f04 	movi	r2,60
   182a8:	00005006 	br	183ec <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   182ac:	e0fffd03 	ldbu	r3,-12(fp)
   182b0:	008000f4 	movhi	r2,3
   182b4:	10b40104 	addi	r2,r2,-12284
   182b8:	18c7883a 	add	r3,r3,r3
   182bc:	18c7883a 	add	r3,r3,r3
   182c0:	10c5883a 	add	r2,r2,r3
   182c4:	10800017 	ldw	r2,0(r2)
   182c8:	1000431e 	bne	r2,zero,183d8 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   182cc:	e0fffd03 	ldbu	r3,-12(fp)
   182d0:	008000f4 	movhi	r2,3
   182d4:	10b40104 	addi	r2,r2,-12284
   182d8:	18c7883a 	add	r3,r3,r3
   182dc:	18c7883a 	add	r3,r3,r3
   182e0:	10c5883a 	add	r2,r2,r3
   182e4:	00c00044 	movi	r3,1
   182e8:	10c00015 	stw	r3,0(r2)
   182ec:	e0bff117 	ldw	r2,-60(fp)
   182f0:	e0bff315 	stw	r2,-52(fp)
   182f4:	e0bff317 	ldw	r2,-52(fp)
   182f8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   182fc:	e0bfff0b 	ldhu	r2,-4(fp)
   18300:	100d883a 	mov	r6,r2
   18304:	e1400417 	ldw	r5,16(fp)
   18308:	e1000317 	ldw	r4,12(fp)
   1830c:	001927c0 	call	1927c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   18310:	e0bfff0b 	ldhu	r2,-4(fp)
   18314:	100f883a 	mov	r7,r2
   18318:	e1bffc17 	ldw	r6,-16(fp)
   1831c:	e17ffb17 	ldw	r5,-20(fp)
   18320:	e13ffa17 	ldw	r4,-24(fp)
   18324:	001cde80 	call	1cde8 <OSTaskStkInit>
   18328:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1832c:	e0fffd03 	ldbu	r3,-12(fp)
   18330:	e13ffe0b 	ldhu	r4,-8(fp)
   18334:	e0bfff0b 	ldhu	r2,-4(fp)
   18338:	d8800215 	stw	r2,8(sp)
   1833c:	e0800517 	ldw	r2,20(fp)
   18340:	d8800115 	stw	r2,4(sp)
   18344:	e0800417 	ldw	r2,16(fp)
   18348:	d8800015 	stw	r2,0(sp)
   1834c:	200f883a 	mov	r7,r4
   18350:	e1800317 	ldw	r6,12(fp)
   18354:	e17ff517 	ldw	r5,-44(fp)
   18358:	1809883a 	mov	r4,r3
   1835c:	00132880 	call	13288 <OS_TCBInit>
   18360:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   18364:	e0bff603 	ldbu	r2,-40(fp)
   18368:	1000061e 	bne	r2,zero,18384 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1836c:	d0a7ea43 	ldbu	r2,-24663(gp)
   18370:	10803fcc 	andi	r2,r2,255
   18374:	10800058 	cmpnei	r2,r2,1
   18378:	1000151e 	bne	r2,zero,183d0 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   1837c:	0012e780 	call	12e78 <OS_Sched>
   18380:	00001306 	br	183d0 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18384:	0005303a 	rdctl	r2,status
   18388:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1838c:	e0fff817 	ldw	r3,-32(fp)
   18390:	00bfff84 	movi	r2,-2
   18394:	1884703a 	and	r2,r3,r2
   18398:	1001703a 	wrctl	status,r2
  
  return context;
   1839c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   183a0:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   183a4:	e0fffd03 	ldbu	r3,-12(fp)
   183a8:	008000f4 	movhi	r2,3
   183ac:	10b40104 	addi	r2,r2,-12284
   183b0:	18c7883a 	add	r3,r3,r3
   183b4:	18c7883a 	add	r3,r3,r3
   183b8:	10c5883a 	add	r2,r2,r3
   183bc:	10000015 	stw	zero,0(r2)
   183c0:	e0bff117 	ldw	r2,-60(fp)
   183c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   183c8:	e0bff417 	ldw	r2,-48(fp)
   183cc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   183d0:	e0bff603 	ldbu	r2,-40(fp)
   183d4:	00000506 	br	183ec <OSTaskCreateExt+0x1d0>
   183d8:	e0bff117 	ldw	r2,-60(fp)
   183dc:	e0bff715 	stw	r2,-36(fp)
   183e0:	e0bff717 	ldw	r2,-36(fp)
   183e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   183e8:	00800a04 	movi	r2,40
}
   183ec:	e037883a 	mov	sp,fp
   183f0:	dfc00117 	ldw	ra,4(sp)
   183f4:	df000017 	ldw	fp,0(sp)
   183f8:	dec00204 	addi	sp,sp,8
   183fc:	f800283a 	ret

00018400 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   18400:	defff404 	addi	sp,sp,-48
   18404:	dfc00b15 	stw	ra,44(sp)
   18408:	df000a15 	stw	fp,40(sp)
   1840c:	df000a04 	addi	fp,sp,40
   18410:	2005883a 	mov	r2,r4
   18414:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   18418:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1841c:	d0a7f803 	ldbu	r2,-24608(gp)
   18420:	10803fcc 	andi	r2,r2,255
   18424:	10000226 	beq	r2,zero,18430 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   18428:	00801004 	movi	r2,64
   1842c:	0000c006 	br	18730 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   18430:	e0bfff03 	ldbu	r2,-4(fp)
   18434:	10800518 	cmpnei	r2,r2,20
   18438:	1000021e 	bne	r2,zero,18444 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   1843c:	00800f84 	movi	r2,62
   18440:	0000bb06 	br	18730 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   18444:	e0bfff03 	ldbu	r2,-4(fp)
   18448:	10800530 	cmpltui	r2,r2,20
   1844c:	1000051e 	bne	r2,zero,18464 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   18450:	e0bfff03 	ldbu	r2,-4(fp)
   18454:	10803fe0 	cmpeqi	r2,r2,255
   18458:	1000021e 	bne	r2,zero,18464 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   1845c:	00800a84 	movi	r2,42
   18460:	0000b306 	br	18730 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18464:	0005303a 	rdctl	r2,status
   18468:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1846c:	e0fffe17 	ldw	r3,-8(fp)
   18470:	00bfff84 	movi	r2,-2
   18474:	1884703a 	and	r2,r3,r2
   18478:	1001703a 	wrctl	status,r2
  
  return context;
   1847c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   18480:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   18484:	e0bfff03 	ldbu	r2,-4(fp)
   18488:	10803fd8 	cmpnei	r2,r2,255
   1848c:	1000031e 	bne	r2,zero,1849c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   18490:	d0a7f917 	ldw	r2,-24604(gp)
   18494:	10800c83 	ldbu	r2,50(r2)
   18498:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1849c:	e0ffff03 	ldbu	r3,-4(fp)
   184a0:	008000f4 	movhi	r2,3
   184a4:	10b40104 	addi	r2,r2,-12284
   184a8:	18c7883a 	add	r3,r3,r3
   184ac:	18c7883a 	add	r3,r3,r3
   184b0:	10c5883a 	add	r2,r2,r3
   184b4:	10800017 	ldw	r2,0(r2)
   184b8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   184bc:	e0bff817 	ldw	r2,-32(fp)
   184c0:	1000061e 	bne	r2,zero,184dc <OSTaskDel+0xdc>
   184c4:	e0bff617 	ldw	r2,-40(fp)
   184c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   184cc:	e0bff717 	ldw	r2,-36(fp)
   184d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   184d4:	008010c4 	movi	r2,67
   184d8:	00009506 	br	18730 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   184dc:	e0bff817 	ldw	r2,-32(fp)
   184e0:	10800058 	cmpnei	r2,r2,1
   184e4:	1000061e 	bne	r2,zero,18500 <OSTaskDel+0x100>
   184e8:	e0bff617 	ldw	r2,-40(fp)
   184ec:	e0bff915 	stw	r2,-28(fp)
   184f0:	e0bff917 	ldw	r2,-28(fp)
   184f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   184f8:	00800f44 	movi	r2,61
   184fc:	00008c06 	br	18730 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   18500:	e0bff817 	ldw	r2,-32(fp)
   18504:	10800d03 	ldbu	r2,52(r2)
   18508:	10c03fcc 	andi	r3,r2,255
   1850c:	e0bff817 	ldw	r2,-32(fp)
   18510:	10800d03 	ldbu	r2,52(r2)
   18514:	11003fcc 	andi	r4,r2,255
   18518:	d0a7f644 	addi	r2,gp,-24615
   1851c:	2085883a 	add	r2,r4,r2
   18520:	10800003 	ldbu	r2,0(r2)
   18524:	1009883a 	mov	r4,r2
   18528:	e0bff817 	ldw	r2,-32(fp)
   1852c:	10800d43 	ldbu	r2,53(r2)
   18530:	0084303a 	nor	r2,zero,r2
   18534:	2084703a 	and	r2,r4,r2
   18538:	1009883a 	mov	r4,r2
   1853c:	d0a7f644 	addi	r2,gp,-24615
   18540:	1885883a 	add	r2,r3,r2
   18544:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   18548:	e0bff817 	ldw	r2,-32(fp)
   1854c:	10800d03 	ldbu	r2,52(r2)
   18550:	10c03fcc 	andi	r3,r2,255
   18554:	d0a7f644 	addi	r2,gp,-24615
   18558:	1885883a 	add	r2,r3,r2
   1855c:	10800003 	ldbu	r2,0(r2)
   18560:	10803fcc 	andi	r2,r2,255
   18564:	1000071e 	bne	r2,zero,18584 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   18568:	e0bff817 	ldw	r2,-32(fp)
   1856c:	10800d83 	ldbu	r2,54(r2)
   18570:	0084303a 	nor	r2,zero,r2
   18574:	1007883a 	mov	r3,r2
   18578:	d0a7f603 	ldbu	r2,-24616(gp)
   1857c:	1884703a 	and	r2,r3,r2
   18580:	d0a7f605 	stb	r2,-24616(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   18584:	e0bff817 	ldw	r2,-32(fp)
   18588:	10800717 	ldw	r2,28(r2)
   1858c:	10000526 	beq	r2,zero,185a4 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   18590:	e0bff817 	ldw	r2,-32(fp)
   18594:	10800717 	ldw	r2,28(r2)
   18598:	100b883a 	mov	r5,r2
   1859c:	e13ff817 	ldw	r4,-32(fp)
   185a0:	00128240 	call	12824 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   185a4:	e0bff817 	ldw	r2,-32(fp)
   185a8:	10800817 	ldw	r2,32(r2)
   185ac:	10000526 	beq	r2,zero,185c4 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   185b0:	e0bff817 	ldw	r2,-32(fp)
   185b4:	10800817 	ldw	r2,32(r2)
   185b8:	100b883a 	mov	r5,r2
   185bc:	e13ff817 	ldw	r4,-32(fp)
   185c0:	00128dc0 	call	128dc <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   185c4:	e0bff817 	ldw	r2,-32(fp)
   185c8:	10800a17 	ldw	r2,40(r2)
   185cc:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   185d0:	e0bffb17 	ldw	r2,-20(fp)
   185d4:	10000226 	beq	r2,zero,185e0 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   185d8:	e13ffb17 	ldw	r4,-20(fp)
   185dc:	0014d5c0 	call	14d5c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   185e0:	e0bff817 	ldw	r2,-32(fp)
   185e4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   185e8:	e0bff817 	ldw	r2,-32(fp)
   185ec:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   185f0:	e0bff817 	ldw	r2,-32(fp)
   185f4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   185f8:	d0a7ea03 	ldbu	r2,-24664(gp)
   185fc:	10803fcc 	andi	r2,r2,255
   18600:	10803fe0 	cmpeqi	r2,r2,255
   18604:	1000031e 	bne	r2,zero,18614 <OSTaskDel+0x214>
        OSLockNesting++;
   18608:	d0a7ea03 	ldbu	r2,-24664(gp)
   1860c:	10800044 	addi	r2,r2,1
   18610:	d0a7ea05 	stb	r2,-24664(gp)
   18614:	e0bff617 	ldw	r2,-40(fp)
   18618:	e0bffd15 	stw	r2,-12(fp)
   1861c:	e0bffd17 	ldw	r2,-12(fp)
   18620:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   18624:	001240c0 	call	1240c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18628:	0005303a 	rdctl	r2,status
   1862c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18630:	e0fffa17 	ldw	r3,-24(fp)
   18634:	00bfff84 	movi	r2,-2
   18638:	1884703a 	and	r2,r3,r2
   1863c:	1001703a 	wrctl	status,r2
  
  return context;
   18640:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   18644:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   18648:	d0a7ea03 	ldbu	r2,-24664(gp)
   1864c:	10803fcc 	andi	r2,r2,255
   18650:	10000326 	beq	r2,zero,18660 <OSTaskDel+0x260>
        OSLockNesting--;
   18654:	d0a7ea03 	ldbu	r2,-24664(gp)
   18658:	10bfffc4 	addi	r2,r2,-1
   1865c:	d0a7ea05 	stb	r2,-24664(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   18660:	e13ff817 	ldw	r4,-32(fp)
   18664:	001cf680 	call	1cf68 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   18668:	d0a7f243 	ldbu	r2,-24631(gp)
   1866c:	10bfffc4 	addi	r2,r2,-1
   18670:	d0a7f245 	stb	r2,-24631(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   18674:	e0ffff03 	ldbu	r3,-4(fp)
   18678:	008000f4 	movhi	r2,3
   1867c:	10b40104 	addi	r2,r2,-12284
   18680:	18c7883a 	add	r3,r3,r3
   18684:	18c7883a 	add	r3,r3,r3
   18688:	10c5883a 	add	r2,r2,r3
   1868c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   18690:	e0bff817 	ldw	r2,-32(fp)
   18694:	10800617 	ldw	r2,24(r2)
   18698:	1000071e 	bne	r2,zero,186b8 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1869c:	e0bff817 	ldw	r2,-32(fp)
   186a0:	10800517 	ldw	r2,20(r2)
   186a4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   186a8:	e0bff817 	ldw	r2,-32(fp)
   186ac:	10800517 	ldw	r2,20(r2)
   186b0:	d0a7ed15 	stw	r2,-24652(gp)
   186b4:	00000a06 	br	186e0 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   186b8:	e0bff817 	ldw	r2,-32(fp)
   186bc:	10800617 	ldw	r2,24(r2)
   186c0:	e0fff817 	ldw	r3,-32(fp)
   186c4:	18c00517 	ldw	r3,20(r3)
   186c8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   186cc:	e0bff817 	ldw	r2,-32(fp)
   186d0:	10800517 	ldw	r2,20(r2)
   186d4:	e0fff817 	ldw	r3,-32(fp)
   186d8:	18c00617 	ldw	r3,24(r3)
   186dc:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   186e0:	d0e7f117 	ldw	r3,-24636(gp)
   186e4:	e0bff817 	ldw	r2,-32(fp)
   186e8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   186ec:	e0bff817 	ldw	r2,-32(fp)
   186f0:	d0a7f115 	stw	r2,-24636(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   186f4:	e0bff817 	ldw	r2,-32(fp)
   186f8:	00c00fc4 	movi	r3,63
   186fc:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   18700:	e0bff817 	ldw	r2,-32(fp)
   18704:	10001345 	stb	zero,77(r2)
   18708:	e0bff617 	ldw	r2,-40(fp)
   1870c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18710:	e0bffc17 	ldw	r2,-16(fp)
   18714:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   18718:	d0a7ea43 	ldbu	r2,-24663(gp)
   1871c:	10803fcc 	andi	r2,r2,255
   18720:	10800058 	cmpnei	r2,r2,1
   18724:	1000011e 	bne	r2,zero,1872c <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   18728:	0012e780 	call	12e78 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1872c:	0005883a 	mov	r2,zero
}
   18730:	e037883a 	mov	sp,fp
   18734:	dfc00117 	ldw	ra,4(sp)
   18738:	df000017 	ldw	fp,0(sp)
   1873c:	dec00204 	addi	sp,sp,8
   18740:	f800283a 	ret

00018744 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   18744:	defff504 	addi	sp,sp,-44
   18748:	df000a15 	stw	fp,40(sp)
   1874c:	df000a04 	addi	fp,sp,40
   18750:	2005883a 	mov	r2,r4
   18754:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18758:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   1875c:	e0bfff03 	ldbu	r2,-4(fp)
   18760:	10800518 	cmpnei	r2,r2,20
   18764:	1000021e 	bne	r2,zero,18770 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   18768:	00800f84 	movi	r2,62
   1876c:	00004506 	br	18884 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   18770:	e0bfff03 	ldbu	r2,-4(fp)
   18774:	10800530 	cmpltui	r2,r2,20
   18778:	1000051e 	bne	r2,zero,18790 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1877c:	e0bfff03 	ldbu	r2,-4(fp)
   18780:	10803fe0 	cmpeqi	r2,r2,255
   18784:	1000021e 	bne	r2,zero,18790 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   18788:	00800a84 	movi	r2,42
   1878c:	00003d06 	br	18884 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   18790:	e0bfff03 	ldbu	r2,-4(fp)
   18794:	10803fd8 	cmpnei	r2,r2,255
   18798:	1000111e 	bne	r2,zero,187e0 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1879c:	0005303a 	rdctl	r2,status
   187a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   187a4:	e0fff917 	ldw	r3,-28(fp)
   187a8:	00bfff84 	movi	r2,-2
   187ac:	1884703a 	and	r2,r3,r2
   187b0:	1001703a 	wrctl	status,r2
  
  return context;
   187b4:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   187b8:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   187bc:	d0a7f917 	ldw	r2,-24604(gp)
   187c0:	10800dc3 	ldbu	r2,55(r2)
   187c4:	e0bff805 	stb	r2,-32(fp)
   187c8:	e0bff617 	ldw	r2,-40(fp)
   187cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   187d0:	e0bffe17 	ldw	r2,-8(fp)
   187d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   187d8:	e0bff803 	ldbu	r2,-32(fp)
   187dc:	00002906 	br	18884 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   187e0:	0005303a 	rdctl	r2,status
   187e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   187e8:	e0fff717 	ldw	r3,-36(fp)
   187ec:	00bfff84 	movi	r2,-2
   187f0:	1884703a 	and	r2,r3,r2
   187f4:	1001703a 	wrctl	status,r2
  
  return context;
   187f8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   187fc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   18800:	e0ffff03 	ldbu	r3,-4(fp)
   18804:	008000f4 	movhi	r2,3
   18808:	10b40104 	addi	r2,r2,-12284
   1880c:	18c7883a 	add	r3,r3,r3
   18810:	18c7883a 	add	r3,r3,r3
   18814:	10c5883a 	add	r2,r2,r3
   18818:	10800017 	ldw	r2,0(r2)
   1881c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   18820:	e0bffb17 	ldw	r2,-20(fp)
   18824:	1000061e 	bne	r2,zero,18840 <OSTaskDelReq+0xfc>
   18828:	e0bff617 	ldw	r2,-40(fp)
   1882c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18830:	e0bffa17 	ldw	r2,-24(fp)
   18834:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   18838:	008010c4 	movi	r2,67
   1883c:	00001106 	br	18884 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   18840:	e0bffb17 	ldw	r2,-20(fp)
   18844:	10800058 	cmpnei	r2,r2,1
   18848:	1000061e 	bne	r2,zero,18864 <OSTaskDelReq+0x120>
   1884c:	e0bff617 	ldw	r2,-40(fp)
   18850:	e0bffc15 	stw	r2,-16(fp)
   18854:	e0bffc17 	ldw	r2,-16(fp)
   18858:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1885c:	00800f44 	movi	r2,61
   18860:	00000806 	br	18884 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   18864:	e0bffb17 	ldw	r2,-20(fp)
   18868:	00c00fc4 	movi	r3,63
   1886c:	10c00dc5 	stb	r3,55(r2)
   18870:	e0bff617 	ldw	r2,-40(fp)
   18874:	e0bffd15 	stw	r2,-12(fp)
   18878:	e0bffd17 	ldw	r2,-12(fp)
   1887c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18880:	0005883a 	mov	r2,zero
}
   18884:	e037883a 	mov	sp,fp
   18888:	df000017 	ldw	fp,0(sp)
   1888c:	dec00104 	addi	sp,sp,4
   18890:	f800283a 	ret

00018894 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   18894:	defff404 	addi	sp,sp,-48
   18898:	dfc00b15 	stw	ra,44(sp)
   1889c:	df000a15 	stw	fp,40(sp)
   188a0:	df000a04 	addi	fp,sp,40
   188a4:	2005883a 	mov	r2,r4
   188a8:	e17ffe15 	stw	r5,-8(fp)
   188ac:	e1bfff15 	stw	r6,-4(fp)
   188b0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   188b4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   188b8:	e0bfff17 	ldw	r2,-4(fp)
   188bc:	1000021e 	bne	r2,zero,188c8 <OSTaskNameGet+0x34>
        return (0);
   188c0:	0005883a 	mov	r2,zero
   188c4:	00005406 	br	18a18 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   188c8:	e0bffd03 	ldbu	r2,-12(fp)
   188cc:	10800570 	cmpltui	r2,r2,21
   188d0:	1000081e 	bne	r2,zero,188f4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   188d4:	e0bffd03 	ldbu	r2,-12(fp)
   188d8:	10803fe0 	cmpeqi	r2,r2,255
   188dc:	1000051e 	bne	r2,zero,188f4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   188e0:	e0bfff17 	ldw	r2,-4(fp)
   188e4:	00c00a84 	movi	r3,42
   188e8:	10c00005 	stb	r3,0(r2)
            return (0);
   188ec:	0005883a 	mov	r2,zero
   188f0:	00004906 	br	18a18 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   188f4:	e0bffe17 	ldw	r2,-8(fp)
   188f8:	1000051e 	bne	r2,zero,18910 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   188fc:	e0bfff17 	ldw	r2,-4(fp)
   18900:	00c00304 	movi	r3,12
   18904:	10c00005 	stb	r3,0(r2)
        return (0);
   18908:	0005883a 	mov	r2,zero
   1890c:	00004206 	br	18a18 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   18910:	d0a7f803 	ldbu	r2,-24608(gp)
   18914:	10803fcc 	andi	r2,r2,255
   18918:	10000526 	beq	r2,zero,18930 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   1891c:	e0bfff17 	ldw	r2,-4(fp)
   18920:	00c00444 	movi	r3,17
   18924:	10c00005 	stb	r3,0(r2)
        return (0);
   18928:	0005883a 	mov	r2,zero
   1892c:	00003a06 	br	18a18 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18930:	0005303a 	rdctl	r2,status
   18934:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18938:	e0fffc17 	ldw	r3,-16(fp)
   1893c:	00bfff84 	movi	r2,-2
   18940:	1884703a 	and	r2,r3,r2
   18944:	1001703a 	wrctl	status,r2
  
  return context;
   18948:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1894c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   18950:	e0bffd03 	ldbu	r2,-12(fp)
   18954:	10803fd8 	cmpnei	r2,r2,255
   18958:	1000031e 	bne	r2,zero,18968 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   1895c:	d0a7f917 	ldw	r2,-24604(gp)
   18960:	10800c83 	ldbu	r2,50(r2)
   18964:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   18968:	e0fffd03 	ldbu	r3,-12(fp)
   1896c:	008000f4 	movhi	r2,3
   18970:	10b40104 	addi	r2,r2,-12284
   18974:	18c7883a 	add	r3,r3,r3
   18978:	18c7883a 	add	r3,r3,r3
   1897c:	10c5883a 	add	r2,r2,r3
   18980:	10800017 	ldw	r2,0(r2)
   18984:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   18988:	e0bff817 	ldw	r2,-32(fp)
   1898c:	1000091e 	bne	r2,zero,189b4 <OSTaskNameGet+0x120>
   18990:	e0bff617 	ldw	r2,-40(fp)
   18994:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18998:	e0bff717 	ldw	r2,-36(fp)
   1899c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   189a0:	e0bfff17 	ldw	r2,-4(fp)
   189a4:	00c010c4 	movi	r3,67
   189a8:	10c00005 	stb	r3,0(r2)
        return (0);
   189ac:	0005883a 	mov	r2,zero
   189b0:	00001906 	br	18a18 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   189b4:	e0bff817 	ldw	r2,-32(fp)
   189b8:	10800058 	cmpnei	r2,r2,1
   189bc:	1000091e 	bne	r2,zero,189e4 <OSTaskNameGet+0x150>
   189c0:	e0bff617 	ldw	r2,-40(fp)
   189c4:	e0bff915 	stw	r2,-28(fp)
   189c8:	e0bff917 	ldw	r2,-28(fp)
   189cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   189d0:	e0bfff17 	ldw	r2,-4(fp)
   189d4:	00c010c4 	movi	r3,67
   189d8:	10c00005 	stb	r3,0(r2)
        return (0);
   189dc:	0005883a 	mov	r2,zero
   189e0:	00000d06 	br	18a18 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   189e4:	e0bff817 	ldw	r2,-32(fp)
   189e8:	10801304 	addi	r2,r2,76
   189ec:	100b883a 	mov	r5,r2
   189f0:	e13ffe17 	ldw	r4,-8(fp)
   189f4:	0012fbc0 	call	12fbc <OS_StrCopy>
   189f8:	e0bffb05 	stb	r2,-20(fp)
   189fc:	e0bff617 	ldw	r2,-40(fp)
   18a00:	e0bffa15 	stw	r2,-24(fp)
   18a04:	e0bffa17 	ldw	r2,-24(fp)
   18a08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18a0c:	e0bfff17 	ldw	r2,-4(fp)
   18a10:	10000005 	stb	zero,0(r2)
    return (len);
   18a14:	e0bffb03 	ldbu	r2,-20(fp)
}
   18a18:	e037883a 	mov	sp,fp
   18a1c:	dfc00117 	ldw	ra,4(sp)
   18a20:	df000017 	ldw	fp,0(sp)
   18a24:	dec00204 	addi	sp,sp,8
   18a28:	f800283a 	ret

00018a2c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   18a2c:	defff304 	addi	sp,sp,-52
   18a30:	dfc00c15 	stw	ra,48(sp)
   18a34:	df000b15 	stw	fp,44(sp)
   18a38:	df000b04 	addi	fp,sp,44
   18a3c:	2005883a 	mov	r2,r4
   18a40:	e17ffe15 	stw	r5,-8(fp)
   18a44:	e1bfff15 	stw	r6,-4(fp)
   18a48:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   18a4c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   18a50:	e0bfff17 	ldw	r2,-4(fp)
   18a54:	10005c26 	beq	r2,zero,18bc8 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   18a58:	e0bffd03 	ldbu	r2,-12(fp)
   18a5c:	10800570 	cmpltui	r2,r2,21
   18a60:	1000071e 	bne	r2,zero,18a80 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   18a64:	e0bffd03 	ldbu	r2,-12(fp)
   18a68:	10803fe0 	cmpeqi	r2,r2,255
   18a6c:	1000041e 	bne	r2,zero,18a80 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   18a70:	e0bfff17 	ldw	r2,-4(fp)
   18a74:	00c00a84 	movi	r3,42
   18a78:	10c00005 	stb	r3,0(r2)
            return;
   18a7c:	00005306 	br	18bcc <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   18a80:	e0bffe17 	ldw	r2,-8(fp)
   18a84:	1000041e 	bne	r2,zero,18a98 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   18a88:	e0bfff17 	ldw	r2,-4(fp)
   18a8c:	00c00304 	movi	r3,12
   18a90:	10c00005 	stb	r3,0(r2)
        return;
   18a94:	00004d06 	br	18bcc <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   18a98:	d0a7f803 	ldbu	r2,-24608(gp)
   18a9c:	10803fcc 	andi	r2,r2,255
   18aa0:	10000426 	beq	r2,zero,18ab4 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   18aa4:	e0bfff17 	ldw	r2,-4(fp)
   18aa8:	00c00484 	movi	r3,18
   18aac:	10c00005 	stb	r3,0(r2)
        return;
   18ab0:	00004606 	br	18bcc <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18ab4:	0005303a 	rdctl	r2,status
   18ab8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18abc:	e0fffc17 	ldw	r3,-16(fp)
   18ac0:	00bfff84 	movi	r2,-2
   18ac4:	1884703a 	and	r2,r3,r2
   18ac8:	1001703a 	wrctl	status,r2
  
  return context;
   18acc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18ad0:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   18ad4:	e0bffd03 	ldbu	r2,-12(fp)
   18ad8:	10803fd8 	cmpnei	r2,r2,255
   18adc:	1000031e 	bne	r2,zero,18aec <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   18ae0:	d0a7f917 	ldw	r2,-24604(gp)
   18ae4:	10800c83 	ldbu	r2,50(r2)
   18ae8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   18aec:	e0fffd03 	ldbu	r3,-12(fp)
   18af0:	008000f4 	movhi	r2,3
   18af4:	10b40104 	addi	r2,r2,-12284
   18af8:	18c7883a 	add	r3,r3,r3
   18afc:	18c7883a 	add	r3,r3,r3
   18b00:	10c5883a 	add	r2,r2,r3
   18b04:	10800017 	ldw	r2,0(r2)
   18b08:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   18b0c:	e0bff717 	ldw	r2,-36(fp)
   18b10:	1000081e 	bne	r2,zero,18b34 <OSTaskNameSet+0x108>
   18b14:	e0bff517 	ldw	r2,-44(fp)
   18b18:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18b1c:	e0bff617 	ldw	r2,-40(fp)
   18b20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   18b24:	e0bfff17 	ldw	r2,-4(fp)
   18b28:	00c010c4 	movi	r3,67
   18b2c:	10c00005 	stb	r3,0(r2)
        return;
   18b30:	00002606 	br	18bcc <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   18b34:	e0bff717 	ldw	r2,-36(fp)
   18b38:	10800058 	cmpnei	r2,r2,1
   18b3c:	1000081e 	bne	r2,zero,18b60 <OSTaskNameSet+0x134>
   18b40:	e0bff517 	ldw	r2,-44(fp)
   18b44:	e0bff815 	stw	r2,-32(fp)
   18b48:	e0bff817 	ldw	r2,-32(fp)
   18b4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   18b50:	e0bfff17 	ldw	r2,-4(fp)
   18b54:	00c010c4 	movi	r3,67
   18b58:	10c00005 	stb	r3,0(r2)
        return;
   18b5c:	00001b06 	br	18bcc <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   18b60:	e13ffe17 	ldw	r4,-8(fp)
   18b64:	00130300 	call	13030 <OS_StrLen>
   18b68:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   18b6c:	e0bffa03 	ldbu	r2,-24(fp)
   18b70:	10800830 	cmpltui	r2,r2,32
   18b74:	1000081e 	bne	r2,zero,18b98 <OSTaskNameSet+0x16c>
   18b78:	e0bff517 	ldw	r2,-44(fp)
   18b7c:	e0bff915 	stw	r2,-28(fp)
   18b80:	e0bff917 	ldw	r2,-28(fp)
   18b84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   18b88:	e0bfff17 	ldw	r2,-4(fp)
   18b8c:	00c01044 	movi	r3,65
   18b90:	10c00005 	stb	r3,0(r2)
        return;
   18b94:	00000d06 	br	18bcc <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   18b98:	e0bff717 	ldw	r2,-36(fp)
   18b9c:	10801304 	addi	r2,r2,76
   18ba0:	e17ffe17 	ldw	r5,-8(fp)
   18ba4:	1009883a 	mov	r4,r2
   18ba8:	0012fbc0 	call	12fbc <OS_StrCopy>
   18bac:	e0bff517 	ldw	r2,-44(fp)
   18bb0:	e0bffb15 	stw	r2,-20(fp)
   18bb4:	e0bffb17 	ldw	r2,-20(fp)
   18bb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18bbc:	e0bfff17 	ldw	r2,-4(fp)
   18bc0:	10000005 	stb	zero,0(r2)
   18bc4:	00000106 	br	18bcc <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   18bc8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   18bcc:	e037883a 	mov	sp,fp
   18bd0:	dfc00117 	ldw	ra,4(sp)
   18bd4:	df000017 	ldw	fp,0(sp)
   18bd8:	dec00204 	addi	sp,sp,8
   18bdc:	f800283a 	ret

00018be0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   18be0:	defff404 	addi	sp,sp,-48
   18be4:	dfc00b15 	stw	ra,44(sp)
   18be8:	df000a15 	stw	fp,40(sp)
   18bec:	df000a04 	addi	fp,sp,40
   18bf0:	2005883a 	mov	r2,r4
   18bf4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   18bf8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   18bfc:	e0bfff03 	ldbu	r2,-4(fp)
   18c00:	10800530 	cmpltui	r2,r2,20
   18c04:	1000021e 	bne	r2,zero,18c10 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   18c08:	00800a84 	movi	r2,42
   18c0c:	00006406 	br	18da0 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18c10:	0005303a 	rdctl	r2,status
   18c14:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18c18:	e0fffe17 	ldw	r3,-8(fp)
   18c1c:	00bfff84 	movi	r2,-2
   18c20:	1884703a 	and	r2,r3,r2
   18c24:	1001703a 	wrctl	status,r2
  
  return context;
   18c28:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18c2c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   18c30:	e0ffff03 	ldbu	r3,-4(fp)
   18c34:	008000f4 	movhi	r2,3
   18c38:	10b40104 	addi	r2,r2,-12284
   18c3c:	18c7883a 	add	r3,r3,r3
   18c40:	18c7883a 	add	r3,r3,r3
   18c44:	10c5883a 	add	r2,r2,r3
   18c48:	10800017 	ldw	r2,0(r2)
   18c4c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   18c50:	e0bff817 	ldw	r2,-32(fp)
   18c54:	1000061e 	bne	r2,zero,18c70 <OSTaskResume+0x90>
   18c58:	e0bff617 	ldw	r2,-40(fp)
   18c5c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18c60:	e0bff717 	ldw	r2,-36(fp)
   18c64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   18c68:	00801184 	movi	r2,70
   18c6c:	00004c06 	br	18da0 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   18c70:	e0bff817 	ldw	r2,-32(fp)
   18c74:	10800058 	cmpnei	r2,r2,1
   18c78:	1000061e 	bne	r2,zero,18c94 <OSTaskResume+0xb4>
   18c7c:	e0bff617 	ldw	r2,-40(fp)
   18c80:	e0bff915 	stw	r2,-28(fp)
   18c84:	e0bff917 	ldw	r2,-28(fp)
   18c88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   18c8c:	008010c4 	movi	r2,67
   18c90:	00004306 	br	18da0 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   18c94:	e0bff817 	ldw	r2,-32(fp)
   18c98:	10800c03 	ldbu	r2,48(r2)
   18c9c:	10803fcc 	andi	r2,r2,255
   18ca0:	1080020c 	andi	r2,r2,8
   18ca4:	10003926 	beq	r2,zero,18d8c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   18ca8:	e0bff817 	ldw	r2,-32(fp)
   18cac:	10c00c03 	ldbu	r3,48(r2)
   18cb0:	00bffdc4 	movi	r2,-9
   18cb4:	1884703a 	and	r2,r3,r2
   18cb8:	1007883a 	mov	r3,r2
   18cbc:	e0bff817 	ldw	r2,-32(fp)
   18cc0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   18cc4:	e0bff817 	ldw	r2,-32(fp)
   18cc8:	10800c03 	ldbu	r2,48(r2)
   18ccc:	10803fcc 	andi	r2,r2,255
   18cd0:	1000281e 	bne	r2,zero,18d74 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   18cd4:	e0bff817 	ldw	r2,-32(fp)
   18cd8:	10800b8b 	ldhu	r2,46(r2)
   18cdc:	10bfffcc 	andi	r2,r2,65535
   18ce0:	10001f1e 	bne	r2,zero,18d60 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   18ce4:	e0bff817 	ldw	r2,-32(fp)
   18ce8:	10c00d83 	ldbu	r3,54(r2)
   18cec:	d0a7f603 	ldbu	r2,-24616(gp)
   18cf0:	1884b03a 	or	r2,r3,r2
   18cf4:	d0a7f605 	stb	r2,-24616(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   18cf8:	e0bff817 	ldw	r2,-32(fp)
   18cfc:	10800d03 	ldbu	r2,52(r2)
   18d00:	10c03fcc 	andi	r3,r2,255
   18d04:	e0bff817 	ldw	r2,-32(fp)
   18d08:	10800d03 	ldbu	r2,52(r2)
   18d0c:	11003fcc 	andi	r4,r2,255
   18d10:	d0a7f644 	addi	r2,gp,-24615
   18d14:	2085883a 	add	r2,r4,r2
   18d18:	11000003 	ldbu	r4,0(r2)
   18d1c:	e0bff817 	ldw	r2,-32(fp)
   18d20:	10800d43 	ldbu	r2,53(r2)
   18d24:	2084b03a 	or	r2,r4,r2
   18d28:	1009883a 	mov	r4,r2
   18d2c:	d0a7f644 	addi	r2,gp,-24615
   18d30:	1885883a 	add	r2,r3,r2
   18d34:	11000005 	stb	r4,0(r2)
   18d38:	e0bff617 	ldw	r2,-40(fp)
   18d3c:	e0bffa15 	stw	r2,-24(fp)
   18d40:	e0bffa17 	ldw	r2,-24(fp)
   18d44:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   18d48:	d0a7ea43 	ldbu	r2,-24663(gp)
   18d4c:	10803fcc 	andi	r2,r2,255
   18d50:	10800058 	cmpnei	r2,r2,1
   18d54:	10000b1e 	bne	r2,zero,18d84 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   18d58:	0012e780 	call	12e78 <OS_Sched>
   18d5c:	00000906 	br	18d84 <OSTaskResume+0x1a4>
   18d60:	e0bff617 	ldw	r2,-40(fp)
   18d64:	e0bffb15 	stw	r2,-20(fp)
   18d68:	e0bffb17 	ldw	r2,-20(fp)
   18d6c:	1001703a 	wrctl	status,r2
   18d70:	00000406 	br	18d84 <OSTaskResume+0x1a4>
   18d74:	e0bff617 	ldw	r2,-40(fp)
   18d78:	e0bffc15 	stw	r2,-16(fp)
   18d7c:	e0bffc17 	ldw	r2,-16(fp)
   18d80:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   18d84:	0005883a 	mov	r2,zero
   18d88:	00000506 	br	18da0 <OSTaskResume+0x1c0>
   18d8c:	e0bff617 	ldw	r2,-40(fp)
   18d90:	e0bffd15 	stw	r2,-12(fp)
   18d94:	e0bffd17 	ldw	r2,-12(fp)
   18d98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   18d9c:	00801104 	movi	r2,68
}
   18da0:	e037883a 	mov	sp,fp
   18da4:	dfc00117 	ldw	ra,4(sp)
   18da8:	df000017 	ldw	fp,0(sp)
   18dac:	dec00204 	addi	sp,sp,8
   18db0:	f800283a 	ret

00018db4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   18db4:	defff304 	addi	sp,sp,-52
   18db8:	df000c15 	stw	fp,48(sp)
   18dbc:	df000c04 	addi	fp,sp,48
   18dc0:	2005883a 	mov	r2,r4
   18dc4:	e17fff15 	stw	r5,-4(fp)
   18dc8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   18dcc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   18dd0:	e0bffe03 	ldbu	r2,-8(fp)
   18dd4:	10800570 	cmpltui	r2,r2,21
   18dd8:	1000051e 	bne	r2,zero,18df0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   18ddc:	e0bffe03 	ldbu	r2,-8(fp)
   18de0:	10803fe0 	cmpeqi	r2,r2,255
   18de4:	1000021e 	bne	r2,zero,18df0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   18de8:	00800a84 	movi	r2,42
   18dec:	00005d06 	br	18f64 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   18df0:	e0bfff17 	ldw	r2,-4(fp)
   18df4:	1000021e 	bne	r2,zero,18e00 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   18df8:	00800244 	movi	r2,9
   18dfc:	00005906 	br	18f64 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   18e00:	e0bfff17 	ldw	r2,-4(fp)
   18e04:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   18e08:	e0bfff17 	ldw	r2,-4(fp)
   18e0c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18e10:	0005303a 	rdctl	r2,status
   18e14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18e18:	e0fffd17 	ldw	r3,-12(fp)
   18e1c:	00bfff84 	movi	r2,-2
   18e20:	1884703a 	and	r2,r3,r2
   18e24:	1001703a 	wrctl	status,r2
  
  return context;
   18e28:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   18e2c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   18e30:	e0bffe03 	ldbu	r2,-8(fp)
   18e34:	10803fd8 	cmpnei	r2,r2,255
   18e38:	1000031e 	bne	r2,zero,18e48 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   18e3c:	d0a7f917 	ldw	r2,-24604(gp)
   18e40:	10800c83 	ldbu	r2,50(r2)
   18e44:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   18e48:	e0fffe03 	ldbu	r3,-8(fp)
   18e4c:	008000f4 	movhi	r2,3
   18e50:	10b40104 	addi	r2,r2,-12284
   18e54:	18c7883a 	add	r3,r3,r3
   18e58:	18c7883a 	add	r3,r3,r3
   18e5c:	10c5883a 	add	r2,r2,r3
   18e60:	10800017 	ldw	r2,0(r2)
   18e64:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   18e68:	e0bff817 	ldw	r2,-32(fp)
   18e6c:	1000061e 	bne	r2,zero,18e88 <OSTaskStkChk+0xd4>
   18e70:	e0bff617 	ldw	r2,-40(fp)
   18e74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18e78:	e0bff717 	ldw	r2,-36(fp)
   18e7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   18e80:	008010c4 	movi	r2,67
   18e84:	00003706 	br	18f64 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   18e88:	e0bff817 	ldw	r2,-32(fp)
   18e8c:	10800058 	cmpnei	r2,r2,1
   18e90:	1000061e 	bne	r2,zero,18eac <OSTaskStkChk+0xf8>
   18e94:	e0bff617 	ldw	r2,-40(fp)
   18e98:	e0bff915 	stw	r2,-28(fp)
   18e9c:	e0bff917 	ldw	r2,-28(fp)
   18ea0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   18ea4:	008010c4 	movi	r2,67
   18ea8:	00002e06 	br	18f64 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   18eac:	e0bff817 	ldw	r2,-32(fp)
   18eb0:	1080040b 	ldhu	r2,16(r2)
   18eb4:	10bfffcc 	andi	r2,r2,65535
   18eb8:	1080004c 	andi	r2,r2,1
   18ebc:	1000061e 	bne	r2,zero,18ed8 <OSTaskStkChk+0x124>
   18ec0:	e0bff617 	ldw	r2,-40(fp)
   18ec4:	e0bffa15 	stw	r2,-24(fp)
   18ec8:	e0bffa17 	ldw	r2,-24(fp)
   18ecc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   18ed0:	00801144 	movi	r2,69
   18ed4:	00002306 	br	18f64 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   18ed8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   18edc:	e0bff817 	ldw	r2,-32(fp)
   18ee0:	10800317 	ldw	r2,12(r2)
   18ee4:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   18ee8:	e0bff817 	ldw	r2,-32(fp)
   18eec:	10800217 	ldw	r2,8(r2)
   18ef0:	e0bff415 	stw	r2,-48(fp)
   18ef4:	e0bff617 	ldw	r2,-40(fp)
   18ef8:	e0bffb15 	stw	r2,-20(fp)
   18efc:	e0bffb17 	ldw	r2,-20(fp)
   18f00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   18f04:	00000306 	br	18f14 <OSTaskStkChk+0x160>
        nfree++;
   18f08:	e0bff517 	ldw	r2,-44(fp)
   18f0c:	10800044 	addi	r2,r2,1
   18f10:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   18f14:	e0bff417 	ldw	r2,-48(fp)
   18f18:	10c00104 	addi	r3,r2,4
   18f1c:	e0fff415 	stw	r3,-48(fp)
   18f20:	10800017 	ldw	r2,0(r2)
   18f24:	103ff826 	beq	r2,zero,18f08 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   18f28:	e0bff517 	ldw	r2,-44(fp)
   18f2c:	1085883a 	add	r2,r2,r2
   18f30:	1085883a 	add	r2,r2,r2
   18f34:	1007883a 	mov	r3,r2
   18f38:	e0bfff17 	ldw	r2,-4(fp)
   18f3c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   18f40:	e0fffc17 	ldw	r3,-16(fp)
   18f44:	e0bff517 	ldw	r2,-44(fp)
   18f48:	1885c83a 	sub	r2,r3,r2
   18f4c:	1085883a 	add	r2,r2,r2
   18f50:	1085883a 	add	r2,r2,r2
   18f54:	1007883a 	mov	r3,r2
   18f58:	e0bfff17 	ldw	r2,-4(fp)
   18f5c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   18f60:	0005883a 	mov	r2,zero
}
   18f64:	e037883a 	mov	sp,fp
   18f68:	df000017 	ldw	fp,0(sp)
   18f6c:	dec00104 	addi	sp,sp,4
   18f70:	f800283a 	ret

00018f74 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   18f74:	defff504 	addi	sp,sp,-44
   18f78:	dfc00a15 	stw	ra,40(sp)
   18f7c:	df000915 	stw	fp,36(sp)
   18f80:	df000904 	addi	fp,sp,36
   18f84:	2005883a 	mov	r2,r4
   18f88:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18f8c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   18f90:	e0bfff03 	ldbu	r2,-4(fp)
   18f94:	10800518 	cmpnei	r2,r2,20
   18f98:	1000021e 	bne	r2,zero,18fa4 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   18f9c:	008011c4 	movi	r2,71
   18fa0:	00006806 	br	19144 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   18fa4:	e0bfff03 	ldbu	r2,-4(fp)
   18fa8:	10800530 	cmpltui	r2,r2,20
   18fac:	1000051e 	bne	r2,zero,18fc4 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   18fb0:	e0bfff03 	ldbu	r2,-4(fp)
   18fb4:	10803fe0 	cmpeqi	r2,r2,255
   18fb8:	1000021e 	bne	r2,zero,18fc4 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   18fbc:	00800a84 	movi	r2,42
   18fc0:	00006006 	br	19144 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18fc4:	0005303a 	rdctl	r2,status
   18fc8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18fcc:	e0fffe17 	ldw	r3,-8(fp)
   18fd0:	00bfff84 	movi	r2,-2
   18fd4:	1884703a 	and	r2,r3,r2
   18fd8:	1001703a 	wrctl	status,r2
  
  return context;
   18fdc:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   18fe0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   18fe4:	e0bfff03 	ldbu	r2,-4(fp)
   18fe8:	10803fd8 	cmpnei	r2,r2,255
   18fec:	1000061e 	bne	r2,zero,19008 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   18ff0:	d0a7f917 	ldw	r2,-24604(gp)
   18ff4:	10800c83 	ldbu	r2,50(r2)
   18ff8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   18ffc:	00800044 	movi	r2,1
   19000:	e0bff705 	stb	r2,-36(fp)
   19004:	00000906 	br	1902c <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   19008:	d0a7f917 	ldw	r2,-24604(gp)
   1900c:	10800c83 	ldbu	r2,50(r2)
   19010:	10c03fcc 	andi	r3,r2,255
   19014:	e0bfff03 	ldbu	r2,-4(fp)
   19018:	1880031e 	bne	r3,r2,19028 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   1901c:	00800044 	movi	r2,1
   19020:	e0bff705 	stb	r2,-36(fp)
   19024:	00000106 	br	1902c <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   19028:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1902c:	e0ffff03 	ldbu	r3,-4(fp)
   19030:	008000f4 	movhi	r2,3
   19034:	10b40104 	addi	r2,r2,-12284
   19038:	18c7883a 	add	r3,r3,r3
   1903c:	18c7883a 	add	r3,r3,r3
   19040:	10c5883a 	add	r2,r2,r3
   19044:	10800017 	ldw	r2,0(r2)
   19048:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1904c:	e0bffa17 	ldw	r2,-24(fp)
   19050:	1000061e 	bne	r2,zero,1906c <OSTaskSuspend+0xf8>
   19054:	e0bff817 	ldw	r2,-32(fp)
   19058:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1905c:	e0bff917 	ldw	r2,-28(fp)
   19060:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   19064:	00801204 	movi	r2,72
   19068:	00003606 	br	19144 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1906c:	e0bffa17 	ldw	r2,-24(fp)
   19070:	10800058 	cmpnei	r2,r2,1
   19074:	1000061e 	bne	r2,zero,19090 <OSTaskSuspend+0x11c>
   19078:	e0bff817 	ldw	r2,-32(fp)
   1907c:	e0bffb15 	stw	r2,-20(fp)
   19080:	e0bffb17 	ldw	r2,-20(fp)
   19084:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19088:	008010c4 	movi	r2,67
   1908c:	00002d06 	br	19144 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   19090:	e0bffa17 	ldw	r2,-24(fp)
   19094:	10800d03 	ldbu	r2,52(r2)
   19098:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1909c:	e0fffd03 	ldbu	r3,-12(fp)
   190a0:	e13ffd03 	ldbu	r4,-12(fp)
   190a4:	d0a7f644 	addi	r2,gp,-24615
   190a8:	2085883a 	add	r2,r4,r2
   190ac:	10800003 	ldbu	r2,0(r2)
   190b0:	1009883a 	mov	r4,r2
   190b4:	e0bffa17 	ldw	r2,-24(fp)
   190b8:	10800d43 	ldbu	r2,53(r2)
   190bc:	0084303a 	nor	r2,zero,r2
   190c0:	2084703a 	and	r2,r4,r2
   190c4:	1009883a 	mov	r4,r2
   190c8:	d0a7f644 	addi	r2,gp,-24615
   190cc:	1885883a 	add	r2,r3,r2
   190d0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   190d4:	e0fffd03 	ldbu	r3,-12(fp)
   190d8:	d0a7f644 	addi	r2,gp,-24615
   190dc:	1885883a 	add	r2,r3,r2
   190e0:	10800003 	ldbu	r2,0(r2)
   190e4:	10803fcc 	andi	r2,r2,255
   190e8:	1000071e 	bne	r2,zero,19108 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   190ec:	e0bffa17 	ldw	r2,-24(fp)
   190f0:	10800d83 	ldbu	r2,54(r2)
   190f4:	0084303a 	nor	r2,zero,r2
   190f8:	1007883a 	mov	r3,r2
   190fc:	d0a7f603 	ldbu	r2,-24616(gp)
   19100:	1884703a 	and	r2,r3,r2
   19104:	d0a7f605 	stb	r2,-24616(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   19108:	e0bffa17 	ldw	r2,-24(fp)
   1910c:	10800c03 	ldbu	r2,48(r2)
   19110:	10800214 	ori	r2,r2,8
   19114:	1007883a 	mov	r3,r2
   19118:	e0bffa17 	ldw	r2,-24(fp)
   1911c:	10c00c05 	stb	r3,48(r2)
   19120:	e0bff817 	ldw	r2,-32(fp)
   19124:	e0bffc15 	stw	r2,-16(fp)
   19128:	e0bffc17 	ldw	r2,-16(fp)
   1912c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   19130:	e0bff703 	ldbu	r2,-36(fp)
   19134:	10800058 	cmpnei	r2,r2,1
   19138:	1000011e 	bne	r2,zero,19140 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   1913c:	0012e780 	call	12e78 <OS_Sched>
    }
    return (OS_ERR_NONE);
   19140:	0005883a 	mov	r2,zero
}
   19144:	e037883a 	mov	sp,fp
   19148:	dfc00117 	ldw	ra,4(sp)
   1914c:	df000017 	ldw	fp,0(sp)
   19150:	dec00204 	addi	sp,sp,8
   19154:	f800283a 	ret

00019158 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   19158:	defff604 	addi	sp,sp,-40
   1915c:	dfc00915 	stw	ra,36(sp)
   19160:	df000815 	stw	fp,32(sp)
   19164:	df000804 	addi	fp,sp,32
   19168:	2005883a 	mov	r2,r4
   1916c:	e17fff15 	stw	r5,-4(fp)
   19170:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19174:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   19178:	e0bffe03 	ldbu	r2,-8(fp)
   1917c:	10800570 	cmpltui	r2,r2,21
   19180:	1000051e 	bne	r2,zero,19198 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   19184:	e0bffe03 	ldbu	r2,-8(fp)
   19188:	10803fe0 	cmpeqi	r2,r2,255
   1918c:	1000021e 	bne	r2,zero,19198 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   19190:	00800a84 	movi	r2,42
   19194:	00003406 	br	19268 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   19198:	e0bfff17 	ldw	r2,-4(fp)
   1919c:	1000021e 	bne	r2,zero,191a8 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   191a0:	00800244 	movi	r2,9
   191a4:	00003006 	br	19268 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   191a8:	0005303a 	rdctl	r2,status
   191ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   191b0:	e0fffd17 	ldw	r3,-12(fp)
   191b4:	00bfff84 	movi	r2,-2
   191b8:	1884703a 	and	r2,r3,r2
   191bc:	1001703a 	wrctl	status,r2
  
  return context;
   191c0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   191c4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   191c8:	e0bffe03 	ldbu	r2,-8(fp)
   191cc:	10803fd8 	cmpnei	r2,r2,255
   191d0:	1000031e 	bne	r2,zero,191e0 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   191d4:	d0a7f917 	ldw	r2,-24604(gp)
   191d8:	10800c83 	ldbu	r2,50(r2)
   191dc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   191e0:	e0fffe03 	ldbu	r3,-8(fp)
   191e4:	008000f4 	movhi	r2,3
   191e8:	10b40104 	addi	r2,r2,-12284
   191ec:	18c7883a 	add	r3,r3,r3
   191f0:	18c7883a 	add	r3,r3,r3
   191f4:	10c5883a 	add	r2,r2,r3
   191f8:	10800017 	ldw	r2,0(r2)
   191fc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   19200:	e0bffa17 	ldw	r2,-24(fp)
   19204:	1000061e 	bne	r2,zero,19220 <OSTaskQuery+0xc8>
   19208:	e0bff817 	ldw	r2,-32(fp)
   1920c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19210:	e0bff917 	ldw	r2,-28(fp)
   19214:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   19218:	00800a44 	movi	r2,41
   1921c:	00001206 	br	19268 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   19220:	e0bffa17 	ldw	r2,-24(fp)
   19224:	10800058 	cmpnei	r2,r2,1
   19228:	1000061e 	bne	r2,zero,19244 <OSTaskQuery+0xec>
   1922c:	e0bff817 	ldw	r2,-32(fp)
   19230:	e0bffb15 	stw	r2,-20(fp)
   19234:	e0bffb17 	ldw	r2,-20(fp)
   19238:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1923c:	008010c4 	movi	r2,67
   19240:	00000906 	br	19268 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   19244:	01801b04 	movi	r6,108
   19248:	e17ffa17 	ldw	r5,-24(fp)
   1924c:	e13fff17 	ldw	r4,-4(fp)
   19250:	0012e100 	call	12e10 <OS_MemCopy>
   19254:	e0bff817 	ldw	r2,-32(fp)
   19258:	e0bffc15 	stw	r2,-16(fp)
   1925c:	e0bffc17 	ldw	r2,-16(fp)
   19260:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19264:	0005883a 	mov	r2,zero
}
   19268:	e037883a 	mov	sp,fp
   1926c:	dfc00117 	ldw	ra,4(sp)
   19270:	df000017 	ldw	fp,0(sp)
   19274:	dec00204 	addi	sp,sp,8
   19278:	f800283a 	ret

0001927c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1927c:	defffc04 	addi	sp,sp,-16
   19280:	df000315 	stw	fp,12(sp)
   19284:	df000304 	addi	fp,sp,12
   19288:	e13ffd15 	stw	r4,-12(fp)
   1928c:	e17ffe15 	stw	r5,-8(fp)
   19290:	3005883a 	mov	r2,r6
   19294:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   19298:	e0bfff0b 	ldhu	r2,-4(fp)
   1929c:	1080004c 	andi	r2,r2,1
   192a0:	10000d26 	beq	r2,zero,192d8 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   192a4:	e0bfff0b 	ldhu	r2,-4(fp)
   192a8:	1080008c 	andi	r2,r2,2
   192ac:	10000a26 	beq	r2,zero,192d8 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   192b0:	00000706 	br	192d0 <OS_TaskStkClr+0x54>
                size--;
   192b4:	e0bffe17 	ldw	r2,-8(fp)
   192b8:	10bfffc4 	addi	r2,r2,-1
   192bc:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   192c0:	e0bffd17 	ldw	r2,-12(fp)
   192c4:	10c00104 	addi	r3,r2,4
   192c8:	e0fffd15 	stw	r3,-12(fp)
   192cc:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   192d0:	e0bffe17 	ldw	r2,-8(fp)
   192d4:	103ff71e 	bne	r2,zero,192b4 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   192d8:	0001883a 	nop
   192dc:	e037883a 	mov	sp,fp
   192e0:	df000017 	ldw	fp,0(sp)
   192e4:	dec00104 	addi	sp,sp,4
   192e8:	f800283a 	ret

000192ec <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   192ec:	defff904 	addi	sp,sp,-28
   192f0:	dfc00615 	stw	ra,24(sp)
   192f4:	df000515 	stw	fp,20(sp)
   192f8:	df000504 	addi	fp,sp,20
   192fc:	2005883a 	mov	r2,r4
   19300:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19304:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   19308:	d0a7f803 	ldbu	r2,-24608(gp)
   1930c:	10803fcc 	andi	r2,r2,255
   19310:	1000311e 	bne	r2,zero,193d8 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   19314:	e0bfff0b 	ldhu	r2,-4(fp)
   19318:	10003026 	beq	r2,zero,193dc <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1931c:	0005303a 	rdctl	r2,status
   19320:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19324:	e0fffe17 	ldw	r3,-8(fp)
   19328:	00bfff84 	movi	r2,-2
   1932c:	1884703a 	and	r2,r3,r2
   19330:	1001703a 	wrctl	status,r2
  
  return context;
   19334:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   19338:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1933c:	d0a7f917 	ldw	r2,-24604(gp)
   19340:	10800d03 	ldbu	r2,52(r2)
   19344:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   19348:	e0fffd03 	ldbu	r3,-12(fp)
   1934c:	e13ffd03 	ldbu	r4,-12(fp)
   19350:	d0a7f644 	addi	r2,gp,-24615
   19354:	2085883a 	add	r2,r4,r2
   19358:	10800003 	ldbu	r2,0(r2)
   1935c:	1009883a 	mov	r4,r2
   19360:	d0a7f917 	ldw	r2,-24604(gp)
   19364:	10800d43 	ldbu	r2,53(r2)
   19368:	0084303a 	nor	r2,zero,r2
   1936c:	2084703a 	and	r2,r4,r2
   19370:	1009883a 	mov	r4,r2
   19374:	d0a7f644 	addi	r2,gp,-24615
   19378:	1885883a 	add	r2,r3,r2
   1937c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   19380:	e0fffd03 	ldbu	r3,-12(fp)
   19384:	d0a7f644 	addi	r2,gp,-24615
   19388:	1885883a 	add	r2,r3,r2
   1938c:	10800003 	ldbu	r2,0(r2)
   19390:	10803fcc 	andi	r2,r2,255
   19394:	1000071e 	bne	r2,zero,193b4 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   19398:	d0a7f917 	ldw	r2,-24604(gp)
   1939c:	10800d83 	ldbu	r2,54(r2)
   193a0:	0084303a 	nor	r2,zero,r2
   193a4:	1007883a 	mov	r3,r2
   193a8:	d0a7f603 	ldbu	r2,-24616(gp)
   193ac:	1884703a 	and	r2,r3,r2
   193b0:	d0a7f605 	stb	r2,-24616(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   193b4:	d0a7f917 	ldw	r2,-24604(gp)
   193b8:	e0ffff0b 	ldhu	r3,-4(fp)
   193bc:	10c00b8d 	sth	r3,46(r2)
   193c0:	e0bffb17 	ldw	r2,-20(fp)
   193c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   193c8:	e0bffc17 	ldw	r2,-16(fp)
   193cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   193d0:	0012e780 	call	12e78 <OS_Sched>
   193d4:	00000106 	br	193dc <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   193d8:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   193dc:	e037883a 	mov	sp,fp
   193e0:	dfc00117 	ldw	ra,4(sp)
   193e4:	df000017 	ldw	fp,0(sp)
   193e8:	dec00204 	addi	sp,sp,8
   193ec:	f800283a 	ret

000193f0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   193f0:	defff804 	addi	sp,sp,-32
   193f4:	dfc00715 	stw	ra,28(sp)
   193f8:	df000615 	stw	fp,24(sp)
   193fc:	df000604 	addi	fp,sp,24
   19400:	2015883a 	mov	r10,r4
   19404:	2809883a 	mov	r4,r5
   19408:	3007883a 	mov	r3,r6
   1940c:	3805883a 	mov	r2,r7
   19410:	e2bffc05 	stb	r10,-16(fp)
   19414:	e13ffd05 	stb	r4,-12(fp)
   19418:	e0fffe05 	stb	r3,-8(fp)
   1941c:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   19420:	d0a7f803 	ldbu	r2,-24608(gp)
   19424:	10803fcc 	andi	r2,r2,255
   19428:	10000226 	beq	r2,zero,19434 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   1942c:	00801544 	movi	r2,85
   19430:	00004206 	br	1953c <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   19434:	e0bffc03 	ldbu	r2,-16(fp)
   19438:	1000081e 	bne	r2,zero,1945c <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   1943c:	e0bffd03 	ldbu	r2,-12(fp)
   19440:	1000061e 	bne	r2,zero,1945c <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   19444:	e0bffe03 	ldbu	r2,-8(fp)
   19448:	1000041e 	bne	r2,zero,1945c <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   1944c:	e0bfff0b 	ldhu	r2,-4(fp)
   19450:	1000021e 	bne	r2,zero,1945c <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   19454:	00801504 	movi	r2,84
   19458:	00003806 	br	1953c <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   1945c:	e0bffd03 	ldbu	r2,-12(fp)
   19460:	10800f30 	cmpltui	r2,r2,60
   19464:	1000021e 	bne	r2,zero,19470 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   19468:	00801444 	movi	r2,81
   1946c:	00003306 	br	1953c <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   19470:	e0bffe03 	ldbu	r2,-8(fp)
   19474:	10800f30 	cmpltui	r2,r2,60
   19478:	1000021e 	bne	r2,zero,19484 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1947c:	00801484 	movi	r2,82
   19480:	00002e06 	br	1953c <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   19484:	e0bfff0b 	ldhu	r2,-4(fp)
   19488:	1080fa30 	cmpltui	r2,r2,1000
   1948c:	1000021e 	bne	r2,zero,19498 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   19490:	008014c4 	movi	r2,83
   19494:	00002906 	br	1953c <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   19498:	e0bffc03 	ldbu	r2,-16(fp)
   1949c:	10c38424 	muli	r3,r2,3600
   194a0:	e0bffd03 	ldbu	r2,-12(fp)
   194a4:	10800f24 	muli	r2,r2,60
   194a8:	1887883a 	add	r3,r3,r2
   194ac:	e0bffe03 	ldbu	r2,-8(fp)
   194b0:	1885883a 	add	r2,r3,r2
   194b4:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   194b8:	e0bfff0b 	ldhu	r2,-4(fp)
   194bc:	10800f84 	addi	r2,r2,62
   194c0:	100690fa 	slli	r3,r2,3
   194c4:	008418b4 	movhi	r2,4194
   194c8:	109374c4 	addi	r2,r2,19923
   194cc:	188a383a 	mulxuu	r5,r3,r2
   194d0:	1885383a 	mul	r2,r3,r2
   194d4:	1011883a 	mov	r8,r2
   194d8:	2813883a 	mov	r9,r5
   194dc:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   194e0:	2085883a 	add	r2,r4,r2
   194e4:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   194e8:	e0bffb17 	ldw	r2,-20(fp)
   194ec:	1004d43a 	srli	r2,r2,16
   194f0:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   194f4:	e0bffb17 	ldw	r2,-20(fp)
   194f8:	10bfffcc 	andi	r2,r2,65535
   194fc:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   19500:	e0bffb17 	ldw	r2,-20(fp)
   19504:	10bfffcc 	andi	r2,r2,65535
   19508:	1009883a 	mov	r4,r2
   1950c:	00192ec0 	call	192ec <OSTimeDly>
    while (loops > 0) {
   19510:	00000706 	br	19530 <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   19514:	01200014 	movui	r4,32768
   19518:	00192ec0 	call	192ec <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1951c:	01200014 	movui	r4,32768
   19520:	00192ec0 	call	192ec <OSTimeDly>
        loops--;
   19524:	e0bffa0b 	ldhu	r2,-24(fp)
   19528:	10bfffc4 	addi	r2,r2,-1
   1952c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   19530:	e0bffa0b 	ldhu	r2,-24(fp)
   19534:	103ff71e 	bne	r2,zero,19514 <OSTimeDlyHMSM+0x124>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   19538:	0005883a 	mov	r2,zero
}
   1953c:	e037883a 	mov	sp,fp
   19540:	dfc00117 	ldw	ra,4(sp)
   19544:	df000017 	ldw	fp,0(sp)
   19548:	dec00204 	addi	sp,sp,8
   1954c:	f800283a 	ret

00019550 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   19550:	defff504 	addi	sp,sp,-44
   19554:	dfc00a15 	stw	ra,40(sp)
   19558:	df000915 	stw	fp,36(sp)
   1955c:	df000904 	addi	fp,sp,36
   19560:	2005883a 	mov	r2,r4
   19564:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19568:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1956c:	e0bfff03 	ldbu	r2,-4(fp)
   19570:	10800530 	cmpltui	r2,r2,20
   19574:	1000021e 	bne	r2,zero,19580 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   19578:	00800a84 	movi	r2,42
   1957c:	00006406 	br	19710 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19580:	0005303a 	rdctl	r2,status
   19584:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19588:	e0fffe17 	ldw	r3,-8(fp)
   1958c:	00bfff84 	movi	r2,-2
   19590:	1884703a 	and	r2,r3,r2
   19594:	1001703a 	wrctl	status,r2
  
  return context;
   19598:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1959c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   195a0:	e0ffff03 	ldbu	r3,-4(fp)
   195a4:	008000f4 	movhi	r2,3
   195a8:	10b40104 	addi	r2,r2,-12284
   195ac:	18c7883a 	add	r3,r3,r3
   195b0:	18c7883a 	add	r3,r3,r3
   195b4:	10c5883a 	add	r2,r2,r3
   195b8:	10800017 	ldw	r2,0(r2)
   195bc:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   195c0:	e0bff917 	ldw	r2,-28(fp)
   195c4:	1000061e 	bne	r2,zero,195e0 <OSTimeDlyResume+0x90>
   195c8:	e0bff717 	ldw	r2,-36(fp)
   195cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   195d0:	e0bff817 	ldw	r2,-32(fp)
   195d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   195d8:	008010c4 	movi	r2,67
   195dc:	00004c06 	br	19710 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   195e0:	e0bff917 	ldw	r2,-28(fp)
   195e4:	10800058 	cmpnei	r2,r2,1
   195e8:	1000061e 	bne	r2,zero,19604 <OSTimeDlyResume+0xb4>
   195ec:	e0bff717 	ldw	r2,-36(fp)
   195f0:	e0bffa15 	stw	r2,-24(fp)
   195f4:	e0bffa17 	ldw	r2,-24(fp)
   195f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   195fc:	008010c4 	movi	r2,67
   19600:	00004306 	br	19710 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   19604:	e0bff917 	ldw	r2,-28(fp)
   19608:	10800b8b 	ldhu	r2,46(r2)
   1960c:	10bfffcc 	andi	r2,r2,65535
   19610:	1000061e 	bne	r2,zero,1962c <OSTimeDlyResume+0xdc>
   19614:	e0bff717 	ldw	r2,-36(fp)
   19618:	e0bffb15 	stw	r2,-20(fp)
   1961c:	e0bffb17 	ldw	r2,-20(fp)
   19620:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   19624:	00801404 	movi	r2,80
   19628:	00003906 	br	19710 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1962c:	e0bff917 	ldw	r2,-28(fp)
   19630:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   19634:	e0bff917 	ldw	r2,-28(fp)
   19638:	10800c03 	ldbu	r2,48(r2)
   1963c:	10803fcc 	andi	r2,r2,255
   19640:	10800dcc 	andi	r2,r2,55
   19644:	10000b26 	beq	r2,zero,19674 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   19648:	e0bff917 	ldw	r2,-28(fp)
   1964c:	10c00c03 	ldbu	r3,48(r2)
   19650:	00bff204 	movi	r2,-56
   19654:	1884703a 	and	r2,r3,r2
   19658:	1007883a 	mov	r3,r2
   1965c:	e0bff917 	ldw	r2,-28(fp)
   19660:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   19664:	e0bff917 	ldw	r2,-28(fp)
   19668:	00c00044 	movi	r3,1
   1966c:	10c00c45 	stb	r3,49(r2)
   19670:	00000206 	br	1967c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   19674:	e0bff917 	ldw	r2,-28(fp)
   19678:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1967c:	e0bff917 	ldw	r2,-28(fp)
   19680:	10800c03 	ldbu	r2,48(r2)
   19684:	10803fcc 	andi	r2,r2,255
   19688:	1080020c 	andi	r2,r2,8
   1968c:	10001b1e 	bne	r2,zero,196fc <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   19690:	e0bff917 	ldw	r2,-28(fp)
   19694:	10c00d83 	ldbu	r3,54(r2)
   19698:	d0a7f603 	ldbu	r2,-24616(gp)
   1969c:	1884b03a 	or	r2,r3,r2
   196a0:	d0a7f605 	stb	r2,-24616(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   196a4:	e0bff917 	ldw	r2,-28(fp)
   196a8:	10800d03 	ldbu	r2,52(r2)
   196ac:	10c03fcc 	andi	r3,r2,255
   196b0:	e0bff917 	ldw	r2,-28(fp)
   196b4:	10800d03 	ldbu	r2,52(r2)
   196b8:	11003fcc 	andi	r4,r2,255
   196bc:	d0a7f644 	addi	r2,gp,-24615
   196c0:	2085883a 	add	r2,r4,r2
   196c4:	11000003 	ldbu	r4,0(r2)
   196c8:	e0bff917 	ldw	r2,-28(fp)
   196cc:	10800d43 	ldbu	r2,53(r2)
   196d0:	2084b03a 	or	r2,r4,r2
   196d4:	1009883a 	mov	r4,r2
   196d8:	d0a7f644 	addi	r2,gp,-24615
   196dc:	1885883a 	add	r2,r3,r2
   196e0:	11000005 	stb	r4,0(r2)
   196e4:	e0bff717 	ldw	r2,-36(fp)
   196e8:	e0bffc15 	stw	r2,-16(fp)
   196ec:	e0bffc17 	ldw	r2,-16(fp)
   196f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   196f4:	0012e780 	call	12e78 <OS_Sched>
   196f8:	00000406 	br	1970c <OSTimeDlyResume+0x1bc>
   196fc:	e0bff717 	ldw	r2,-36(fp)
   19700:	e0bffd15 	stw	r2,-12(fp)
   19704:	e0bffd17 	ldw	r2,-12(fp)
   19708:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1970c:	0005883a 	mov	r2,zero
}
   19710:	e037883a 	mov	sp,fp
   19714:	dfc00117 	ldw	ra,4(sp)
   19718:	df000017 	ldw	fp,0(sp)
   1971c:	dec00204 	addi	sp,sp,8
   19720:	f800283a 	ret

00019724 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   19724:	defffb04 	addi	sp,sp,-20
   19728:	df000415 	stw	fp,16(sp)
   1972c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19730:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19734:	0005303a 	rdctl	r2,status
   19738:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1973c:	e0fffe17 	ldw	r3,-8(fp)
   19740:	00bfff84 	movi	r2,-2
   19744:	1884703a 	and	r2,r3,r2
   19748:	1001703a 	wrctl	status,r2
  
  return context;
   1974c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   19750:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   19754:	d0a7fa17 	ldw	r2,-24600(gp)
   19758:	e0bffd15 	stw	r2,-12(fp)
   1975c:	e0bffc17 	ldw	r2,-16(fp)
   19760:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19764:	e0bfff17 	ldw	r2,-4(fp)
   19768:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1976c:	e0bffd17 	ldw	r2,-12(fp)
}
   19770:	e037883a 	mov	sp,fp
   19774:	df000017 	ldw	fp,0(sp)
   19778:	dec00104 	addi	sp,sp,4
   1977c:	f800283a 	ret

00019780 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   19780:	defffb04 	addi	sp,sp,-20
   19784:	df000415 	stw	fp,16(sp)
   19788:	df000404 	addi	fp,sp,16
   1978c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19790:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19794:	0005303a 	rdctl	r2,status
   19798:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1979c:	e0fffd17 	ldw	r3,-12(fp)
   197a0:	00bfff84 	movi	r2,-2
   197a4:	1884703a 	and	r2,r3,r2
   197a8:	1001703a 	wrctl	status,r2
  
  return context;
   197ac:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   197b0:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   197b4:	e0bfff17 	ldw	r2,-4(fp)
   197b8:	d0a7fa15 	stw	r2,-24600(gp)
   197bc:	e0bffc17 	ldw	r2,-16(fp)
   197c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   197c4:	e0bffe17 	ldw	r2,-8(fp)
   197c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   197cc:	0001883a 	nop
   197d0:	e037883a 	mov	sp,fp
   197d4:	df000017 	ldw	fp,0(sp)
   197d8:	dec00104 	addi	sp,sp,4
   197dc:	f800283a 	ret

000197e0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   197e0:	defffd04 	addi	sp,sp,-12
   197e4:	dfc00215 	stw	ra,8(sp)
   197e8:	df000115 	stw	fp,4(sp)
   197ec:	df000104 	addi	fp,sp,4
   197f0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   197f4:	d1600804 	addi	r5,gp,-32736
   197f8:	e13fff17 	ldw	r4,-4(fp)
   197fc:	001c4140 	call	1c414 <alt_dev_llist_insert>
}
   19800:	e037883a 	mov	sp,fp
   19804:	dfc00117 	ldw	ra,4(sp)
   19808:	df000017 	ldw	fp,0(sp)
   1980c:	dec00204 	addi	sp,sp,8
   19810:	f800283a 	ret

00019814 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   19814:	defffd04 	addi	sp,sp,-12
   19818:	dfc00215 	stw	ra,8(sp)
   1981c:	df000115 	stw	fp,4(sp)
   19820:	df000104 	addi	fp,sp,4
   19824:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   19828:	001ccf40 	call	1ccf4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1982c:	00800044 	movi	r2,1
   19830:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   19834:	0001883a 	nop
   19838:	e037883a 	mov	sp,fp
   1983c:	dfc00117 	ldw	ra,4(sp)
   19840:	df000017 	ldw	fp,0(sp)
   19844:	dec00204 	addi	sp,sp,8
   19848:	f800283a 	ret

0001984c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1984c:	defffb04 	addi	sp,sp,-20
   19850:	dfc00415 	stw	ra,16(sp)
   19854:	df000315 	stw	fp,12(sp)
   19858:	df000304 	addi	fp,sp,12
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1985c:	01c00204 	movi	r7,8
   19860:	000d883a 	mov	r6,zero
   19864:	000b883a 	mov	r5,zero
   19868:	013fc834 	movhi	r4,65312
   1986c:	21080004 	addi	r4,r4,8192
   19870:	001af580 	call	1af58 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   19874:	01800204 	movi	r6,8
   19878:	000b883a 	mov	r5,zero
   1987c:	010000b4 	movhi	r4,2
   19880:	213aad04 	addi	r4,r4,-5452
   19884:	001a31c0 	call	1a31c <altera_avalon_jtag_uart_init>
   19888:	010000b4 	movhi	r4,2
   1988c:	213aa304 	addi	r4,r4,-5492
   19890:	00197e00 	call	197e0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   19894:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   19898:	010000b4 	movhi	r4,2
   1989c:	213ebe04 	addi	r4,r4,-1288
   198a0:	00197e00 	call	197e0 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   198a4:	010000b4 	movhi	r4,2
   198a8:	213eca04 	addi	r4,r4,-1240
   198ac:	00197e00 	call	197e0 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   198b0:	010000b4 	movhi	r4,2
   198b4:	213ed604 	addi	r4,r4,-1192
   198b8:	001b0800 	call	1b080 <alt_up_character_lcd_init>
   198bc:	010000b4 	movhi	r4,2
   198c0:	213ed604 	addi	r4,r4,-1192
   198c4:	00197e00 	call	197e0 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   198c8:	010000b4 	movhi	r4,2
   198cc:	213ee104 	addi	r4,r4,-1148
   198d0:	00197e00 	call	197e0 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   198d4:	010000b4 	movhi	r4,2
   198d8:	213eec04 	addi	r4,r4,-1104
   198dc:	001b9740 	call	1b974 <alt_up_ps2_init>
   198e0:	010000b4 	movhi	r4,2
   198e4:	213eec04 	addi	r4,r4,-1104
   198e8:	00197e00 	call	197e0 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   198ec:	010000b4 	movhi	r4,2
   198f0:	213efa04 	addi	r4,r4,-1048
   198f4:	001b9740 	call	1b974 <alt_up_ps2_init>
   198f8:	010000b4 	movhi	r4,2
   198fc:	213efa04 	addi	r4,r4,-1048
   19900:	00197e00 	call	197e0 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   19904:	010000b4 	movhi	r4,2
   19908:	213f0804 	addi	r4,r4,-992
   1990c:	00197e00 	call	197e0 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   19910:	010000b4 	movhi	r4,2
   19914:	213f1304 	addi	r4,r4,-948
   19918:	00197e00 	call	197e0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   1991c:	008000b4 	movhi	r2,2
   19920:	10bf2004 	addi	r2,r2,-896
   19924:	10800a17 	ldw	r2,40(r2)
   19928:	10800017 	ldw	r2,0(r2)
   1992c:	1007883a 	mov	r3,r2
   19930:	008000b4 	movhi	r2,2
   19934:	10bf2004 	addi	r2,r2,-896
   19938:	10c00b15 	stw	r3,44(r2)
   1993c:	008000b4 	movhi	r2,2
   19940:	10bf2004 	addi	r2,r2,-896
   19944:	10800a17 	ldw	r2,40(r2)
   19948:	10800104 	addi	r2,r2,4
   1994c:	10800017 	ldw	r2,0(r2)
   19950:	1007883a 	mov	r3,r2
   19954:	008000b4 	movhi	r2,2
   19958:	10bf2004 	addi	r2,r2,-896
   1995c:	10c00c15 	stw	r3,48(r2)
   19960:	008000b4 	movhi	r2,2
   19964:	10bf2004 	addi	r2,r2,-896
   19968:	10800a17 	ldw	r2,40(r2)
   1996c:	10800204 	addi	r2,r2,8
   19970:	10800017 	ldw	r2,0(r2)
   19974:	10ffffcc 	andi	r3,r2,65535
   19978:	008000b4 	movhi	r2,2
   1997c:	10bf2004 	addi	r2,r2,-896
   19980:	10c01115 	stw	r3,68(r2)
   19984:	008000b4 	movhi	r2,2
   19988:	10bf2004 	addi	r2,r2,-896
   1998c:	10800a17 	ldw	r2,40(r2)
   19990:	10800204 	addi	r2,r2,8
   19994:	10800017 	ldw	r2,0(r2)
   19998:	1006d43a 	srli	r3,r2,16
   1999c:	008000b4 	movhi	r2,2
   199a0:	10bf2004 	addi	r2,r2,-896
   199a4:	10c01215 	stw	r3,72(r2)
   199a8:	008000b4 	movhi	r2,2
   199ac:	10bf2004 	addi	r2,r2,-896
   199b0:	10800a17 	ldw	r2,40(r2)
   199b4:	10800304 	addi	r2,r2,12
   199b8:	10800017 	ldw	r2,0(r2)
   199bc:	1005d07a 	srai	r2,r2,1
   199c0:	10c0004c 	andi	r3,r2,1
   199c4:	008000b4 	movhi	r2,2
   199c8:	10bf2004 	addi	r2,r2,-896
   199cc:	10c00d15 	stw	r3,52(r2)
   199d0:	008000b4 	movhi	r2,2
   199d4:	10bf2004 	addi	r2,r2,-896
   199d8:	10800a17 	ldw	r2,40(r2)
   199dc:	10800304 	addi	r2,r2,12
   199e0:	10800017 	ldw	r2,0(r2)
   199e4:	1005d23a 	srai	r2,r2,8
   199e8:	108003cc 	andi	r2,r2,15
   199ec:	10800044 	addi	r2,r2,1
   199f0:	1007883a 	mov	r3,r2
   199f4:	008000b4 	movhi	r2,2
   199f8:	10bf2004 	addi	r2,r2,-896
   199fc:	10c00e15 	stw	r3,56(r2)
   19a00:	008000b4 	movhi	r2,2
   19a04:	10bf2004 	addi	r2,r2,-896
   19a08:	10800a17 	ldw	r2,40(r2)
   19a0c:	10800304 	addi	r2,r2,12
   19a10:	10800017 	ldw	r2,0(r2)
   19a14:	1005d1ba 	srai	r2,r2,6
   19a18:	108000cc 	andi	r2,r2,3
   19a1c:	10800044 	addi	r2,r2,1
   19a20:	1007883a 	mov	r3,r2
   19a24:	008000b4 	movhi	r2,2
   19a28:	10bf2004 	addi	r2,r2,-896
   19a2c:	10c00f15 	stw	r3,60(r2)
   19a30:	008000b4 	movhi	r2,2
   19a34:	10bf2004 	addi	r2,r2,-896
   19a38:	10800e17 	ldw	r2,56(r2)
   19a3c:	1007883a 	mov	r3,r2
   19a40:	008000b4 	movhi	r2,2
   19a44:	10bf2004 	addi	r2,r2,-896
   19a48:	10800f17 	ldw	r2,60(r2)
   19a4c:	1885383a 	mul	r2,r3,r2
   19a50:	e0bffd05 	stb	r2,-12(fp)
   19a54:	e0bffd03 	ldbu	r2,-12(fp)
   19a58:	10800268 	cmpgeui	r2,r2,9
   19a5c:	1000051e 	bne	r2,zero,19a74 <alt_sys_init+0x228>
   19a60:	008000b4 	movhi	r2,2
   19a64:	10bf2004 	addi	r2,r2,-896
   19a68:	00c00044 	movi	r3,1
   19a6c:	10c01015 	stw	r3,64(r2)
   19a70:	00000c06 	br	19aa4 <alt_sys_init+0x258>
   19a74:	e0bffd03 	ldbu	r2,-12(fp)
   19a78:	10800468 	cmpgeui	r2,r2,17
   19a7c:	1000051e 	bne	r2,zero,19a94 <alt_sys_init+0x248>
   19a80:	008000b4 	movhi	r2,2
   19a84:	10bf2004 	addi	r2,r2,-896
   19a88:	00c00084 	movi	r3,2
   19a8c:	10c01015 	stw	r3,64(r2)
   19a90:	00000406 	br	19aa4 <alt_sys_init+0x258>
   19a94:	008000b4 	movhi	r2,2
   19a98:	10bf2004 	addi	r2,r2,-896
   19a9c:	00c00104 	movi	r3,4
   19aa0:	10c01015 	stw	r3,64(r2)
   19aa4:	008000b4 	movhi	r2,2
   19aa8:	10bf2004 	addi	r2,r2,-896
   19aac:	10800a17 	ldw	r2,40(r2)
   19ab0:	10800304 	addi	r2,r2,12
   19ab4:	10800017 	ldw	r2,0(r2)
   19ab8:	1005d43a 	srai	r2,r2,16
   19abc:	e0bffd45 	stb	r2,-11(fp)
   19ac0:	008000b4 	movhi	r2,2
   19ac4:	10bf2004 	addi	r2,r2,-896
   19ac8:	10800a17 	ldw	r2,40(r2)
   19acc:	10800304 	addi	r2,r2,12
   19ad0:	10800017 	ldw	r2,0(r2)
   19ad4:	1004d63a 	srli	r2,r2,24
   19ad8:	e0bffd85 	stb	r2,-10(fp)
   19adc:	008000b4 	movhi	r2,2
   19ae0:	10bf2004 	addi	r2,r2,-896
   19ae4:	10801017 	ldw	r2,64(r2)
   19ae8:	10800058 	cmpnei	r2,r2,1
   19aec:	1000041e 	bne	r2,zero,19b00 <alt_sys_init+0x2b4>
   19af0:	008000b4 	movhi	r2,2
   19af4:	10bf2004 	addi	r2,r2,-896
   19af8:	10001315 	stw	zero,76(r2)
   19afc:	00000e06 	br	19b38 <alt_sys_init+0x2ec>
   19b00:	008000b4 	movhi	r2,2
   19b04:	10bf2004 	addi	r2,r2,-896
   19b08:	10801017 	ldw	r2,64(r2)
   19b0c:	10800098 	cmpnei	r2,r2,2
   19b10:	1000051e 	bne	r2,zero,19b28 <alt_sys_init+0x2dc>
   19b14:	008000b4 	movhi	r2,2
   19b18:	10bf2004 	addi	r2,r2,-896
   19b1c:	00c00044 	movi	r3,1
   19b20:	10c01315 	stw	r3,76(r2)
   19b24:	00000406 	br	19b38 <alt_sys_init+0x2ec>
   19b28:	008000b4 	movhi	r2,2
   19b2c:	10bf2004 	addi	r2,r2,-896
   19b30:	00c00084 	movi	r3,2
   19b34:	10c01315 	stw	r3,76(r2)
   19b38:	e0bffd43 	ldbu	r2,-11(fp)
   19b3c:	00c00804 	movi	r3,32
   19b40:	1885c83a 	sub	r2,r3,r2
   19b44:	00ffffc4 	movi	r3,-1
   19b48:	1886d83a 	srl	r3,r3,r2
   19b4c:	008000b4 	movhi	r2,2
   19b50:	10bf2004 	addi	r2,r2,-896
   19b54:	10c01415 	stw	r3,80(r2)
   19b58:	e0fffd43 	ldbu	r3,-11(fp)
   19b5c:	008000b4 	movhi	r2,2
   19b60:	10bf2004 	addi	r2,r2,-896
   19b64:	10801317 	ldw	r2,76(r2)
   19b68:	1887883a 	add	r3,r3,r2
   19b6c:	008000b4 	movhi	r2,2
   19b70:	10bf2004 	addi	r2,r2,-896
   19b74:	10c01515 	stw	r3,84(r2)
   19b78:	e0bffd83 	ldbu	r2,-10(fp)
   19b7c:	00c00804 	movi	r3,32
   19b80:	1885c83a 	sub	r2,r3,r2
   19b84:	00ffffc4 	movi	r3,-1
   19b88:	1886d83a 	srl	r3,r3,r2
   19b8c:	008000b4 	movhi	r2,2
   19b90:	10bf2004 	addi	r2,r2,-896
   19b94:	10c01615 	stw	r3,88(r2)
   19b98:	010000b4 	movhi	r4,2
   19b9c:	213f2004 	addi	r4,r4,-896
   19ba0:	00197e00 	call	197e0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   19ba4:	008000b4 	movhi	r2,2
   19ba8:	10bf3704 	addi	r2,r2,-804
   19bac:	10800a17 	ldw	r2,40(r2)
   19bb0:	10800017 	ldw	r2,0(r2)
   19bb4:	1007883a 	mov	r3,r2
   19bb8:	008000b4 	movhi	r2,2
   19bbc:	10bf3704 	addi	r2,r2,-804
   19bc0:	10c00b15 	stw	r3,44(r2)
   19bc4:	008000b4 	movhi	r2,2
   19bc8:	10bf3704 	addi	r2,r2,-804
   19bcc:	10800a17 	ldw	r2,40(r2)
   19bd0:	10800104 	addi	r2,r2,4
   19bd4:	10800017 	ldw	r2,0(r2)
   19bd8:	1007883a 	mov	r3,r2
   19bdc:	008000b4 	movhi	r2,2
   19be0:	10bf3704 	addi	r2,r2,-804
   19be4:	10c00c15 	stw	r3,48(r2)
   19be8:	008000b4 	movhi	r2,2
   19bec:	10bf3704 	addi	r2,r2,-804
   19bf0:	10800a17 	ldw	r2,40(r2)
   19bf4:	10800204 	addi	r2,r2,8
   19bf8:	10800017 	ldw	r2,0(r2)
   19bfc:	10ffffcc 	andi	r3,r2,65535
   19c00:	008000b4 	movhi	r2,2
   19c04:	10bf3704 	addi	r2,r2,-804
   19c08:	10c01115 	stw	r3,68(r2)
   19c0c:	008000b4 	movhi	r2,2
   19c10:	10bf3704 	addi	r2,r2,-804
   19c14:	10800a17 	ldw	r2,40(r2)
   19c18:	10800204 	addi	r2,r2,8
   19c1c:	10800017 	ldw	r2,0(r2)
   19c20:	1006d43a 	srli	r3,r2,16
   19c24:	008000b4 	movhi	r2,2
   19c28:	10bf3704 	addi	r2,r2,-804
   19c2c:	10c01215 	stw	r3,72(r2)
   19c30:	008000b4 	movhi	r2,2
   19c34:	10bf3704 	addi	r2,r2,-804
   19c38:	10800a17 	ldw	r2,40(r2)
   19c3c:	10800304 	addi	r2,r2,12
   19c40:	10800017 	ldw	r2,0(r2)
   19c44:	1005d07a 	srai	r2,r2,1
   19c48:	10c0004c 	andi	r3,r2,1
   19c4c:	008000b4 	movhi	r2,2
   19c50:	10bf3704 	addi	r2,r2,-804
   19c54:	10c00d15 	stw	r3,52(r2)
   19c58:	008000b4 	movhi	r2,2
   19c5c:	10bf3704 	addi	r2,r2,-804
   19c60:	10800a17 	ldw	r2,40(r2)
   19c64:	10800304 	addi	r2,r2,12
   19c68:	10800017 	ldw	r2,0(r2)
   19c6c:	1005d23a 	srai	r2,r2,8
   19c70:	108003cc 	andi	r2,r2,15
   19c74:	10800044 	addi	r2,r2,1
   19c78:	1007883a 	mov	r3,r2
   19c7c:	008000b4 	movhi	r2,2
   19c80:	10bf3704 	addi	r2,r2,-804
   19c84:	10c00e15 	stw	r3,56(r2)
   19c88:	008000b4 	movhi	r2,2
   19c8c:	10bf3704 	addi	r2,r2,-804
   19c90:	10800a17 	ldw	r2,40(r2)
   19c94:	10800304 	addi	r2,r2,12
   19c98:	10800017 	ldw	r2,0(r2)
   19c9c:	1005d1ba 	srai	r2,r2,6
   19ca0:	108000cc 	andi	r2,r2,3
   19ca4:	10800044 	addi	r2,r2,1
   19ca8:	1007883a 	mov	r3,r2
   19cac:	008000b4 	movhi	r2,2
   19cb0:	10bf3704 	addi	r2,r2,-804
   19cb4:	10c00f15 	stw	r3,60(r2)
   19cb8:	008000b4 	movhi	r2,2
   19cbc:	10bf3704 	addi	r2,r2,-804
   19cc0:	10800e17 	ldw	r2,56(r2)
   19cc4:	1007883a 	mov	r3,r2
   19cc8:	008000b4 	movhi	r2,2
   19ccc:	10bf3704 	addi	r2,r2,-804
   19cd0:	10800f17 	ldw	r2,60(r2)
   19cd4:	1885383a 	mul	r2,r3,r2
   19cd8:	e0bffdc5 	stb	r2,-9(fp)
   19cdc:	e0bffdc3 	ldbu	r2,-9(fp)
   19ce0:	10800268 	cmpgeui	r2,r2,9
   19ce4:	1000051e 	bne	r2,zero,19cfc <alt_sys_init+0x4b0>
   19ce8:	008000b4 	movhi	r2,2
   19cec:	10bf3704 	addi	r2,r2,-804
   19cf0:	00c00044 	movi	r3,1
   19cf4:	10c01015 	stw	r3,64(r2)
   19cf8:	00000c06 	br	19d2c <alt_sys_init+0x4e0>
   19cfc:	e0bffdc3 	ldbu	r2,-9(fp)
   19d00:	10800468 	cmpgeui	r2,r2,17
   19d04:	1000051e 	bne	r2,zero,19d1c <alt_sys_init+0x4d0>
   19d08:	008000b4 	movhi	r2,2
   19d0c:	10bf3704 	addi	r2,r2,-804
   19d10:	00c00084 	movi	r3,2
   19d14:	10c01015 	stw	r3,64(r2)
   19d18:	00000406 	br	19d2c <alt_sys_init+0x4e0>
   19d1c:	008000b4 	movhi	r2,2
   19d20:	10bf3704 	addi	r2,r2,-804
   19d24:	00c00104 	movi	r3,4
   19d28:	10c01015 	stw	r3,64(r2)
   19d2c:	008000b4 	movhi	r2,2
   19d30:	10bf3704 	addi	r2,r2,-804
   19d34:	10800a17 	ldw	r2,40(r2)
   19d38:	10800304 	addi	r2,r2,12
   19d3c:	10800017 	ldw	r2,0(r2)
   19d40:	1005d43a 	srai	r2,r2,16
   19d44:	e0bffe05 	stb	r2,-8(fp)
   19d48:	008000b4 	movhi	r2,2
   19d4c:	10bf3704 	addi	r2,r2,-804
   19d50:	10800a17 	ldw	r2,40(r2)
   19d54:	10800304 	addi	r2,r2,12
   19d58:	10800017 	ldw	r2,0(r2)
   19d5c:	1004d63a 	srli	r2,r2,24
   19d60:	e0bffe45 	stb	r2,-7(fp)
   19d64:	008000b4 	movhi	r2,2
   19d68:	10bf3704 	addi	r2,r2,-804
   19d6c:	10801017 	ldw	r2,64(r2)
   19d70:	10800058 	cmpnei	r2,r2,1
   19d74:	1000041e 	bne	r2,zero,19d88 <alt_sys_init+0x53c>
   19d78:	008000b4 	movhi	r2,2
   19d7c:	10bf3704 	addi	r2,r2,-804
   19d80:	10001315 	stw	zero,76(r2)
   19d84:	00000e06 	br	19dc0 <alt_sys_init+0x574>
   19d88:	008000b4 	movhi	r2,2
   19d8c:	10bf3704 	addi	r2,r2,-804
   19d90:	10801017 	ldw	r2,64(r2)
   19d94:	10800098 	cmpnei	r2,r2,2
   19d98:	1000051e 	bne	r2,zero,19db0 <alt_sys_init+0x564>
   19d9c:	008000b4 	movhi	r2,2
   19da0:	10bf3704 	addi	r2,r2,-804
   19da4:	00c00044 	movi	r3,1
   19da8:	10c01315 	stw	r3,76(r2)
   19dac:	00000406 	br	19dc0 <alt_sys_init+0x574>
   19db0:	008000b4 	movhi	r2,2
   19db4:	10bf3704 	addi	r2,r2,-804
   19db8:	00c00084 	movi	r3,2
   19dbc:	10c01315 	stw	r3,76(r2)
   19dc0:	e0bffe03 	ldbu	r2,-8(fp)
   19dc4:	00c00804 	movi	r3,32
   19dc8:	1885c83a 	sub	r2,r3,r2
   19dcc:	00ffffc4 	movi	r3,-1
   19dd0:	1886d83a 	srl	r3,r3,r2
   19dd4:	008000b4 	movhi	r2,2
   19dd8:	10bf3704 	addi	r2,r2,-804
   19ddc:	10c01415 	stw	r3,80(r2)
   19de0:	e0fffe03 	ldbu	r3,-8(fp)
   19de4:	008000b4 	movhi	r2,2
   19de8:	10bf3704 	addi	r2,r2,-804
   19dec:	10801317 	ldw	r2,76(r2)
   19df0:	1887883a 	add	r3,r3,r2
   19df4:	008000b4 	movhi	r2,2
   19df8:	10bf3704 	addi	r2,r2,-804
   19dfc:	10c01515 	stw	r3,84(r2)
   19e00:	e0bffe43 	ldbu	r2,-7(fp)
   19e04:	00c00804 	movi	r3,32
   19e08:	1885c83a 	sub	r2,r3,r2
   19e0c:	00ffffc4 	movi	r3,-1
   19e10:	1886d83a 	srl	r3,r3,r2
   19e14:	008000b4 	movhi	r2,2
   19e18:	10bf3704 	addi	r2,r2,-804
   19e1c:	10c01615 	stw	r3,88(r2)
   19e20:	010000b4 	movhi	r4,2
   19e24:	213f3704 	addi	r4,r4,-804
   19e28:	00197e00 	call	197e0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   19e2c:	008000b4 	movhi	r2,2
   19e30:	10bf4e04 	addi	r2,r2,-712
   19e34:	10800a17 	ldw	r2,40(r2)
   19e38:	10800017 	ldw	r2,0(r2)
   19e3c:	1007883a 	mov	r3,r2
   19e40:	008000b4 	movhi	r2,2
   19e44:	10bf4e04 	addi	r2,r2,-712
   19e48:	10c00b15 	stw	r3,44(r2)
   19e4c:	008000b4 	movhi	r2,2
   19e50:	10bf4e04 	addi	r2,r2,-712
   19e54:	10800a17 	ldw	r2,40(r2)
   19e58:	10800104 	addi	r2,r2,4
   19e5c:	10800017 	ldw	r2,0(r2)
   19e60:	1007883a 	mov	r3,r2
   19e64:	008000b4 	movhi	r2,2
   19e68:	10bf4e04 	addi	r2,r2,-712
   19e6c:	10c00c15 	stw	r3,48(r2)
   19e70:	008000b4 	movhi	r2,2
   19e74:	10bf4e04 	addi	r2,r2,-712
   19e78:	10800a17 	ldw	r2,40(r2)
   19e7c:	10800204 	addi	r2,r2,8
   19e80:	10800017 	ldw	r2,0(r2)
   19e84:	10ffffcc 	andi	r3,r2,65535
   19e88:	008000b4 	movhi	r2,2
   19e8c:	10bf4e04 	addi	r2,r2,-712
   19e90:	10c01115 	stw	r3,68(r2)
   19e94:	008000b4 	movhi	r2,2
   19e98:	10bf4e04 	addi	r2,r2,-712
   19e9c:	10800a17 	ldw	r2,40(r2)
   19ea0:	10800204 	addi	r2,r2,8
   19ea4:	10800017 	ldw	r2,0(r2)
   19ea8:	1006d43a 	srli	r3,r2,16
   19eac:	008000b4 	movhi	r2,2
   19eb0:	10bf4e04 	addi	r2,r2,-712
   19eb4:	10c01215 	stw	r3,72(r2)
   19eb8:	008000b4 	movhi	r2,2
   19ebc:	10bf4e04 	addi	r2,r2,-712
   19ec0:	10800a17 	ldw	r2,40(r2)
   19ec4:	10800304 	addi	r2,r2,12
   19ec8:	10800017 	ldw	r2,0(r2)
   19ecc:	1005d07a 	srai	r2,r2,1
   19ed0:	10c0004c 	andi	r3,r2,1
   19ed4:	008000b4 	movhi	r2,2
   19ed8:	10bf4e04 	addi	r2,r2,-712
   19edc:	10c00d15 	stw	r3,52(r2)
   19ee0:	008000b4 	movhi	r2,2
   19ee4:	10bf4e04 	addi	r2,r2,-712
   19ee8:	10800a17 	ldw	r2,40(r2)
   19eec:	10800304 	addi	r2,r2,12
   19ef0:	10800017 	ldw	r2,0(r2)
   19ef4:	1005d23a 	srai	r2,r2,8
   19ef8:	108003cc 	andi	r2,r2,15
   19efc:	10800044 	addi	r2,r2,1
   19f00:	1007883a 	mov	r3,r2
   19f04:	008000b4 	movhi	r2,2
   19f08:	10bf4e04 	addi	r2,r2,-712
   19f0c:	10c00e15 	stw	r3,56(r2)
   19f10:	008000b4 	movhi	r2,2
   19f14:	10bf4e04 	addi	r2,r2,-712
   19f18:	10800a17 	ldw	r2,40(r2)
   19f1c:	10800304 	addi	r2,r2,12
   19f20:	10800017 	ldw	r2,0(r2)
   19f24:	1005d1ba 	srai	r2,r2,6
   19f28:	108000cc 	andi	r2,r2,3
   19f2c:	10800044 	addi	r2,r2,1
   19f30:	1007883a 	mov	r3,r2
   19f34:	008000b4 	movhi	r2,2
   19f38:	10bf4e04 	addi	r2,r2,-712
   19f3c:	10c00f15 	stw	r3,60(r2)
   19f40:	008000b4 	movhi	r2,2
   19f44:	10bf4e04 	addi	r2,r2,-712
   19f48:	10800e17 	ldw	r2,56(r2)
   19f4c:	1007883a 	mov	r3,r2
   19f50:	008000b4 	movhi	r2,2
   19f54:	10bf4e04 	addi	r2,r2,-712
   19f58:	10800f17 	ldw	r2,60(r2)
   19f5c:	1885383a 	mul	r2,r3,r2
   19f60:	e0bffe85 	stb	r2,-6(fp)
   19f64:	e0bffe83 	ldbu	r2,-6(fp)
   19f68:	10800268 	cmpgeui	r2,r2,9
   19f6c:	1000051e 	bne	r2,zero,19f84 <alt_sys_init+0x738>
   19f70:	008000b4 	movhi	r2,2
   19f74:	10bf4e04 	addi	r2,r2,-712
   19f78:	00c00044 	movi	r3,1
   19f7c:	10c01015 	stw	r3,64(r2)
   19f80:	00000c06 	br	19fb4 <alt_sys_init+0x768>
   19f84:	e0bffe83 	ldbu	r2,-6(fp)
   19f88:	10800468 	cmpgeui	r2,r2,17
   19f8c:	1000051e 	bne	r2,zero,19fa4 <alt_sys_init+0x758>
   19f90:	008000b4 	movhi	r2,2
   19f94:	10bf4e04 	addi	r2,r2,-712
   19f98:	00c00084 	movi	r3,2
   19f9c:	10c01015 	stw	r3,64(r2)
   19fa0:	00000406 	br	19fb4 <alt_sys_init+0x768>
   19fa4:	008000b4 	movhi	r2,2
   19fa8:	10bf4e04 	addi	r2,r2,-712
   19fac:	00c00104 	movi	r3,4
   19fb0:	10c01015 	stw	r3,64(r2)
   19fb4:	008000b4 	movhi	r2,2
   19fb8:	10bf4e04 	addi	r2,r2,-712
   19fbc:	10800a17 	ldw	r2,40(r2)
   19fc0:	10800304 	addi	r2,r2,12
   19fc4:	10800017 	ldw	r2,0(r2)
   19fc8:	1005d43a 	srai	r2,r2,16
   19fcc:	e0bffec5 	stb	r2,-5(fp)
   19fd0:	008000b4 	movhi	r2,2
   19fd4:	10bf4e04 	addi	r2,r2,-712
   19fd8:	10800a17 	ldw	r2,40(r2)
   19fdc:	10800304 	addi	r2,r2,12
   19fe0:	10800017 	ldw	r2,0(r2)
   19fe4:	1004d63a 	srli	r2,r2,24
   19fe8:	e0bfff05 	stb	r2,-4(fp)
   19fec:	008000b4 	movhi	r2,2
   19ff0:	10bf4e04 	addi	r2,r2,-712
   19ff4:	10801017 	ldw	r2,64(r2)
   19ff8:	10800058 	cmpnei	r2,r2,1
   19ffc:	1000041e 	bne	r2,zero,1a010 <alt_sys_init+0x7c4>
   1a000:	008000b4 	movhi	r2,2
   1a004:	10bf4e04 	addi	r2,r2,-712
   1a008:	10001315 	stw	zero,76(r2)
   1a00c:	00000e06 	br	1a048 <alt_sys_init+0x7fc>
   1a010:	008000b4 	movhi	r2,2
   1a014:	10bf4e04 	addi	r2,r2,-712
   1a018:	10801017 	ldw	r2,64(r2)
   1a01c:	10800098 	cmpnei	r2,r2,2
   1a020:	1000051e 	bne	r2,zero,1a038 <alt_sys_init+0x7ec>
   1a024:	008000b4 	movhi	r2,2
   1a028:	10bf4e04 	addi	r2,r2,-712
   1a02c:	00c00044 	movi	r3,1
   1a030:	10c01315 	stw	r3,76(r2)
   1a034:	00000406 	br	1a048 <alt_sys_init+0x7fc>
   1a038:	008000b4 	movhi	r2,2
   1a03c:	10bf4e04 	addi	r2,r2,-712
   1a040:	00c00084 	movi	r3,2
   1a044:	10c01315 	stw	r3,76(r2)
   1a048:	e0bffec3 	ldbu	r2,-5(fp)
   1a04c:	00c00804 	movi	r3,32
   1a050:	1885c83a 	sub	r2,r3,r2
   1a054:	00ffffc4 	movi	r3,-1
   1a058:	1886d83a 	srl	r3,r3,r2
   1a05c:	008000b4 	movhi	r2,2
   1a060:	10bf4e04 	addi	r2,r2,-712
   1a064:	10c01415 	stw	r3,80(r2)
   1a068:	e0fffec3 	ldbu	r3,-5(fp)
   1a06c:	008000b4 	movhi	r2,2
   1a070:	10bf4e04 	addi	r2,r2,-712
   1a074:	10801317 	ldw	r2,76(r2)
   1a078:	1887883a 	add	r3,r3,r2
   1a07c:	008000b4 	movhi	r2,2
   1a080:	10bf4e04 	addi	r2,r2,-712
   1a084:	10c01515 	stw	r3,84(r2)
   1a088:	e0bfff03 	ldbu	r2,-4(fp)
   1a08c:	00c00804 	movi	r3,32
   1a090:	1885c83a 	sub	r2,r3,r2
   1a094:	00ffffc4 	movi	r3,-1
   1a098:	1886d83a 	srl	r3,r3,r2
   1a09c:	008000b4 	movhi	r2,2
   1a0a0:	10bf4e04 	addi	r2,r2,-712
   1a0a4:	10c01615 	stw	r3,88(r2)
   1a0a8:	010000b4 	movhi	r4,2
   1a0ac:	213f4e04 	addi	r4,r4,-712
   1a0b0:	00197e00 	call	197e0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
   1a0b4:	008000b4 	movhi	r2,2
   1a0b8:	10bf6504 	addi	r2,r2,-620
   1a0bc:	10800a17 	ldw	r2,40(r2)
   1a0c0:	10800017 	ldw	r2,0(r2)
   1a0c4:	10c003cc 	andi	r3,r2,15
   1a0c8:	008000b4 	movhi	r2,2
   1a0cc:	10bf6504 	addi	r2,r2,-620
   1a0d0:	10c00b15 	stw	r3,44(r2)
   1a0d4:	008000b4 	movhi	r2,2
   1a0d8:	10bf6504 	addi	r2,r2,-620
   1a0dc:	10800a17 	ldw	r2,40(r2)
   1a0e0:	10800017 	ldw	r2,0(r2)
   1a0e4:	1005d13a 	srai	r2,r2,4
   1a0e8:	10c0004c 	andi	r3,r2,1
   1a0ec:	008000b4 	movhi	r2,2
   1a0f0:	10bf6504 	addi	r2,r2,-620
   1a0f4:	10c00c15 	stw	r3,48(r2)
   1a0f8:	008000b4 	movhi	r2,2
   1a0fc:	10bf6504 	addi	r2,r2,-620
   1a100:	10800a17 	ldw	r2,40(r2)
   1a104:	10800017 	ldw	r2,0(r2)
   1a108:	1005d17a 	srai	r2,r2,5
   1a10c:	10c0004c 	andi	r3,r2,1
   1a110:	008000b4 	movhi	r2,2
   1a114:	10bf6504 	addi	r2,r2,-620
   1a118:	10c00d15 	stw	r3,52(r2)
   1a11c:	008000b4 	movhi	r2,2
   1a120:	10bf6504 	addi	r2,r2,-620
   1a124:	10800a17 	ldw	r2,40(r2)
   1a128:	10800017 	ldw	r2,0(r2)
   1a12c:	1005d43a 	srai	r2,r2,16
   1a130:	10c003cc 	andi	r3,r2,15
   1a134:	008000b4 	movhi	r2,2
   1a138:	10bf6504 	addi	r2,r2,-620
   1a13c:	10c00e15 	stw	r3,56(r2)
   1a140:	008000b4 	movhi	r2,2
   1a144:	10bf6504 	addi	r2,r2,-620
   1a148:	10800a17 	ldw	r2,40(r2)
   1a14c:	10800017 	ldw	r2,0(r2)
   1a150:	1005d53a 	srai	r2,r2,20
   1a154:	10c0004c 	andi	r3,r2,1
   1a158:	008000b4 	movhi	r2,2
   1a15c:	10bf6504 	addi	r2,r2,-620
   1a160:	10c00f15 	stw	r3,60(r2)
   1a164:	008000b4 	movhi	r2,2
   1a168:	10bf6504 	addi	r2,r2,-620
   1a16c:	10800a17 	ldw	r2,40(r2)
   1a170:	10800017 	ldw	r2,0(r2)
   1a174:	1005d57a 	srai	r2,r2,21
   1a178:	10c0004c 	andi	r3,r2,1
   1a17c:	008000b4 	movhi	r2,2
   1a180:	10bf6504 	addi	r2,r2,-620
   1a184:	10c01015 	stw	r3,64(r2)
   1a188:	010000b4 	movhi	r4,2
   1a18c:	213f6504 	addi	r4,r4,-620
   1a190:	00197e00 	call	197e0 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1a194:	010000b4 	movhi	r4,2
   1a198:	213f7604 	addi	r4,r4,-552
   1a19c:	00197e00 	call	197e0 <alt_dev_reg>
}
   1a1a0:	0001883a 	nop
   1a1a4:	e037883a 	mov	sp,fp
   1a1a8:	dfc00117 	ldw	ra,4(sp)
   1a1ac:	df000017 	ldw	fp,0(sp)
   1a1b0:	dec00204 	addi	sp,sp,8
   1a1b4:	f800283a 	ret

0001a1b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1a1b8:	defffa04 	addi	sp,sp,-24
   1a1bc:	dfc00515 	stw	ra,20(sp)
   1a1c0:	df000415 	stw	fp,16(sp)
   1a1c4:	df000404 	addi	fp,sp,16
   1a1c8:	e13ffd15 	stw	r4,-12(fp)
   1a1cc:	e17ffe15 	stw	r5,-8(fp)
   1a1d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a1d4:	e0bffd17 	ldw	r2,-12(fp)
   1a1d8:	10800017 	ldw	r2,0(r2)
   1a1dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1a1e0:	e0bffc17 	ldw	r2,-16(fp)
   1a1e4:	10c00a04 	addi	r3,r2,40
   1a1e8:	e0bffd17 	ldw	r2,-12(fp)
   1a1ec:	10800217 	ldw	r2,8(r2)
   1a1f0:	100f883a 	mov	r7,r2
   1a1f4:	e1bfff17 	ldw	r6,-4(fp)
   1a1f8:	e17ffe17 	ldw	r5,-8(fp)
   1a1fc:	1809883a 	mov	r4,r3
   1a200:	001a95c0 	call	1a95c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1a204:	e037883a 	mov	sp,fp
   1a208:	dfc00117 	ldw	ra,4(sp)
   1a20c:	df000017 	ldw	fp,0(sp)
   1a210:	dec00204 	addi	sp,sp,8
   1a214:	f800283a 	ret

0001a218 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1a218:	defffa04 	addi	sp,sp,-24
   1a21c:	dfc00515 	stw	ra,20(sp)
   1a220:	df000415 	stw	fp,16(sp)
   1a224:	df000404 	addi	fp,sp,16
   1a228:	e13ffd15 	stw	r4,-12(fp)
   1a22c:	e17ffe15 	stw	r5,-8(fp)
   1a230:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a234:	e0bffd17 	ldw	r2,-12(fp)
   1a238:	10800017 	ldw	r2,0(r2)
   1a23c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1a240:	e0bffc17 	ldw	r2,-16(fp)
   1a244:	10c00a04 	addi	r3,r2,40
   1a248:	e0bffd17 	ldw	r2,-12(fp)
   1a24c:	10800217 	ldw	r2,8(r2)
   1a250:	100f883a 	mov	r7,r2
   1a254:	e1bfff17 	ldw	r6,-4(fp)
   1a258:	e17ffe17 	ldw	r5,-8(fp)
   1a25c:	1809883a 	mov	r4,r3
   1a260:	001ac180 	call	1ac18 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1a264:	e037883a 	mov	sp,fp
   1a268:	dfc00117 	ldw	ra,4(sp)
   1a26c:	df000017 	ldw	fp,0(sp)
   1a270:	dec00204 	addi	sp,sp,8
   1a274:	f800283a 	ret

0001a278 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1a278:	defffc04 	addi	sp,sp,-16
   1a27c:	dfc00315 	stw	ra,12(sp)
   1a280:	df000215 	stw	fp,8(sp)
   1a284:	df000204 	addi	fp,sp,8
   1a288:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1a28c:	e0bfff17 	ldw	r2,-4(fp)
   1a290:	10800017 	ldw	r2,0(r2)
   1a294:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1a298:	e0bffe17 	ldw	r2,-8(fp)
   1a29c:	10c00a04 	addi	r3,r2,40
   1a2a0:	e0bfff17 	ldw	r2,-4(fp)
   1a2a4:	10800217 	ldw	r2,8(r2)
   1a2a8:	100b883a 	mov	r5,r2
   1a2ac:	1809883a 	mov	r4,r3
   1a2b0:	001a8040 	call	1a804 <altera_avalon_jtag_uart_close>
}
   1a2b4:	e037883a 	mov	sp,fp
   1a2b8:	dfc00117 	ldw	ra,4(sp)
   1a2bc:	df000017 	ldw	fp,0(sp)
   1a2c0:	dec00204 	addi	sp,sp,8
   1a2c4:	f800283a 	ret

0001a2c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1a2c8:	defffa04 	addi	sp,sp,-24
   1a2cc:	dfc00515 	stw	ra,20(sp)
   1a2d0:	df000415 	stw	fp,16(sp)
   1a2d4:	df000404 	addi	fp,sp,16
   1a2d8:	e13ffd15 	stw	r4,-12(fp)
   1a2dc:	e17ffe15 	stw	r5,-8(fp)
   1a2e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1a2e4:	e0bffd17 	ldw	r2,-12(fp)
   1a2e8:	10800017 	ldw	r2,0(r2)
   1a2ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1a2f0:	e0bffc17 	ldw	r2,-16(fp)
   1a2f4:	10800a04 	addi	r2,r2,40
   1a2f8:	e1bfff17 	ldw	r6,-4(fp)
   1a2fc:	e17ffe17 	ldw	r5,-8(fp)
   1a300:	1009883a 	mov	r4,r2
   1a304:	001a86c0 	call	1a86c <altera_avalon_jtag_uart_ioctl>
}
   1a308:	e037883a 	mov	sp,fp
   1a30c:	dfc00117 	ldw	ra,4(sp)
   1a310:	df000017 	ldw	fp,0(sp)
   1a314:	dec00204 	addi	sp,sp,8
   1a318:	f800283a 	ret

0001a31c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1a31c:	defff204 	addi	sp,sp,-56
   1a320:	dfc00d15 	stw	ra,52(sp)
   1a324:	df000c15 	stw	fp,48(sp)
   1a328:	df000c04 	addi	fp,sp,48
   1a32c:	e13ff915 	stw	r4,-28(fp)
   1a330:	e17ffa15 	stw	r5,-24(fp)
   1a334:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1a338:	e0bff917 	ldw	r2,-28(fp)
   1a33c:	10800c04 	addi	r2,r2,48
   1a340:	e0bff415 	stw	r2,-48(fp)
   1a344:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1a348:	e0bff80b 	ldhu	r2,-32(fp)
   1a34c:	e0fff884 	addi	r3,fp,-30
   1a350:	180b883a 	mov	r5,r3
   1a354:	1009883a 	mov	r4,r2
   1a358:	00139f40 	call	139f4 <OSFlagCreate>
   1a35c:	1007883a 	mov	r3,r2
   1a360:	e0bff417 	ldw	r2,-48(fp)
   1a364:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1a368:	e0bff917 	ldw	r2,-28(fp)
   1a36c:	10800a04 	addi	r2,r2,40
   1a370:	e0bff515 	stw	r2,-44(fp)
   1a374:	00800044 	movi	r2,1
   1a378:	e0bff78d 	sth	r2,-34(fp)
   1a37c:	e0bff78b 	ldhu	r2,-34(fp)
   1a380:	1009883a 	mov	r4,r2
   1a384:	00171d00 	call	171d0 <OSSemCreate>
   1a388:	1007883a 	mov	r3,r2
   1a38c:	e0bff517 	ldw	r2,-44(fp)
   1a390:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1a394:	e0bff917 	ldw	r2,-28(fp)
   1a398:	10800b04 	addi	r2,r2,44
   1a39c:	e0bff615 	stw	r2,-40(fp)
   1a3a0:	00800044 	movi	r2,1
   1a3a4:	e0bff70d 	sth	r2,-36(fp)
   1a3a8:	e0bff70b 	ldhu	r2,-36(fp)
   1a3ac:	1009883a 	mov	r4,r2
   1a3b0:	00171d00 	call	171d0 <OSSemCreate>
   1a3b4:	1007883a 	mov	r3,r2
   1a3b8:	e0bff617 	ldw	r2,-40(fp)
   1a3bc:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a3c0:	e0bff917 	ldw	r2,-28(fp)
   1a3c4:	00c00044 	movi	r3,1
   1a3c8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1a3cc:	e0bff917 	ldw	r2,-28(fp)
   1a3d0:	10800017 	ldw	r2,0(r2)
   1a3d4:	10800104 	addi	r2,r2,4
   1a3d8:	1007883a 	mov	r3,r2
   1a3dc:	e0bff917 	ldw	r2,-28(fp)
   1a3e0:	10800817 	ldw	r2,32(r2)
   1a3e4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1a3e8:	e0bffb17 	ldw	r2,-20(fp)
   1a3ec:	018000b4 	movhi	r6,2
   1a3f0:	31a91604 	addi	r6,r6,-23464
   1a3f4:	e17ff917 	ldw	r5,-28(fp)
   1a3f8:	1009883a 	mov	r4,r2
   1a3fc:	001c77c0 	call	1c77c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1a400:	e0bff917 	ldw	r2,-28(fp)
   1a404:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1a408:	e0bff917 	ldw	r2,-28(fp)
   1a40c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1a410:	d0e7ff17 	ldw	r3,-24580(gp)
   1a414:	e1fff917 	ldw	r7,-28(fp)
   1a418:	018000b4 	movhi	r6,2
   1a41c:	31a9c004 	addi	r6,r6,-22784
   1a420:	180b883a 	mov	r5,r3
   1a424:	1009883a 	mov	r4,r2
   1a428:	001c28c0 	call	1c28c <alt_alarm_start>
   1a42c:	1000040e 	bge	r2,zero,1a440 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1a430:	e0fff917 	ldw	r3,-28(fp)
   1a434:	00a00034 	movhi	r2,32768
   1a438:	10bfffc4 	addi	r2,r2,-1
   1a43c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1a440:	0001883a 	nop
   1a444:	e037883a 	mov	sp,fp
   1a448:	dfc00117 	ldw	ra,4(sp)
   1a44c:	df000017 	ldw	fp,0(sp)
   1a450:	dec00204 	addi	sp,sp,8
   1a454:	f800283a 	ret

0001a458 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1a458:	defff104 	addi	sp,sp,-60
   1a45c:	dfc00e15 	stw	ra,56(sp)
   1a460:	df000d15 	stw	fp,52(sp)
   1a464:	df000d04 	addi	fp,sp,52
   1a468:	e13ffe15 	stw	r4,-8(fp)
   1a46c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1a470:	e0bffe17 	ldw	r2,-8(fp)
   1a474:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1a478:	e0bff517 	ldw	r2,-44(fp)
   1a47c:	10800017 	ldw	r2,0(r2)
   1a480:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a484:	e0bff617 	ldw	r2,-40(fp)
   1a488:	10800104 	addi	r2,r2,4
   1a48c:	10800037 	ldwio	r2,0(r2)
   1a490:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1a494:	e0bff717 	ldw	r2,-36(fp)
   1a498:	1080c00c 	andi	r2,r2,768
   1a49c:	10009126 	beq	r2,zero,1a6e4 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1a4a0:	e0bff717 	ldw	r2,-36(fp)
   1a4a4:	1080400c 	andi	r2,r2,256
   1a4a8:	10004726 	beq	r2,zero,1a5c8 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1a4ac:	00800074 	movhi	r2,1
   1a4b0:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a4b4:	e0bff517 	ldw	r2,-44(fp)
   1a4b8:	10800d17 	ldw	r2,52(r2)
   1a4bc:	10800044 	addi	r2,r2,1
   1a4c0:	1081ffcc 	andi	r2,r2,2047
   1a4c4:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1a4c8:	e0bff517 	ldw	r2,-44(fp)
   1a4cc:	10c00e17 	ldw	r3,56(r2)
   1a4d0:	e0bff817 	ldw	r2,-32(fp)
   1a4d4:	18802726 	beq	r3,r2,1a574 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1a4d8:	e0bff617 	ldw	r2,-40(fp)
   1a4dc:	10800037 	ldwio	r2,0(r2)
   1a4e0:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1a4e4:	e0bff317 	ldw	r2,-52(fp)
   1a4e8:	10a0000c 	andi	r2,r2,32768
   1a4ec:	10002326 	beq	r2,zero,1a57c <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1a4f0:	e0bff517 	ldw	r2,-44(fp)
   1a4f4:	10800d17 	ldw	r2,52(r2)
   1a4f8:	e0fff317 	ldw	r3,-52(fp)
   1a4fc:	1809883a 	mov	r4,r3
   1a500:	e0fff517 	ldw	r3,-44(fp)
   1a504:	1885883a 	add	r2,r3,r2
   1a508:	10801104 	addi	r2,r2,68
   1a50c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a510:	e0bff517 	ldw	r2,-44(fp)
   1a514:	10800d17 	ldw	r2,52(r2)
   1a518:	10800044 	addi	r2,r2,1
   1a51c:	10c1ffcc 	andi	r3,r2,2047
   1a520:	e0bff517 	ldw	r2,-44(fp)
   1a524:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1a528:	e0bff517 	ldw	r2,-44(fp)
   1a52c:	10800c17 	ldw	r2,48(r2)
   1a530:	e0bffa15 	stw	r2,-24(fp)
   1a534:	00800044 	movi	r2,1
   1a538:	e0bffb0d 	sth	r2,-20(fp)
   1a53c:	00800044 	movi	r2,1
   1a540:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1a544:	d0a7ea43 	ldbu	r2,-24663(gp)
   1a548:	10803fcc 	andi	r2,r2,255
   1a54c:	103fd926 	beq	r2,zero,1a4b4 <altera_avalon_jtag_uart_irq+0x5c>
  {
    OSFlagPost (group, flags, opt, &err);
   1a550:	e0bffb0b 	ldhu	r2,-20(fp)
   1a554:	e0fffb83 	ldbu	r3,-18(fp)
   1a558:	e13ffcc4 	addi	r4,fp,-13
   1a55c:	200f883a 	mov	r7,r4
   1a560:	180d883a 	mov	r6,r3
   1a564:	100b883a 	mov	r5,r2
   1a568:	e13ffa17 	ldw	r4,-24(fp)
   1a56c:	00145d00 	call	145d0 <OSFlagPost>
      }
   1a570:	003fd006 	br	1a4b4 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1a574:	0001883a 	nop
   1a578:	00000106 	br	1a580 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1a57c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1a580:	e0bff317 	ldw	r2,-52(fp)
   1a584:	10bfffec 	andhi	r2,r2,65535
   1a588:	10000f26 	beq	r2,zero,1a5c8 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1a58c:	e0bff517 	ldw	r2,-44(fp)
   1a590:	10c00817 	ldw	r3,32(r2)
   1a594:	00bfff84 	movi	r2,-2
   1a598:	1886703a 	and	r3,r3,r2
   1a59c:	e0bff517 	ldw	r2,-44(fp)
   1a5a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1a5a4:	e0bff617 	ldw	r2,-40(fp)
   1a5a8:	10800104 	addi	r2,r2,4
   1a5ac:	1007883a 	mov	r3,r2
   1a5b0:	e0bff517 	ldw	r2,-44(fp)
   1a5b4:	10800817 	ldw	r2,32(r2)
   1a5b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a5bc:	e0bff617 	ldw	r2,-40(fp)
   1a5c0:	10800104 	addi	r2,r2,4
   1a5c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1a5c8:	e0bff717 	ldw	r2,-36(fp)
   1a5cc:	1080800c 	andi	r2,r2,512
   1a5d0:	103fac26 	beq	r2,zero,1a484 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1a5d4:	e0bff717 	ldw	r2,-36(fp)
   1a5d8:	1004d43a 	srli	r2,r2,16
   1a5dc:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1a5e0:	00002606 	br	1a67c <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1a5e4:	e0bff617 	ldw	r2,-40(fp)
   1a5e8:	e0fff517 	ldw	r3,-44(fp)
   1a5ec:	18c01017 	ldw	r3,64(r3)
   1a5f0:	e13ff517 	ldw	r4,-44(fp)
   1a5f4:	20c7883a 	add	r3,r4,r3
   1a5f8:	18c21104 	addi	r3,r3,2116
   1a5fc:	18c00003 	ldbu	r3,0(r3)
   1a600:	18c03fcc 	andi	r3,r3,255
   1a604:	18c0201c 	xori	r3,r3,128
   1a608:	18ffe004 	addi	r3,r3,-128
   1a60c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1a610:	e0bff517 	ldw	r2,-44(fp)
   1a614:	10801017 	ldw	r2,64(r2)
   1a618:	10800044 	addi	r2,r2,1
   1a61c:	10c1ffcc 	andi	r3,r2,2047
   1a620:	e0bff517 	ldw	r2,-44(fp)
   1a624:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1a628:	e0bff517 	ldw	r2,-44(fp)
   1a62c:	10800c17 	ldw	r2,48(r2)
   1a630:	e0bff915 	stw	r2,-28(fp)
   1a634:	00800084 	movi	r2,2
   1a638:	e0bffc0d 	sth	r2,-16(fp)
   1a63c:	00800044 	movi	r2,1
   1a640:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1a644:	d0a7ea43 	ldbu	r2,-24663(gp)
   1a648:	10803fcc 	andi	r2,r2,255
   1a64c:	10000826 	beq	r2,zero,1a670 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   1a650:	e0bffc0b 	ldhu	r2,-16(fp)
   1a654:	e0fffc83 	ldbu	r3,-14(fp)
   1a658:	e13ffd04 	addi	r4,fp,-12
   1a65c:	200f883a 	mov	r7,r4
   1a660:	180d883a 	mov	r6,r3
   1a664:	100b883a 	mov	r5,r2
   1a668:	e13ff917 	ldw	r4,-28(fp)
   1a66c:	00145d00 	call	145d0 <OSFlagPost>

        space--;
   1a670:	e0bff417 	ldw	r2,-48(fp)
   1a674:	10bfffc4 	addi	r2,r2,-1
   1a678:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1a67c:	e0bff417 	ldw	r2,-48(fp)
   1a680:	10000526 	beq	r2,zero,1a698 <altera_avalon_jtag_uart_irq+0x240>
   1a684:	e0bff517 	ldw	r2,-44(fp)
   1a688:	10c01017 	ldw	r3,64(r2)
   1a68c:	e0bff517 	ldw	r2,-44(fp)
   1a690:	10800f17 	ldw	r2,60(r2)
   1a694:	18bfd31e 	bne	r3,r2,1a5e4 <altera_avalon_jtag_uart_irq+0x18c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1a698:	e0bff417 	ldw	r2,-48(fp)
   1a69c:	103f7926 	beq	r2,zero,1a484 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1a6a0:	e0bff517 	ldw	r2,-44(fp)
   1a6a4:	10c00817 	ldw	r3,32(r2)
   1a6a8:	00bfff44 	movi	r2,-3
   1a6ac:	1886703a 	and	r3,r3,r2
   1a6b0:	e0bff517 	ldw	r2,-44(fp)
   1a6b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1a6b8:	e0bff517 	ldw	r2,-44(fp)
   1a6bc:	10800017 	ldw	r2,0(r2)
   1a6c0:	10800104 	addi	r2,r2,4
   1a6c4:	1007883a 	mov	r3,r2
   1a6c8:	e0bff517 	ldw	r2,-44(fp)
   1a6cc:	10800817 	ldw	r2,32(r2)
   1a6d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1a6d4:	e0bff617 	ldw	r2,-40(fp)
   1a6d8:	10800104 	addi	r2,r2,4
   1a6dc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1a6e0:	003f6806 	br	1a484 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1a6e4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1a6e8:	0001883a 	nop
   1a6ec:	e037883a 	mov	sp,fp
   1a6f0:	dfc00117 	ldw	ra,4(sp)
   1a6f4:	df000017 	ldw	fp,0(sp)
   1a6f8:	dec00204 	addi	sp,sp,8
   1a6fc:	f800283a 	ret

0001a700 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1a700:	defff904 	addi	sp,sp,-28
   1a704:	dfc00615 	stw	ra,24(sp)
   1a708:	df000515 	stw	fp,20(sp)
   1a70c:	df000504 	addi	fp,sp,20
   1a710:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1a714:	e0bfff17 	ldw	r2,-4(fp)
   1a718:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1a71c:	e0bffb17 	ldw	r2,-20(fp)
   1a720:	10800017 	ldw	r2,0(r2)
   1a724:	10800104 	addi	r2,r2,4
   1a728:	10800037 	ldwio	r2,0(r2)
   1a72c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1a730:	e0bffc17 	ldw	r2,-16(fp)
   1a734:	1081000c 	andi	r2,r2,1024
   1a738:	10000b26 	beq	r2,zero,1a768 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1a73c:	e0bffb17 	ldw	r2,-20(fp)
   1a740:	10800017 	ldw	r2,0(r2)
   1a744:	10800104 	addi	r2,r2,4
   1a748:	1007883a 	mov	r3,r2
   1a74c:	e0bffb17 	ldw	r2,-20(fp)
   1a750:	10800817 	ldw	r2,32(r2)
   1a754:	10810014 	ori	r2,r2,1024
   1a758:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1a75c:	e0bffb17 	ldw	r2,-20(fp)
   1a760:	10000915 	stw	zero,36(r2)
   1a764:	00002106 	br	1a7ec <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1a768:	e0bffb17 	ldw	r2,-20(fp)
   1a76c:	10c00917 	ldw	r3,36(r2)
   1a770:	00a00034 	movhi	r2,32768
   1a774:	10bfff04 	addi	r2,r2,-4
   1a778:	10c01c36 	bltu	r2,r3,1a7ec <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   1a77c:	e0bffb17 	ldw	r2,-20(fp)
   1a780:	10800917 	ldw	r2,36(r2)
   1a784:	10c00044 	addi	r3,r2,1
   1a788:	e0bffb17 	ldw	r2,-20(fp)
   1a78c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1a790:	e0bffb17 	ldw	r2,-20(fp)
   1a794:	10c00917 	ldw	r3,36(r2)
   1a798:	e0bffb17 	ldw	r2,-20(fp)
   1a79c:	10800117 	ldw	r2,4(r2)
   1a7a0:	18801236 	bltu	r3,r2,1a7ec <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1a7a4:	e0bffb17 	ldw	r2,-20(fp)
   1a7a8:	10800c17 	ldw	r2,48(r2)
   1a7ac:	e0bffd15 	stw	r2,-12(fp)
   1a7b0:	00800104 	movi	r2,4
   1a7b4:	e0bffe0d 	sth	r2,-8(fp)
   1a7b8:	00800044 	movi	r2,1
   1a7bc:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1a7c0:	d0a7ea43 	ldbu	r2,-24663(gp)
   1a7c4:	10803fcc 	andi	r2,r2,255
   1a7c8:	10000826 	beq	r2,zero,1a7ec <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   1a7cc:	e0bffe0b 	ldhu	r2,-8(fp)
   1a7d0:	e0fffe83 	ldbu	r3,-6(fp)
   1a7d4:	e13ffec4 	addi	r4,fp,-5
   1a7d8:	200f883a 	mov	r7,r4
   1a7dc:	180d883a 	mov	r6,r3
   1a7e0:	100b883a 	mov	r5,r2
   1a7e4:	e13ffd17 	ldw	r4,-12(fp)
   1a7e8:	00145d00 	call	145d0 <OSFlagPost>
   1a7ec:	d0a7ff17 	ldw	r2,-24580(gp)
    }
  }

  return alt_ticks_per_second();
}
   1a7f0:	e037883a 	mov	sp,fp
   1a7f4:	dfc00117 	ldw	ra,4(sp)
   1a7f8:	df000017 	ldw	fp,0(sp)
   1a7fc:	dec00204 	addi	sp,sp,8
   1a800:	f800283a 	ret

0001a804 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1a804:	defffd04 	addi	sp,sp,-12
   1a808:	df000215 	stw	fp,8(sp)
   1a80c:	df000204 	addi	fp,sp,8
   1a810:	e13ffe15 	stw	r4,-8(fp)
   1a814:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1a818:	00000506 	br	1a830 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1a81c:	e0bfff17 	ldw	r2,-4(fp)
   1a820:	1090000c 	andi	r2,r2,16384
   1a824:	10000226 	beq	r2,zero,1a830 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1a828:	00bffd44 	movi	r2,-11
   1a82c:	00000b06 	br	1a85c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1a830:	e0bffe17 	ldw	r2,-8(fp)
   1a834:	10c01017 	ldw	r3,64(r2)
   1a838:	e0bffe17 	ldw	r2,-8(fp)
   1a83c:	10800f17 	ldw	r2,60(r2)
   1a840:	18800526 	beq	r3,r2,1a858 <altera_avalon_jtag_uart_close+0x54>
   1a844:	e0bffe17 	ldw	r2,-8(fp)
   1a848:	10c00917 	ldw	r3,36(r2)
   1a84c:	e0bffe17 	ldw	r2,-8(fp)
   1a850:	10800117 	ldw	r2,4(r2)
   1a854:	18bff136 	bltu	r3,r2,1a81c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1a858:	0005883a 	mov	r2,zero
}
   1a85c:	e037883a 	mov	sp,fp
   1a860:	df000017 	ldw	fp,0(sp)
   1a864:	dec00104 	addi	sp,sp,4
   1a868:	f800283a 	ret

0001a86c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1a86c:	defffa04 	addi	sp,sp,-24
   1a870:	df000515 	stw	fp,20(sp)
   1a874:	df000504 	addi	fp,sp,20
   1a878:	e13ffd15 	stw	r4,-12(fp)
   1a87c:	e17ffe15 	stw	r5,-8(fp)
   1a880:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1a884:	00bff9c4 	movi	r2,-25
   1a888:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1a88c:	e0bffe17 	ldw	r2,-8(fp)
   1a890:	10da8060 	cmpeqi	r3,r2,27137
   1a894:	1800031e 	bne	r3,zero,1a8a4 <altera_avalon_jtag_uart_ioctl+0x38>
   1a898:	109a80a0 	cmpeqi	r2,r2,27138
   1a89c:	1000181e 	bne	r2,zero,1a900 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1a8a0:	00002906 	br	1a948 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1a8a4:	e0bffd17 	ldw	r2,-12(fp)
   1a8a8:	10c00117 	ldw	r3,4(r2)
   1a8ac:	00a00034 	movhi	r2,32768
   1a8b0:	10bfffc4 	addi	r2,r2,-1
   1a8b4:	18802126 	beq	r3,r2,1a93c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1a8b8:	e0bfff17 	ldw	r2,-4(fp)
   1a8bc:	10800017 	ldw	r2,0(r2)
   1a8c0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1a8c4:	e0bffc17 	ldw	r2,-16(fp)
   1a8c8:	10800090 	cmplti	r2,r2,2
   1a8cc:	1000061e 	bne	r2,zero,1a8e8 <altera_avalon_jtag_uart_ioctl+0x7c>
   1a8d0:	e0fffc17 	ldw	r3,-16(fp)
   1a8d4:	00a00034 	movhi	r2,32768
   1a8d8:	10bfffc4 	addi	r2,r2,-1
   1a8dc:	18800226 	beq	r3,r2,1a8e8 <altera_avalon_jtag_uart_ioctl+0x7c>
   1a8e0:	e0bffc17 	ldw	r2,-16(fp)
   1a8e4:	00000206 	br	1a8f0 <altera_avalon_jtag_uart_ioctl+0x84>
   1a8e8:	00a00034 	movhi	r2,32768
   1a8ec:	10bfff84 	addi	r2,r2,-2
   1a8f0:	e0fffd17 	ldw	r3,-12(fp)
   1a8f4:	18800115 	stw	r2,4(r3)
      rc = 0;
   1a8f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1a8fc:	00000f06 	br	1a93c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1a900:	e0bffd17 	ldw	r2,-12(fp)
   1a904:	10c00117 	ldw	r3,4(r2)
   1a908:	00a00034 	movhi	r2,32768
   1a90c:	10bfffc4 	addi	r2,r2,-1
   1a910:	18800c26 	beq	r3,r2,1a944 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1a914:	e0bffd17 	ldw	r2,-12(fp)
   1a918:	10c00917 	ldw	r3,36(r2)
   1a91c:	e0bffd17 	ldw	r2,-12(fp)
   1a920:	10800117 	ldw	r2,4(r2)
   1a924:	1885803a 	cmpltu	r2,r3,r2
   1a928:	10c03fcc 	andi	r3,r2,255
   1a92c:	e0bfff17 	ldw	r2,-4(fp)
   1a930:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1a934:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1a938:	00000206 	br	1a944 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1a93c:	0001883a 	nop
   1a940:	00000106 	br	1a948 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1a944:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1a948:	e0bffb17 	ldw	r2,-20(fp)
}
   1a94c:	e037883a 	mov	sp,fp
   1a950:	df000017 	ldw	fp,0(sp)
   1a954:	dec00104 	addi	sp,sp,4
   1a958:	f800283a 	ret

0001a95c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1a95c:	deffed04 	addi	sp,sp,-76
   1a960:	dfc01215 	stw	ra,72(sp)
   1a964:	df001115 	stw	fp,68(sp)
   1a968:	df001104 	addi	fp,sp,68
   1a96c:	e13ffc15 	stw	r4,-16(fp)
   1a970:	e17ffd15 	stw	r5,-12(fp)
   1a974:	e1bffe15 	stw	r6,-8(fp)
   1a978:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1a97c:	e0bffd17 	ldw	r2,-12(fp)
   1a980:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1a984:	e0bffc17 	ldw	r2,-16(fp)
   1a988:	10800a17 	ldw	r2,40(r2)
   1a98c:	e0bff815 	stw	r2,-32(fp)
   1a990:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1a994:	e0bff90b 	ldhu	r2,-28(fp)
   1a998:	e0fffb04 	addi	r3,fp,-20
   1a99c:	180d883a 	mov	r6,r3
   1a9a0:	100b883a 	mov	r5,r2
   1a9a4:	e13ff817 	ldw	r4,-32(fp)
   1a9a8:	00174e80 	call	174e8 <OSSemPend>

  while (space > 0)
   1a9ac:	00006106 	br	1ab34 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1a9b0:	e0bffc17 	ldw	r2,-16(fp)
   1a9b4:	10800d17 	ldw	r2,52(r2)
   1a9b8:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   1a9bc:	e0bffc17 	ldw	r2,-16(fp)
   1a9c0:	10800e17 	ldw	r2,56(r2)
   1a9c4:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   1a9c8:	e0fff317 	ldw	r3,-52(fp)
   1a9cc:	e0bff417 	ldw	r2,-48(fp)
   1a9d0:	18800536 	bltu	r3,r2,1a9e8 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1a9d4:	e0fff317 	ldw	r3,-52(fp)
   1a9d8:	e0bff417 	ldw	r2,-48(fp)
   1a9dc:	1885c83a 	sub	r2,r3,r2
   1a9e0:	e0bff115 	stw	r2,-60(fp)
   1a9e4:	00000406 	br	1a9f8 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1a9e8:	00c20004 	movi	r3,2048
   1a9ec:	e0bff417 	ldw	r2,-48(fp)
   1a9f0:	1885c83a 	sub	r2,r3,r2
   1a9f4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1a9f8:	e0bff117 	ldw	r2,-60(fp)
   1a9fc:	10001e26 	beq	r2,zero,1aa78 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   1aa00:	e0fffe17 	ldw	r3,-8(fp)
   1aa04:	e0bff117 	ldw	r2,-60(fp)
   1aa08:	1880022e 	bgeu	r3,r2,1aa14 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   1aa0c:	e0bffe17 	ldw	r2,-8(fp)
   1aa10:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1aa14:	e0bffc17 	ldw	r2,-16(fp)
   1aa18:	10c01104 	addi	r3,r2,68
   1aa1c:	e0bff417 	ldw	r2,-48(fp)
   1aa20:	1885883a 	add	r2,r3,r2
   1aa24:	e1bff117 	ldw	r6,-60(fp)
   1aa28:	100b883a 	mov	r5,r2
   1aa2c:	e13ff017 	ldw	r4,-64(fp)
   1aa30:	000868c0 	call	868c <memcpy>
      ptr   += n;
   1aa34:	e0fff017 	ldw	r3,-64(fp)
   1aa38:	e0bff117 	ldw	r2,-60(fp)
   1aa3c:	1885883a 	add	r2,r3,r2
   1aa40:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   1aa44:	e0fffe17 	ldw	r3,-8(fp)
   1aa48:	e0bff117 	ldw	r2,-60(fp)
   1aa4c:	1885c83a 	sub	r2,r3,r2
   1aa50:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1aa54:	e0fff417 	ldw	r3,-48(fp)
   1aa58:	e0bff117 	ldw	r2,-60(fp)
   1aa5c:	1885883a 	add	r2,r3,r2
   1aa60:	10c1ffcc 	andi	r3,r2,2047
   1aa64:	e0bffc17 	ldw	r2,-16(fp)
   1aa68:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1aa6c:	e0bffe17 	ldw	r2,-8(fp)
   1aa70:	00bfcf16 	blt	zero,r2,1a9b0 <altera_avalon_jtag_uart_read+0x54>
   1aa74:	00000106 	br	1aa7c <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1aa78:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1aa7c:	e0fff017 	ldw	r3,-64(fp)
   1aa80:	e0bffd17 	ldw	r2,-12(fp)
   1aa84:	18802e1e 	bne	r3,r2,1ab40 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1aa88:	e0bfff17 	ldw	r2,-4(fp)
   1aa8c:	1090000c 	andi	r2,r2,16384
   1aa90:	10002d1e 	bne	r2,zero,1ab48 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1aa94:	d0a7ea43 	ldbu	r2,-24663(gp)
   1aa98:	10803fcc 	andi	r2,r2,255
   1aa9c:	10800058 	cmpnei	r2,r2,1
   1aaa0:	1000161e 	bne	r2,zero,1aafc <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1aaa4:	e0bffc17 	ldw	r2,-16(fp)
   1aaa8:	10800c17 	ldw	r2,48(r2)
   1aaac:	e0bff215 	stw	r2,-56(fp)
   1aab0:	00800144 	movi	r2,5
   1aab4:	e0bff98d 	sth	r2,-26(fp)
   1aab8:	00bfe0c4 	movi	r2,-125
   1aabc:	e0bffa05 	stb	r2,-24(fp)
   1aac0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1aac4:	d0a7ea43 	ldbu	r2,-24663(gp)
   1aac8:	10803fcc 	andi	r2,r2,255
   1aacc:	10001526 	beq	r2,zero,1ab24 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1aad0:	e0fff98b 	ldhu	r3,-26(fp)
   1aad4:	e13ffa03 	ldbu	r4,-24(fp)
   1aad8:	e17ffa8b 	ldhu	r5,-22(fp)
   1aadc:	e0bffb44 	addi	r2,fp,-19
   1aae0:	d8800015 	stw	r2,0(sp)
   1aae4:	280f883a 	mov	r7,r5
   1aae8:	200d883a 	mov	r6,r4
   1aaec:	180b883a 	mov	r5,r3
   1aaf0:	e13ff217 	ldw	r4,-56(fp)
   1aaf4:	0013fb80 	call	13fb8 <OSFlagPend>
   1aaf8:	00000a06 	br	1ab24 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1aafc:	0001883a 	nop
   1ab00:	e0bffc17 	ldw	r2,-16(fp)
   1ab04:	10c00d17 	ldw	r3,52(r2)
   1ab08:	e0bff317 	ldw	r2,-52(fp)
   1ab0c:	1880051e 	bne	r3,r2,1ab24 <altera_avalon_jtag_uart_read+0x1c8>
   1ab10:	e0bffc17 	ldw	r2,-16(fp)
   1ab14:	10c00917 	ldw	r3,36(r2)
   1ab18:	e0bffc17 	ldw	r2,-16(fp)
   1ab1c:	10800117 	ldw	r2,4(r2)
   1ab20:	18bff736 	bltu	r3,r2,1ab00 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1ab24:	e0bffc17 	ldw	r2,-16(fp)
   1ab28:	10c00d17 	ldw	r3,52(r2)
   1ab2c:	e0bff317 	ldw	r2,-52(fp)
   1ab30:	18800726 	beq	r3,r2,1ab50 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1ab34:	e0bffe17 	ldw	r2,-8(fp)
   1ab38:	00bf9d16 	blt	zero,r2,1a9b0 <altera_avalon_jtag_uart_read+0x54>
   1ab3c:	00000506 	br	1ab54 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1ab40:	0001883a 	nop
   1ab44:	00000306 	br	1ab54 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1ab48:	0001883a 	nop
   1ab4c:	00000106 	br	1ab54 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1ab50:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1ab54:	e0bffc17 	ldw	r2,-16(fp)
   1ab58:	10800a17 	ldw	r2,40(r2)
   1ab5c:	1009883a 	mov	r4,r2
   1ab60:	00178600 	call	17860 <OSSemPost>

  if (ptr != buffer)
   1ab64:	e0fff017 	ldw	r3,-64(fp)
   1ab68:	e0bffd17 	ldw	r2,-12(fp)
   1ab6c:	18801826 	beq	r3,r2,1abd0 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ab70:	0005303a 	rdctl	r2,status
   1ab74:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ab78:	e0fff717 	ldw	r3,-36(fp)
   1ab7c:	00bfff84 	movi	r2,-2
   1ab80:	1884703a 	and	r2,r3,r2
   1ab84:	1001703a 	wrctl	status,r2
  
  return context;
   1ab88:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1ab8c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ab90:	e0bffc17 	ldw	r2,-16(fp)
   1ab94:	10800817 	ldw	r2,32(r2)
   1ab98:	10c00054 	ori	r3,r2,1
   1ab9c:	e0bffc17 	ldw	r2,-16(fp)
   1aba0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1aba4:	e0bffc17 	ldw	r2,-16(fp)
   1aba8:	10800017 	ldw	r2,0(r2)
   1abac:	10800104 	addi	r2,r2,4
   1abb0:	1007883a 	mov	r3,r2
   1abb4:	e0bffc17 	ldw	r2,-16(fp)
   1abb8:	10800817 	ldw	r2,32(r2)
   1abbc:	18800035 	stwio	r2,0(r3)
   1abc0:	e0bff617 	ldw	r2,-40(fp)
   1abc4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1abc8:	e0bff517 	ldw	r2,-44(fp)
   1abcc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1abd0:	e0fff017 	ldw	r3,-64(fp)
   1abd4:	e0bffd17 	ldw	r2,-12(fp)
   1abd8:	18800426 	beq	r3,r2,1abec <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   1abdc:	e0fff017 	ldw	r3,-64(fp)
   1abe0:	e0bffd17 	ldw	r2,-12(fp)
   1abe4:	1885c83a 	sub	r2,r3,r2
   1abe8:	00000606 	br	1ac04 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   1abec:	e0bfff17 	ldw	r2,-4(fp)
   1abf0:	1090000c 	andi	r2,r2,16384
   1abf4:	10000226 	beq	r2,zero,1ac00 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   1abf8:	00bffd44 	movi	r2,-11
   1abfc:	00000106 	br	1ac04 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   1ac00:	00bffec4 	movi	r2,-5
}
   1ac04:	e037883a 	mov	sp,fp
   1ac08:	dfc00117 	ldw	ra,4(sp)
   1ac0c:	df000017 	ldw	fp,0(sp)
   1ac10:	dec00204 	addi	sp,sp,8
   1ac14:	f800283a 	ret

0001ac18 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1ac18:	deffed04 	addi	sp,sp,-76
   1ac1c:	dfc01215 	stw	ra,72(sp)
   1ac20:	df001115 	stw	fp,68(sp)
   1ac24:	df001104 	addi	fp,sp,68
   1ac28:	e13ffc15 	stw	r4,-16(fp)
   1ac2c:	e17ffd15 	stw	r5,-12(fp)
   1ac30:	e1bffe15 	stw	r6,-8(fp)
   1ac34:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1ac38:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1ac3c:	e0bffd17 	ldw	r2,-12(fp)
   1ac40:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1ac44:	e0bffc17 	ldw	r2,-16(fp)
   1ac48:	10800b17 	ldw	r2,44(r2)
   1ac4c:	e0bff815 	stw	r2,-32(fp)
   1ac50:	e03ff90d 	sth	zero,-28(fp)
   1ac54:	e0bff90b 	ldhu	r2,-28(fp)
   1ac58:	e0fffb44 	addi	r3,fp,-19
   1ac5c:	180d883a 	mov	r6,r3
   1ac60:	100b883a 	mov	r5,r2
   1ac64:	e13ff817 	ldw	r4,-32(fp)
   1ac68:	00174e80 	call	174e8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1ac6c:	00003706 	br	1ad4c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1ac70:	e0bffc17 	ldw	r2,-16(fp)
   1ac74:	10800f17 	ldw	r2,60(r2)
   1ac78:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   1ac7c:	e0bffc17 	ldw	r2,-16(fp)
   1ac80:	10801017 	ldw	r2,64(r2)
   1ac84:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1ac88:	e0fff417 	ldw	r3,-48(fp)
   1ac8c:	e0bff017 	ldw	r2,-64(fp)
   1ac90:	1880062e 	bgeu	r3,r2,1acac <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1ac94:	e0fff017 	ldw	r3,-64(fp)
   1ac98:	e0bff417 	ldw	r2,-48(fp)
   1ac9c:	1885c83a 	sub	r2,r3,r2
   1aca0:	10bfffc4 	addi	r2,r2,-1
   1aca4:	e0bff115 	stw	r2,-60(fp)
   1aca8:	00000b06 	br	1acd8 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1acac:	e0bff017 	ldw	r2,-64(fp)
   1acb0:	10000526 	beq	r2,zero,1acc8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1acb4:	00c20004 	movi	r3,2048
   1acb8:	e0bff417 	ldw	r2,-48(fp)
   1acbc:	1885c83a 	sub	r2,r3,r2
   1acc0:	e0bff115 	stw	r2,-60(fp)
   1acc4:	00000406 	br	1acd8 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1acc8:	00c1ffc4 	movi	r3,2047
   1accc:	e0bff417 	ldw	r2,-48(fp)
   1acd0:	1885c83a 	sub	r2,r3,r2
   1acd4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1acd8:	e0bff117 	ldw	r2,-60(fp)
   1acdc:	10001e26 	beq	r2,zero,1ad58 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   1ace0:	e0fffe17 	ldw	r3,-8(fp)
   1ace4:	e0bff117 	ldw	r2,-60(fp)
   1ace8:	1880022e 	bgeu	r3,r2,1acf4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   1acec:	e0bffe17 	ldw	r2,-8(fp)
   1acf0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1acf4:	e0bffc17 	ldw	r2,-16(fp)
   1acf8:	10c21104 	addi	r3,r2,2116
   1acfc:	e0bff417 	ldw	r2,-48(fp)
   1ad00:	1885883a 	add	r2,r3,r2
   1ad04:	e1bff117 	ldw	r6,-60(fp)
   1ad08:	e17ffd17 	ldw	r5,-12(fp)
   1ad0c:	1009883a 	mov	r4,r2
   1ad10:	000868c0 	call	868c <memcpy>
      ptr   += n;
   1ad14:	e0fffd17 	ldw	r3,-12(fp)
   1ad18:	e0bff117 	ldw	r2,-60(fp)
   1ad1c:	1885883a 	add	r2,r3,r2
   1ad20:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1ad24:	e0fffe17 	ldw	r3,-8(fp)
   1ad28:	e0bff117 	ldw	r2,-60(fp)
   1ad2c:	1885c83a 	sub	r2,r3,r2
   1ad30:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1ad34:	e0fff417 	ldw	r3,-48(fp)
   1ad38:	e0bff117 	ldw	r2,-60(fp)
   1ad3c:	1885883a 	add	r2,r3,r2
   1ad40:	10c1ffcc 	andi	r3,r2,2047
   1ad44:	e0bffc17 	ldw	r2,-16(fp)
   1ad48:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1ad4c:	e0bffe17 	ldw	r2,-8(fp)
   1ad50:	00bfc716 	blt	zero,r2,1ac70 <altera_avalon_jtag_uart_write+0x58>
   1ad54:	00000106 	br	1ad5c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1ad58:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ad5c:	0005303a 	rdctl	r2,status
   1ad60:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ad64:	e0fff717 	ldw	r3,-36(fp)
   1ad68:	00bfff84 	movi	r2,-2
   1ad6c:	1884703a 	and	r2,r3,r2
   1ad70:	1001703a 	wrctl	status,r2
  
  return context;
   1ad74:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1ad78:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1ad7c:	e0bffc17 	ldw	r2,-16(fp)
   1ad80:	10800817 	ldw	r2,32(r2)
   1ad84:	10c00094 	ori	r3,r2,2
   1ad88:	e0bffc17 	ldw	r2,-16(fp)
   1ad8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ad90:	e0bffc17 	ldw	r2,-16(fp)
   1ad94:	10800017 	ldw	r2,0(r2)
   1ad98:	10800104 	addi	r2,r2,4
   1ad9c:	1007883a 	mov	r3,r2
   1ada0:	e0bffc17 	ldw	r2,-16(fp)
   1ada4:	10800817 	ldw	r2,32(r2)
   1ada8:	18800035 	stwio	r2,0(r3)
   1adac:	e0bff617 	ldw	r2,-40(fp)
   1adb0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1adb4:	e0bff317 	ldw	r2,-52(fp)
   1adb8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1adbc:	e0bffe17 	ldw	r2,-8(fp)
   1adc0:	00802a0e 	bge	zero,r2,1ae6c <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   1adc4:	e0bfff17 	ldw	r2,-4(fp)
   1adc8:	1090000c 	andi	r2,r2,16384
   1adcc:	10002a1e 	bne	r2,zero,1ae78 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1add0:	d0a7ea43 	ldbu	r2,-24663(gp)
   1add4:	10803fcc 	andi	r2,r2,255
   1add8:	10800058 	cmpnei	r2,r2,1
   1addc:	1000161e 	bne	r2,zero,1ae38 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1ade0:	e0bffc17 	ldw	r2,-16(fp)
   1ade4:	10800c17 	ldw	r2,48(r2)
   1ade8:	e0bff515 	stw	r2,-44(fp)
   1adec:	00800184 	movi	r2,6
   1adf0:	e0bff98d 	sth	r2,-26(fp)
   1adf4:	00bfe0c4 	movi	r2,-125
   1adf8:	e0bffa05 	stb	r2,-24(fp)
   1adfc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1ae00:	d0a7ea43 	ldbu	r2,-24663(gp)
   1ae04:	10803fcc 	andi	r2,r2,255
   1ae08:	10001526 	beq	r2,zero,1ae60 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1ae0c:	e0fff98b 	ldhu	r3,-26(fp)
   1ae10:	e13ffa03 	ldbu	r4,-24(fp)
   1ae14:	e17ffa8b 	ldhu	r5,-22(fp)
   1ae18:	e0bffb04 	addi	r2,fp,-20
   1ae1c:	d8800015 	stw	r2,0(sp)
   1ae20:	280f883a 	mov	r7,r5
   1ae24:	200d883a 	mov	r6,r4
   1ae28:	180b883a 	mov	r5,r3
   1ae2c:	e13ff517 	ldw	r4,-44(fp)
   1ae30:	0013fb80 	call	13fb8 <OSFlagPend>
   1ae34:	00000a06 	br	1ae60 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1ae38:	0001883a 	nop
   1ae3c:	e0bffc17 	ldw	r2,-16(fp)
   1ae40:	10c01017 	ldw	r3,64(r2)
   1ae44:	e0bff017 	ldw	r2,-64(fp)
   1ae48:	1880051e 	bne	r3,r2,1ae60 <altera_avalon_jtag_uart_write+0x248>
   1ae4c:	e0bffc17 	ldw	r2,-16(fp)
   1ae50:	10c00917 	ldw	r3,36(r2)
   1ae54:	e0bffc17 	ldw	r2,-16(fp)
   1ae58:	10800117 	ldw	r2,4(r2)
   1ae5c:	18bff736 	bltu	r3,r2,1ae3c <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1ae60:	e0bffc17 	ldw	r2,-16(fp)
   1ae64:	10800917 	ldw	r2,36(r2)
   1ae68:	1000051e 	bne	r2,zero,1ae80 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   1ae6c:	e0bffe17 	ldw	r2,-8(fp)
   1ae70:	00bfb616 	blt	zero,r2,1ad4c <altera_avalon_jtag_uart_write+0x134>
   1ae74:	00000306 	br	1ae84 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1ae78:	0001883a 	nop
   1ae7c:	00000106 	br	1ae84 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1ae80:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1ae84:	e0bffc17 	ldw	r2,-16(fp)
   1ae88:	10800b17 	ldw	r2,44(r2)
   1ae8c:	1009883a 	mov	r4,r2
   1ae90:	00178600 	call	17860 <OSSemPost>

  if (ptr != start)
   1ae94:	e0fffd17 	ldw	r3,-12(fp)
   1ae98:	e0bff217 	ldw	r2,-56(fp)
   1ae9c:	18800426 	beq	r3,r2,1aeb0 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   1aea0:	e0fffd17 	ldw	r3,-12(fp)
   1aea4:	e0bff217 	ldw	r2,-56(fp)
   1aea8:	1885c83a 	sub	r2,r3,r2
   1aeac:	00000606 	br	1aec8 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   1aeb0:	e0bfff17 	ldw	r2,-4(fp)
   1aeb4:	1090000c 	andi	r2,r2,16384
   1aeb8:	10000226 	beq	r2,zero,1aec4 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   1aebc:	00bffd44 	movi	r2,-11
   1aec0:	00000106 	br	1aec8 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1aec4:	00bffec4 	movi	r2,-5
}
   1aec8:	e037883a 	mov	sp,fp
   1aecc:	dfc00117 	ldw	ra,4(sp)
   1aed0:	df000017 	ldw	fp,0(sp)
   1aed4:	dec00204 	addi	sp,sp,8
   1aed8:	f800283a 	ret

0001aedc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1aedc:	defff904 	addi	sp,sp,-28
   1aee0:	dfc00615 	stw	ra,24(sp)
   1aee4:	df000515 	stw	fp,20(sp)
   1aee8:	df000504 	addi	fp,sp,20
   1aeec:	e13ffe15 	stw	r4,-8(fp)
   1aef0:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1aef4:	0007883a 	mov	r3,zero
   1aef8:	e0bffe17 	ldw	r2,-8(fp)
   1aefc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1af00:	e0bffe17 	ldw	r2,-8(fp)
   1af04:	10800104 	addi	r2,r2,4
   1af08:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1af0c:	0005303a 	rdctl	r2,status
   1af10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1af14:	e0fffc17 	ldw	r3,-16(fp)
   1af18:	00bfff84 	movi	r2,-2
   1af1c:	1884703a 	and	r2,r3,r2
   1af20:	1001703a 	wrctl	status,r2
  
  return context;
   1af24:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1af28:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1af2c:	001cbec0 	call	1cbec <alt_tick>
   1af30:	e0bffb17 	ldw	r2,-20(fp)
   1af34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1af38:	e0bffd17 	ldw	r2,-12(fp)
   1af3c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1af40:	0001883a 	nop
   1af44:	e037883a 	mov	sp,fp
   1af48:	dfc00117 	ldw	ra,4(sp)
   1af4c:	df000017 	ldw	fp,0(sp)
   1af50:	dec00204 	addi	sp,sp,8
   1af54:	f800283a 	ret

0001af58 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1af58:	defff904 	addi	sp,sp,-28
   1af5c:	dfc00615 	stw	ra,24(sp)
   1af60:	df000515 	stw	fp,20(sp)
   1af64:	df000504 	addi	fp,sp,20
   1af68:	e13ffc15 	stw	r4,-16(fp)
   1af6c:	e17ffd15 	stw	r5,-12(fp)
   1af70:	e1bffe15 	stw	r6,-8(fp)
   1af74:	e1ffff15 	stw	r7,-4(fp)
   1af78:	e0bfff17 	ldw	r2,-4(fp)
   1af7c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1af80:	d0a7ff17 	ldw	r2,-24580(gp)
   1af84:	1000021e 	bne	r2,zero,1af90 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1af88:	e0bffb17 	ldw	r2,-20(fp)
   1af8c:	d0a7ff15 	stw	r2,-24580(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1af90:	e0bffc17 	ldw	r2,-16(fp)
   1af94:	10800104 	addi	r2,r2,4
   1af98:	00c001c4 	movi	r3,7
   1af9c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1afa0:	018000b4 	movhi	r6,2
   1afa4:	31abb704 	addi	r6,r6,-20772
   1afa8:	e17ffc17 	ldw	r5,-16(fp)
   1afac:	e13ffe17 	ldw	r4,-8(fp)
   1afb0:	001c77c0 	call	1c77c <alt_irq_register>
#endif  
}
   1afb4:	0001883a 	nop
   1afb8:	e037883a 	mov	sp,fp
   1afbc:	dfc00117 	ldw	ra,4(sp)
   1afc0:	df000017 	ldw	fp,0(sp)
   1afc4:	dec00204 	addi	sp,sp,8
   1afc8:	f800283a 	ret

0001afcc <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1afcc:	defffc04 	addi	sp,sp,-16
   1afd0:	df000315 	stw	fp,12(sp)
   1afd4:	df000304 	addi	fp,sp,12
   1afd8:	e13ffe15 	stw	r4,-8(fp)
   1afdc:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1afe0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1afe4:	e0bfff17 	ldw	r2,-4(fp)
   1afe8:	1000061e 	bne	r2,zero,1b004 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1afec:	e0bffe17 	ldw	r2,-8(fp)
   1aff0:	1007883a 	mov	r3,r2
   1aff4:	e0bffd03 	ldbu	r2,-12(fp)
   1aff8:	1884b03a 	or	r2,r3,r2
   1affc:	e0bffd05 	stb	r2,-12(fp)
   1b000:	00000806 	br	1b024 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1b004:	e0bffe17 	ldw	r2,-8(fp)
   1b008:	1007883a 	mov	r3,r2
   1b00c:	e0bffd03 	ldbu	r2,-12(fp)
   1b010:	1884b03a 	or	r2,r3,r2
   1b014:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1b018:	e0bffd03 	ldbu	r2,-12(fp)
   1b01c:	10801014 	ori	r2,r2,64
   1b020:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1b024:	e0fffd03 	ldbu	r3,-12(fp)
   1b028:	00bfe004 	movi	r2,-128
   1b02c:	1884b03a 	or	r2,r3,r2
}
   1b030:	e037883a 	mov	sp,fp
   1b034:	df000017 	ldw	fp,0(sp)
   1b038:	dec00104 	addi	sp,sp,4
   1b03c:	f800283a 	ret

0001b040 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1b040:	defffd04 	addi	sp,sp,-12
   1b044:	df000215 	stw	fp,8(sp)
   1b048:	df000204 	addi	fp,sp,8
   1b04c:	e13ffe15 	stw	r4,-8(fp)
   1b050:	2805883a 	mov	r2,r5
   1b054:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1b058:	e0bffe17 	ldw	r2,-8(fp)
   1b05c:	10800a17 	ldw	r2,40(r2)
   1b060:	1007883a 	mov	r3,r2
   1b064:	e0bfff03 	ldbu	r2,-4(fp)
   1b068:	18800025 	stbio	r2,0(r3)
}
   1b06c:	0001883a 	nop
   1b070:	e037883a 	mov	sp,fp
   1b074:	df000017 	ldw	fp,0(sp)
   1b078:	dec00104 	addi	sp,sp,4
   1b07c:	f800283a 	ret

0001b080 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1b080:	defffe04 	addi	sp,sp,-8
   1b084:	df000115 	stw	fp,4(sp)
   1b088:	df000104 	addi	fp,sp,4
   1b08c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1b090:	e0bfff17 	ldw	r2,-4(fp)
   1b094:	10800a17 	ldw	r2,40(r2)
   1b098:	1007883a 	mov	r3,r2
   1b09c:	00800044 	movi	r2,1
   1b0a0:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1b0a4:	0001883a 	nop
   1b0a8:	e037883a 	mov	sp,fp
   1b0ac:	df000017 	ldw	fp,0(sp)
   1b0b0:	dec00104 	addi	sp,sp,4
   1b0b4:	f800283a 	ret

0001b0b8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1b0b8:	defffc04 	addi	sp,sp,-16
   1b0bc:	dfc00315 	stw	ra,12(sp)
   1b0c0:	df000215 	stw	fp,8(sp)
   1b0c4:	df000204 	addi	fp,sp,8
   1b0c8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1b0cc:	d1600804 	addi	r5,gp,-32736
   1b0d0:	e13fff17 	ldw	r4,-4(fp)
   1b0d4:	001c5780 	call	1c578 <alt_find_dev>
   1b0d8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1b0dc:	e0bffe17 	ldw	r2,-8(fp)
}
   1b0e0:	e037883a 	mov	sp,fp
   1b0e4:	dfc00117 	ldw	ra,4(sp)
   1b0e8:	df000017 	ldw	fp,0(sp)
   1b0ec:	dec00204 	addi	sp,sp,8
   1b0f0:	f800283a 	ret

0001b0f4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1b0f4:	defffb04 	addi	sp,sp,-20
   1b0f8:	df000415 	stw	fp,16(sp)
   1b0fc:	df000404 	addi	fp,sp,16
   1b100:	e13ffd15 	stw	r4,-12(fp)
   1b104:	e17ffe15 	stw	r5,-8(fp)
   1b108:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1b10c:	e03ffc15 	stw	zero,-16(fp)
   1b110:	00000f06 	br	1b150 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1b114:	e0bffd17 	ldw	r2,-12(fp)
   1b118:	10800a17 	ldw	r2,40(r2)
   1b11c:	10800044 	addi	r2,r2,1
   1b120:	1009883a 	mov	r4,r2
   1b124:	e0fffe17 	ldw	r3,-8(fp)
   1b128:	e0bffc17 	ldw	r2,-16(fp)
   1b12c:	1885883a 	add	r2,r3,r2
   1b130:	10800003 	ldbu	r2,0(r2)
   1b134:	10803fcc 	andi	r2,r2,255
   1b138:	1080201c 	xori	r2,r2,128
   1b13c:	10bfe004 	addi	r2,r2,-128
   1b140:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1b144:	e0bffc17 	ldw	r2,-16(fp)
   1b148:	10800044 	addi	r2,r2,1
   1b14c:	e0bffc15 	stw	r2,-16(fp)
   1b150:	e0fffc17 	ldw	r3,-16(fp)
   1b154:	e0bfff17 	ldw	r2,-4(fp)
   1b158:	18bfee36 	bltu	r3,r2,1b114 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1b15c:	0001883a 	nop
   1b160:	e037883a 	mov	sp,fp
   1b164:	df000017 	ldw	fp,0(sp)
   1b168:	dec00104 	addi	sp,sp,4
   1b16c:	f800283a 	ret

0001b170 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1b170:	defffd04 	addi	sp,sp,-12
   1b174:	df000215 	stw	fp,8(sp)
   1b178:	df000204 	addi	fp,sp,8
   1b17c:	e13ffe15 	stw	r4,-8(fp)
   1b180:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1b184:	00000d06 	br	1b1bc <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1b188:	e0bffe17 	ldw	r2,-8(fp)
   1b18c:	10800a17 	ldw	r2,40(r2)
   1b190:	10800044 	addi	r2,r2,1
   1b194:	1007883a 	mov	r3,r2
   1b198:	e0bfff17 	ldw	r2,-4(fp)
   1b19c:	10800003 	ldbu	r2,0(r2)
   1b1a0:	10803fcc 	andi	r2,r2,255
   1b1a4:	1080201c 	xori	r2,r2,128
   1b1a8:	10bfe004 	addi	r2,r2,-128
   1b1ac:	18800025 	stbio	r2,0(r3)
		++ptr;
   1b1b0:	e0bfff17 	ldw	r2,-4(fp)
   1b1b4:	10800044 	addi	r2,r2,1
   1b1b8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1b1bc:	e0bfff17 	ldw	r2,-4(fp)
   1b1c0:	10800003 	ldbu	r2,0(r2)
   1b1c4:	10803fcc 	andi	r2,r2,255
   1b1c8:	1080201c 	xori	r2,r2,128
   1b1cc:	10bfe004 	addi	r2,r2,-128
   1b1d0:	103fed1e 	bne	r2,zero,1b188 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1b1d4:	0001883a 	nop
   1b1d8:	e037883a 	mov	sp,fp
   1b1dc:	df000017 	ldw	fp,0(sp)
   1b1e0:	dec00104 	addi	sp,sp,4
   1b1e4:	f800283a 	ret

0001b1e8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1b1e8:	defffb04 	addi	sp,sp,-20
   1b1ec:	dfc00415 	stw	ra,16(sp)
   1b1f0:	df000315 	stw	fp,12(sp)
   1b1f4:	df000304 	addi	fp,sp,12
   1b1f8:	e13ffd15 	stw	r4,-12(fp)
   1b1fc:	e17ffe15 	stw	r5,-8(fp)
   1b200:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1b204:	e0bffd17 	ldw	r2,-12(fp)
   1b208:	10800017 	ldw	r2,0(r2)
   1b20c:	e0ffff17 	ldw	r3,-4(fp)
   1b210:	180d883a 	mov	r6,r3
   1b214:	e17ffe17 	ldw	r5,-8(fp)
   1b218:	1009883a 	mov	r4,r2
   1b21c:	001b0f40 	call	1b0f4 <alt_up_character_lcd_write>
	return 0;
   1b220:	0005883a 	mov	r2,zero
}
   1b224:	e037883a 	mov	sp,fp
   1b228:	dfc00117 	ldw	ra,4(sp)
   1b22c:	df000017 	ldw	fp,0(sp)
   1b230:	dec00204 	addi	sp,sp,8
   1b234:	f800283a 	ret

0001b238 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1b238:	defffa04 	addi	sp,sp,-24
   1b23c:	dfc00515 	stw	ra,20(sp)
   1b240:	df000415 	stw	fp,16(sp)
   1b244:	df000404 	addi	fp,sp,16
   1b248:	e13ffd15 	stw	r4,-12(fp)
   1b24c:	e17ffe15 	stw	r5,-8(fp)
   1b250:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1b254:	e0bffe17 	ldw	r2,-8(fp)
   1b258:	10800a28 	cmpgeui	r2,r2,40
   1b25c:	1000031e 	bne	r2,zero,1b26c <alt_up_character_lcd_set_cursor_pos+0x34>
   1b260:	e0bfff17 	ldw	r2,-4(fp)
   1b264:	108000b0 	cmpltui	r2,r2,2
   1b268:	1000021e 	bne	r2,zero,1b274 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1b26c:	00bfffc4 	movi	r2,-1
   1b270:	00000906 	br	1b298 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1b274:	e17fff17 	ldw	r5,-4(fp)
   1b278:	e13ffe17 	ldw	r4,-8(fp)
   1b27c:	001afcc0 	call	1afcc <get_DDRAM_addr>
   1b280:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1b284:	e0bffc03 	ldbu	r2,-16(fp)
   1b288:	100b883a 	mov	r5,r2
   1b28c:	e13ffd17 	ldw	r4,-12(fp)
   1b290:	001b0400 	call	1b040 <alt_up_character_lcd_send_cmd>
	return 0;
   1b294:	0005883a 	mov	r2,zero
}
   1b298:	e037883a 	mov	sp,fp
   1b29c:	dfc00117 	ldw	ra,4(sp)
   1b2a0:	df000017 	ldw	fp,0(sp)
   1b2a4:	dec00204 	addi	sp,sp,8
   1b2a8:	f800283a 	ret

0001b2ac <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1b2ac:	defffb04 	addi	sp,sp,-20
   1b2b0:	dfc00415 	stw	ra,16(sp)
   1b2b4:	df000315 	stw	fp,12(sp)
   1b2b8:	df000304 	addi	fp,sp,12
   1b2bc:	e13ffe15 	stw	r4,-8(fp)
   1b2c0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1b2c4:	e0bfff17 	ldw	r2,-4(fp)
   1b2c8:	10001526 	beq	r2,zero,1b320 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1b2cc:	e0bfff17 	ldw	r2,-4(fp)
   1b2d0:	0080020e 	bge	zero,r2,1b2dc <alt_up_character_lcd_shift_cursor+0x30>
   1b2d4:	00800504 	movi	r2,20
   1b2d8:	00000106 	br	1b2e0 <alt_up_character_lcd_shift_cursor+0x34>
   1b2dc:	00800404 	movi	r2,16
   1b2e0:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1b2e4:	e0bfff17 	ldw	r2,-4(fp)
   1b2e8:	1000010e 	bge	r2,zero,1b2f0 <alt_up_character_lcd_shift_cursor+0x44>
   1b2ec:	0085c83a 	sub	r2,zero,r2
   1b2f0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1b2f4:	00000406 	br	1b308 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1b2f8:	e0bffd43 	ldbu	r2,-11(fp)
   1b2fc:	100b883a 	mov	r5,r2
   1b300:	e13ffe17 	ldw	r4,-8(fp)
   1b304:	001b0400 	call	1b040 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1b308:	e0bffd03 	ldbu	r2,-12(fp)
   1b30c:	10ffffc4 	addi	r3,r2,-1
   1b310:	e0fffd05 	stb	r3,-12(fp)
   1b314:	10803fcc 	andi	r2,r2,255
   1b318:	103ff71e 	bne	r2,zero,1b2f8 <alt_up_character_lcd_shift_cursor+0x4c>
   1b31c:	00000106 	br	1b324 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   1b320:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1b324:	e037883a 	mov	sp,fp
   1b328:	dfc00117 	ldw	ra,4(sp)
   1b32c:	df000017 	ldw	fp,0(sp)
   1b330:	dec00204 	addi	sp,sp,8
   1b334:	f800283a 	ret

0001b338 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1b338:	defffb04 	addi	sp,sp,-20
   1b33c:	dfc00415 	stw	ra,16(sp)
   1b340:	df000315 	stw	fp,12(sp)
   1b344:	df000304 	addi	fp,sp,12
   1b348:	e13ffe15 	stw	r4,-8(fp)
   1b34c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1b350:	e0bfff17 	ldw	r2,-4(fp)
   1b354:	10001526 	beq	r2,zero,1b3ac <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1b358:	e0bfff17 	ldw	r2,-4(fp)
   1b35c:	0080020e 	bge	zero,r2,1b368 <alt_up_character_lcd_shift_display+0x30>
   1b360:	00800704 	movi	r2,28
   1b364:	00000106 	br	1b36c <alt_up_character_lcd_shift_display+0x34>
   1b368:	00800604 	movi	r2,24
   1b36c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1b370:	e0bfff17 	ldw	r2,-4(fp)
   1b374:	1000010e 	bge	r2,zero,1b37c <alt_up_character_lcd_shift_display+0x44>
   1b378:	0085c83a 	sub	r2,zero,r2
   1b37c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1b380:	00000406 	br	1b394 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1b384:	e0bffd43 	ldbu	r2,-11(fp)
   1b388:	100b883a 	mov	r5,r2
   1b38c:	e13ffe17 	ldw	r4,-8(fp)
   1b390:	001b0400 	call	1b040 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1b394:	e0bffd03 	ldbu	r2,-12(fp)
   1b398:	10ffffc4 	addi	r3,r2,-1
   1b39c:	e0fffd05 	stb	r3,-12(fp)
   1b3a0:	10803fcc 	andi	r2,r2,255
   1b3a4:	103ff71e 	bne	r2,zero,1b384 <alt_up_character_lcd_shift_display+0x4c>
   1b3a8:	00000106 	br	1b3b0 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   1b3ac:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1b3b0:	e037883a 	mov	sp,fp
   1b3b4:	dfc00117 	ldw	ra,4(sp)
   1b3b8:	df000017 	ldw	fp,0(sp)
   1b3bc:	dec00204 	addi	sp,sp,8
   1b3c0:	f800283a 	ret

0001b3c4 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1b3c4:	defffa04 	addi	sp,sp,-24
   1b3c8:	dfc00515 	stw	ra,20(sp)
   1b3cc:	df000415 	stw	fp,16(sp)
   1b3d0:	df000404 	addi	fp,sp,16
   1b3d4:	e13ffd15 	stw	r4,-12(fp)
   1b3d8:	e17ffe15 	stw	r5,-8(fp)
   1b3dc:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1b3e0:	e0bffe17 	ldw	r2,-8(fp)
   1b3e4:	10800a28 	cmpgeui	r2,r2,40
   1b3e8:	1000031e 	bne	r2,zero,1b3f8 <alt_up_character_lcd_erase_pos+0x34>
   1b3ec:	e0bfff17 	ldw	r2,-4(fp)
   1b3f0:	108000b0 	cmpltui	r2,r2,2
   1b3f4:	1000021e 	bne	r2,zero,1b400 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1b3f8:	00bfffc4 	movi	r2,-1
   1b3fc:	00000f06 	br	1b43c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1b400:	e17fff17 	ldw	r5,-4(fp)
   1b404:	e13ffe17 	ldw	r4,-8(fp)
   1b408:	001afcc0 	call	1afcc <get_DDRAM_addr>
   1b40c:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1b410:	e0bffc03 	ldbu	r2,-16(fp)
   1b414:	100b883a 	mov	r5,r2
   1b418:	e13ffd17 	ldw	r4,-12(fp)
   1b41c:	001b0400 	call	1b040 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1b420:	e0bffd17 	ldw	r2,-12(fp)
   1b424:	10800a17 	ldw	r2,40(r2)
   1b428:	10800044 	addi	r2,r2,1
   1b42c:	1007883a 	mov	r3,r2
   1b430:	00800084 	movi	r2,2
   1b434:	18800025 	stbio	r2,0(r3)
	return 0;
   1b438:	0005883a 	mov	r2,zero
}
   1b43c:	e037883a 	mov	sp,fp
   1b440:	dfc00117 	ldw	ra,4(sp)
   1b444:	df000017 	ldw	fp,0(sp)
   1b448:	dec00204 	addi	sp,sp,8
   1b44c:	f800283a 	ret

0001b450 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1b450:	defffd04 	addi	sp,sp,-12
   1b454:	dfc00215 	stw	ra,8(sp)
   1b458:	df000115 	stw	fp,4(sp)
   1b45c:	df000104 	addi	fp,sp,4
   1b460:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1b464:	01400304 	movi	r5,12
   1b468:	e13fff17 	ldw	r4,-4(fp)
   1b46c:	001b0400 	call	1b040 <alt_up_character_lcd_send_cmd>
}
   1b470:	0001883a 	nop
   1b474:	e037883a 	mov	sp,fp
   1b478:	dfc00117 	ldw	ra,4(sp)
   1b47c:	df000017 	ldw	fp,0(sp)
   1b480:	dec00204 	addi	sp,sp,8
   1b484:	f800283a 	ret

0001b488 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1b488:	defffd04 	addi	sp,sp,-12
   1b48c:	dfc00215 	stw	ra,8(sp)
   1b490:	df000115 	stw	fp,4(sp)
   1b494:	df000104 	addi	fp,sp,4
   1b498:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1b49c:	014003c4 	movi	r5,15
   1b4a0:	e13fff17 	ldw	r4,-4(fp)
   1b4a4:	001b0400 	call	1b040 <alt_up_character_lcd_send_cmd>
}
   1b4a8:	0001883a 	nop
   1b4ac:	e037883a 	mov	sp,fp
   1b4b0:	dfc00117 	ldw	ra,4(sp)
   1b4b4:	df000017 	ldw	fp,0(sp)
   1b4b8:	dec00204 	addi	sp,sp,8
   1b4bc:	f800283a 	ret

0001b4c0 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1b4c0:	defffd04 	addi	sp,sp,-12
   1b4c4:	df000215 	stw	fp,8(sp)
   1b4c8:	df000204 	addi	fp,sp,8
   1b4cc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1b4d0:	e0bfff17 	ldw	r2,-4(fp)
   1b4d4:	10800a17 	ldw	r2,40(r2)
   1b4d8:	10800104 	addi	r2,r2,4
   1b4dc:	10800037 	ldwio	r2,0(r2)
   1b4e0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1b4e4:	e0bffe17 	ldw	r2,-8(fp)
   1b4e8:	10800054 	ori	r2,r2,1
   1b4ec:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1b4f0:	e0bfff17 	ldw	r2,-4(fp)
   1b4f4:	10800a17 	ldw	r2,40(r2)
   1b4f8:	10800104 	addi	r2,r2,4
   1b4fc:	1007883a 	mov	r3,r2
   1b500:	e0bffe17 	ldw	r2,-8(fp)
   1b504:	18800035 	stwio	r2,0(r3)
}
   1b508:	0001883a 	nop
   1b50c:	e037883a 	mov	sp,fp
   1b510:	df000017 	ldw	fp,0(sp)
   1b514:	dec00104 	addi	sp,sp,4
   1b518:	f800283a 	ret

0001b51c <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1b51c:	defffd04 	addi	sp,sp,-12
   1b520:	df000215 	stw	fp,8(sp)
   1b524:	df000204 	addi	fp,sp,8
   1b528:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1b52c:	e0bfff17 	ldw	r2,-4(fp)
   1b530:	10800a17 	ldw	r2,40(r2)
   1b534:	10800104 	addi	r2,r2,4
   1b538:	10800037 	ldwio	r2,0(r2)
   1b53c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1b540:	e0fffe17 	ldw	r3,-8(fp)
   1b544:	00bfff84 	movi	r2,-2
   1b548:	1884703a 	and	r2,r3,r2
   1b54c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1b550:	e0bfff17 	ldw	r2,-4(fp)
   1b554:	10800a17 	ldw	r2,40(r2)
   1b558:	10800104 	addi	r2,r2,4
   1b55c:	1007883a 	mov	r3,r2
   1b560:	e0bffe17 	ldw	r2,-8(fp)
   1b564:	18800035 	stwio	r2,0(r3)
}
   1b568:	0001883a 	nop
   1b56c:	e037883a 	mov	sp,fp
   1b570:	df000017 	ldw	fp,0(sp)
   1b574:	dec00104 	addi	sp,sp,4
   1b578:	f800283a 	ret

0001b57c <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1b57c:	defffd04 	addi	sp,sp,-12
   1b580:	df000215 	stw	fp,8(sp)
   1b584:	df000204 	addi	fp,sp,8
   1b588:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1b58c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1b590:	e0bfff17 	ldw	r2,-4(fp)
   1b594:	10800a17 	ldw	r2,40(r2)
   1b598:	10800084 	addi	r2,r2,2
   1b59c:	1080002b 	ldhuio	r2,0(r2)
   1b5a0:	10bfffcc 	andi	r2,r2,65535
   1b5a4:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1b5a8:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1b5ac:	e037883a 	mov	sp,fp
   1b5b0:	df000017 	ldw	fp,0(sp)
   1b5b4:	dec00104 	addi	sp,sp,4
   1b5b8:	f800283a 	ret

0001b5bc <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1b5bc:	defffd04 	addi	sp,sp,-12
   1b5c0:	df000215 	stw	fp,8(sp)
   1b5c4:	df000204 	addi	fp,sp,8
   1b5c8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1b5cc:	e0bfff17 	ldw	r2,-4(fp)
   1b5d0:	10800a17 	ldw	r2,40(r2)
   1b5d4:	10800104 	addi	r2,r2,4
   1b5d8:	10800037 	ldwio	r2,0(r2)
   1b5dc:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1b5e0:	e0bffe17 	ldw	r2,-8(fp)
   1b5e4:	1004d43a 	srli	r2,r2,16
}
   1b5e8:	e037883a 	mov	sp,fp
   1b5ec:	df000017 	ldw	fp,0(sp)
   1b5f0:	dec00104 	addi	sp,sp,4
   1b5f4:	f800283a 	ret

0001b5f8 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1b5f8:	defffd04 	addi	sp,sp,-12
   1b5fc:	df000215 	stw	fp,8(sp)
   1b600:	df000204 	addi	fp,sp,8
   1b604:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1b608:	e0bfff17 	ldw	r2,-4(fp)
   1b60c:	1080800c 	andi	r2,r2,512
   1b610:	1004d27a 	srli	r2,r2,9
   1b614:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1b618:	e0bffe17 	ldw	r2,-8(fp)
   1b61c:	10000226 	beq	r2,zero,1b628 <alt_up_irda_check_parity+0x30>
   1b620:	00bfffc4 	movi	r2,-1
   1b624:	00000106 	br	1b62c <alt_up_irda_check_parity+0x34>
   1b628:	0005883a 	mov	r2,zero
}
   1b62c:	e037883a 	mov	sp,fp
   1b630:	df000017 	ldw	fp,0(sp)
   1b634:	dec00104 	addi	sp,sp,4
   1b638:	f800283a 	ret

0001b63c <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1b63c:	defffd04 	addi	sp,sp,-12
   1b640:	df000215 	stw	fp,8(sp)
   1b644:	df000204 	addi	fp,sp,8
   1b648:	e13ffe15 	stw	r4,-8(fp)
   1b64c:	2805883a 	mov	r2,r5
   1b650:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1b654:	e0bffe17 	ldw	r2,-8(fp)
   1b658:	10800a17 	ldw	r2,40(r2)
   1b65c:	1007883a 	mov	r3,r2
   1b660:	e0bfff03 	ldbu	r2,-4(fp)
   1b664:	18800035 	stwio	r2,0(r3)
	return 0;
   1b668:	0005883a 	mov	r2,zero
}
   1b66c:	e037883a 	mov	sp,fp
   1b670:	df000017 	ldw	fp,0(sp)
   1b674:	dec00104 	addi	sp,sp,4
   1b678:	f800283a 	ret

0001b67c <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1b67c:	defffa04 	addi	sp,sp,-24
   1b680:	dfc00515 	stw	ra,20(sp)
   1b684:	df000415 	stw	fp,16(sp)
   1b688:	df000404 	addi	fp,sp,16
   1b68c:	e13ffd15 	stw	r4,-12(fp)
   1b690:	e17ffe15 	stw	r5,-8(fp)
   1b694:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1b698:	e0bffd17 	ldw	r2,-12(fp)
   1b69c:	10800a17 	ldw	r2,40(r2)
   1b6a0:	10800037 	ldwio	r2,0(r2)
   1b6a4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1b6a8:	e0bffc17 	ldw	r2,-16(fp)
   1b6ac:	1007883a 	mov	r3,r2
   1b6b0:	e0bffe17 	ldw	r2,-8(fp)
   1b6b4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1b6b8:	e13ffc17 	ldw	r4,-16(fp)
   1b6bc:	001b5f80 	call	1b5f8 <alt_up_irda_check_parity>
   1b6c0:	1007883a 	mov	r3,r2
   1b6c4:	e0bfff17 	ldw	r2,-4(fp)
   1b6c8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1b6cc:	e0bffc17 	ldw	r2,-16(fp)
   1b6d0:	10a0000c 	andi	r2,r2,32768
   1b6d4:	1004d3fa 	srli	r2,r2,15
   1b6d8:	10bfffc4 	addi	r2,r2,-1
}
   1b6dc:	e037883a 	mov	sp,fp
   1b6e0:	dfc00117 	ldw	ra,4(sp)
   1b6e4:	df000017 	ldw	fp,0(sp)
   1b6e8:	dec00204 	addi	sp,sp,8
   1b6ec:	f800283a 	ret

0001b6f0 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1b6f0:	defff804 	addi	sp,sp,-32
   1b6f4:	dfc00715 	stw	ra,28(sp)
   1b6f8:	df000615 	stw	fp,24(sp)
   1b6fc:	df000604 	addi	fp,sp,24
   1b700:	e13ffd15 	stw	r4,-12(fp)
   1b704:	e17ffe15 	stw	r5,-8(fp)
   1b708:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1b70c:	e0bffd17 	ldw	r2,-12(fp)
   1b710:	10800017 	ldw	r2,0(r2)
   1b714:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1b718:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1b71c:	00000c06 	br	1b750 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1b720:	e0bffe17 	ldw	r2,-8(fp)
   1b724:	10c00044 	addi	r3,r2,1
   1b728:	e0fffe15 	stw	r3,-8(fp)
   1b72c:	e0fffc04 	addi	r3,fp,-16
   1b730:	180d883a 	mov	r6,r3
   1b734:	100b883a 	mov	r5,r2
   1b738:	e13ffb17 	ldw	r4,-20(fp)
   1b73c:	001b67c0 	call	1b67c <alt_up_irda_read_data>
   1b740:	1000081e 	bne	r2,zero,1b764 <alt_up_irda_read_fd+0x74>
			count++;
   1b744:	e0bffa17 	ldw	r2,-24(fp)
   1b748:	10800044 	addi	r2,r2,1
   1b74c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1b750:	e0bfff17 	ldw	r2,-4(fp)
   1b754:	10ffffc4 	addi	r3,r2,-1
   1b758:	e0ffff15 	stw	r3,-4(fp)
   1b75c:	103ff01e 	bne	r2,zero,1b720 <alt_up_irda_read_fd+0x30>
   1b760:	00000106 	br	1b768 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   1b764:	0001883a 	nop
	}
	return count;
   1b768:	e0bffa17 	ldw	r2,-24(fp)
}
   1b76c:	e037883a 	mov	sp,fp
   1b770:	dfc00117 	ldw	ra,4(sp)
   1b774:	df000017 	ldw	fp,0(sp)
   1b778:	dec00204 	addi	sp,sp,8
   1b77c:	f800283a 	ret

0001b780 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1b780:	defff904 	addi	sp,sp,-28
   1b784:	dfc00615 	stw	ra,24(sp)
   1b788:	df000515 	stw	fp,20(sp)
   1b78c:	df000504 	addi	fp,sp,20
   1b790:	e13ffd15 	stw	r4,-12(fp)
   1b794:	e17ffe15 	stw	r5,-8(fp)
   1b798:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1b79c:	e0bffd17 	ldw	r2,-12(fp)
   1b7a0:	10800017 	ldw	r2,0(r2)
   1b7a4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1b7a8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1b7ac:	00000c06 	br	1b7e0 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1b7b0:	e0bffe17 	ldw	r2,-8(fp)
   1b7b4:	10c00044 	addi	r3,r2,1
   1b7b8:	e0fffe15 	stw	r3,-8(fp)
   1b7bc:	10800003 	ldbu	r2,0(r2)
   1b7c0:	10803fcc 	andi	r2,r2,255
   1b7c4:	100b883a 	mov	r5,r2
   1b7c8:	e13ffc17 	ldw	r4,-16(fp)
   1b7cc:	001b63c0 	call	1b63c <alt_up_irda_write_data>
   1b7d0:	1000081e 	bne	r2,zero,1b7f4 <alt_up_irda_write_fd+0x74>
			count++;
   1b7d4:	e0bffb17 	ldw	r2,-20(fp)
   1b7d8:	10800044 	addi	r2,r2,1
   1b7dc:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1b7e0:	e0bfff17 	ldw	r2,-4(fp)
   1b7e4:	10ffffc4 	addi	r3,r2,-1
   1b7e8:	e0ffff15 	stw	r3,-4(fp)
   1b7ec:	103ff01e 	bne	r2,zero,1b7b0 <alt_up_irda_write_fd+0x30>
   1b7f0:	00000106 	br	1b7f8 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   1b7f4:	0001883a 	nop
	}
	return count;
   1b7f8:	e0bffb17 	ldw	r2,-20(fp)
}
   1b7fc:	e037883a 	mov	sp,fp
   1b800:	dfc00117 	ldw	ra,4(sp)
   1b804:	df000017 	ldw	fp,0(sp)
   1b808:	dec00204 	addi	sp,sp,8
   1b80c:	f800283a 	ret

0001b810 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1b810:	defffc04 	addi	sp,sp,-16
   1b814:	dfc00315 	stw	ra,12(sp)
   1b818:	df000215 	stw	fp,8(sp)
   1b81c:	df000204 	addi	fp,sp,8
   1b820:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1b824:	d1600804 	addi	r5,gp,-32736
   1b828:	e13fff17 	ldw	r4,-4(fp)
   1b82c:	001c5780 	call	1c578 <alt_find_dev>
   1b830:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1b834:	e0bffe17 	ldw	r2,-8(fp)
}
   1b838:	e037883a 	mov	sp,fp
   1b83c:	dfc00117 	ldw	ra,4(sp)
   1b840:	df000017 	ldw	fp,0(sp)
   1b844:	dec00204 	addi	sp,sp,8
   1b848:	f800283a 	ret

0001b84c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1b84c:	defffd04 	addi	sp,sp,-12
   1b850:	df000215 	stw	fp,8(sp)
   1b854:	df000204 	addi	fp,sp,8
   1b858:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1b85c:	e0bfff17 	ldw	r2,-4(fp)
   1b860:	1080400c 	andi	r2,r2,256
   1b864:	1004d23a 	srli	r2,r2,8
   1b868:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1b86c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1b870:	e037883a 	mov	sp,fp
   1b874:	df000017 	ldw	fp,0(sp)
   1b878:	dec00104 	addi	sp,sp,4
   1b87c:	f800283a 	ret

0001b880 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1b880:	defffd04 	addi	sp,sp,-12
   1b884:	df000215 	stw	fp,8(sp)
   1b888:	df000204 	addi	fp,sp,8
   1b88c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1b890:	e0bfff17 	ldw	r2,-4(fp)
   1b894:	1080004c 	andi	r2,r2,1
   1b898:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1b89c:	e0bffe03 	ldbu	r2,-8(fp)
}
   1b8a0:	e037883a 	mov	sp,fp
   1b8a4:	df000017 	ldw	fp,0(sp)
   1b8a8:	dec00104 	addi	sp,sp,4
   1b8ac:	f800283a 	ret

0001b8b0 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1b8b0:	defffd04 	addi	sp,sp,-12
   1b8b4:	df000215 	stw	fp,8(sp)
   1b8b8:	df000204 	addi	fp,sp,8
   1b8bc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1b8c0:	e0bfff17 	ldw	r2,-4(fp)
   1b8c4:	1081000c 	andi	r2,r2,1024
   1b8c8:	1004d2ba 	srli	r2,r2,10
   1b8cc:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1b8d0:	e0bffe03 	ldbu	r2,-8(fp)
}
   1b8d4:	e037883a 	mov	sp,fp
   1b8d8:	df000017 	ldw	fp,0(sp)
   1b8dc:	dec00104 	addi	sp,sp,4
   1b8e0:	f800283a 	ret

0001b8e4 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1b8e4:	defffd04 	addi	sp,sp,-12
   1b8e8:	df000215 	stw	fp,8(sp)
   1b8ec:	df000204 	addi	fp,sp,8
   1b8f0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1b8f4:	e0bfff17 	ldw	r2,-4(fp)
   1b8f8:	1004d43a 	srli	r2,r2,16
   1b8fc:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1b900:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1b904:	e037883a 	mov	sp,fp
   1b908:	df000017 	ldw	fp,0(sp)
   1b90c:	dec00104 	addi	sp,sp,4
   1b910:	f800283a 	ret

0001b914 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1b914:	defffd04 	addi	sp,sp,-12
   1b918:	df000215 	stw	fp,8(sp)
   1b91c:	df000204 	addi	fp,sp,8
   1b920:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1b924:	e0bfff17 	ldw	r2,-4(fp)
   1b928:	10a0000c 	andi	r2,r2,32768
   1b92c:	1004d3fa 	srli	r2,r2,15
   1b930:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1b934:	e0bffe03 	ldbu	r2,-8(fp)
}
   1b938:	e037883a 	mov	sp,fp
   1b93c:	df000017 	ldw	fp,0(sp)
   1b940:	dec00104 	addi	sp,sp,4
   1b944:	f800283a 	ret

0001b948 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1b948:	defffd04 	addi	sp,sp,-12
   1b94c:	df000215 	stw	fp,8(sp)
   1b950:	df000204 	addi	fp,sp,8
   1b954:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1b958:	e0bfff17 	ldw	r2,-4(fp)
   1b95c:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1b960:	e0bffe03 	ldbu	r2,-8(fp)
}
   1b964:	e037883a 	mov	sp,fp
   1b968:	df000017 	ldw	fp,0(sp)
   1b96c:	dec00104 	addi	sp,sp,4
   1b970:	f800283a 	ret

0001b974 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1b974:	defffb04 	addi	sp,sp,-20
   1b978:	dfc00415 	stw	ra,16(sp)
   1b97c:	df000315 	stw	fp,12(sp)
   1b980:	df000304 	addi	fp,sp,12
   1b984:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1b988:	01403fc4 	movi	r5,255
   1b98c:	e13fff17 	ldw	r4,-4(fp)
   1b990:	001bbd40 	call	1bbd4 <alt_up_ps2_write_data_byte_with_ack>
   1b994:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1b998:	e0bffd17 	ldw	r2,-12(fp)
   1b99c:	1000211e 	bne	r2,zero,1ba24 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1b9a0:	e0bffe04 	addi	r2,fp,-8
   1b9a4:	100b883a 	mov	r5,r2
   1b9a8:	e13fff17 	ldw	r4,-4(fp)
   1b9ac:	001bc380 	call	1bc38 <alt_up_ps2_read_data_byte_timeout>
   1b9b0:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1b9b4:	e0bffd17 	ldw	r2,-12(fp)
   1b9b8:	10001a1e 	bne	r2,zero,1ba24 <alt_up_ps2_init+0xb0>
   1b9bc:	e0bffe03 	ldbu	r2,-8(fp)
   1b9c0:	10803fcc 	andi	r2,r2,255
   1b9c4:	10802a98 	cmpnei	r2,r2,170
   1b9c8:	1000161e 	bne	r2,zero,1ba24 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1b9cc:	e0bffe04 	addi	r2,fp,-8
   1b9d0:	100b883a 	mov	r5,r2
   1b9d4:	e13fff17 	ldw	r4,-4(fp)
   1b9d8:	001bc380 	call	1bc38 <alt_up_ps2_read_data_byte_timeout>
   1b9dc:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1b9e0:	e0bffd17 	ldw	r2,-12(fp)
   1b9e4:	10bfe318 	cmpnei	r2,r2,-116
   1b9e8:	1000041e 	bne	r2,zero,1b9fc <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1b9ec:	e0bfff17 	ldw	r2,-4(fp)
   1b9f0:	00c00044 	movi	r3,1
   1b9f4:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   1b9f8:	00000a06 	br	1ba24 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   1b9fc:	e0bffd17 	ldw	r2,-12(fp)
   1ba00:	1000081e 	bne	r2,zero,1ba24 <alt_up_ps2_init+0xb0>
   1ba04:	e0bffe03 	ldbu	r2,-8(fp)
   1ba08:	10803fcc 	andi	r2,r2,255
   1ba0c:	1000051e 	bne	r2,zero,1ba24 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1ba10:	e0bfff17 	ldw	r2,-4(fp)
   1ba14:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1ba18:	01403d04 	movi	r5,244
   1ba1c:	e13fff17 	ldw	r4,-4(fp)
   1ba20:	001baf80 	call	1baf8 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1ba24:	0001883a 	nop
   1ba28:	e037883a 	mov	sp,fp
   1ba2c:	dfc00117 	ldw	ra,4(sp)
   1ba30:	df000017 	ldw	fp,0(sp)
   1ba34:	dec00204 	addi	sp,sp,8
   1ba38:	f800283a 	ret

0001ba3c <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1ba3c:	defffd04 	addi	sp,sp,-12
   1ba40:	df000215 	stw	fp,8(sp)
   1ba44:	df000204 	addi	fp,sp,8
   1ba48:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1ba4c:	e0bfff17 	ldw	r2,-4(fp)
   1ba50:	10800a17 	ldw	r2,40(r2)
   1ba54:	10800104 	addi	r2,r2,4
   1ba58:	10800037 	ldwio	r2,0(r2)
   1ba5c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1ba60:	e0bffe17 	ldw	r2,-8(fp)
   1ba64:	10800054 	ori	r2,r2,1
   1ba68:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1ba6c:	e0bfff17 	ldw	r2,-4(fp)
   1ba70:	10800a17 	ldw	r2,40(r2)
   1ba74:	10800104 	addi	r2,r2,4
   1ba78:	1007883a 	mov	r3,r2
   1ba7c:	e0bffe17 	ldw	r2,-8(fp)
   1ba80:	18800035 	stwio	r2,0(r3)
}
   1ba84:	0001883a 	nop
   1ba88:	e037883a 	mov	sp,fp
   1ba8c:	df000017 	ldw	fp,0(sp)
   1ba90:	dec00104 	addi	sp,sp,4
   1ba94:	f800283a 	ret

0001ba98 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1ba98:	defffd04 	addi	sp,sp,-12
   1ba9c:	df000215 	stw	fp,8(sp)
   1baa0:	df000204 	addi	fp,sp,8
   1baa4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1baa8:	e0bfff17 	ldw	r2,-4(fp)
   1baac:	10800a17 	ldw	r2,40(r2)
   1bab0:	10800104 	addi	r2,r2,4
   1bab4:	10800037 	ldwio	r2,0(r2)
   1bab8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1babc:	e0fffe17 	ldw	r3,-8(fp)
   1bac0:	00bfff84 	movi	r2,-2
   1bac4:	1884703a 	and	r2,r3,r2
   1bac8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1bacc:	e0bfff17 	ldw	r2,-4(fp)
   1bad0:	10800a17 	ldw	r2,40(r2)
   1bad4:	10800104 	addi	r2,r2,4
   1bad8:	1007883a 	mov	r3,r2
   1badc:	e0bffe17 	ldw	r2,-8(fp)
   1bae0:	18800035 	stwio	r2,0(r3)
}
   1bae4:	0001883a 	nop
   1bae8:	e037883a 	mov	sp,fp
   1baec:	df000017 	ldw	fp,0(sp)
   1baf0:	dec00104 	addi	sp,sp,4
   1baf4:	f800283a 	ret

0001baf8 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1baf8:	defffb04 	addi	sp,sp,-20
   1bafc:	dfc00415 	stw	ra,16(sp)
   1bb00:	df000315 	stw	fp,12(sp)
   1bb04:	df000304 	addi	fp,sp,12
   1bb08:	e13ffe15 	stw	r4,-8(fp)
   1bb0c:	2805883a 	mov	r2,r5
   1bb10:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1bb14:	e0bffe17 	ldw	r2,-8(fp)
   1bb18:	10800a17 	ldw	r2,40(r2)
   1bb1c:	1007883a 	mov	r3,r2
   1bb20:	e0bfff03 	ldbu	r2,-4(fp)
   1bb24:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1bb28:	e0bffe17 	ldw	r2,-8(fp)
   1bb2c:	10800a17 	ldw	r2,40(r2)
   1bb30:	10800104 	addi	r2,r2,4
   1bb34:	10800037 	ldwio	r2,0(r2)
   1bb38:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1bb3c:	e13ffd17 	ldw	r4,-12(fp)
   1bb40:	001b8b00 	call	1b8b0 <read_CE_bit>
   1bb44:	10803fcc 	andi	r2,r2,255
   1bb48:	10000226 	beq	r2,zero,1bb54 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1bb4c:	00bffec4 	movi	r2,-5
   1bb50:	00000106 	br	1bb58 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1bb54:	0005883a 	mov	r2,zero
}
   1bb58:	e037883a 	mov	sp,fp
   1bb5c:	dfc00117 	ldw	ra,4(sp)
   1bb60:	df000017 	ldw	fp,0(sp)
   1bb64:	dec00204 	addi	sp,sp,8
   1bb68:	f800283a 	ret

0001bb6c <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1bb6c:	defffc04 	addi	sp,sp,-16
   1bb70:	dfc00315 	stw	ra,12(sp)
   1bb74:	df000215 	stw	fp,8(sp)
   1bb78:	df000204 	addi	fp,sp,8
   1bb7c:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1bb80:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1bb84:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1bb88:	e0bffe44 	addi	r2,fp,-7
   1bb8c:	100b883a 	mov	r5,r2
   1bb90:	e13fff17 	ldw	r4,-4(fp)
   1bb94:	001bc380 	call	1bc38 <alt_up_ps2_read_data_byte_timeout>
   1bb98:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1bb9c:	e0bffe03 	ldbu	r2,-8(fp)
   1bba0:	1000061e 	bne	r2,zero,1bbbc <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1bba4:	e0bffe43 	ldbu	r2,-7(fp)
   1bba8:	10803fcc 	andi	r2,r2,255
   1bbac:	10803e98 	cmpnei	r2,r2,250
   1bbb0:	103ff51e 	bne	r2,zero,1bb88 <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
   1bbb4:	0005883a 	mov	r2,zero
   1bbb8:	00000106 	br	1bbc0 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   1bbbc:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   1bbc0:	e037883a 	mov	sp,fp
   1bbc4:	dfc00117 	ldw	ra,4(sp)
   1bbc8:	df000017 	ldw	fp,0(sp)
   1bbcc:	dec00204 	addi	sp,sp,8
   1bbd0:	f800283a 	ret

0001bbd4 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1bbd4:	defffa04 	addi	sp,sp,-24
   1bbd8:	dfc00515 	stw	ra,20(sp)
   1bbdc:	df000415 	stw	fp,16(sp)
   1bbe0:	df000404 	addi	fp,sp,16
   1bbe4:	e13ffe15 	stw	r4,-8(fp)
   1bbe8:	2805883a 	mov	r2,r5
   1bbec:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1bbf0:	e0bfff03 	ldbu	r2,-4(fp)
   1bbf4:	100b883a 	mov	r5,r2
   1bbf8:	e13ffe17 	ldw	r4,-8(fp)
   1bbfc:	001baf80 	call	1baf8 <alt_up_ps2_write_data_byte>
   1bc00:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1bc04:	e0bffc17 	ldw	r2,-16(fp)
   1bc08:	10000226 	beq	r2,zero,1bc14 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1bc0c:	e0bffc17 	ldw	r2,-16(fp)
   1bc10:	00000406 	br	1bc24 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1bc14:	e13ffe17 	ldw	r4,-8(fp)
   1bc18:	001bb6c0 	call	1bb6c <alt_up_ps2_wait_for_ack>
   1bc1c:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1bc20:	e0bffd17 	ldw	r2,-12(fp)
}
   1bc24:	e037883a 	mov	sp,fp
   1bc28:	dfc00117 	ldw	ra,4(sp)
   1bc2c:	df000017 	ldw	fp,0(sp)
   1bc30:	dec00204 	addi	sp,sp,8
   1bc34:	f800283a 	ret

0001bc38 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1bc38:	defffa04 	addi	sp,sp,-24
   1bc3c:	dfc00515 	stw	ra,20(sp)
   1bc40:	df000415 	stw	fp,16(sp)
   1bc44:	df000404 	addi	fp,sp,16
   1bc48:	e13ffe15 	stw	r4,-8(fp)
   1bc4c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1bc50:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1bc54:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1bc58:	e0bffc17 	ldw	r2,-16(fp)
   1bc5c:	10800044 	addi	r2,r2,1
   1bc60:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1bc64:	e0bffe17 	ldw	r2,-8(fp)
   1bc68:	10800a17 	ldw	r2,40(r2)
   1bc6c:	10800037 	ldwio	r2,0(r2)
   1bc70:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1bc74:	e13ffd17 	ldw	r4,-12(fp)
   1bc78:	001b9140 	call	1b914 <read_data_valid>
   1bc7c:	10803fcc 	andi	r2,r2,255
   1bc80:	10000726 	beq	r2,zero,1bca0 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1bc84:	e13ffd17 	ldw	r4,-12(fp)
   1bc88:	001b9480 	call	1b948 <read_data_byte>
   1bc8c:	1007883a 	mov	r3,r2
   1bc90:	e0bfff17 	ldw	r2,-4(fp)
   1bc94:	10c00005 	stb	r3,0(r2)
			return 0;
   1bc98:	0005883a 	mov	r2,zero
   1bc9c:	00000806 	br	1bcc0 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1bca0:	e0bffe17 	ldw	r2,-8(fp)
   1bca4:	10800c17 	ldw	r2,48(r2)
   1bca8:	103feb26 	beq	r2,zero,1bc58 <alt_up_ps2_read_data_byte_timeout+0x20>
   1bcac:	e0bffe17 	ldw	r2,-8(fp)
   1bcb0:	10c00c17 	ldw	r3,48(r2)
   1bcb4:	e0bffc17 	ldw	r2,-16(fp)
   1bcb8:	18bfe72e 	bgeu	r3,r2,1bc58 <alt_up_ps2_read_data_byte_timeout+0x20>
		{
			return -ETIMEDOUT;
   1bcbc:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   1bcc0:	e037883a 	mov	sp,fp
   1bcc4:	dfc00117 	ldw	ra,4(sp)
   1bcc8:	df000017 	ldw	fp,0(sp)
   1bccc:	dec00204 	addi	sp,sp,8
   1bcd0:	f800283a 	ret

0001bcd4 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1bcd4:	defffb04 	addi	sp,sp,-20
   1bcd8:	dfc00415 	stw	ra,16(sp)
   1bcdc:	df000315 	stw	fp,12(sp)
   1bce0:	df000304 	addi	fp,sp,12
   1bce4:	e13ffe15 	stw	r4,-8(fp)
   1bce8:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1bcec:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1bcf0:	e0bffe17 	ldw	r2,-8(fp)
   1bcf4:	10800a17 	ldw	r2,40(r2)
   1bcf8:	10800037 	ldwio	r2,0(r2)
   1bcfc:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1bd00:	e13ffd17 	ldw	r4,-12(fp)
   1bd04:	001b9140 	call	1b914 <read_data_valid>
   1bd08:	10803fcc 	andi	r2,r2,255
   1bd0c:	10000726 	beq	r2,zero,1bd2c <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1bd10:	e13ffd17 	ldw	r4,-12(fp)
   1bd14:	001b9480 	call	1b948 <read_data_byte>
   1bd18:	1007883a 	mov	r3,r2
   1bd1c:	e0bfff17 	ldw	r2,-4(fp)
   1bd20:	10c00005 	stb	r3,0(r2)
		return 0;
   1bd24:	0005883a 	mov	r2,zero
   1bd28:	00000106 	br	1bd30 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1bd2c:	00bfffc4 	movi	r2,-1
}
   1bd30:	e037883a 	mov	sp,fp
   1bd34:	dfc00117 	ldw	ra,4(sp)
   1bd38:	df000017 	ldw	fp,0(sp)
   1bd3c:	dec00204 	addi	sp,sp,8
   1bd40:	f800283a 	ret

0001bd44 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1bd44:	defffb04 	addi	sp,sp,-20
   1bd48:	dfc00415 	stw	ra,16(sp)
   1bd4c:	df000315 	stw	fp,12(sp)
   1bd50:	df000304 	addi	fp,sp,12
   1bd54:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1bd58:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1bd5c:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1bd60:	e0bfff17 	ldw	r2,-4(fp)
   1bd64:	10800a17 	ldw	r2,40(r2)
   1bd68:	10800037 	ldwio	r2,0(r2)
   1bd6c:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1bd70:	e13ffe17 	ldw	r4,-8(fp)
   1bd74:	001b8e40 	call	1b8e4 <read_num_bytes_available>
   1bd78:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1bd7c:	e0bffd0b 	ldhu	r2,-12(fp)
   1bd80:	103ff71e 	bne	r2,zero,1bd60 <alt_up_ps2_clear_fifo+0x1c>
}
   1bd84:	0001883a 	nop
   1bd88:	e037883a 	mov	sp,fp
   1bd8c:	dfc00117 	ldw	ra,4(sp)
   1bd90:	df000017 	ldw	fp,0(sp)
   1bd94:	dec00204 	addi	sp,sp,8
   1bd98:	f800283a 	ret

0001bd9c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1bd9c:	defff804 	addi	sp,sp,-32
   1bda0:	dfc00715 	stw	ra,28(sp)
   1bda4:	df000615 	stw	fp,24(sp)
   1bda8:	df000604 	addi	fp,sp,24
   1bdac:	e13ffd15 	stw	r4,-12(fp)
   1bdb0:	e17ffe15 	stw	r5,-8(fp)
   1bdb4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1bdb8:	e0bffd17 	ldw	r2,-12(fp)
   1bdbc:	10800017 	ldw	r2,0(r2)
   1bdc0:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1bdc4:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1bdc8:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1bdcc:	e0fffc17 	ldw	r3,-16(fp)
   1bdd0:	e0bfff17 	ldw	r2,-4(fp)
   1bdd4:	18bffd16 	blt	r3,r2,1bdcc <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1bdd8:	e0bffe17 	ldw	r2,-8(fp)
   1bddc:	10c00044 	addi	r3,r2,1
   1bde0:	e0fffe15 	stw	r3,-8(fp)
   1bde4:	100b883a 	mov	r5,r2
   1bde8:	e13ffa17 	ldw	r4,-24(fp)
   1bdec:	001bc380 	call	1bc38 <alt_up_ps2_read_data_byte_timeout>
   1bdf0:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1bdf4:	e0bffb17 	ldw	r2,-20(fp)
   1bdf8:	10000226 	beq	r2,zero,1be04 <alt_up_ps2_read_fd+0x68>
			return count;
   1bdfc:	e0bffc17 	ldw	r2,-16(fp)
   1be00:	00000406 	br	1be14 <alt_up_ps2_read_fd+0x78>
		count++;
   1be04:	e0bffc17 	ldw	r2,-16(fp)
   1be08:	10800044 	addi	r2,r2,1
   1be0c:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1be10:	e0bffc17 	ldw	r2,-16(fp)
}
   1be14:	e037883a 	mov	sp,fp
   1be18:	dfc00117 	ldw	ra,4(sp)
   1be1c:	df000017 	ldw	fp,0(sp)
   1be20:	dec00204 	addi	sp,sp,8
   1be24:	f800283a 	ret

0001be28 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1be28:	defff804 	addi	sp,sp,-32
   1be2c:	dfc00715 	stw	ra,28(sp)
   1be30:	df000615 	stw	fp,24(sp)
   1be34:	df000604 	addi	fp,sp,24
   1be38:	e13ffd15 	stw	r4,-12(fp)
   1be3c:	e17ffe15 	stw	r5,-8(fp)
   1be40:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1be44:	e0bffd17 	ldw	r2,-12(fp)
   1be48:	10800017 	ldw	r2,0(r2)
   1be4c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1be50:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1be54:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1be58:	00001006 	br	1be9c <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1be5c:	e0bffe17 	ldw	r2,-8(fp)
   1be60:	10c00044 	addi	r3,r2,1
   1be64:	e0fffe15 	stw	r3,-8(fp)
   1be68:	10800003 	ldbu	r2,0(r2)
   1be6c:	10803fcc 	andi	r2,r2,255
   1be70:	100b883a 	mov	r5,r2
   1be74:	e13ffb17 	ldw	r4,-20(fp)
   1be78:	001baf80 	call	1baf8 <alt_up_ps2_write_data_byte>
   1be7c:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1be80:	e0bffc17 	ldw	r2,-16(fp)
   1be84:	10000226 	beq	r2,zero,1be90 <alt_up_ps2_write_fd+0x68>
			return count;
   1be88:	e0bffa17 	ldw	r2,-24(fp)
   1be8c:	00000706 	br	1beac <alt_up_ps2_write_fd+0x84>
		count++;
   1be90:	e0bffa17 	ldw	r2,-24(fp)
   1be94:	10800044 	addi	r2,r2,1
   1be98:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1be9c:	e0fffa17 	ldw	r3,-24(fp)
   1bea0:	e0bfff17 	ldw	r2,-4(fp)
   1bea4:	18bfed16 	blt	r3,r2,1be5c <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1bea8:	e0bffa17 	ldw	r2,-24(fp)
}
   1beac:	e037883a 	mov	sp,fp
   1beb0:	dfc00117 	ldw	ra,4(sp)
   1beb4:	df000017 	ldw	fp,0(sp)
   1beb8:	dec00204 	addi	sp,sp,8
   1bebc:	f800283a 	ret

0001bec0 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1bec0:	defffc04 	addi	sp,sp,-16
   1bec4:	dfc00315 	stw	ra,12(sp)
   1bec8:	df000215 	stw	fp,8(sp)
   1becc:	df000204 	addi	fp,sp,8
   1bed0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1bed4:	d1600804 	addi	r5,gp,-32736
   1bed8:	e13fff17 	ldw	r4,-4(fp)
   1bedc:	001c5780 	call	1c578 <alt_find_dev>
   1bee0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1bee4:	e0bffe17 	ldw	r2,-8(fp)
}
   1bee8:	e037883a 	mov	sp,fp
   1beec:	dfc00117 	ldw	ra,4(sp)
   1bef0:	df000017 	ldw	fp,0(sp)
   1bef4:	dec00204 	addi	sp,sp,8
   1bef8:	f800283a 	ret

0001befc <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1befc:	defffd04 	addi	sp,sp,-12
   1bf00:	df000215 	stw	fp,8(sp)
   1bf04:	df000204 	addi	fp,sp,8
   1bf08:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1bf0c:	e0bfff17 	ldw	r2,-4(fp)
   1bf10:	10800a17 	ldw	r2,40(r2)
   1bf14:	10800104 	addi	r2,r2,4
   1bf18:	10800037 	ldwio	r2,0(r2)
   1bf1c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1bf20:	e0bffe17 	ldw	r2,-8(fp)
   1bf24:	10800054 	ori	r2,r2,1
   1bf28:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1bf2c:	e0bfff17 	ldw	r2,-4(fp)
   1bf30:	10800a17 	ldw	r2,40(r2)
   1bf34:	10800104 	addi	r2,r2,4
   1bf38:	1007883a 	mov	r3,r2
   1bf3c:	e0bffe17 	ldw	r2,-8(fp)
   1bf40:	18800035 	stwio	r2,0(r3)
}
   1bf44:	0001883a 	nop
   1bf48:	e037883a 	mov	sp,fp
   1bf4c:	df000017 	ldw	fp,0(sp)
   1bf50:	dec00104 	addi	sp,sp,4
   1bf54:	f800283a 	ret

0001bf58 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1bf58:	defffd04 	addi	sp,sp,-12
   1bf5c:	df000215 	stw	fp,8(sp)
   1bf60:	df000204 	addi	fp,sp,8
   1bf64:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1bf68:	e0bfff17 	ldw	r2,-4(fp)
   1bf6c:	10800a17 	ldw	r2,40(r2)
   1bf70:	10800104 	addi	r2,r2,4
   1bf74:	10800037 	ldwio	r2,0(r2)
   1bf78:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1bf7c:	e0fffe17 	ldw	r3,-8(fp)
   1bf80:	00bfff84 	movi	r2,-2
   1bf84:	1884703a 	and	r2,r3,r2
   1bf88:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1bf8c:	e0bfff17 	ldw	r2,-4(fp)
   1bf90:	10800a17 	ldw	r2,40(r2)
   1bf94:	10800104 	addi	r2,r2,4
   1bf98:	1007883a 	mov	r3,r2
   1bf9c:	e0bffe17 	ldw	r2,-8(fp)
   1bfa0:	18800035 	stwio	r2,0(r3)
}
   1bfa4:	0001883a 	nop
   1bfa8:	e037883a 	mov	sp,fp
   1bfac:	df000017 	ldw	fp,0(sp)
   1bfb0:	dec00104 	addi	sp,sp,4
   1bfb4:	f800283a 	ret

0001bfb8 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1bfb8:	defffd04 	addi	sp,sp,-12
   1bfbc:	df000215 	stw	fp,8(sp)
   1bfc0:	df000204 	addi	fp,sp,8
   1bfc4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1bfc8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1bfcc:	e0bfff17 	ldw	r2,-4(fp)
   1bfd0:	10800a17 	ldw	r2,40(r2)
   1bfd4:	10800084 	addi	r2,r2,2
   1bfd8:	1080002b 	ldhuio	r2,0(r2)
   1bfdc:	10bfffcc 	andi	r2,r2,65535
   1bfe0:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1bfe4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1bfe8:	e037883a 	mov	sp,fp
   1bfec:	df000017 	ldw	fp,0(sp)
   1bff0:	dec00104 	addi	sp,sp,4
   1bff4:	f800283a 	ret

0001bff8 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1bff8:	defffd04 	addi	sp,sp,-12
   1bffc:	df000215 	stw	fp,8(sp)
   1c000:	df000204 	addi	fp,sp,8
   1c004:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1c008:	e0bfff17 	ldw	r2,-4(fp)
   1c00c:	10800a17 	ldw	r2,40(r2)
   1c010:	10800104 	addi	r2,r2,4
   1c014:	10800037 	ldwio	r2,0(r2)
   1c018:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1c01c:	e0bffe17 	ldw	r2,-8(fp)
   1c020:	1004d43a 	srli	r2,r2,16
}
   1c024:	e037883a 	mov	sp,fp
   1c028:	df000017 	ldw	fp,0(sp)
   1c02c:	dec00104 	addi	sp,sp,4
   1c030:	f800283a 	ret

0001c034 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1c034:	defffd04 	addi	sp,sp,-12
   1c038:	df000215 	stw	fp,8(sp)
   1c03c:	df000204 	addi	fp,sp,8
   1c040:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1c044:	e0bfff17 	ldw	r2,-4(fp)
   1c048:	1080800c 	andi	r2,r2,512
   1c04c:	1004d27a 	srli	r2,r2,9
   1c050:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1c054:	e0bffe17 	ldw	r2,-8(fp)
   1c058:	10000226 	beq	r2,zero,1c064 <alt_up_rs232_check_parity+0x30>
   1c05c:	00bfffc4 	movi	r2,-1
   1c060:	00000106 	br	1c068 <alt_up_rs232_check_parity+0x34>
   1c064:	0005883a 	mov	r2,zero
}
   1c068:	e037883a 	mov	sp,fp
   1c06c:	df000017 	ldw	fp,0(sp)
   1c070:	dec00104 	addi	sp,sp,4
   1c074:	f800283a 	ret

0001c078 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1c078:	defffd04 	addi	sp,sp,-12
   1c07c:	df000215 	stw	fp,8(sp)
   1c080:	df000204 	addi	fp,sp,8
   1c084:	e13ffe15 	stw	r4,-8(fp)
   1c088:	2805883a 	mov	r2,r5
   1c08c:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1c090:	e0bffe17 	ldw	r2,-8(fp)
   1c094:	10800a17 	ldw	r2,40(r2)
   1c098:	1007883a 	mov	r3,r2
   1c09c:	e0bfff03 	ldbu	r2,-4(fp)
   1c0a0:	18800035 	stwio	r2,0(r3)
	return 0;
   1c0a4:	0005883a 	mov	r2,zero
}
   1c0a8:	e037883a 	mov	sp,fp
   1c0ac:	df000017 	ldw	fp,0(sp)
   1c0b0:	dec00104 	addi	sp,sp,4
   1c0b4:	f800283a 	ret

0001c0b8 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1c0b8:	defffa04 	addi	sp,sp,-24
   1c0bc:	dfc00515 	stw	ra,20(sp)
   1c0c0:	df000415 	stw	fp,16(sp)
   1c0c4:	df000404 	addi	fp,sp,16
   1c0c8:	e13ffd15 	stw	r4,-12(fp)
   1c0cc:	e17ffe15 	stw	r5,-8(fp)
   1c0d0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1c0d4:	e0bffd17 	ldw	r2,-12(fp)
   1c0d8:	10800a17 	ldw	r2,40(r2)
   1c0dc:	10800037 	ldwio	r2,0(r2)
   1c0e0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1c0e4:	e0bffc17 	ldw	r2,-16(fp)
   1c0e8:	1007883a 	mov	r3,r2
   1c0ec:	e0bffe17 	ldw	r2,-8(fp)
   1c0f0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1c0f4:	e13ffc17 	ldw	r4,-16(fp)
   1c0f8:	001c0340 	call	1c034 <alt_up_rs232_check_parity>
   1c0fc:	1007883a 	mov	r3,r2
   1c100:	e0bfff17 	ldw	r2,-4(fp)
   1c104:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1c108:	e0bffc17 	ldw	r2,-16(fp)
   1c10c:	10a0000c 	andi	r2,r2,32768
   1c110:	1004d3fa 	srli	r2,r2,15
   1c114:	10bfffc4 	addi	r2,r2,-1
}
   1c118:	e037883a 	mov	sp,fp
   1c11c:	dfc00117 	ldw	ra,4(sp)
   1c120:	df000017 	ldw	fp,0(sp)
   1c124:	dec00204 	addi	sp,sp,8
   1c128:	f800283a 	ret

0001c12c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1c12c:	defff804 	addi	sp,sp,-32
   1c130:	dfc00715 	stw	ra,28(sp)
   1c134:	df000615 	stw	fp,24(sp)
   1c138:	df000604 	addi	fp,sp,24
   1c13c:	e13ffd15 	stw	r4,-12(fp)
   1c140:	e17ffe15 	stw	r5,-8(fp)
   1c144:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1c148:	e0bffd17 	ldw	r2,-12(fp)
   1c14c:	10800017 	ldw	r2,0(r2)
   1c150:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1c154:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1c158:	00000c06 	br	1c18c <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1c15c:	e0bffe17 	ldw	r2,-8(fp)
   1c160:	10c00044 	addi	r3,r2,1
   1c164:	e0fffe15 	stw	r3,-8(fp)
   1c168:	e0fffc04 	addi	r3,fp,-16
   1c16c:	180d883a 	mov	r6,r3
   1c170:	100b883a 	mov	r5,r2
   1c174:	e13ffb17 	ldw	r4,-20(fp)
   1c178:	001c0b80 	call	1c0b8 <alt_up_rs232_read_data>
   1c17c:	1000081e 	bne	r2,zero,1c1a0 <alt_up_rs232_read_fd+0x74>
			count++;
   1c180:	e0bffa17 	ldw	r2,-24(fp)
   1c184:	10800044 	addi	r2,r2,1
   1c188:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1c18c:	e0bfff17 	ldw	r2,-4(fp)
   1c190:	10ffffc4 	addi	r3,r2,-1
   1c194:	e0ffff15 	stw	r3,-4(fp)
   1c198:	103ff01e 	bne	r2,zero,1c15c <alt_up_rs232_read_fd+0x30>
   1c19c:	00000106 	br	1c1a4 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   1c1a0:	0001883a 	nop
	}
	return count;
   1c1a4:	e0bffa17 	ldw	r2,-24(fp)
}
   1c1a8:	e037883a 	mov	sp,fp
   1c1ac:	dfc00117 	ldw	ra,4(sp)
   1c1b0:	df000017 	ldw	fp,0(sp)
   1c1b4:	dec00204 	addi	sp,sp,8
   1c1b8:	f800283a 	ret

0001c1bc <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1c1bc:	defff904 	addi	sp,sp,-28
   1c1c0:	dfc00615 	stw	ra,24(sp)
   1c1c4:	df000515 	stw	fp,20(sp)
   1c1c8:	df000504 	addi	fp,sp,20
   1c1cc:	e13ffd15 	stw	r4,-12(fp)
   1c1d0:	e17ffe15 	stw	r5,-8(fp)
   1c1d4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1c1d8:	e0bffd17 	ldw	r2,-12(fp)
   1c1dc:	10800017 	ldw	r2,0(r2)
   1c1e0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1c1e4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1c1e8:	00000d06 	br	1c220 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1c1ec:	e0bffe17 	ldw	r2,-8(fp)
   1c1f0:	10800003 	ldbu	r2,0(r2)
   1c1f4:	10803fcc 	andi	r2,r2,255
   1c1f8:	100b883a 	mov	r5,r2
   1c1fc:	e13ffc17 	ldw	r4,-16(fp)
   1c200:	001c0780 	call	1c078 <alt_up_rs232_write_data>
   1c204:	10000b1e 	bne	r2,zero,1c234 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   1c208:	e0bffb17 	ldw	r2,-20(fp)
   1c20c:	10800044 	addi	r2,r2,1
   1c210:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1c214:	e0bffe17 	ldw	r2,-8(fp)
   1c218:	10800044 	addi	r2,r2,1
   1c21c:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1c220:	e0bfff17 	ldw	r2,-4(fp)
   1c224:	10ffffc4 	addi	r3,r2,-1
   1c228:	e0ffff15 	stw	r3,-4(fp)
   1c22c:	103fef1e 	bne	r2,zero,1c1ec <alt_up_rs232_write_fd+0x30>
   1c230:	00000106 	br	1c238 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   1c234:	0001883a 	nop
	}
	return count;
   1c238:	e0bffb17 	ldw	r2,-20(fp)
}
   1c23c:	e037883a 	mov	sp,fp
   1c240:	dfc00117 	ldw	ra,4(sp)
   1c244:	df000017 	ldw	fp,0(sp)
   1c248:	dec00204 	addi	sp,sp,8
   1c24c:	f800283a 	ret

0001c250 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1c250:	defffc04 	addi	sp,sp,-16
   1c254:	dfc00315 	stw	ra,12(sp)
   1c258:	df000215 	stw	fp,8(sp)
   1c25c:	df000204 	addi	fp,sp,8
   1c260:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1c264:	d1600804 	addi	r5,gp,-32736
   1c268:	e13fff17 	ldw	r4,-4(fp)
   1c26c:	001c5780 	call	1c578 <alt_find_dev>
   1c270:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1c274:	e0bffe17 	ldw	r2,-8(fp)
}
   1c278:	e037883a 	mov	sp,fp
   1c27c:	dfc00117 	ldw	ra,4(sp)
   1c280:	df000017 	ldw	fp,0(sp)
   1c284:	dec00204 	addi	sp,sp,8
   1c288:	f800283a 	ret

0001c28c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1c28c:	defff504 	addi	sp,sp,-44
   1c290:	df000a15 	stw	fp,40(sp)
   1c294:	df000a04 	addi	fp,sp,40
   1c298:	e13ffc15 	stw	r4,-16(fp)
   1c29c:	e17ffd15 	stw	r5,-12(fp)
   1c2a0:	e1bffe15 	stw	r6,-8(fp)
   1c2a4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1c2a8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1c2ac:	d0a7ff17 	ldw	r2,-24580(gp)
  
  if (alt_ticks_per_second ())
   1c2b0:	10003c26 	beq	r2,zero,1c3a4 <alt_alarm_start+0x118>
  {
    if (alarm)
   1c2b4:	e0bffc17 	ldw	r2,-16(fp)
   1c2b8:	10003826 	beq	r2,zero,1c39c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1c2bc:	e0bffc17 	ldw	r2,-16(fp)
   1c2c0:	e0fffe17 	ldw	r3,-8(fp)
   1c2c4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1c2c8:	e0bffc17 	ldw	r2,-16(fp)
   1c2cc:	e0ffff17 	ldw	r3,-4(fp)
   1c2d0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c2d4:	0005303a 	rdctl	r2,status
   1c2d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c2dc:	e0fff917 	ldw	r3,-28(fp)
   1c2e0:	00bfff84 	movi	r2,-2
   1c2e4:	1884703a 	and	r2,r3,r2
   1c2e8:	1001703a 	wrctl	status,r2
  
  return context;
   1c2ec:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1c2f0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1c2f4:	d0a80017 	ldw	r2,-24576(gp)
      
      current_nticks = alt_nticks();
   1c2f8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1c2fc:	e0fffd17 	ldw	r3,-12(fp)
   1c300:	e0bff617 	ldw	r2,-40(fp)
   1c304:	1885883a 	add	r2,r3,r2
   1c308:	10c00044 	addi	r3,r2,1
   1c30c:	e0bffc17 	ldw	r2,-16(fp)
   1c310:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1c314:	e0bffc17 	ldw	r2,-16(fp)
   1c318:	10c00217 	ldw	r3,8(r2)
   1c31c:	e0bff617 	ldw	r2,-40(fp)
   1c320:	1880042e 	bgeu	r3,r2,1c334 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1c324:	e0bffc17 	ldw	r2,-16(fp)
   1c328:	00c00044 	movi	r3,1
   1c32c:	10c00405 	stb	r3,16(r2)
   1c330:	00000206 	br	1c33c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1c334:	e0bffc17 	ldw	r2,-16(fp)
   1c338:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1c33c:	e0bffc17 	ldw	r2,-16(fp)
   1c340:	d0e02d04 	addi	r3,gp,-32588
   1c344:	e0fffa15 	stw	r3,-24(fp)
   1c348:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1c34c:	e0bffb17 	ldw	r2,-20(fp)
   1c350:	e0fffa17 	ldw	r3,-24(fp)
   1c354:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1c358:	e0bffa17 	ldw	r2,-24(fp)
   1c35c:	10c00017 	ldw	r3,0(r2)
   1c360:	e0bffb17 	ldw	r2,-20(fp)
   1c364:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1c368:	e0bffa17 	ldw	r2,-24(fp)
   1c36c:	10800017 	ldw	r2,0(r2)
   1c370:	e0fffb17 	ldw	r3,-20(fp)
   1c374:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1c378:	e0bffa17 	ldw	r2,-24(fp)
   1c37c:	e0fffb17 	ldw	r3,-20(fp)
   1c380:	10c00015 	stw	r3,0(r2)
   1c384:	e0bff817 	ldw	r2,-32(fp)
   1c388:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c38c:	e0bff717 	ldw	r2,-36(fp)
   1c390:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1c394:	0005883a 	mov	r2,zero
   1c398:	00000306 	br	1c3a8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1c39c:	00bffa84 	movi	r2,-22
   1c3a0:	00000106 	br	1c3a8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1c3a4:	00bfde84 	movi	r2,-134
  }
}
   1c3a8:	e037883a 	mov	sp,fp
   1c3ac:	df000017 	ldw	fp,0(sp)
   1c3b0:	dec00104 	addi	sp,sp,4
   1c3b4:	f800283a 	ret

0001c3b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1c3b8:	deffff04 	addi	sp,sp,-4
   1c3bc:	df000015 	stw	fp,0(sp)
   1c3c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1c3c4:	0001883a 	nop
   1c3c8:	e037883a 	mov	sp,fp
   1c3cc:	df000017 	ldw	fp,0(sp)
   1c3d0:	dec00104 	addi	sp,sp,4
   1c3d4:	f800283a 	ret

0001c3d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1c3d8:	defffe04 	addi	sp,sp,-8
   1c3dc:	dfc00115 	stw	ra,4(sp)
   1c3e0:	df000015 	stw	fp,0(sp)
   1c3e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1c3e8:	d0a00b17 	ldw	r2,-32724(gp)
   1c3ec:	10000326 	beq	r2,zero,1c3fc <alt_get_errno+0x24>
   1c3f0:	d0a00b17 	ldw	r2,-32724(gp)
   1c3f4:	103ee83a 	callr	r2
   1c3f8:	00000106 	br	1c400 <alt_get_errno+0x28>
   1c3fc:	d0a7e104 	addi	r2,gp,-24700
}
   1c400:	e037883a 	mov	sp,fp
   1c404:	dfc00117 	ldw	ra,4(sp)
   1c408:	df000017 	ldw	fp,0(sp)
   1c40c:	dec00204 	addi	sp,sp,8
   1c410:	f800283a 	ret

0001c414 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1c414:	defffa04 	addi	sp,sp,-24
   1c418:	dfc00515 	stw	ra,20(sp)
   1c41c:	df000415 	stw	fp,16(sp)
   1c420:	df000404 	addi	fp,sp,16
   1c424:	e13ffe15 	stw	r4,-8(fp)
   1c428:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1c42c:	e0bffe17 	ldw	r2,-8(fp)
   1c430:	10000326 	beq	r2,zero,1c440 <alt_dev_llist_insert+0x2c>
   1c434:	e0bffe17 	ldw	r2,-8(fp)
   1c438:	10800217 	ldw	r2,8(r2)
   1c43c:	1000061e 	bne	r2,zero,1c458 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1c440:	001c3d80 	call	1c3d8 <alt_get_errno>
   1c444:	1007883a 	mov	r3,r2
   1c448:	00800584 	movi	r2,22
   1c44c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1c450:	00bffa84 	movi	r2,-22
   1c454:	00001306 	br	1c4a4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1c458:	e0bffe17 	ldw	r2,-8(fp)
   1c45c:	e0ffff17 	ldw	r3,-4(fp)
   1c460:	e0fffc15 	stw	r3,-16(fp)
   1c464:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1c468:	e0bffd17 	ldw	r2,-12(fp)
   1c46c:	e0fffc17 	ldw	r3,-16(fp)
   1c470:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1c474:	e0bffc17 	ldw	r2,-16(fp)
   1c478:	10c00017 	ldw	r3,0(r2)
   1c47c:	e0bffd17 	ldw	r2,-12(fp)
   1c480:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1c484:	e0bffc17 	ldw	r2,-16(fp)
   1c488:	10800017 	ldw	r2,0(r2)
   1c48c:	e0fffd17 	ldw	r3,-12(fp)
   1c490:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1c494:	e0bffc17 	ldw	r2,-16(fp)
   1c498:	e0fffd17 	ldw	r3,-12(fp)
   1c49c:	10c00015 	stw	r3,0(r2)

  return 0;  
   1c4a0:	0005883a 	mov	r2,zero
}
   1c4a4:	e037883a 	mov	sp,fp
   1c4a8:	dfc00117 	ldw	ra,4(sp)
   1c4ac:	df000017 	ldw	fp,0(sp)
   1c4b0:	dec00204 	addi	sp,sp,8
   1c4b4:	f800283a 	ret

0001c4b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1c4b8:	defffd04 	addi	sp,sp,-12
   1c4bc:	dfc00215 	stw	ra,8(sp)
   1c4c0:	df000115 	stw	fp,4(sp)
   1c4c4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1c4c8:	008000b4 	movhi	r2,2
   1c4cc:	10b5c404 	addi	r2,r2,-10480
   1c4d0:	e0bfff15 	stw	r2,-4(fp)
   1c4d4:	00000606 	br	1c4f0 <_do_ctors+0x38>
        (*ctor) (); 
   1c4d8:	e0bfff17 	ldw	r2,-4(fp)
   1c4dc:	10800017 	ldw	r2,0(r2)
   1c4e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1c4e4:	e0bfff17 	ldw	r2,-4(fp)
   1c4e8:	10bfff04 	addi	r2,r2,-4
   1c4ec:	e0bfff15 	stw	r2,-4(fp)
   1c4f0:	e0ffff17 	ldw	r3,-4(fp)
   1c4f4:	008000b4 	movhi	r2,2
   1c4f8:	10b5c504 	addi	r2,r2,-10476
   1c4fc:	18bff62e 	bgeu	r3,r2,1c4d8 <_do_ctors+0x20>
        (*ctor) (); 
}
   1c500:	0001883a 	nop
   1c504:	e037883a 	mov	sp,fp
   1c508:	dfc00117 	ldw	ra,4(sp)
   1c50c:	df000017 	ldw	fp,0(sp)
   1c510:	dec00204 	addi	sp,sp,8
   1c514:	f800283a 	ret

0001c518 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1c518:	defffd04 	addi	sp,sp,-12
   1c51c:	dfc00215 	stw	ra,8(sp)
   1c520:	df000115 	stw	fp,4(sp)
   1c524:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1c528:	008000b4 	movhi	r2,2
   1c52c:	10b5c404 	addi	r2,r2,-10480
   1c530:	e0bfff15 	stw	r2,-4(fp)
   1c534:	00000606 	br	1c550 <_do_dtors+0x38>
        (*dtor) (); 
   1c538:	e0bfff17 	ldw	r2,-4(fp)
   1c53c:	10800017 	ldw	r2,0(r2)
   1c540:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1c544:	e0bfff17 	ldw	r2,-4(fp)
   1c548:	10bfff04 	addi	r2,r2,-4
   1c54c:	e0bfff15 	stw	r2,-4(fp)
   1c550:	e0ffff17 	ldw	r3,-4(fp)
   1c554:	008000b4 	movhi	r2,2
   1c558:	10b5c504 	addi	r2,r2,-10476
   1c55c:	18bff62e 	bgeu	r3,r2,1c538 <_do_dtors+0x20>
        (*dtor) (); 
}
   1c560:	0001883a 	nop
   1c564:	e037883a 	mov	sp,fp
   1c568:	dfc00117 	ldw	ra,4(sp)
   1c56c:	df000017 	ldw	fp,0(sp)
   1c570:	dec00204 	addi	sp,sp,8
   1c574:	f800283a 	ret

0001c578 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1c578:	defffa04 	addi	sp,sp,-24
   1c57c:	dfc00515 	stw	ra,20(sp)
   1c580:	df000415 	stw	fp,16(sp)
   1c584:	df000404 	addi	fp,sp,16
   1c588:	e13ffe15 	stw	r4,-8(fp)
   1c58c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1c590:	e0bfff17 	ldw	r2,-4(fp)
   1c594:	10800017 	ldw	r2,0(r2)
   1c598:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1c59c:	e13ffe17 	ldw	r4,-8(fp)
   1c5a0:	0000b280 	call	b28 <strlen>
   1c5a4:	10800044 	addi	r2,r2,1
   1c5a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c5ac:	00000d06 	br	1c5e4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1c5b0:	e0bffc17 	ldw	r2,-16(fp)
   1c5b4:	10800217 	ldw	r2,8(r2)
   1c5b8:	e0fffd17 	ldw	r3,-12(fp)
   1c5bc:	180d883a 	mov	r6,r3
   1c5c0:	e17ffe17 	ldw	r5,-8(fp)
   1c5c4:	1009883a 	mov	r4,r2
   1c5c8:	001d3cc0 	call	1d3cc <memcmp>
   1c5cc:	1000021e 	bne	r2,zero,1c5d8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1c5d0:	e0bffc17 	ldw	r2,-16(fp)
   1c5d4:	00000706 	br	1c5f4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1c5d8:	e0bffc17 	ldw	r2,-16(fp)
   1c5dc:	10800017 	ldw	r2,0(r2)
   1c5e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1c5e4:	e0fffc17 	ldw	r3,-16(fp)
   1c5e8:	e0bfff17 	ldw	r2,-4(fp)
   1c5ec:	18bff01e 	bne	r3,r2,1c5b0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1c5f0:	0005883a 	mov	r2,zero
}
   1c5f4:	e037883a 	mov	sp,fp
   1c5f8:	dfc00117 	ldw	ra,4(sp)
   1c5fc:	df000017 	ldw	fp,0(sp)
   1c600:	dec00204 	addi	sp,sp,8
   1c604:	f800283a 	ret

0001c608 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1c608:	defffe04 	addi	sp,sp,-8
   1c60c:	dfc00115 	stw	ra,4(sp)
   1c610:	df000015 	stw	fp,0(sp)
   1c614:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1c618:	01440004 	movi	r5,4096
   1c61c:	0009883a 	mov	r4,zero
   1c620:	001d2540 	call	1d254 <alt_icache_flush>
#endif
}
   1c624:	0001883a 	nop
   1c628:	e037883a 	mov	sp,fp
   1c62c:	dfc00117 	ldw	ra,4(sp)
   1c630:	df000017 	ldw	fp,0(sp)
   1c634:	dec00204 	addi	sp,sp,8
   1c638:	f800283a 	ret

0001c63c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1c63c:	defff904 	addi	sp,sp,-28
   1c640:	dfc00615 	stw	ra,24(sp)
   1c644:	df000515 	stw	fp,20(sp)
   1c648:	df000504 	addi	fp,sp,20
   1c64c:	e13ffc15 	stw	r4,-16(fp)
   1c650:	e17ffd15 	stw	r5,-12(fp)
   1c654:	e1bffe15 	stw	r6,-8(fp)
   1c658:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1c65c:	e1bfff17 	ldw	r6,-4(fp)
   1c660:	e17ffe17 	ldw	r5,-8(fp)
   1c664:	e13ffd17 	ldw	r4,-12(fp)
   1c668:	001c9fc0 	call	1c9fc <open>
   1c66c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1c670:	e0bffb17 	ldw	r2,-20(fp)
   1c674:	10001c16 	blt	r2,zero,1c6e8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1c678:	008000b4 	movhi	r2,2
   1c67c:	10ba4304 	addi	r2,r2,-5876
   1c680:	e0fffb17 	ldw	r3,-20(fp)
   1c684:	18c00324 	muli	r3,r3,12
   1c688:	10c5883a 	add	r2,r2,r3
   1c68c:	10c00017 	ldw	r3,0(r2)
   1c690:	e0bffc17 	ldw	r2,-16(fp)
   1c694:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1c698:	008000b4 	movhi	r2,2
   1c69c:	10ba4304 	addi	r2,r2,-5876
   1c6a0:	e0fffb17 	ldw	r3,-20(fp)
   1c6a4:	18c00324 	muli	r3,r3,12
   1c6a8:	10c5883a 	add	r2,r2,r3
   1c6ac:	10800104 	addi	r2,r2,4
   1c6b0:	10c00017 	ldw	r3,0(r2)
   1c6b4:	e0bffc17 	ldw	r2,-16(fp)
   1c6b8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1c6bc:	008000b4 	movhi	r2,2
   1c6c0:	10ba4304 	addi	r2,r2,-5876
   1c6c4:	e0fffb17 	ldw	r3,-20(fp)
   1c6c8:	18c00324 	muli	r3,r3,12
   1c6cc:	10c5883a 	add	r2,r2,r3
   1c6d0:	10800204 	addi	r2,r2,8
   1c6d4:	10c00017 	ldw	r3,0(r2)
   1c6d8:	e0bffc17 	ldw	r2,-16(fp)
   1c6dc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1c6e0:	e13ffb17 	ldw	r4,-20(fp)
   1c6e4:	0010fe00 	call	10fe0 <alt_release_fd>
  }
} 
   1c6e8:	0001883a 	nop
   1c6ec:	e037883a 	mov	sp,fp
   1c6f0:	dfc00117 	ldw	ra,4(sp)
   1c6f4:	df000017 	ldw	fp,0(sp)
   1c6f8:	dec00204 	addi	sp,sp,8
   1c6fc:	f800283a 	ret

0001c700 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1c700:	defffb04 	addi	sp,sp,-20
   1c704:	dfc00415 	stw	ra,16(sp)
   1c708:	df000315 	stw	fp,12(sp)
   1c70c:	df000304 	addi	fp,sp,12
   1c710:	e13ffd15 	stw	r4,-12(fp)
   1c714:	e17ffe15 	stw	r5,-8(fp)
   1c718:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1c71c:	01c07fc4 	movi	r7,511
   1c720:	01800044 	movi	r6,1
   1c724:	e17ffd17 	ldw	r5,-12(fp)
   1c728:	010000b4 	movhi	r4,2
   1c72c:	213a4604 	addi	r4,r4,-5864
   1c730:	001c63c0 	call	1c63c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1c734:	01c07fc4 	movi	r7,511
   1c738:	000d883a 	mov	r6,zero
   1c73c:	e17ffe17 	ldw	r5,-8(fp)
   1c740:	010000b4 	movhi	r4,2
   1c744:	213a4304 	addi	r4,r4,-5876
   1c748:	001c63c0 	call	1c63c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1c74c:	01c07fc4 	movi	r7,511
   1c750:	01800044 	movi	r6,1
   1c754:	e17fff17 	ldw	r5,-4(fp)
   1c758:	010000b4 	movhi	r4,2
   1c75c:	213a4904 	addi	r4,r4,-5852
   1c760:	001c63c0 	call	1c63c <alt_open_fd>
}  
   1c764:	0001883a 	nop
   1c768:	e037883a 	mov	sp,fp
   1c76c:	dfc00117 	ldw	ra,4(sp)
   1c770:	df000017 	ldw	fp,0(sp)
   1c774:	dec00204 	addi	sp,sp,8
   1c778:	f800283a 	ret

0001c77c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1c77c:	defff004 	addi	sp,sp,-64
   1c780:	df000f15 	stw	fp,60(sp)
   1c784:	df000f04 	addi	fp,sp,60
   1c788:	e13ffd15 	stw	r4,-12(fp)
   1c78c:	e17ffe15 	stw	r5,-8(fp)
   1c790:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1c794:	00bffa84 	movi	r2,-22
   1c798:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1c79c:	e0bffd17 	ldw	r2,-12(fp)
   1c7a0:	10800828 	cmpgeui	r2,r2,32
   1c7a4:	1000501e 	bne	r2,zero,1c8e8 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c7a8:	0005303a 	rdctl	r2,status
   1c7ac:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c7b0:	e0fff617 	ldw	r3,-40(fp)
   1c7b4:	00bfff84 	movi	r2,-2
   1c7b8:	1884703a 	and	r2,r3,r2
   1c7bc:	1001703a 	wrctl	status,r2
  
  return context;
   1c7c0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1c7c4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   1c7c8:	008000f4 	movhi	r2,3
   1c7cc:	10b41604 	addi	r2,r2,-12200
   1c7d0:	e0fffd17 	ldw	r3,-12(fp)
   1c7d4:	180690fa 	slli	r3,r3,3
   1c7d8:	10c5883a 	add	r2,r2,r3
   1c7dc:	e0ffff17 	ldw	r3,-4(fp)
   1c7e0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1c7e4:	008000f4 	movhi	r2,3
   1c7e8:	10b41604 	addi	r2,r2,-12200
   1c7ec:	e0fffd17 	ldw	r3,-12(fp)
   1c7f0:	180690fa 	slli	r3,r3,3
   1c7f4:	10c5883a 	add	r2,r2,r3
   1c7f8:	10800104 	addi	r2,r2,4
   1c7fc:	e0fffe17 	ldw	r3,-8(fp)
   1c800:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1c804:	e0bfff17 	ldw	r2,-4(fp)
   1c808:	10001926 	beq	r2,zero,1c870 <alt_irq_register+0xf4>
   1c80c:	e0bffd17 	ldw	r2,-12(fp)
   1c810:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c814:	0005303a 	rdctl	r2,status
   1c818:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c81c:	e0fff717 	ldw	r3,-36(fp)
   1c820:	00bfff84 	movi	r2,-2
   1c824:	1884703a 	and	r2,r3,r2
   1c828:	1001703a 	wrctl	status,r2
  
  return context;
   1c82c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1c830:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   1c834:	00c00044 	movi	r3,1
   1c838:	e0bff217 	ldw	r2,-56(fp)
   1c83c:	1884983a 	sll	r2,r3,r2
   1c840:	1007883a 	mov	r3,r2
   1c844:	d0a7fe17 	ldw	r2,-24584(gp)
   1c848:	1884b03a 	or	r2,r3,r2
   1c84c:	d0a7fe15 	stw	r2,-24584(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1c850:	d0a7fe17 	ldw	r2,-24584(gp)
   1c854:	100170fa 	wrctl	ienable,r2
   1c858:	e0bff817 	ldw	r2,-32(fp)
   1c85c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c860:	e0bff917 	ldw	r2,-28(fp)
   1c864:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1c868:	0005883a 	mov	r2,zero
   1c86c:	00001906 	br	1c8d4 <alt_irq_register+0x158>
   1c870:	e0bffd17 	ldw	r2,-12(fp)
   1c874:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c878:	0005303a 	rdctl	r2,status
   1c87c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c880:	e0fffa17 	ldw	r3,-24(fp)
   1c884:	00bfff84 	movi	r2,-2
   1c888:	1884703a 	and	r2,r3,r2
   1c88c:	1001703a 	wrctl	status,r2
  
  return context;
   1c890:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1c894:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   1c898:	00c00044 	movi	r3,1
   1c89c:	e0bff417 	ldw	r2,-48(fp)
   1c8a0:	1884983a 	sll	r2,r3,r2
   1c8a4:	0084303a 	nor	r2,zero,r2
   1c8a8:	1007883a 	mov	r3,r2
   1c8ac:	d0a7fe17 	ldw	r2,-24584(gp)
   1c8b0:	1884703a 	and	r2,r3,r2
   1c8b4:	d0a7fe15 	stw	r2,-24584(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1c8b8:	d0a7fe17 	ldw	r2,-24584(gp)
   1c8bc:	100170fa 	wrctl	ienable,r2
   1c8c0:	e0bffb17 	ldw	r2,-20(fp)
   1c8c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c8c8:	e0bffc17 	ldw	r2,-16(fp)
   1c8cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1c8d0:	0005883a 	mov	r2,zero
   1c8d4:	e0bff115 	stw	r2,-60(fp)
   1c8d8:	e0bff317 	ldw	r2,-52(fp)
   1c8dc:	e0bff515 	stw	r2,-44(fp)
   1c8e0:	e0bff517 	ldw	r2,-44(fp)
   1c8e4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1c8e8:	e0bff117 	ldw	r2,-60(fp)
}
   1c8ec:	e037883a 	mov	sp,fp
   1c8f0:	df000017 	ldw	fp,0(sp)
   1c8f4:	dec00104 	addi	sp,sp,4
   1c8f8:	f800283a 	ret

0001c8fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1c8fc:	defffe04 	addi	sp,sp,-8
   1c900:	dfc00115 	stw	ra,4(sp)
   1c904:	df000015 	stw	fp,0(sp)
   1c908:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1c90c:	d0a00b17 	ldw	r2,-32724(gp)
   1c910:	10000326 	beq	r2,zero,1c920 <alt_get_errno+0x24>
   1c914:	d0a00b17 	ldw	r2,-32724(gp)
   1c918:	103ee83a 	callr	r2
   1c91c:	00000106 	br	1c924 <alt_get_errno+0x28>
   1c920:	d0a7e104 	addi	r2,gp,-24700
}
   1c924:	e037883a 	mov	sp,fp
   1c928:	dfc00117 	ldw	ra,4(sp)
   1c92c:	df000017 	ldw	fp,0(sp)
   1c930:	dec00204 	addi	sp,sp,8
   1c934:	f800283a 	ret

0001c938 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1c938:	defffd04 	addi	sp,sp,-12
   1c93c:	df000215 	stw	fp,8(sp)
   1c940:	df000204 	addi	fp,sp,8
   1c944:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1c948:	e0bfff17 	ldw	r2,-4(fp)
   1c94c:	10800217 	ldw	r2,8(r2)
   1c950:	10d00034 	orhi	r3,r2,16384
   1c954:	e0bfff17 	ldw	r2,-4(fp)
   1c958:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1c95c:	e03ffe15 	stw	zero,-8(fp)
   1c960:	00001d06 	br	1c9d8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1c964:	008000b4 	movhi	r2,2
   1c968:	10ba4304 	addi	r2,r2,-5876
   1c96c:	e0fffe17 	ldw	r3,-8(fp)
   1c970:	18c00324 	muli	r3,r3,12
   1c974:	10c5883a 	add	r2,r2,r3
   1c978:	10c00017 	ldw	r3,0(r2)
   1c97c:	e0bfff17 	ldw	r2,-4(fp)
   1c980:	10800017 	ldw	r2,0(r2)
   1c984:	1880111e 	bne	r3,r2,1c9cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1c988:	008000b4 	movhi	r2,2
   1c98c:	10ba4304 	addi	r2,r2,-5876
   1c990:	e0fffe17 	ldw	r3,-8(fp)
   1c994:	18c00324 	muli	r3,r3,12
   1c998:	10c5883a 	add	r2,r2,r3
   1c99c:	10800204 	addi	r2,r2,8
   1c9a0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1c9a4:	1000090e 	bge	r2,zero,1c9cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1c9a8:	e0bffe17 	ldw	r2,-8(fp)
   1c9ac:	10c00324 	muli	r3,r2,12
   1c9b0:	008000b4 	movhi	r2,2
   1c9b4:	10ba4304 	addi	r2,r2,-5876
   1c9b8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1c9bc:	e0bfff17 	ldw	r2,-4(fp)
   1c9c0:	18800226 	beq	r3,r2,1c9cc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1c9c4:	00bffcc4 	movi	r2,-13
   1c9c8:	00000806 	br	1c9ec <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1c9cc:	e0bffe17 	ldw	r2,-8(fp)
   1c9d0:	10800044 	addi	r2,r2,1
   1c9d4:	e0bffe15 	stw	r2,-8(fp)
   1c9d8:	d0a00a17 	ldw	r2,-32728(gp)
   1c9dc:	1007883a 	mov	r3,r2
   1c9e0:	e0bffe17 	ldw	r2,-8(fp)
   1c9e4:	18bfdf2e 	bgeu	r3,r2,1c964 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1c9e8:	0005883a 	mov	r2,zero
}
   1c9ec:	e037883a 	mov	sp,fp
   1c9f0:	df000017 	ldw	fp,0(sp)
   1c9f4:	dec00104 	addi	sp,sp,4
   1c9f8:	f800283a 	ret

0001c9fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1c9fc:	defff604 	addi	sp,sp,-40
   1ca00:	dfc00915 	stw	ra,36(sp)
   1ca04:	df000815 	stw	fp,32(sp)
   1ca08:	df000804 	addi	fp,sp,32
   1ca0c:	e13ffd15 	stw	r4,-12(fp)
   1ca10:	e17ffe15 	stw	r5,-8(fp)
   1ca14:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1ca18:	00bfffc4 	movi	r2,-1
   1ca1c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1ca20:	00bffb44 	movi	r2,-19
   1ca24:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1ca28:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1ca2c:	d1600804 	addi	r5,gp,-32736
   1ca30:	e13ffd17 	ldw	r4,-12(fp)
   1ca34:	001c5780 	call	1c578 <alt_find_dev>
   1ca38:	e0bff815 	stw	r2,-32(fp)
   1ca3c:	e0bff817 	ldw	r2,-32(fp)
   1ca40:	1000051e 	bne	r2,zero,1ca58 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1ca44:	e13ffd17 	ldw	r4,-12(fp)
   1ca48:	001d0700 	call	1d070 <alt_find_file>
   1ca4c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1ca50:	00800044 	movi	r2,1
   1ca54:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1ca58:	e0bff817 	ldw	r2,-32(fp)
   1ca5c:	10002926 	beq	r2,zero,1cb04 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1ca60:	e13ff817 	ldw	r4,-32(fp)
   1ca64:	001d1780 	call	1d178 <alt_get_fd>
   1ca68:	e0bff915 	stw	r2,-28(fp)
   1ca6c:	e0bff917 	ldw	r2,-28(fp)
   1ca70:	1000030e 	bge	r2,zero,1ca80 <open+0x84>
    {
      status = index;
   1ca74:	e0bff917 	ldw	r2,-28(fp)
   1ca78:	e0bffa15 	stw	r2,-24(fp)
   1ca7c:	00002306 	br	1cb0c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1ca80:	e0bff917 	ldw	r2,-28(fp)
   1ca84:	10c00324 	muli	r3,r2,12
   1ca88:	008000b4 	movhi	r2,2
   1ca8c:	10ba4304 	addi	r2,r2,-5876
   1ca90:	1885883a 	add	r2,r3,r2
   1ca94:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1ca98:	e0fffe17 	ldw	r3,-8(fp)
   1ca9c:	00900034 	movhi	r2,16384
   1caa0:	10bfffc4 	addi	r2,r2,-1
   1caa4:	1886703a 	and	r3,r3,r2
   1caa8:	e0bffc17 	ldw	r2,-16(fp)
   1caac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1cab0:	e0bffb17 	ldw	r2,-20(fp)
   1cab4:	1000051e 	bne	r2,zero,1cacc <open+0xd0>
   1cab8:	e13ffc17 	ldw	r4,-16(fp)
   1cabc:	001c9380 	call	1c938 <alt_file_locked>
   1cac0:	e0bffa15 	stw	r2,-24(fp)
   1cac4:	e0bffa17 	ldw	r2,-24(fp)
   1cac8:	10001016 	blt	r2,zero,1cb0c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1cacc:	e0bff817 	ldw	r2,-32(fp)
   1cad0:	10800317 	ldw	r2,12(r2)
   1cad4:	10000826 	beq	r2,zero,1caf8 <open+0xfc>
   1cad8:	e0bff817 	ldw	r2,-32(fp)
   1cadc:	10800317 	ldw	r2,12(r2)
   1cae0:	e1ffff17 	ldw	r7,-4(fp)
   1cae4:	e1bffe17 	ldw	r6,-8(fp)
   1cae8:	e17ffd17 	ldw	r5,-12(fp)
   1caec:	e13ffc17 	ldw	r4,-16(fp)
   1caf0:	103ee83a 	callr	r2
   1caf4:	00000106 	br	1cafc <open+0x100>
   1caf8:	0005883a 	mov	r2,zero
   1cafc:	e0bffa15 	stw	r2,-24(fp)
   1cb00:	00000206 	br	1cb0c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1cb04:	00bffb44 	movi	r2,-19
   1cb08:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1cb0c:	e0bffa17 	ldw	r2,-24(fp)
   1cb10:	1000090e 	bge	r2,zero,1cb38 <open+0x13c>
  {
    alt_release_fd (index);  
   1cb14:	e13ff917 	ldw	r4,-28(fp)
   1cb18:	0010fe00 	call	10fe0 <alt_release_fd>
    ALT_ERRNO = -status;
   1cb1c:	001c8fc0 	call	1c8fc <alt_get_errno>
   1cb20:	1007883a 	mov	r3,r2
   1cb24:	e0bffa17 	ldw	r2,-24(fp)
   1cb28:	0085c83a 	sub	r2,zero,r2
   1cb2c:	18800015 	stw	r2,0(r3)
    return -1;
   1cb30:	00bfffc4 	movi	r2,-1
   1cb34:	00000106 	br	1cb3c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1cb38:	e0bff917 	ldw	r2,-28(fp)
}
   1cb3c:	e037883a 	mov	sp,fp
   1cb40:	dfc00117 	ldw	ra,4(sp)
   1cb44:	df000017 	ldw	fp,0(sp)
   1cb48:	dec00204 	addi	sp,sp,8
   1cb4c:	f800283a 	ret

0001cb50 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1cb50:	defffa04 	addi	sp,sp,-24
   1cb54:	df000515 	stw	fp,20(sp)
   1cb58:	df000504 	addi	fp,sp,20
   1cb5c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cb60:	0005303a 	rdctl	r2,status
   1cb64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cb68:	e0fffc17 	ldw	r3,-16(fp)
   1cb6c:	00bfff84 	movi	r2,-2
   1cb70:	1884703a 	and	r2,r3,r2
   1cb74:	1001703a 	wrctl	status,r2
  
  return context;
   1cb78:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1cb7c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1cb80:	e0bfff17 	ldw	r2,-4(fp)
   1cb84:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1cb88:	e0bffd17 	ldw	r2,-12(fp)
   1cb8c:	10800017 	ldw	r2,0(r2)
   1cb90:	e0fffd17 	ldw	r3,-12(fp)
   1cb94:	18c00117 	ldw	r3,4(r3)
   1cb98:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1cb9c:	e0bffd17 	ldw	r2,-12(fp)
   1cba0:	10800117 	ldw	r2,4(r2)
   1cba4:	e0fffd17 	ldw	r3,-12(fp)
   1cba8:	18c00017 	ldw	r3,0(r3)
   1cbac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1cbb0:	e0bffd17 	ldw	r2,-12(fp)
   1cbb4:	e0fffd17 	ldw	r3,-12(fp)
   1cbb8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1cbbc:	e0bffd17 	ldw	r2,-12(fp)
   1cbc0:	e0fffd17 	ldw	r3,-12(fp)
   1cbc4:	10c00015 	stw	r3,0(r2)
   1cbc8:	e0bffb17 	ldw	r2,-20(fp)
   1cbcc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cbd0:	e0bffe17 	ldw	r2,-8(fp)
   1cbd4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1cbd8:	0001883a 	nop
   1cbdc:	e037883a 	mov	sp,fp
   1cbe0:	df000017 	ldw	fp,0(sp)
   1cbe4:	dec00104 	addi	sp,sp,4
   1cbe8:	f800283a 	ret

0001cbec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1cbec:	defffb04 	addi	sp,sp,-20
   1cbf0:	dfc00415 	stw	ra,16(sp)
   1cbf4:	df000315 	stw	fp,12(sp)
   1cbf8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1cbfc:	d0a02d17 	ldw	r2,-32588(gp)
   1cc00:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1cc04:	d0a80017 	ldw	r2,-24576(gp)
   1cc08:	10800044 	addi	r2,r2,1
   1cc0c:	d0a80015 	stw	r2,-24576(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1cc10:	00002e06 	br	1cccc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1cc14:	e0bffd17 	ldw	r2,-12(fp)
   1cc18:	10800017 	ldw	r2,0(r2)
   1cc1c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1cc20:	e0bffd17 	ldw	r2,-12(fp)
   1cc24:	10800403 	ldbu	r2,16(r2)
   1cc28:	10803fcc 	andi	r2,r2,255
   1cc2c:	10000426 	beq	r2,zero,1cc40 <alt_tick+0x54>
   1cc30:	d0a80017 	ldw	r2,-24576(gp)
   1cc34:	1000021e 	bne	r2,zero,1cc40 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1cc38:	e0bffd17 	ldw	r2,-12(fp)
   1cc3c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1cc40:	e0bffd17 	ldw	r2,-12(fp)
   1cc44:	10800217 	ldw	r2,8(r2)
   1cc48:	d0e80017 	ldw	r3,-24576(gp)
   1cc4c:	18801d36 	bltu	r3,r2,1ccc4 <alt_tick+0xd8>
   1cc50:	e0bffd17 	ldw	r2,-12(fp)
   1cc54:	10800403 	ldbu	r2,16(r2)
   1cc58:	10803fcc 	andi	r2,r2,255
   1cc5c:	1000191e 	bne	r2,zero,1ccc4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1cc60:	e0bffd17 	ldw	r2,-12(fp)
   1cc64:	10800317 	ldw	r2,12(r2)
   1cc68:	e0fffd17 	ldw	r3,-12(fp)
   1cc6c:	18c00517 	ldw	r3,20(r3)
   1cc70:	1809883a 	mov	r4,r3
   1cc74:	103ee83a 	callr	r2
   1cc78:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1cc7c:	e0bfff17 	ldw	r2,-4(fp)
   1cc80:	1000031e 	bne	r2,zero,1cc90 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1cc84:	e13ffd17 	ldw	r4,-12(fp)
   1cc88:	001cb500 	call	1cb50 <alt_alarm_stop>
   1cc8c:	00000d06 	br	1ccc4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1cc90:	e0bffd17 	ldw	r2,-12(fp)
   1cc94:	10c00217 	ldw	r3,8(r2)
   1cc98:	e0bfff17 	ldw	r2,-4(fp)
   1cc9c:	1887883a 	add	r3,r3,r2
   1cca0:	e0bffd17 	ldw	r2,-12(fp)
   1cca4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1cca8:	e0bffd17 	ldw	r2,-12(fp)
   1ccac:	10c00217 	ldw	r3,8(r2)
   1ccb0:	d0a80017 	ldw	r2,-24576(gp)
   1ccb4:	1880032e 	bgeu	r3,r2,1ccc4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1ccb8:	e0bffd17 	ldw	r2,-12(fp)
   1ccbc:	00c00044 	movi	r3,1
   1ccc0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1ccc4:	e0bffe17 	ldw	r2,-8(fp)
   1ccc8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1cccc:	e0fffd17 	ldw	r3,-12(fp)
   1ccd0:	d0a02d04 	addi	r2,gp,-32588
   1ccd4:	18bfcf1e 	bne	r3,r2,1cc14 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1ccd8:	00121cc0 	call	121cc <OSTimeTick>
}
   1ccdc:	0001883a 	nop
   1cce0:	e037883a 	mov	sp,fp
   1cce4:	dfc00117 	ldw	ra,4(sp)
   1cce8:	df000017 	ldw	fp,0(sp)
   1ccec:	dec00204 	addi	sp,sp,8
   1ccf0:	f800283a 	ret

0001ccf4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1ccf4:	deffff04 	addi	sp,sp,-4
   1ccf8:	df000015 	stw	fp,0(sp)
   1ccfc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1cd00:	000170fa 	wrctl	ienable,zero
}
   1cd04:	0001883a 	nop
   1cd08:	e037883a 	mov	sp,fp
   1cd0c:	df000017 	ldw	fp,0(sp)
   1cd10:	dec00104 	addi	sp,sp,4
   1cd14:	f800283a 	ret

0001cd18 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1cd18:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1cd1c:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1cd20:	d127f917 	ldw	r4,-24604(gp)

      stw ra,  0(sp)
   1cd24:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1cd28:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1cd2c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1cd30:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1cd34:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1cd38:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1cd3c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1cd40:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1cd44:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1cd48:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1cd4c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1cd50:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1cd54:	001cf8c0 	call	1cf8c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1cd58:	d127f417 	ldw	r4,-24624(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1cd5c:	d167ec07 	ldb	r5,-24656(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1cd60:	d127f915 	stw	r4,-24604(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1cd64:	d167ec45 	stb	r5,-24655(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1cd68:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1cd6c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1cd70:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1cd74:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1cd78:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1cd7c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1cd80:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1cd84:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1cd88:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1cd8c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1cd90:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1cd94:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1cd98:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1cd9c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1cda0:	f800283a 	ret

0001cda4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1cda4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1cda8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1cdac:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1cdb0:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1cdb4:	001cf8c0 	call	1cf8c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1cdb8:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1cdbc:	d4a7ea45 	stb	r18,-24663(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1cdc0:	003fe506 	br	1cd58 <OSCtxSw+0x40>

0001cdc4 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1cdc4:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1cdc8:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1cdcc:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1cdd0:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1cdd4:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1cdd8:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1cddc:	dec00204 	addi	sp,sp,8

      callr r2
   1cde0:	103ee83a 	callr	r2

      nop
   1cde4:	0001883a 	nop

0001cde8 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1cde8:	defff704 	addi	sp,sp,-36
   1cdec:	dfc00815 	stw	ra,32(sp)
   1cdf0:	df000715 	stw	fp,28(sp)
   1cdf4:	df000704 	addi	fp,sp,28
   1cdf8:	e13ffc15 	stw	r4,-16(fp)
   1cdfc:	e17ffd15 	stw	r5,-12(fp)
   1ce00:	e1bffe15 	stw	r6,-8(fp)
   1ce04:	3805883a 	mov	r2,r7
   1ce08:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1ce0c:	e0fffe17 	ldw	r3,-8(fp)
   1ce10:	00bfff04 	movi	r2,-4
   1ce14:	1884703a 	and	r2,r3,r2
   1ce18:	10bef704 	addi	r2,r2,-1060
   1ce1c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1ce20:	01810904 	movi	r6,1060
   1ce24:	000b883a 	mov	r5,zero
   1ce28:	e13ff917 	ldw	r4,-28(fp)
   1ce2c:	00089300 	call	8930 <memset>
   1ce30:	e0bff917 	ldw	r2,-28(fp)
   1ce34:	10c0bb04 	addi	r3,r2,748
   1ce38:	e0bff917 	ldw	r2,-28(fp)
   1ce3c:	10c00115 	stw	r3,4(r2)
   1ce40:	e0bff917 	ldw	r2,-28(fp)
   1ce44:	10c0d504 	addi	r3,r2,852
   1ce48:	e0bff917 	ldw	r2,-28(fp)
   1ce4c:	10c00215 	stw	r3,8(r2)
   1ce50:	e0bff917 	ldw	r2,-28(fp)
   1ce54:	10c0ef04 	addi	r3,r2,956
   1ce58:	e0bff917 	ldw	r2,-28(fp)
   1ce5c:	10c00315 	stw	r3,12(r2)
   1ce60:	e0fff917 	ldw	r3,-28(fp)
   1ce64:	008000b4 	movhi	r2,2
   1ce68:	10b80f04 	addi	r2,r2,-8132
   1ce6c:	18800d15 	stw	r2,52(r3)
   1ce70:	e0bff917 	ldw	r2,-28(fp)
   1ce74:	00c00044 	movi	r3,1
   1ce78:	10c02915 	stw	r3,164(r2)
   1ce7c:	10002a15 	stw	zero,168(r2)
   1ce80:	e0bff917 	ldw	r2,-28(fp)
   1ce84:	00ccc384 	movi	r3,13070
   1ce88:	10c02b0d 	sth	r3,172(r2)
   1ce8c:	e0bff917 	ldw	r2,-28(fp)
   1ce90:	00eaf344 	movi	r3,-21555
   1ce94:	10c02b8d 	sth	r3,174(r2)
   1ce98:	e0bff917 	ldw	r2,-28(fp)
   1ce9c:	00c48d04 	movi	r3,4660
   1cea0:	10c02c0d 	sth	r3,176(r2)
   1cea4:	e0bff917 	ldw	r2,-28(fp)
   1cea8:	00f99b44 	movi	r3,-6547
   1ceac:	10c02c8d 	sth	r3,178(r2)
   1ceb0:	e0bff917 	ldw	r2,-28(fp)
   1ceb4:	00f7bb04 	movi	r3,-8468
   1ceb8:	10c02d0d 	sth	r3,180(r2)
   1cebc:	e0bff917 	ldw	r2,-28(fp)
   1cec0:	00c00144 	movi	r3,5
   1cec4:	10c02d8d 	sth	r3,182(r2)
   1cec8:	e0bff917 	ldw	r2,-28(fp)
   1cecc:	00c002c4 	movi	r3,11
   1ced0:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1ced4:	e0bff917 	ldw	r2,-28(fp)
   1ced8:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1cedc:	e0bffa17 	ldw	r2,-24(fp)
   1cee0:	10bff304 	addi	r2,r2,-52
   1cee4:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1cee8:	e0bffb17 	ldw	r2,-20(fp)
   1ceec:	10800c04 	addi	r2,r2,48
   1cef0:	e0fffc17 	ldw	r3,-16(fp)
   1cef4:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1cef8:	e0bffb17 	ldw	r2,-20(fp)
   1cefc:	10800b04 	addi	r2,r2,44
   1cf00:	e0fffd17 	ldw	r3,-12(fp)
   1cf04:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1cf08:	e0bffb17 	ldw	r2,-20(fp)
   1cf0c:	10800a04 	addi	r2,r2,40
   1cf10:	e0fff917 	ldw	r3,-28(fp)
   1cf14:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1cf18:	008000b4 	movhi	r2,2
   1cf1c:	10b37104 	addi	r2,r2,-12860
   1cf20:	10c00104 	addi	r3,r2,4
   1cf24:	e0bffb17 	ldw	r2,-20(fp)
   1cf28:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1cf2c:	e0bffb17 	ldw	r2,-20(fp)
}
   1cf30:	e037883a 	mov	sp,fp
   1cf34:	dfc00117 	ldw	ra,4(sp)
   1cf38:	df000017 	ldw	fp,0(sp)
   1cf3c:	dec00204 	addi	sp,sp,8
   1cf40:	f800283a 	ret

0001cf44 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1cf44:	defffe04 	addi	sp,sp,-8
   1cf48:	df000115 	stw	fp,4(sp)
   1cf4c:	df000104 	addi	fp,sp,4
   1cf50:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1cf54:	0001883a 	nop
   1cf58:	e037883a 	mov	sp,fp
   1cf5c:	df000017 	ldw	fp,0(sp)
   1cf60:	dec00104 	addi	sp,sp,4
   1cf64:	f800283a 	ret

0001cf68 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1cf68:	defffe04 	addi	sp,sp,-8
   1cf6c:	df000115 	stw	fp,4(sp)
   1cf70:	df000104 	addi	fp,sp,4
   1cf74:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1cf78:	0001883a 	nop
   1cf7c:	e037883a 	mov	sp,fp
   1cf80:	df000017 	ldw	fp,0(sp)
   1cf84:	dec00104 	addi	sp,sp,4
   1cf88:	f800283a 	ret

0001cf8c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1cf8c:	deffff04 	addi	sp,sp,-4
   1cf90:	df000015 	stw	fp,0(sp)
   1cf94:	d839883a 	mov	fp,sp
}
   1cf98:	0001883a 	nop
   1cf9c:	e037883a 	mov	sp,fp
   1cfa0:	df000017 	ldw	fp,0(sp)
   1cfa4:	dec00104 	addi	sp,sp,4
   1cfa8:	f800283a 	ret

0001cfac <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1cfac:	deffff04 	addi	sp,sp,-4
   1cfb0:	df000015 	stw	fp,0(sp)
   1cfb4:	d839883a 	mov	fp,sp
}
   1cfb8:	0001883a 	nop
   1cfbc:	e037883a 	mov	sp,fp
   1cfc0:	df000017 	ldw	fp,0(sp)
   1cfc4:	dec00104 	addi	sp,sp,4
   1cfc8:	f800283a 	ret

0001cfcc <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1cfcc:	deffff04 	addi	sp,sp,-4
   1cfd0:	df000015 	stw	fp,0(sp)
   1cfd4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1cfd8:	0001883a 	nop
   1cfdc:	e037883a 	mov	sp,fp
   1cfe0:	df000017 	ldw	fp,0(sp)
   1cfe4:	dec00104 	addi	sp,sp,4
   1cfe8:	f800283a 	ret

0001cfec <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1cfec:	deffff04 	addi	sp,sp,-4
   1cff0:	df000015 	stw	fp,0(sp)
   1cff4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1cff8:	0001883a 	nop
   1cffc:	e037883a 	mov	sp,fp
   1d000:	df000017 	ldw	fp,0(sp)
   1d004:	dec00104 	addi	sp,sp,4
   1d008:	f800283a 	ret

0001d00c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1d00c:	deffff04 	addi	sp,sp,-4
   1d010:	df000015 	stw	fp,0(sp)
   1d014:	d839883a 	mov	fp,sp
}
   1d018:	0001883a 	nop
   1d01c:	e037883a 	mov	sp,fp
   1d020:	df000017 	ldw	fp,0(sp)
   1d024:	dec00104 	addi	sp,sp,4
   1d028:	f800283a 	ret

0001d02c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1d02c:	deffff04 	addi	sp,sp,-4
   1d030:	df000015 	stw	fp,0(sp)
   1d034:	d839883a 	mov	fp,sp
}
   1d038:	0001883a 	nop
   1d03c:	e037883a 	mov	sp,fp
   1d040:	df000017 	ldw	fp,0(sp)
   1d044:	dec00104 	addi	sp,sp,4
   1d048:	f800283a 	ret

0001d04c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1d04c:	defffe04 	addi	sp,sp,-8
   1d050:	df000115 	stw	fp,4(sp)
   1d054:	df000104 	addi	fp,sp,4
   1d058:	e13fff15 	stw	r4,-4(fp)
}
   1d05c:	0001883a 	nop
   1d060:	e037883a 	mov	sp,fp
   1d064:	df000017 	ldw	fp,0(sp)
   1d068:	dec00104 	addi	sp,sp,4
   1d06c:	f800283a 	ret

0001d070 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1d070:	defffb04 	addi	sp,sp,-20
   1d074:	dfc00415 	stw	ra,16(sp)
   1d078:	df000315 	stw	fp,12(sp)
   1d07c:	df000304 	addi	fp,sp,12
   1d080:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1d084:	d0a00617 	ldw	r2,-32744(gp)
   1d088:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1d08c:	00003106 	br	1d154 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1d090:	e0bffd17 	ldw	r2,-12(fp)
   1d094:	10800217 	ldw	r2,8(r2)
   1d098:	1009883a 	mov	r4,r2
   1d09c:	0000b280 	call	b28 <strlen>
   1d0a0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1d0a4:	e0bffd17 	ldw	r2,-12(fp)
   1d0a8:	10c00217 	ldw	r3,8(r2)
   1d0ac:	e0bffe17 	ldw	r2,-8(fp)
   1d0b0:	10bfffc4 	addi	r2,r2,-1
   1d0b4:	1885883a 	add	r2,r3,r2
   1d0b8:	10800003 	ldbu	r2,0(r2)
   1d0bc:	10803fcc 	andi	r2,r2,255
   1d0c0:	1080201c 	xori	r2,r2,128
   1d0c4:	10bfe004 	addi	r2,r2,-128
   1d0c8:	10800bd8 	cmpnei	r2,r2,47
   1d0cc:	1000031e 	bne	r2,zero,1d0dc <alt_find_file+0x6c>
    {
      len -= 1;
   1d0d0:	e0bffe17 	ldw	r2,-8(fp)
   1d0d4:	10bfffc4 	addi	r2,r2,-1
   1d0d8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1d0dc:	e0bffe17 	ldw	r2,-8(fp)
   1d0e0:	e0ffff17 	ldw	r3,-4(fp)
   1d0e4:	1885883a 	add	r2,r3,r2
   1d0e8:	10800003 	ldbu	r2,0(r2)
   1d0ec:	10803fcc 	andi	r2,r2,255
   1d0f0:	1080201c 	xori	r2,r2,128
   1d0f4:	10bfe004 	addi	r2,r2,-128
   1d0f8:	10800be0 	cmpeqi	r2,r2,47
   1d0fc:	1000081e 	bne	r2,zero,1d120 <alt_find_file+0xb0>
   1d100:	e0bffe17 	ldw	r2,-8(fp)
   1d104:	e0ffff17 	ldw	r3,-4(fp)
   1d108:	1885883a 	add	r2,r3,r2
   1d10c:	10800003 	ldbu	r2,0(r2)
   1d110:	10803fcc 	andi	r2,r2,255
   1d114:	1080201c 	xori	r2,r2,128
   1d118:	10bfe004 	addi	r2,r2,-128
   1d11c:	10000a1e 	bne	r2,zero,1d148 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1d120:	e0bffd17 	ldw	r2,-12(fp)
   1d124:	10800217 	ldw	r2,8(r2)
   1d128:	e0fffe17 	ldw	r3,-8(fp)
   1d12c:	180d883a 	mov	r6,r3
   1d130:	e17fff17 	ldw	r5,-4(fp)
   1d134:	1009883a 	mov	r4,r2
   1d138:	001d3cc0 	call	1d3cc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1d13c:	1000021e 	bne	r2,zero,1d148 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1d140:	e0bffd17 	ldw	r2,-12(fp)
   1d144:	00000706 	br	1d164 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1d148:	e0bffd17 	ldw	r2,-12(fp)
   1d14c:	10800017 	ldw	r2,0(r2)
   1d150:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1d154:	e0fffd17 	ldw	r3,-12(fp)
   1d158:	d0a00604 	addi	r2,gp,-32744
   1d15c:	18bfcc1e 	bne	r3,r2,1d090 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1d160:	0005883a 	mov	r2,zero
}
   1d164:	e037883a 	mov	sp,fp
   1d168:	dfc00117 	ldw	ra,4(sp)
   1d16c:	df000017 	ldw	fp,0(sp)
   1d170:	dec00204 	addi	sp,sp,8
   1d174:	f800283a 	ret

0001d178 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1d178:	defff904 	addi	sp,sp,-28
   1d17c:	dfc00615 	stw	ra,24(sp)
   1d180:	df000515 	stw	fp,20(sp)
   1d184:	df000504 	addi	fp,sp,20
   1d188:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1d18c:	00bffa04 	movi	r2,-24
   1d190:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1d194:	d0a7e217 	ldw	r2,-24696(gp)
   1d198:	e0bffd15 	stw	r2,-12(fp)
   1d19c:	e03ffe0d 	sth	zero,-8(fp)
   1d1a0:	e0bffe0b 	ldhu	r2,-8(fp)
   1d1a4:	e0fffe84 	addi	r3,fp,-6
   1d1a8:	180d883a 	mov	r6,r3
   1d1ac:	100b883a 	mov	r5,r2
   1d1b0:	e13ffd17 	ldw	r4,-12(fp)
   1d1b4:	00174e80 	call	174e8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1d1b8:	e03ffb15 	stw	zero,-20(fp)
   1d1bc:	00001906 	br	1d224 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1d1c0:	008000b4 	movhi	r2,2
   1d1c4:	10ba4304 	addi	r2,r2,-5876
   1d1c8:	e0fffb17 	ldw	r3,-20(fp)
   1d1cc:	18c00324 	muli	r3,r3,12
   1d1d0:	10c5883a 	add	r2,r2,r3
   1d1d4:	10800017 	ldw	r2,0(r2)
   1d1d8:	10000f1e 	bne	r2,zero,1d218 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1d1dc:	008000b4 	movhi	r2,2
   1d1e0:	10ba4304 	addi	r2,r2,-5876
   1d1e4:	e0fffb17 	ldw	r3,-20(fp)
   1d1e8:	18c00324 	muli	r3,r3,12
   1d1ec:	10c5883a 	add	r2,r2,r3
   1d1f0:	e0ffff17 	ldw	r3,-4(fp)
   1d1f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1d1f8:	d0e00a17 	ldw	r3,-32728(gp)
   1d1fc:	e0bffb17 	ldw	r2,-20(fp)
   1d200:	1880020e 	bge	r3,r2,1d20c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1d204:	e0bffb17 	ldw	r2,-20(fp)
   1d208:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   1d20c:	e0bffb17 	ldw	r2,-20(fp)
   1d210:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1d214:	00000606 	br	1d230 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1d218:	e0bffb17 	ldw	r2,-20(fp)
   1d21c:	10800044 	addi	r2,r2,1
   1d220:	e0bffb15 	stw	r2,-20(fp)
   1d224:	e0bffb17 	ldw	r2,-20(fp)
   1d228:	10800810 	cmplti	r2,r2,32
   1d22c:	103fe41e 	bne	r2,zero,1d1c0 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1d230:	d0a7e217 	ldw	r2,-24696(gp)
   1d234:	1009883a 	mov	r4,r2
   1d238:	00178600 	call	17860 <OSSemPost>

  return rc;
   1d23c:	e0bffc17 	ldw	r2,-16(fp)
}
   1d240:	e037883a 	mov	sp,fp
   1d244:	dfc00117 	ldw	ra,4(sp)
   1d248:	df000017 	ldw	fp,0(sp)
   1d24c:	dec00204 	addi	sp,sp,8
   1d250:	f800283a 	ret

0001d254 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1d254:	defffb04 	addi	sp,sp,-20
   1d258:	df000415 	stw	fp,16(sp)
   1d25c:	df000404 	addi	fp,sp,16
   1d260:	e13ffe15 	stw	r4,-8(fp)
   1d264:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1d268:	e0bfff17 	ldw	r2,-4(fp)
   1d26c:	10840070 	cmpltui	r2,r2,4097
   1d270:	1000021e 	bne	r2,zero,1d27c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1d274:	00840004 	movi	r2,4096
   1d278:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1d27c:	e0fffe17 	ldw	r3,-8(fp)
   1d280:	e0bfff17 	ldw	r2,-4(fp)
   1d284:	1885883a 	add	r2,r3,r2
   1d288:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1d28c:	e0bffe17 	ldw	r2,-8(fp)
   1d290:	e0bffc15 	stw	r2,-16(fp)
   1d294:	00000506 	br	1d2ac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1d298:	e0bffc17 	ldw	r2,-16(fp)
   1d29c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1d2a0:	e0bffc17 	ldw	r2,-16(fp)
   1d2a4:	10800804 	addi	r2,r2,32
   1d2a8:	e0bffc15 	stw	r2,-16(fp)
   1d2ac:	e0fffc17 	ldw	r3,-16(fp)
   1d2b0:	e0bffd17 	ldw	r2,-12(fp)
   1d2b4:	18bff836 	bltu	r3,r2,1d298 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1d2b8:	e0bffe17 	ldw	r2,-8(fp)
   1d2bc:	108007cc 	andi	r2,r2,31
   1d2c0:	10000226 	beq	r2,zero,1d2cc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1d2c4:	e0bffc17 	ldw	r2,-16(fp)
   1d2c8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1d2cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1d2d0:	0001883a 	nop
   1d2d4:	e037883a 	mov	sp,fp
   1d2d8:	df000017 	ldw	fp,0(sp)
   1d2dc:	dec00104 	addi	sp,sp,4
   1d2e0:	f800283a 	ret

0001d2e4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1d2e4:	defffe04 	addi	sp,sp,-8
   1d2e8:	df000115 	stw	fp,4(sp)
   1d2ec:	df000104 	addi	fp,sp,4
   1d2f0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1d2f4:	e0bfff17 	ldw	r2,-4(fp)
   1d2f8:	10bffe84 	addi	r2,r2,-6
   1d2fc:	10c00428 	cmpgeui	r3,r2,16
   1d300:	18001a1e 	bne	r3,zero,1d36c <alt_exception_cause_generated_bad_addr+0x88>
   1d304:	100690ba 	slli	r3,r2,2
   1d308:	008000b4 	movhi	r2,2
   1d30c:	10b4c704 	addi	r2,r2,-11492
   1d310:	1885883a 	add	r2,r3,r2
   1d314:	10800017 	ldw	r2,0(r2)
   1d318:	1000683a 	jmp	r2
   1d31c:	0001d35c 	xori	zero,zero,1869
   1d320:	0001d35c 	xori	zero,zero,1869
   1d324:	0001d36c 	andhi	zero,zero,1869
   1d328:	0001d36c 	andhi	zero,zero,1869
   1d32c:	0001d36c 	andhi	zero,zero,1869
   1d330:	0001d35c 	xori	zero,zero,1869
   1d334:	0001d364 	muli	zero,zero,1869
   1d338:	0001d36c 	andhi	zero,zero,1869
   1d33c:	0001d35c 	xori	zero,zero,1869
   1d340:	0001d35c 	xori	zero,zero,1869
   1d344:	0001d36c 	andhi	zero,zero,1869
   1d348:	0001d35c 	xori	zero,zero,1869
   1d34c:	0001d364 	muli	zero,zero,1869
   1d350:	0001d36c 	andhi	zero,zero,1869
   1d354:	0001d36c 	andhi	zero,zero,1869
   1d358:	0001d35c 	xori	zero,zero,1869
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1d35c:	00800044 	movi	r2,1
   1d360:	00000306 	br	1d370 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1d364:	0005883a 	mov	r2,zero
   1d368:	00000106 	br	1d370 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1d36c:	0005883a 	mov	r2,zero
  }
}
   1d370:	e037883a 	mov	sp,fp
   1d374:	df000017 	ldw	fp,0(sp)
   1d378:	dec00104 	addi	sp,sp,4
   1d37c:	f800283a 	ret

0001d380 <atexit>:
   1d380:	200b883a 	mov	r5,r4
   1d384:	000f883a 	mov	r7,zero
   1d388:	000d883a 	mov	r6,zero
   1d38c:	0009883a 	mov	r4,zero
   1d390:	001d4481 	jmpi	1d448 <__register_exitproc>

0001d394 <exit>:
   1d394:	defffe04 	addi	sp,sp,-8
   1d398:	000b883a 	mov	r5,zero
   1d39c:	dc000015 	stw	r16,0(sp)
   1d3a0:	dfc00115 	stw	ra,4(sp)
   1d3a4:	2021883a 	mov	r16,r4
   1d3a8:	001d5600 	call	1d560 <__call_exitprocs>
   1d3ac:	008000b4 	movhi	r2,2
   1d3b0:	10bf8104 	addi	r2,r2,-508
   1d3b4:	11000017 	ldw	r4,0(r2)
   1d3b8:	20800f17 	ldw	r2,60(r4)
   1d3bc:	10000126 	beq	r2,zero,1d3c4 <exit+0x30>
   1d3c0:	103ee83a 	callr	r2
   1d3c4:	8009883a 	mov	r4,r16
   1d3c8:	001d6e00 	call	1d6e0 <_exit>

0001d3cc <memcmp>:
   1d3cc:	01c000c4 	movi	r7,3
   1d3d0:	3980192e 	bgeu	r7,r6,1d438 <memcmp+0x6c>
   1d3d4:	2144b03a 	or	r2,r4,r5
   1d3d8:	11c4703a 	and	r2,r2,r7
   1d3dc:	10000f26 	beq	r2,zero,1d41c <memcmp+0x50>
   1d3e0:	20800003 	ldbu	r2,0(r4)
   1d3e4:	28c00003 	ldbu	r3,0(r5)
   1d3e8:	10c0151e 	bne	r2,r3,1d440 <memcmp+0x74>
   1d3ec:	31bfff84 	addi	r6,r6,-2
   1d3f0:	01ffffc4 	movi	r7,-1
   1d3f4:	00000406 	br	1d408 <memcmp+0x3c>
   1d3f8:	20800003 	ldbu	r2,0(r4)
   1d3fc:	28c00003 	ldbu	r3,0(r5)
   1d400:	31bfffc4 	addi	r6,r6,-1
   1d404:	10c00e1e 	bne	r2,r3,1d440 <memcmp+0x74>
   1d408:	21000044 	addi	r4,r4,1
   1d40c:	29400044 	addi	r5,r5,1
   1d410:	31fff91e 	bne	r6,r7,1d3f8 <memcmp+0x2c>
   1d414:	0005883a 	mov	r2,zero
   1d418:	f800283a 	ret
   1d41c:	20c00017 	ldw	r3,0(r4)
   1d420:	28800017 	ldw	r2,0(r5)
   1d424:	18bfee1e 	bne	r3,r2,1d3e0 <memcmp+0x14>
   1d428:	31bfff04 	addi	r6,r6,-4
   1d42c:	21000104 	addi	r4,r4,4
   1d430:	29400104 	addi	r5,r5,4
   1d434:	39bff936 	bltu	r7,r6,1d41c <memcmp+0x50>
   1d438:	303fe91e 	bne	r6,zero,1d3e0 <memcmp+0x14>
   1d43c:	003ff506 	br	1d414 <memcmp+0x48>
   1d440:	10c5c83a 	sub	r2,r2,r3
   1d444:	f800283a 	ret

0001d448 <__register_exitproc>:
   1d448:	defffa04 	addi	sp,sp,-24
   1d44c:	dc000315 	stw	r16,12(sp)
   1d450:	040000b4 	movhi	r16,2
   1d454:	843f8104 	addi	r16,r16,-508
   1d458:	80c00017 	ldw	r3,0(r16)
   1d45c:	dc400415 	stw	r17,16(sp)
   1d460:	dfc00515 	stw	ra,20(sp)
   1d464:	18805217 	ldw	r2,328(r3)
   1d468:	2023883a 	mov	r17,r4
   1d46c:	10003726 	beq	r2,zero,1d54c <__register_exitproc+0x104>
   1d470:	10c00117 	ldw	r3,4(r2)
   1d474:	010007c4 	movi	r4,31
   1d478:	20c00e16 	blt	r4,r3,1d4b4 <__register_exitproc+0x6c>
   1d47c:	1a000044 	addi	r8,r3,1
   1d480:	8800221e 	bne	r17,zero,1d50c <__register_exitproc+0xc4>
   1d484:	18c00084 	addi	r3,r3,2
   1d488:	18c7883a 	add	r3,r3,r3
   1d48c:	18c7883a 	add	r3,r3,r3
   1d490:	12000115 	stw	r8,4(r2)
   1d494:	10c7883a 	add	r3,r2,r3
   1d498:	19400015 	stw	r5,0(r3)
   1d49c:	0005883a 	mov	r2,zero
   1d4a0:	dfc00517 	ldw	ra,20(sp)
   1d4a4:	dc400417 	ldw	r17,16(sp)
   1d4a8:	dc000317 	ldw	r16,12(sp)
   1d4ac:	dec00604 	addi	sp,sp,24
   1d4b0:	f800283a 	ret
   1d4b4:	00800034 	movhi	r2,0
   1d4b8:	10800004 	addi	r2,r2,0
   1d4bc:	10002626 	beq	r2,zero,1d558 <__register_exitproc+0x110>
   1d4c0:	01006404 	movi	r4,400
   1d4c4:	d9400015 	stw	r5,0(sp)
   1d4c8:	d9800115 	stw	r6,4(sp)
   1d4cc:	d9c00215 	stw	r7,8(sp)
   1d4d0:	00000000 	call	0 <__alt_mem_SDRAM>
   1d4d4:	d9400017 	ldw	r5,0(sp)
   1d4d8:	d9800117 	ldw	r6,4(sp)
   1d4dc:	d9c00217 	ldw	r7,8(sp)
   1d4e0:	10001d26 	beq	r2,zero,1d558 <__register_exitproc+0x110>
   1d4e4:	81000017 	ldw	r4,0(r16)
   1d4e8:	10000115 	stw	zero,4(r2)
   1d4ec:	02000044 	movi	r8,1
   1d4f0:	22405217 	ldw	r9,328(r4)
   1d4f4:	0007883a 	mov	r3,zero
   1d4f8:	12400015 	stw	r9,0(r2)
   1d4fc:	20805215 	stw	r2,328(r4)
   1d500:	10006215 	stw	zero,392(r2)
   1d504:	10006315 	stw	zero,396(r2)
   1d508:	883fde26 	beq	r17,zero,1d484 <__register_exitproc+0x3c>
   1d50c:	18c9883a 	add	r4,r3,r3
   1d510:	2109883a 	add	r4,r4,r4
   1d514:	1109883a 	add	r4,r2,r4
   1d518:	21802215 	stw	r6,136(r4)
   1d51c:	01800044 	movi	r6,1
   1d520:	12406217 	ldw	r9,392(r2)
   1d524:	30cc983a 	sll	r6,r6,r3
   1d528:	4992b03a 	or	r9,r9,r6
   1d52c:	12406215 	stw	r9,392(r2)
   1d530:	21c04215 	stw	r7,264(r4)
   1d534:	01000084 	movi	r4,2
   1d538:	893fd21e 	bne	r17,r4,1d484 <__register_exitproc+0x3c>
   1d53c:	11006317 	ldw	r4,396(r2)
   1d540:	218cb03a 	or	r6,r4,r6
   1d544:	11806315 	stw	r6,396(r2)
   1d548:	003fce06 	br	1d484 <__register_exitproc+0x3c>
   1d54c:	18805304 	addi	r2,r3,332
   1d550:	18805215 	stw	r2,328(r3)
   1d554:	003fc606 	br	1d470 <__register_exitproc+0x28>
   1d558:	00bfffc4 	movi	r2,-1
   1d55c:	003fd006 	br	1d4a0 <__register_exitproc+0x58>

0001d560 <__call_exitprocs>:
   1d560:	defff504 	addi	sp,sp,-44
   1d564:	df000915 	stw	fp,36(sp)
   1d568:	dd400615 	stw	r21,24(sp)
   1d56c:	dc800315 	stw	r18,12(sp)
   1d570:	dfc00a15 	stw	ra,40(sp)
   1d574:	ddc00815 	stw	r23,32(sp)
   1d578:	dd800715 	stw	r22,28(sp)
   1d57c:	dd000515 	stw	r20,20(sp)
   1d580:	dcc00415 	stw	r19,16(sp)
   1d584:	dc400215 	stw	r17,8(sp)
   1d588:	dc000115 	stw	r16,4(sp)
   1d58c:	d9000015 	stw	r4,0(sp)
   1d590:	2839883a 	mov	fp,r5
   1d594:	04800044 	movi	r18,1
   1d598:	057fffc4 	movi	r21,-1
   1d59c:	008000b4 	movhi	r2,2
   1d5a0:	10bf8104 	addi	r2,r2,-508
   1d5a4:	12000017 	ldw	r8,0(r2)
   1d5a8:	45005217 	ldw	r20,328(r8)
   1d5ac:	44c05204 	addi	r19,r8,328
   1d5b0:	a0001c26 	beq	r20,zero,1d624 <__call_exitprocs+0xc4>
   1d5b4:	a0800117 	ldw	r2,4(r20)
   1d5b8:	15ffffc4 	addi	r23,r2,-1
   1d5bc:	b8000d16 	blt	r23,zero,1d5f4 <__call_exitprocs+0x94>
   1d5c0:	14000044 	addi	r16,r2,1
   1d5c4:	8421883a 	add	r16,r16,r16
   1d5c8:	8421883a 	add	r16,r16,r16
   1d5cc:	84402004 	addi	r17,r16,128
   1d5d0:	a463883a 	add	r17,r20,r17
   1d5d4:	a421883a 	add	r16,r20,r16
   1d5d8:	e0001e26 	beq	fp,zero,1d654 <__call_exitprocs+0xf4>
   1d5dc:	80804017 	ldw	r2,256(r16)
   1d5e0:	e0801c26 	beq	fp,r2,1d654 <__call_exitprocs+0xf4>
   1d5e4:	bdffffc4 	addi	r23,r23,-1
   1d5e8:	843fff04 	addi	r16,r16,-4
   1d5ec:	8c7fff04 	addi	r17,r17,-4
   1d5f0:	bd7ff91e 	bne	r23,r21,1d5d8 <__call_exitprocs+0x78>
   1d5f4:	00800034 	movhi	r2,0
   1d5f8:	10800004 	addi	r2,r2,0
   1d5fc:	10000926 	beq	r2,zero,1d624 <__call_exitprocs+0xc4>
   1d600:	a0800117 	ldw	r2,4(r20)
   1d604:	1000301e 	bne	r2,zero,1d6c8 <__call_exitprocs+0x168>
   1d608:	a0800017 	ldw	r2,0(r20)
   1d60c:	10003226 	beq	r2,zero,1d6d8 <__call_exitprocs+0x178>
   1d610:	a009883a 	mov	r4,r20
   1d614:	98800015 	stw	r2,0(r19)
   1d618:	00000000 	call	0 <__alt_mem_SDRAM>
   1d61c:	9d000017 	ldw	r20,0(r19)
   1d620:	a03fe41e 	bne	r20,zero,1d5b4 <__call_exitprocs+0x54>
   1d624:	dfc00a17 	ldw	ra,40(sp)
   1d628:	df000917 	ldw	fp,36(sp)
   1d62c:	ddc00817 	ldw	r23,32(sp)
   1d630:	dd800717 	ldw	r22,28(sp)
   1d634:	dd400617 	ldw	r21,24(sp)
   1d638:	dd000517 	ldw	r20,20(sp)
   1d63c:	dcc00417 	ldw	r19,16(sp)
   1d640:	dc800317 	ldw	r18,12(sp)
   1d644:	dc400217 	ldw	r17,8(sp)
   1d648:	dc000117 	ldw	r16,4(sp)
   1d64c:	dec00b04 	addi	sp,sp,44
   1d650:	f800283a 	ret
   1d654:	a0800117 	ldw	r2,4(r20)
   1d658:	80c00017 	ldw	r3,0(r16)
   1d65c:	10bfffc4 	addi	r2,r2,-1
   1d660:	15c01426 	beq	r2,r23,1d6b4 <__call_exitprocs+0x154>
   1d664:	80000015 	stw	zero,0(r16)
   1d668:	183fde26 	beq	r3,zero,1d5e4 <__call_exitprocs+0x84>
   1d66c:	95c8983a 	sll	r4,r18,r23
   1d670:	a0806217 	ldw	r2,392(r20)
   1d674:	a5800117 	ldw	r22,4(r20)
   1d678:	2084703a 	and	r2,r4,r2
   1d67c:	10000b26 	beq	r2,zero,1d6ac <__call_exitprocs+0x14c>
   1d680:	a0806317 	ldw	r2,396(r20)
   1d684:	2088703a 	and	r4,r4,r2
   1d688:	20000c1e 	bne	r4,zero,1d6bc <__call_exitprocs+0x15c>
   1d68c:	89400017 	ldw	r5,0(r17)
   1d690:	d9000017 	ldw	r4,0(sp)
   1d694:	183ee83a 	callr	r3
   1d698:	a0800117 	ldw	r2,4(r20)
   1d69c:	15bfbf1e 	bne	r2,r22,1d59c <__call_exitprocs+0x3c>
   1d6a0:	98800017 	ldw	r2,0(r19)
   1d6a4:	153fcf26 	beq	r2,r20,1d5e4 <__call_exitprocs+0x84>
   1d6a8:	003fbc06 	br	1d59c <__call_exitprocs+0x3c>
   1d6ac:	183ee83a 	callr	r3
   1d6b0:	003ff906 	br	1d698 <__call_exitprocs+0x138>
   1d6b4:	a5c00115 	stw	r23,4(r20)
   1d6b8:	003feb06 	br	1d668 <__call_exitprocs+0x108>
   1d6bc:	89000017 	ldw	r4,0(r17)
   1d6c0:	183ee83a 	callr	r3
   1d6c4:	003ff406 	br	1d698 <__call_exitprocs+0x138>
   1d6c8:	a0800017 	ldw	r2,0(r20)
   1d6cc:	a027883a 	mov	r19,r20
   1d6d0:	1029883a 	mov	r20,r2
   1d6d4:	003fb606 	br	1d5b0 <__call_exitprocs+0x50>
   1d6d8:	0005883a 	mov	r2,zero
   1d6dc:	003ffb06 	br	1d6cc <__call_exitprocs+0x16c>

0001d6e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1d6e0:	defffd04 	addi	sp,sp,-12
   1d6e4:	df000215 	stw	fp,8(sp)
   1d6e8:	df000204 	addi	fp,sp,8
   1d6ec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1d6f0:	d027ea45 	stb	zero,-24663(gp)
   1d6f4:	e0bfff17 	ldw	r2,-4(fp)
   1d6f8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1d6fc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1d700:	10000226 	beq	r2,zero,1d70c <_exit+0x2c>
    ALT_SIM_FAIL();
   1d704:	002af070 	cmpltui	zero,zero,43969
   1d708:	00000106 	br	1d710 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1d70c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1d710:	003fff06 	br	1d710 <_exit+0x30>
